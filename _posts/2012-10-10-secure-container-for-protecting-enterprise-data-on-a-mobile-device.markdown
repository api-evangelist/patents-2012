---

title: Secure container for protecting enterprise data on a mobile device
abstract: A system is disclosed that includes components and features for enabling enterprise users to securely access enterprise resources (documents, data, application servers, etc.) using their mobile devices. An enterprise can use some or all components of the system to, for example, securely but flexibly implement a BYOD (bring your own device) policy in which users can run both personal applications and secure enterprise applications on their mobile devices. The system may, for example, implement policies for controlling mobile device accesses to enterprise resources based on device attributes (e.g., what mobile applications are installed), user attributes (e.g., the user's position or department), behavioral attributes, and other criteria. Client-side code installed on the mobile devices may further enhance security by, for example, creating a secure container for locally storing enterprise data, creating a secure execution environment for running enterprise applications, and/or creating secure application tunnels for communicating with the enterprise system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09143530&OS=09143530&RS=09143530
owner: Citrix Systems, Inc.
number: 09143530
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20121010
---
The present application hereby incorporates by reference the entire technical disclosures of U.S. Provisional Patent Application Nos. 61 546 021 61 546 922 61 649 134 and 61 702 671. The present application also hereby incorporates by reference the entire technical disclosure of U.S. Pat. No. 7 788 536 to Qureshi et al. Qureshi 526 .

The present application relates generally to mobile computing devices smartphones tablets PDAs etc. and associated application programs and to systems for automated or semi automated management of devices used for accessing managed resources of an enterprise.

Many enterprises e.g. corporations partnerships academic institutions etc. maintain enterprise computer networks that allow enterprise users to access enterprise resources such as hardware and software applications for email customer relationship management CRM document management enterprise resource planning ERP and the like. Also many enterprises allow users to access the enterprise network via mobile devices such as smartphones tablet computers and the like. In some cases software applications running on the mobile devices exchange data with the enterprise network some of which can become saved on the memory hardware e.g. hard drives SD cards of the mobile devices.

A growing trend among businesses is to allow employees to use their personally owned mobile devices both to access company resources and the use and access their personal applications and data. This trend known as BYOD bring your own device or BYOT bring your own technology significantly complicates the task of protecting enterprise resources including confidential and or sensitive information.

Reference numerals used in this specification are generally based on the first figure in the above listing in which the numeral appears. A reference numeral with a value between 100 199 first appears in a reference numeral with a value between 200 299 first appears in and so on.

Skilled artisans will appreciate that while certain figures of the present disclosure illustrate numerous items these figures illustrate certain embodiments and other embodiments may involve more or less than the items shown.

Various inventions and inventive features will now be described with reference to the drawings. As will be recognized many of the disclosed features and associated components can be used independently of others and can be implemented differently than described herein. Thus nothing in this detailed description or in the preceding background section is intended to imply that any particular feature component or characteristic of the disclosed systems is essential. Moreover it will be understood that headings are provided for convenience and do not necessarily affect the scope or meaning of the claims.

The architecture described in this specification can be used by a corporation or other enterprise to flexibly implement a policy such as a corporate owned device BYOD bring your own device policy for allowing enterprise users to use their mobile devices to securely access enterprise resources documents confidential data corporate application and database servers etc. . This is accomplished through various security features that for example enable the enterprise to specify and implement policies for controlling mobile device accesses to particular enterprise resources. The policies may for example control mobile device accesses to enterprise resources based on a variety of criteria such as the role of the respective user e.g. which department the user is in the configuration of the mobile device e.g. whether any blacklisted mobile applications are installed the logged behaviors of the user the location of the mobile device and or the time at which access to the enterprise resource is requested. The architecture further enhances security in some embodiments by creating application tunnels that enable enterprise mobile applications to securely communicate over a network with the enterprise system. The architecture may also enable IT staff to selectively and remotely wipe a user s mobile device of enterprise application s and corporate data when for example the user discontinues employment or violates a corporate policy such as if they jailbreak their device or otherwise use it in a disallowed configuration .

As described in the section titled Protecting Attachment Data the disclosed architecture may also implement an attachment encryption policy in which encryption is applied to email attachments or attachments to other types of messages such as SMS messages that are sent to mobile devices of enterprise users. This feature reduces the likelihood that an unauthorized user who obtains access to an enterprise member s mobile device will be able to access sensitive enterprise documents that have been sent between enterprise users as attachments.

The disclosed architecture in some embodiments advantageously enables end users to concurrently run both enterprise mobile applications those configured or authorized to access enterprise resources and personal non enterprise mobile applications on the same mobile device without compromising security. This may be accomplished in part through mobile device software that creates a secure environment or shell in which the enterprise mobile applications can run and store data. This secure environment or shell may for example prevent the personal applications installed on a mobile device from accessing the documents and other data stored on the mobile device by the enterprise applications. In some embodiments a secure launcher that runs on the mobile devices augments the mobile operating system s UI with a UI for launching the enterprise mobile applications installed on the mobile device. When a user launches an enterprise mobile application the user may for example be presented with an authentication screen for entering a personal passcode that is necessary for running the enterprise mobile applications.

The use of passcodes or other types of authentication information for enterprise applications reduces the likelihood that enterprise resources will be improperly accessed when for example the mobile device is lost or stolen or when the mobile device is used by an employee s children to play games. In some embodiments the secure launcher or another component installed on the mobile device further reduces this risk by performing a selective wipe of the mobile device when for example the user attempts but fails to enter a valid passcode a threshold number of consecutive times e.g. 5 or 10 . The selective wipe operation deletes some or all of the enterprise applications and associated data from the mobile device without deleting any personal applications or data. In some embodiments the enterprise s IT department can initiate a selective wipe of a particular mobile device by remotely issuing a wipe command to the device.

The architecture may also support various other types of remedial actions for protecting enterprise resources. One such remedy is to lock the mobile device or an enterprise container on the device that stores enterprise data such that the mobile device or container can only be unlocked with a valid code provided by IT staff. In some embodiments these and other types of remedies can be invoked automatically based on conditions detected on the mobile device or can be remotely initiated by IT staff.

This specification also discloses processes for creating or augmenting mobile applications to enable them to use various enterprise security features. One such approach is described below under the heading Modifying Behaviors of Pre Existing Mobile Applications. Using this approach an organization can modify existing mobile applications to add various security features without the need to access the source code of such applications. The mobile application being modified may for example be a custom enterprise application or may be a commercially available mobile application that is being configured for use within the enterprise. Through this process the preexisting mobile application may for example be configured to a use application tunnels to communicate with the enterprise system b use an encryption library to encrypt the documents and other data it stores on the mobile device c present users with a login or passcode screen when the mobile application is launched d disable cut copy and paste operations e disable offline access f use a particular type of user authentication method such as posture based authentication or any combination thereof. The ability to modify preexisting mobile applications through this process gives enterprises greater flexibility in selecting mobile applications to offer to their members for example rather than requiring employees to use a custom developed enterprise application for accessing cloud based storage the enterprise can modify or have modified a popular commercially available mobile application with which users are already familiar. Further different versions of a given application with different authentication methods encryption levels etc. can be created for different types of employees.

Also disclosed are processes for effectively adding enterprise security features to mobile applications with little or no need to modify the application code of such applications. One such approach involves the use of a secure virtual machine that is separate from the virtual machine of the mobile device s operating system. The secure virtual machine implements or provides access to various enterprise security features such as application tunnels data encryption passcode prompts etc. and these security features are effectively inherited by or imposed upon the mobile applications that run within the secure virtual machine. Enterprise mobile applications may be configured or forced to use the secure virtual machine while non enterprise mobile applications continue to run within the native virtual machine of the mobile operating system. This capability gives enterprises additional freedom to flexibly select mobile applications to use as enterprise applications for example through this approach an enterprise can effectively configure the mobile devices of users to enable the users to use a popular familiar mobile application to securely access enterprise resources.

The use of a secure virtual machine can enable an enterprise to provide a higher level of security for running an enterprise application on BYOD devices. For example by running the application within a secure execution environment created by the secure virtual machine a corporation can enforce a separate set of policies for the application including networking and storage policies.

Another approach which is described under the heading Secure Web Browser involves the use of a mobile browser application that implements the various enterprise security features. Like the secure virtual machine approach mobile applications or web pages accessed by the browser that are configured to run within the secure browser effectively inherit the security mechanisms implemented by the secure browser. The use of such a secure browser also enables an enterprise to implement a content filtering policy in which for example employees are blocked from accessing certain web sites from their mobile devices. The secure browser can be used for example to enable mobile device users to access a corporate intranet without the need for a virtual private network VPN .

The disclosed architecture can also include a meta application or system that monitors the overall enterprise system including the mobile devices of enterprise users. The meta application can operate generally as described in Qureshi 526 and can be implemented as a cloud based meta application. The data collected by the meta application can include data collected and reported by enterprise agents running on the mobile devices. In some embodiments the meta application generates rules based on observed behaviors including behaviors of mobile device users. These rules can include gateway rules that are used by a secure mobile gateway to grant and deny mobile device requests to access enterprise resources.

These and other security features and components are described in detail in the following sections. As will be recognized many of the disclosed features and components can be used independently of others. Thus nothing in the following description should be taken to imply that certain security features and components must be used in combination.

In many cases when a mobile computing device accesses an enterprise computer IT system sensitive data associated with the enterprise and or enterprise related software applications can become stored onto the mobile device. Enterprise related data can comprise any data associated with the enterprise such as without limitation product information sales data customer lists business performance data proprietary know how inventions trade secrets and the like. Since this information can be very sensitive an enterprise may wish to safeguard such information.

Further enterprises may wish to regulate how users use their mobile devices. For example enterprises may want some control over where the mobile devices are used which mobile device features can be used which software applications can be installed and or run on the devices and the like. Enterprises also have a need to control and implement remedial actions for users that violate their mobile device usage policies.

When users in the field experience problems with their mobile devices or could benefit from information data software or coaching on how to perform certain operations using the devices it can be difficult for the enterprise s IT support to provide highly effective assistance. Accordingly there is also a need for improved secure management and technical support of mobile devices associated with an enterprise.

Embodiments described in the present application address these and other concerns. The present application discloses computer systems and methods for automated or semi automated management of mobile computing devices that access an enterprise computer network such as access to computer implemented resources of the enterprise. As used herein an enterprise may comprise substantially any type of organization including without limitation a business partnership corporation and the like. A mobile computing device can comprise any of a wide variety of devices such as without limitation a mobile phone smartphone personal digital assistant tablet computer handheld computing device and the like. The mobile devices managed by the disclosed system may for example include or consist of mobile devices that run the Android IOS or Windows Mobile operating system or some subset thereof . As will be recognized however the architecture disclosed herein may be used with other mobile device operating systems including operating systems that may be developed in the future.

Individuals entities or groups of users that use mobile computing devices to access the enterprise computer network are referred to herein as users. Users can comprise members of the enterprise such as employees partners officers etc. Alternatively users can comprise individuals or entities that are not members of the enterprise but nevertheless have a need or reason to access the enterprise computer network. For example users can be enterprise customers suppliers etc.

An enterprise resource may comprise a machine accessible resource associated with the enterprise. Enterprise resources can comprise any of a wide variety of different types of resources including resources that assist or enable users in the performance of the users roles or duties associated with the enterprise. For example enterprise resources can comprise raw data stored on non transitory computer readable storage documents stored on non transitory computer readable storage computer hardware e.g. physical servers software applications stored on non transitory computer readable storage macros for software applications e.g. word processor macros stored on non transitory computer readable storage electronic mail systems workspaces customer relationship management CRM systems document management systems enterprise resource planning ERP systems accounting systems inventory systems engineering tools forms style sheets and many other resources. Enterprise resources can be configured to be accessed and used by software applications installed and running on mobile computing devices.

The enterprise system preferably includes an external firewall and an internal firewall . Each firewall can comprise a device or set of devices designed to permit or deny network transmissions based upon certain criteria. The firewalls and can comprise software stored on non transitory computer readable storage hardware firmware or a combination thereof. The firewalls and can be configured to perform basic routing functions. Embodiments of the invention can cooperate with one or both of the firewalls and or other devices of the enterprise system to filter mobile devices access requests based on a set of gateway rules in order to protect the enterprise system from unauthorized access while permitting legitimate communications to pass. As will be described in further detail below such access rules can be used to regulate access based on e.g. mobile device properties user properties the specific enterprise resources for which access is requested or any combination thereof.

The physical or logical subnetwork between the two illustrated firewalls and can be referred to as the demilitarized zone DMZ or alternatively as a perimeter network. Typically the DMZ contains and exposes the enterprise s external services to a larger untrusted network usually the Internet. Ordinarily the purpose of the DMZ is to add an additional layer of security to the enterprise s local area network LAN an external attacker only has access to equipment in the DMZ rather than any other part of the enterprise network.

The illustrated enterprise system includes a mobile device management system a secure mobile gateway and a meta application each of which is described in further detail below. The enterprise system also includes enterprise resources logically positioned behind the internal firewall illustrated as resources to N. At least some of the enterprise resources can be configured to be accessed and or used by the mobile devices such as by software applications installed and running on the mobile devices.

Referring still to the mobile devices can communicate with the carrier network via connections such as cellular network connections and or WIFI connections that ultimately connect to carrier networks. A mobile device s enterprise access request can be sent to the secure mobile gateway via a connection and the gateway can send the request to an enterprise resource via an internal connection . Further the enterprise system can use the connections to send information back to the mobile device such as data responsive to the device s enterprise access request.

In some embodiments a software application on a mobile device can communicate with an enterprise resource through an application tunnel via connections and . Application tunnels are described in further detail below. In the illustrated embodiment the mobile device management system acts as a tunneling mediator within an application tunnel between the mobile device and typically a specific application running on the mobile device and the enterprise resource .

It will be understood that any of the enterprise systems can be implemented with any of the principles and advantages described herein as appropriate. Moreover it will also be understood that the enterprise systems illustrated in are provided for illustrative purposes and other suitable systems can be implemented in accordance with the principles and advantages described herein.

In the illustrated embodiment the mobile device includes an enterprise agent which is preferably a software application or other executable program installed on the mobile device. The enterprise agent is preferably separate from the operating system of the mobile device . In some embodiments however the enterprise agent can be a component of the operating system of the mobile device or partially fully embedded into the operating system of the mobile device . In various embodiments described in greater detail below the enterprise agent executes the mobile device rules and cooperates with the enterprise system to regulate the mobile device s access to the enterprise system including to the enterprise resources . In some embodiments an enterprise system can prompt an enterprise agent to connect to the system e.g. the mobile device management system by sending a text message e.g. SMS to the mobile device with a connection command.

The enterprise agent can be installed onto the mobile device as a condition of the mobile device s enrollment with the mobile device management system . The enterprise can employ an automated subsystem for installing enterprise agents onto the mobile devices associated e.g. enrolled with the enterprise. For example a mobile device manager can be configured to send the enterprise agents to the mobile devices for automated installation or manual installation by the users . Alternatively IT personnel can manually install the enterprise agents onto the mobile devices or end users can download and install the enterprise agent from commercially available application stores. Different types of enterprise agents can be provided for different mobile device types platforms operating systems etc. The mobile device manager or another software component of the enterprise system can be configured to select an appropriate enterprise agent for each given mobile device based on such properties of the mobile devices e.g. mobile device properties of .

The enterprise agent may implement a variety of security related features including features that control or enable the control of mobile device accesses to enterprise resources . For example the enterprise agent installed on a given mobile device may perform i.e. instruct or cause the mobile device to perform some or all of the following tasks 1 maintain a data connection with the enterprise system which connection can be used both for application tunnels and for communications that do not involve application tunnels 2 provide access to a public or private enterprise app store from which the user can download enterprise applications that have been approved by and configured for the particular enterprise 3 create application tunnels for enabling enterprise applications installed on the mobile device to securely access certain enterprise resources 4 collect and transmit to the mobile device management system inventory data regarding the properties and configuration of the mobile device such as its manufacturer model operating system screen size memory size memory availability GPS coordinates and which personal and enterprise mobile applications are installed on the device 5 implement a log in or other authentication service that requests and verifies the user s authentication information e.g. passcode when for example the user launches an enterprise mobile application 6 decrypt encrypted message attachments received from the secure mobile gateway such as encrypted attachments to email messages received from other members of the user s enterprise 7 maintain a secure key store that is accessible by enterprise applications for obtaining keys for encrypting and decrypting data 8 check for blacklisted mobile applications installed on the mobile device and report any such applications to the mobile device management system 9 perform precautionary actions such as deleting decryption keys used for decrypting message attachments when certain conditions are met such as when a blacklisted mobile application is detected on the mobile device or the device is reported as stolen 10 kill terminate execution of any blacklisted applications or other mobile applications determined to create a security risk 11 provide one or more additional services for keeping enterprise applications and data on the device separate from personal application and data and 12 wiping the device of all enterprise application and data in response to a command received from the mobile device management system when for example the user discontinues employment with the enterprise. As described below some of these functions may alternatively be implemented in a separate mobile application or component that is distinct from the enterprise agent .

The enterprise agent collects information about the mobile device s configuration using standard operating system APIs and mechanisms and or using its own APIs and mechanisms. For example in implementations for the Android operating system the enterprise agent may query the package manager to obtain a list of the applications installed on the device. The enterprise agent can similarly query the operating system for a list of mobile applications that are currently running and can monitor broadcast messages to identify new applications that are being installed. The device configuration information collected by the enterprise agent through this process may be reported to the mobile device management system which may use the information to generate rules that are applied by the secure mobile gateway to control the mobile device s accesses to enterprise resources . The enterprise agent may itself also use the collected device configuration information to take various precautionary actions such as killing blacklisted mobile applications as mentioned above.

In one embodiment the enterprise agent is or is part of a mobile application that can be downloaded from an application store and installed on a mobile device . Once the enterprise agent has been installed and launched the end user supplies configuration information such as a corporate email address and email password for enabling the agent to communicate with a particular enterprise system . Once configured the agent provides the user access to a secure application store from which the user can download and install enterprise mobile applications that have been approved by and in some cases specifically configured for the user s enterprise. The functionality for downloading and installing enterprise mobile applications may alternatively be embodied within a separate secure launcher mobile application that runs in conjunction with the enterprise agent.

With further reference to a secure launcher B may also be installed on the mobile device for launching enterprise applications. The secure launcher may be part of the enterprise agent or may be a separate mobile application. The secure launcher B may implement or enforce various security policies such as requiring user entry of a valid passcode when an enterprise application is launched. One embodiment of a user interface implemented by the secure launcher B is shown in and is described below. As described below enterprise applications may be modified or written to use the secure launcher rather than the general launcher included in the mobile device s operating system. In one embodiment the secure launcher also includes functionality for wiping the mobile device of all enterprise applications and data in response to a threshold number of consecutive invalid passcode entry attempts or in response to a remotely issued command from the enterprise s IT department.

As further shown in a secure virtual machine C may be installed on the mobile device in some embodiments to create or augment a secure execution environment for running some or all of the enterprise applications. This secure virtual machine VM supplements and may run concurrently with the mobile operating system s default VM. For example one or more enterprise mobile applications may run within the secure VM while all other mobile applications including all personal mobile applications run on the same device in the operating system s default VM. As described below under the heading Secure Virtual Machine the secure VM C implements a variety of policies and measures such as security management storage networking and or process execution policies that are not implemented or are implemented unsuitably for enterprise applications in the mobile operating system s default VM. For example the secure VM may be capable of establishing application tunnels for accessing the enterprise system and may route requests from enterprise applications over corresponding application tunnels. The secure VM may also prevent an enterprise application from running unless and until the user enters a valid passcode or otherwise successfully authenticates. The secure VM may be installed on a mobile device together with a set of code libraries that are used by the secure VM in place of corresponding code libraries of the operating system.

One benefit of using a secure VM C is that it reduces or eliminates the need for the mobile applications to be specifically written or modified for use with an enterprise system . For example an enterprise may wish to make a particular commercially available mobile application available to its employees for use in accessing company resources but may not have permission to modify the application to implement the various security features described herein such as authentication secure storage and secure networking . In such a scenario the enterprise may configure the mobile application or the mobile device to cause this particular application when executed to run only within the secure VM.

The secure VM is preferably implemented as a separate mobile application but may alternatively be part of another application or component such as the enterprise agent or the secure launcher B . The secure VM may be invoked in various ways for example the enterprise agent may request that the secure VM run a particular application or an application may upon being launched request or specify the secure VM as it s execution environment. In some embodiments the secure launcher B and the secure VM C are used in combination to create a secure space for running enterprise applications although each can be used independently of the other. Additional details of the secure VM are described below in the section titled Secure Virtual Machine.

As further shown in a secure container component D may also be installed on the mobile device preferably as a separate mobile application or as part of the enterprise agent . This component D is responsible for creating a secure container on the mobile device for the enterprise applications to store documents and other information. One embodiment of this feature is described below under the heading Secure Document Containers. In some embodiments when a selective wipe operation is performed some or all of the documents and data stored in the secure container are deleted from the mobile device or are otherwise made inaccessible.

In addition to the components shown in one or more code libraries may be installed on the mobile device for implementing various security functions such as data encryption and formation of application tunnels. As one example a custom SSL library may be installed and used in place of the operating system s SSL library to create secure application tunnels as described below in the section titled Application Tunnels.

In one embodiment which is depicted in the secure launcher B displays a persistent display element at the edge of the mobile device s screen. This display element preferably remains visible across all of the device s home screens and when user is in an application. If the user taps on this display element or swipes it to the left a rotatable carousel or wheel is displayed that includes respective icons corresponding to specific enterprise applications or groups folders of enterprise applications installed on the device. The other icons shown in typically correspond to personal mobile applications and or folders of such applications installed on the device. By rotating the wheel via an upward or downward swipe gesture the user can expose additional icons corresponding to additional enterprise applications or folders. Tapping on an application icon causes the associated enterprise application to be launched and tapping on a folder icon causes the enterprise applications stored in the folder to be displayed. The user can also swipe the wheel to the right to cause it to return to the retracted position shown in . In the illustrated embodiment the enterprise applications can only be launched from the wheel with the secure launcher and cannot be launched using the general launcher of the device s operating system.

In some embodiments when the user launches an enterprise application via the wheel the user is prompted to enter a passcode and the application is not launched unless the correct passcode is entered. The task of requesting and verifying the passcode may for example be performed by the enterprise agent by a separate secure launcher B by a secure virtual machine C or by code that is added to the enterprise application via an SDK or an application wrapping process. These and other techniques for providing a secure execution environment for running enterprise mobile applications are described further below.

In one embodiment which is shown in the wheel is displayed as a transparent or translucent overlay that enables the user to view and select the home screen icons falling behind the wheel such that the user can launch the personal applications corresponding to these icons . In another embodiment the wheel is opaque and thus obstructs the view of any icons falling behind it. In yet another embodiment the home screen icons disappear when the wheel is pulled out or is pulled out beyond a particular point.

The secure launcher s user interface may also include features for enabling the user to for example arrange the icons on the wheel control the position of the wheel e.g. which screen edge it extends from and control the extent to which the wheel is displayed. The selectable element for pulling out and retracting the wheel preferably remains persistent across all of the device s home screens such that the enterprise applications can be easily accessed from any of these screens.

Referring to embodiments of the mobile device management system are configured to create edit and provide gateway rules to the secure mobile gateway as discussed in detail below. The mobile device management system can also act as a tunneling mediator for application tunnels between the mobile devices and the enterprise resources or other network resources within or even outside the enterprise system . The components of the illustrated mobile device management system are now described.

The illustrated mobile device management system includes a mobile device manager component which preferably comprises a software application that runs on one or more physical machines. The mobile device manager can be configured to both provision and maintain enrollments of the mobile devices with the enterprise. Preferably the mobile device manager is configured to handle or participate in the provisioning and decommissioning of the mobile devices associated with the enterprise.

In the illustrated embodiment of the mobile device management system includes mobile device information or attributes stored in computer readable or machine readable storage. The mobile device information preferably includes properties or attributes of the mobile devices enrolled with the mobile device manager such as device type or platform e.g. platforms for iPhone Android Windows Mobile etc. device model operating system version device capabilities and features identifiers of installed applications etc. In certain embodiments the mobile device properties are ones that are permanent e.g. device type platform . In some embodiments the mobile device properties can also be properties subject to regular or periodic change e.g. software or operating system version which mobile applications are installed etc. . As mentioned above the various properties of a given mobile device may be determined and reported to the mobile device management system by the enterprise agent installed on the mobile device . Device property information may also be supplied by system administrators.

The mobile device information can also include user device assignment records that identify which users or user accounts are assigned to the enrolled mobile devices as well as roles of the users within the enterprise. A user s role typically associates the user with the enterprise related duties or activities in which the user engages. Roles can have names and optionally associated definitions. The roles and role names can mimic the enterprise s departments and positional hierarchy. For example an enterprise can define roles with names such as Upper Management Officer Sales Accounting Engineering Word Processing Human Resources etc. In this scheme a salesperson can be given the role Sales an engineer can be given the role Engineering and so forth. Also roles can be defined as broadly or as narrowly as may suit the needs of the enterprise. For example an enterprise can give all of its engineers the Engineering role. Alternatively or additionally the enterprise may wish to define narrower roles such as Computer Engineer Materials Engineer Semiconductor Processing Engineer etc particularly if the enterprise wishes to differentiate the mobile device authorizations of its different types of engineering personnel. Further a user can be assigned to multiple roles depending upon the user s duties or activities associated with the enterprise. In certain embodiments an enterprise may use an RBAC role based access control system to assist in the regulation of enterprise resources and the user roles can relate to or be the same as the roles defined in the RBAC system.

The enterprise agents of the mobile devices can be configured to send device related data to the mobile device management system periodically and or whenever the mobile devices connect to the mobile device management system e.g. upon the formation of an application tunnel . For instance the enterprise agents can send data concerning software applications installed on the mobile devices software upgrades system information etc. as described above. In one embodiment the agent sends such device properties information over the same connection that is used for application tunnels but without the use of an application tunnel.

With continued reference to the mobile device management system can include one or more enterprise access policies stored in computer storage. The access policies preferably define conditions under which mobile device access to enterprise resources will be granted or denied. In some embodiments a single access policy can apply to mobile devices of different makes models operating systems or any combination thereof. Policies can depend on user roles mobile device properties the specific enterprise resources requested to be accessed by the mobile devices or any combination thereof. The mobile device management system can use the access policies to process mobile device access requests received directly by the mobile device management system including requests received via secure application tunnels. Additionally as described below the secure mobile gateway can leverage the access policies to grant or deny mobile device access requests received directly by the secure mobile gateway .

As shown in the mobile device management system can include a script editing tool for editing scripts that are executable on the mobile devices as described below. The mobile device management system can also include a tool for editing mobile device rules and remedial actions as described below.

The mobile device management system can include a gateway rule generator for creating editing and or sending gateway rules to the secure mobile gateway as described below. These tools may for example be used by IT administrators to implement various security related features and policies as described below.

The mobile device management system can include a tunneling mediator module for mediating an application tunnel between a software application running on a mobile device and another resource such as an enterprise resource as described below. The tunneling mediator module can also be configured to grant or deny access requests based on the access policies and information .

The mobile device management system can also include a remedy agent for executing remedial actions provided by the meta application and or as described below. The remedy agent may execute various types of remedial actions based on conditions specified by rules for example as described generally in Qureshi 526.

With further reference to the above described functional components of the mobile device management system may be implemented in executable program code modules that run on appropriate computer hardware such as on one or more physical servers or other computing devices. These components may for example run on a single physical server or other machine or may be distributed across multiple machines on a network. In some embodiments some or all of these components may alternatively be implemented in firmware or in application specific hardware ASICs FPGAs etc. . The various data or data storage components of the mobile device management system may be implemented in any appropriate type or types of computer storage e.g. hard disk drives solid state memory arrays optical storage devices etc. using databases flat files and or other types of data storage arrangements.

For example an enterprise may wish to use multiple mobile device management systems . An enterprise with multiple offices may use separate systems for the separate offices. This may be useful if the enterprise has offices located in different geographical areas. For example a large enterprise with offices in England Japan and the U.S. may use three different mobile device management systems located within or near to those office locations. In such embodiments each mobile device management system can be responsible for managing mobile devices in a different geographical area wherein such mobile device management can comprise sending rule packages to the mobile devices as described below and or regulating access to enterprise resources . In such embodiments the secure mobile gateway is preferably configured to communicate with each of the mobile device management systems for the purposes described herein. In some implementations a console is provided that can be used to view the various systems associated with a given enterprise.

With reference to an enterprise may wish to regulate how its mobile device users access the enterprise resources via the mobile devices . Any given enterprise user typically only has a need to access a subset of the enterprise resources ordinarily based upon the user s duties or role within the enterprise. Therefore since there is no need to provide the user with mobile device access to many of the resources doing so can expose the enterprise to unnecessary security risks. For example an enterprise may wish to prevent many of the users from using their mobile devices to access highly sensitive confidential information of the enterprise particularly if the users do not need to access such information to perform their duties toward or associated with the enterprise. This can prevent for example a disgruntled employee from harming the enterprise by accessing and perhaps disseminating sensitive enterprise related information. Also applications and files installed on the mobile devices can have malware or viruses that can get transferred to the enterprise s computer system or that can upload or steal sensitive information. Limiting mobile device access to specific enterprise resources can prevent the malware and viruses from infecting other enterprise resources . As discussed below the mobile device management system and secure mobile gateway preferably address these issues by enabling an enterprise to restrict mobile device access only to authorized enterprise resources in a way that is customizable based on user properties mobile device properties and or the enterprise resources for which mobile device access is requested.

With the proliferation of mobile devices and the desire to use existing applications for the mobile devices a need exists to take action at a network level to provide controlled access to enterprise resources. Moreover as enterprises implement BYOD bring your own device or BYOT bring your own technology policies a need exists for flexibility while addressing the increasingly complex task of protecting enterprise resources and sensitive enterprise data. Such flexibility can include allowing a number of different mobile devices and or applications running on such mobile devices to access enterprise resources while providing a desired level of control over such access to enterprise resources. As one example it can be desirable to allow mobile devices having a variety of different email clients to access enterprise resources and to enable the enterprise to implement certain protections such as denying some access requests in certain circumstances configurable by the enterprise and or encrypting at least a portion of data provided to email clients of a mobile device based on enterprise policies when allowing the various email clients to access enterprise data. Allowing a variety of existing mobile applications to access enterprise resources can eliminate the need to develop proprietary applications and or modify existing applications in order to access enterprise resources. At the same time implementing a desired level of control over access to enterprise data can allow an enterprise to strike a balance between protecting enterprise data and enabling users to access the enterprise data on a mobile device .

A secure mobile gateway can assist in flexibly protecting sensitive enterprise data accessed by mobile devices . The secure mobile gateway can monitor and log traffic between one or more enterprise resources and a mobile device . The secure mobile gateway can apply rules to implement enterprise policies applied to a selected mobile device . Based on a particular protocol the secure mobile gateway can take actions to implement enterprise policies as applied to the selected mobile device that is requesting access to an enterprise resource . Thus in the context of a mobile device communicating with an enterprise computing system the secure mobile gateway can take actions associated with a protocol and certain conditions to provide access to enterprise resources . It will be understood that the secure mobile gateway can control traffic associated with any suitable protocol for example the protocols described herein. Any combination of the policies rules and remedial action described herein can be implemented by the secure mobile gateway . Moreover the secure mobile gateway can implement a variety of other policies rules remediation actions or any combination thereof in accordance with the principles and advantages described herein.

The secure mobile gateway can include a gateway filter that functions as a protocol analyzer and a rules remediator. The gateway filter can detect a defined protocol such as ActiveSync or HTTP s associated with enterprise traffic. The gateway filter can implement gateway rules that take certain actions for a particular protocol and one or more conditions. For example when a request from a mobile device to access an enterprise resource is an ActiveSync request the gateway filter can implement rules specific to the ActiveSync protocol. In this example the conditions can be that the mobile device is associated with an executive of the enterprise that is likely to receive sensitive enterprise information. The gateway filter can then take the action of encrypting attachment data before sending the data to the mobile device of the executive. In another example the gateway filter can deny a request by a mobile device to access an enterprise resource due to the mobile device having a certain application installed thereon.

Although the secure mobile gateways of are shown as controlling traffic related to a single enterprise system for illustrative purposes it will be understood that one secure mobile gateway can be implemented to handle requests associated with two or more different enterprise systems including systems of distinct companies or other enterprises. When handling requests associated with a plurality of different enterprise computing systems the secure mobile gateway can implement different rules for each of the different enterprise computing systems . For example one secure mobile gateway can be implemented for several different enterprise email systems each having different email policies. In some of these embodiments the secure mobile gateway can communicate with different mobile device management systems of enterprise computing systems of different companies.

The illustrated secure mobile gateway in includes a gateway filter that can be configured to receive and process enterprise access requests from mobile devices each request being formatted according to a protocol supported by the secure mobile gateway . The gateway filter can be embedded into a firewall server . In some other implementations the gateway filter can be implemented to control traffic through a separate firewall sever. The gateway filter can be configured to allow the access request to reach an enterprise resource or deny the request . The gateway can be configured to support one or more different request protocols such as ActiveSync requests SharePoint requests EWS requests SAP requests and or requests associated with various other web server applications. In one embodiment blocks and in represent components that can be added e.g. as part of a firewall plug in to a commercially available firewall or firewall server to implement the secure mobile gateway .

Take for example the case of a secure mobile gateway configured to process ActiveSync requests to synchronize enterprise system data with mobile devices . ActiveSync is a well known mobile data synchronization technology and protocol developed by Microsoft . One implementation of ActiveSync commonly known as Exchange ActiveSync or EAS provides push synchronization of contacts calendars tasks and email between ActiveSync enabled servers and mobile devices. The gateway filter can be configured to intercept every incoming request determine if it is an ActiveSync request and consult a database of gateway rules to determine if the gateway filter should allow or deny the request. The request can be for example an HTTP request. The database of gateway rules can be a local database stored on the enterprise firewall server . In the case of an allowed ActiveSync request the gateway filter can send the request to the enterprise resource which can comprise a Microsoft Exchange server.

The gateway filter can detect whether the request is an ActiveSync request by inspecting the request s header and possibly body to detect indicia of the ActiveSync protocol. Each ActiveSync command typically comprises a web Uniform Resource Locator URL issued by the mobile device . After the URL the request typically includes query parameters and an ActiveSync command. To illustrate consider the following ActiveSync request 

A gateway rule can include one or more values of properties of a mobile device request formatted according to a protocol supported by the secure mobile gateway . Such properties can comprise URL parameters header values commands etc. The gateway filter can be configured to filter the requests based at least partly on these properties. In the case of ActiveSync the request properties can include DeviceID and DeviceType taken from the request URL the User and UserAgent parameters taken from the HTTP headers and one or more ActiveSync command parameters ActiveSync defines numerous different commands such as sync mailbox send mail get attachment etc. . A gateway rule can specify conditions under which a request is to be granted or denied by the gateway filter . Such a condition can involve a logical expression and or combination of one or more values of the request properties of a protocol supported by the secure mobile gateway . For example a gateway rule can cause the gateway filter to block all ActiveSync requests having any one of a particular group of DeviceID values and which issue the get attachment command for downloading an email attachment . As this example illustrates a gateway rule can identify one or more mobile devices and or users . As this example also illustrates a gateway rule can allow or deny access based on what a mobile device is attempting to do or achieve by issuing an access request to the enterprise system . Through the secure mobile gateway an operator of the secure mobile gateway can customize gateway rules for a particular enterprise computing system .

In some embodiments the secure mobile gateway can be configured to inspect the body or payload of a request to access an enterprise resource in order to detect additional information that may be useful in evaluating whether to grant or deny the request. The payload may provide information about the specific data being requested how the mobile device application will use the requested data and so on. Access policies e.g. policies of the device management system can be created to regulate or restrict access based on such information. For example the secure mobile gateway may inspect the payloads of messages that are formatted according to selected protocols such as ActiveSync SharePoint SAP and or those based on HTTP. The secure mobile gateway may also modify protocol metadata in these messages to implement various security related features. For instance as described below under the heading protecting attachment data the secure mobile gateway may be configured to inspect the payloads of ActiveSync or other requests to determine whether they are associated with messages that include attachments such as email attachments the secure mobile gateway may also encrypt some or all of the identified attachments to prevent them from being stored in an unencrypted format on the associated mobile devices .

The gateway rules can be based on data provided by the mobile device management system and or data provided by an operator of the secure mobile gateway . The mobile device management system can convert high level rules into relatively simple lower level rules and provide the relatively simple rules to the secure mobile gateway for application to monitored traffic. The secure mobile gateway can also implement rules provided by or based on inputs from an inference engine of a meta application and or a meta application portion in the cloud such as the inference engine of . The rules may in some embodiments be generated using the methods and components including symptom logic described in Qureshi 526.

The gateway rules can take many different forms and can be written in a variety of programming languages such as XML. In one embodiment a gateway rule includes a list of groups plus an indication of a default action e.g. grant or denial of the access request or whether to encrypt attachment data . In this context a group is a collection of group members plus a corresponding action for the group. A group member can be a set of values of one some or all of the properties of a mobile device request . Each group member can match an incoming mobile device access request by any value of a property of a request protocol supported by the secure mobile gateway . The gateway filter can match an inbound request with a group member by matching all of the property values of the group member to the corresponding property values of the request . If a group member does not include any values for one or more possible request properties the gateway filter can determine that it does not matter what are request s values for those particular properties. In other words a group member can effectively specify any or don t care for one or more request properties. Hence different group members can correspond to the same mobile device or user . For example for a secure mobile gateway that supports ActiveSync the group members can match inbound HTTP requests by any combination of DeviceID User UserAgent and DeviceType as well ActiveSync Cmd values.

A number of other sub rules from various sources can be implemented with or in place of the above example subrules provided above. A gateway rule can alternatively or additionally define a number of other actions for the secure mobile gateway to take for various groups such as encrypting attachments for certain groups modifying a body of a message such as an email for certain groups blocking a mobile device from certain groups from receiving messages in certain locations etc.

To enforce the example gateway rule provided above the secure mobile gateway can access all of the group members of these four groups. Here is an example of a group list that can be provided to the secure mobile gateway e.g. by a provider as described below 

When the secure mobile gateway receives an inbound mobile device request the gateway filter can read the values of properties of the request and match them against the corresponding property values of group members of the group list. If there is a match the gateway filter can enforce the action associated with the group. If there is no match the gateway performs the same analysis for the next group listed in the gateway rule . If there are no matches with any of the groups of the gateway rule the gateway enforces the default action. To the extent that there may be conflicts between the groups of the gateway rule the secure mobile gateway can be configured to give priority to groups that appear earlier in the rule.

Referring still to the above example of a gateway rule after the gateway filter reads the values of the request properties the gateway filter reads the property values of the group members of the StaticAllow group and determines if any of them matches any property values of the request . For example for a gateway supporting ActiveSync the DeviceID of the request could match the DeviceID of one of the group members. If there is such a match the gateway filter enforces the action associated with the StaticAllow group which is to allow the request to pass through the firewall. If there is no match with any property values of any group member of the StaticAllow group then the gateway filter reads the property values of the group members of the StaticDeny group and determines if any of them matches any property value of the request . If there is a match then the gateway filter enforces the action associated with the StaticDeny group which is to deny the request . If there is no match with any property values of any group member of the StaticDeny group then the gateway filter reads the property values of the group members of the ZdmDeny group and determines if any of them matches any property value of the request . If there is a match then the gateway filter enforces the action associated with the ZdmDeny group which is to deny the request . If there is no match with any property values of any group member of the ZdmDeny group then the gateway filter reads the property values of the group members of the ZdmAllow group and determines if any of them matches any property value of the request . If there is a match then the gateway filter enforces the action associated with the ZdmAllow group which is to allow the request . If there is no match with any property values of any group member of the ZdmAllow group then the gateway filter enforces the default action which is to deny the request .

The secure mobile gateway can include a gateway configuration service that allows a user e.g. administrators IT personnel etc. to view edit and or create gateway rules and then save them in the local database. The configuration service can be configured to allow an administrator to set static gateway rules . A static gateway rule can identify a mobile device or groups of devices that are always to be granted access or denied access. For example the administrator can input a rule that specifies that the mobile device e.g. identified by ActiveSync DeviceId used by the CEO of the enterprise is always granted access to the enterprise network . As another example the administrator can input a gateway rule that denies access to devices that are known to have malware or incompatibilities with the enterprise network . The configuration service can also be configured to allow the user to adjust various other settings and features of the gateway including any of those described herein.

The gateway configuration service can allow for gateway rules to be statically defined. Further the secure mobile gateway can be configured to receive gateway rules from one or more external providers . A provider can be any entity authorized by the gateway to provide gateway rules for regulating access to the enterprise network . The gateway can have an open architecture that permits IT personnel of the enterprise to add remove and configure the providers . Preferably the gateway supports any number of providers . The mobile device management system can be one of the providers . Another provider can be the meta application that manages some or all of the enterprise network such as the backend subnetwork behind the firewall . Exemplary meta application embodiments are described in Qureshi 536 and an at least partially cloud based meta application which can be a provider is described below with reference to .

Each provider can be configured to create and send one or more gateway rules to the gateway . The providers can be configured to query their own databases of information to create the rules . Compared to the gateway a provider can have significantly more data on which to grant or deny mobile device access requests such as information about the users and or mobile devices . For instance the illustrated mobile device management system can include a gateway rule generator configured to create and edit gateway rules based on the enterprise access policies and the mobile device information including the mobile device properties user device assignment records and user roles and then send the rules to the gateway configuration service of the gateway . The access policies can comprise high level rules specifying whether mobile devices can access the enterprise network or specific resources thereof. The gateway rule generator can be configured to read an access policy and then query the mobile device information to find specific devices or users that match the criteria of the access policy . From the detected devices and users the gateway rule generator can generate device or user specific gateway rules that enforce the policy . The mobile device management system can be configured to send lists of users or devices e.g. in the form of group members as discussed above for which enterprise access is to be granted or denied and send those lists to the gateway . The gateway can be configured to use the lists to enforce the gateway rules .

For example if an access policy requires that all Android mobile devices having a Facebook application installed thereon are to be denied access to the enterprise network the gateway rule generator can query the mobile device information to obtain a list of such devices . The gateway rule generator can create one or more gateway rules that instruct the gateway filter to deny access to the listed devices and then send the created rules to the gateway configuration service . In the case of a gateway that supports the ActiveSync protocol the gateway rule generator can for example generate a list of ActiveSync DeviceID s of Android mobile devices having a Facebook application installed thereon and then create one or more gateway rules instructing denial of access for such devices.

As the above example illustrates an access policy can comprise any logical combination of conditions that can be transformed into a gateway rule . The policy in the above example represents a conjunction AND operator of two conditions 1 that the mobile device is an Android device and 2 that the device has a Facebook application installed thereon. It will be understood that a logical combination of conditions can include OR operators XOR operators NOR operators NAND operators THEN operators mathematical operators including less than and greater than and any other suitable operators.

In addition to generating gateway rules based at least partly on the mobile device information the gateway rule generator can be configured to generate the rules based at least partly on a locally stored database of information received from the meta application such as a model of the enterprise network and mobile devices or detected features problems and root causes see below discussion of meta application . In an embodiment in which the meta application manages Microsoft Exchange the information received from the meta application can include ActiveSync partnership data.

As noted above the meta application can be a direct provider of gateway rules to the secure mobile gateway . The meta application can generate gateway rules based on various data associated with the enterprise network users mobile devices or any combination thereof. The meta application can have access to various information on which gateway rules can be based. For example in support of its management tasks the meta application can be configured to conduct discovery of the enterprise network and mobile devices to create and maintain a queriable model thereof. Additionally the meta application can be configured to predict or detect features problems and or root causes as these terms are used in Qureshi 536. New gateway rules can be created based on the model the detected features problems and root causes and other information detected or computed by the meta application . The management and gateway control capabilities of embodiments of the meta application are described more fully below.

The illustrated gateway configuration service is configured to receive gateway rules from the providers and save them in the local storage of rules . The gateway configuration service can be implemented as a web service and can have a list of all of the providers associated with the gateway . The gateway configuration service can be configured to periodically e.g. every 24 hours hour or few minutes etc. query the providers for any new gateway rules that are available. In this sense the configuration service acts as a collector of gateway rules for the gateway .

Mobile devices are pervasively used to check emails including emails associated with an enterprise email account. Some emails include attachments containing sensitive data. These attachments are often stored on a mobile device when a user checks email using the mobile device. The attachment data stored on the mobile device can be compromised in a number of ways. When the attachment data is compromised sensitive data associated with the enterprise can be exposed. Accordingly a need exists to protect attachment data associated with an enterprise that is stored on a mobile device. This need may vary depending upon the individual s position or role in an associated organization for example the need to protect the attachments to messages received by a corporation s executives may be greater than the need to protect the attachments received by the corporation s IT staff. In addition if the company s enterprise supports the use of other messaging protocols SMS MMS instant messaging AS EWS OWA proprietary messaging protocols etc. to send documents this need may extend to such protocols.

Aspects of certain embodiments relate to protecting enterprise attachments stored on a mobile device such as enterprise email attachments from being compromised. The attachments may include for example Word documents Excel documents PowerPoint presentations text files and documents and files created with other application programs. According to the principles and advantages described herein attachment data can be protected on mobile devices with non proprietary email applications such as an email application that comes pre installed on or is later installed on an iPhone or an Android device. As such features related to protecting attachment data can be implemented with any suitable email client. Enterprise attachments can be protected prior to being stored on a mobile device such that the protected attachment data remains safe even when data stored on the mobile device is compromised. The attachment data can be securely stored in the general file system of a mobile device. Attachment data can be identified and stripped from an email message. The attachment data can be encrypted and then sent to the mobile device as encrypted attachment data. A secure mobile gateway can be configured to encrypt attachment data and provide the encrypted attachment data to the mobile device. According to some embodiments an encrypted attachment key can also be sent with the encrypted attachment data. Secure policy based access to the protected attachment data can be provided. An enterprise agent can decrypt the encrypted attachment data. For example the enterprise agent can decrypt the encrypted attachment key and then use the attachment key to decrypt the encrypted attachment data. When the mobile device is compromised the enterprise agent can be configured such that the encrypted attachment data remains encrypted. For example the enterprise agent can destroy and or invalidate the attachment key. Without the device key to decrypt the encrypted attachment key the encrypted attachment data can remain encrypted. When the encrypted attachment data is stored on removable memory such as a secure digital SD card the attachment data can remain secure when the removable memory is removed from the mobile device since the attachment data is encrypted.

In one embodiment enterprise users access their enterprise email accounts from their mobile devices using the enterprise agents installed on their mobile devices. The enterprise agent can operate transparently to an email client and an enterprise email server. The enterprise agent may require an end user to log in before accessing the user s email account and or before an opening encrypted attachment. The enterprise agent can register with a platform of the mobile to device. When the user opens an encrypted attachment the enterprise agent can be invoked. An encrypted attachment can be identified by a particular file suffix. After being invoked the enterprise agent can decrypt the attachment transparently to the user.

Although the system is described herein primarily in the context of email attachments for illustrative purposes it will be understood that the principles and advantages described herein may be applied to any other suitable communication protocol that can be used to send an attachment from an enterprise resource to a mobile device. For example any combination of features of protecting email attachments can be applied to protecting an attachment to an instant message text message for example an SMS or the like. It will be understood that in certain embodiments the policy based encryption of attachment data described herein can be implemented in combination with other encryption applied to the attachment data. Moreover although attachment data is described herein as being encrypted for illustrative purposes it will be understood that the principles and advantages described herein may be applied to any other suitable way of protecting attachment data on a mobile device such as scrambling and the like. Furthermore the principles and advantages described herein with reference to attachment data can be applied to protecting some or all of a message such as an email message.

With reference to attachment data can be protected in any of the enterprise computing systems and mobile devices described herein. Attachment data can be protected in any system with a mobile device in communication with a secure mobile gateway which is in communication with an enterprise resource such as an enterprise email server. Typically a mobile device communicates with the secure mobile gateway via an external firewall . In certain embodiments the secure mobile gateway can be implemented by an enterprise resource . In one embodiment as discussed above the secure mobile gateway can be deployed between an external firewall and an internal firewall of the enterprise system . The mobile device and or the secure mobile gateway can be in communication with a mobile device management system . The mobile device management system can be configured to implement functionalities related to encryption keys for encrypting attachment data for example as will be described in more detail below. According to certain embodiments the secure mobile gateway and or agents of the mobile device can be configured to decrypt attachments.

The secure mobile gateway can be configured to detect attachments in incoming and or outgoing email messages. In some embodiments the secure mobile gateway can inspect and or modify a data payload being transmitted to and or from a mobile device such as an ActiveSync data payload. The incoming and or outgoing data payload can be in WBXML a binary version of XML optimized for low bandwidth environments. The secure mobile gateway can include a parser and generator that operate on the data payload. For example the parser and generator can process WBXML. In this example the parser and generator can process data in accordance with the ActiveSync WBXML schema. The secure mobile gateway can programmatically identify which character encoding schemes are being used. WBXML messages may include MIME payloads. The secure mobile gateway can include a MIME parser and generator configured to construct and deconstruct this data. With a parser and generator the secure mobile gateway can identify an attachment so that the attachment can be separated from an email and secured.

According to one embodiment to intercept and or modify incoming and or outgoing data payloads the secure mobile gateway can register with an Internet Server Application Programming Interface ISAPI or other server to receive notifications. The received notifications can correspond to various processing stages. The secure mobile gateway can maintain a context state to track the various processing stages of a request. The secure mobile gateway can chunk and de chunk request and response data.

The secure mobile gateway can modify or otherwise mark an attachment and or a reference to an attachment. For instance the secure mobile gateway can append a particular suffix such as .zendata to the names of encrypted attachments to signify that they should be preprocessed by the enterprise agent . As another example the secure mobile gateway can append a particular suffix such as .zendata to the names of a reference to an attachment to signify that the attachment should later be encrypted prior to being delivered to a mobile device . The secure mobile gateway can adjust a header attribute for example in MIME data to identify that attachment data is encrypted as an alternative to or in addition to appending a suffix to a file or a link. The secure mobile gateway can encrypt and or decrypt attachment data and or attachment keys. The secure mobile gateway can be configured to initiate communication with the mobile device management system to obtain device properties device policies public device keys the like or any combination thereof.

Device Agents such as an operating system and or the enterprise agent of the mobile device can be configured to register the mobile device with the enterprise system and to handle the encrypted data file type for example .zendata decrypt the attachment data and invoke the appropriate rendering and or processing on the decrypted attachment data. The device agents of the mobile devices can be configured to obtain and or manage a private device key.

The mobile device management system can generate a device key. The mobile device management system can distribute the device key or a portion thereof to a mobile device and or to a secure mobile gateway . A suitable key can be used by the secure mobile gateway to encrypt attachment data and another suitable key can be used by the mobile device to decrypt the encrypted attachment data. For instance the mobile device can receive a private device key from the mobile device management system and the secure mobile gateway can receive a public device key from the mobile device management system . The secure mobile gateway need not include special key management and or key archiving according to some embodiments. When an attachment is encrypted and a corresponding device key is subsequently destroyed invalidated and or replaced the encrypted attachment may be unrecoverable.

A number of different rules and or policies related to protecting attachments can be implemented by the enterprise system . For example features related to protecting attachments can be implemented based on one or more properties of a particular mobile device that receives attachment data. In this example certain mobile devices with particular software applications installed thereon can enable attachment protection as a default. As another example protecting attachments can be enabled and or disabled based on one or more properties of a user of a mobile device that is receiving the attachment data. For instance an employee of the enterprise that is likely to receive attachments with sensitive and or confidential information such as an executive and or a member of the legal team can have attachments encrypted as a default. By contrast an employee who is unlikely to receive attachments with sensitive and or confidential data can have attachment protection disabled as a default. As yet another example attachments can be protected based on one or more properties of the attachment itself such as file name file type data included in the attachment or any combination thereof. For instance the attachment can be searched for one or more key words and phrases such as confidential proprietary attorney client privileged etc. and if such a key word or phrase is found the attachment can be encrypted. It will be appreciated that rules and or policies can allow the enterprise to configure features related to protecting attachments in a flexible way based on mobile device properties user properties attachment properties the like or any combination thereof. Any of the rules and or policies related to protecting attachments can be implemented in combination with any of the other rules described herein rules packages described herein policies described herein the like or any combination thereof.

Moreover any of these rules and or policies related to protecting attachments can be implemented by any suitable computer hardware described herein. For example the secure mobile gateway can be configured to enable and or disable features related to protecting attachments such as encrypting attachments globally. The secure mobile gateway can obtain policies from the mobile device management system related to protecting attachments. The mobile device management system can be configured to manage any selection policy related to protecting attachments such as which mobile devices receive encrypted attachments and or what type of attachments are encrypted.

In a typical use case scenario a mobile device can receive an email with an attachment from an enterprise email server such as an Exchange server in accordance with an ActiveSync protocol. The mobile device can retrieve encrypted email attachments such that the attachment data saved on the mobile device is protected with device specific keys. The saved attachment data can only be decrypted using an enterprise agent running on the mobile device according to certain embodiments. For instance the enterprise agent can control and manage the device specific key used to decrypt the attachment data. A mobile device management system can select or specify the mobile devices and or users for which attachments are to be encrypted. For example selected mobile devices may be excluded from receiving encrypted attachments based on one or more mobile device management system policies and or one or more secure mobile gateway policies.

Encrypted attachments that are forwarded and or sent from a mobile device can be decrypted by the secure mobile gateway before being delivered to new recipient s . As a result a new recipient within the enterprise can receive the attachment based on its policy. When the new recipient is a mobile device with an enterprise agent the attachment data can be re encrypted for that particular recipient mobile device . When the new recipient is an unmanaged mail client the attachment data can be delivered unencrypted.

Example communications and events related to delivering an email with an attachment from an enterprise resource to a mobile device via a secure mobile gateway will be described with reference to . Then example communications and events related to forwarding and or sending an email from a mobile device through a secure mobile gateway and an enterprise resource will be described with reference to .

In event D of the secure mobile gateway processes an email message being sent to the mobile device . Such processing can include determining whether the email message includes an attachment. For instance when the enterprise email server sends a response that includes email messages in event C the secure mobile gateway can parse the response and programmatically identify attachments. For example attachments can be identified from a name and a server reference in a WBXML message. As another example attachments can be identified by being inlined in a MIME message. The secure mobile gateway can mark and or modify the attachment in a detectable way. For instance the secure mobile gateway can rename an attachment. In one embodiment a suffix can be appended to the name of an attachment document. For example an attachment with an original name of Foo.xyz can be renamed to Foo.xyz.zendata .

An attachment can also be encrypted in event D of when the attachment is inlined such as in a MIME message or otherwise included with the email in a substantially compete form. Any suitable attachment can be encrypted such as a document for example a Word document a PDF document etc. . The secure mobile gateway can also encrypt an attachment key associated with the attachment. The attachment key can be generated by the secure mobile gateway and or received by the secure mobile gateway from the mobile device management system for example as discussed in more detail with reference to . The encrypted attachment key can be included in the new attachment file with the encrypted attachment data.

The sync response from the enterprise email server and or another enterprise resource as modified by the secure mobile gateway is delivered to the mobile device in event E of . This can provide the mobile device with encrypted attachment data in some circumstances. For example MIME messages with embedded encrypted attachments can be provided to the mobile device . For some other types of messages emails with renamed attachment references that can be used with subsequent requests to retrieve attachments are provided to the mobile device .

For emails with attachment references such as WBXML emails a request to retrieve attachments can be sent from the mobile device in event F of . Then in event G the secure mobile gateway can detect that the attachment reference has been marked and or modified. For example the secure mobile gateway can programmatically identify that that attachment reference includes a particular suffix previously added by the secure mobile gateway such as zendata in the example provided above. The secure mobile gateway can then unmap the attachment reference so that the enterprise email server and or another enterprise resource can process a request to provide the attachment. In some embodiments this can involve a URL rewrite. In event H the secure mobile gateway requests the attachment from the enterprise email server and or another enterprise resource . Then the enterprise email server delivers the attachment to the secure mobile gateway in event I. The secure mobile gateway encrypts the attachment in event J. The secure mobile gateway can also encrypt an attachment key associated with the attachment. The encrypted attachment key can be included in a file with the encrypted attachment data and or provided separately to the mobile device . Then in event K the secure mobile gateway delivers the encrypted attachment data to the mobile device .

Email messages and associated attachments stored on a mobile device can be forwarded from the mobile device to a new recipient. illustrate examples of processes of forwarding an email message from a mobile device . In the example illustrated in a secure mobile gateway can function as a pass through in transmitting a request to forward an email message with an attachment from the mobile device to an enterprise resource such as an enterprise email server. The process illustrated in can be implemented in situations in which the email with the attachment is stored on the enterprise email server or in which the enterprise email server otherwise has access to the attachment data. For instance the mobile device can send information identifying the attachment such as a reference to the enterprise email server via the secure mobile gateway . In some embodiments the process of can be implemented with a Smart Forwarding feature in which a marker is inserted in a forwarded email message with an attachment. The enterprise resource for example an Exchange server or other enterprise email server can insert the attachment into the forwarded email message that is sent to the recipient by the Smart Forwarding feature. In this way the mobile device can forward the email message without downloading the entire email message and attachment to the mobile device .

In event A of the mobile device sends to the secure mobile gateway a request to forward an email message that includes a reference to the attachment. Then the secure mobile gateway simply passes through the email message to the enterprise resource in event B. The enterprise email server can then use the reference to identify the attachment that is stored on the enterprise email server. The email and the attachment can then be sent to the recipient via the process illustrated in when the recipient is a mobile device associated with the enterprise. In event C the enterprise resource responds to the secure mobile gateway to confirm that the message has been sent. The secure mobile gateway passes through the response to the mobile device in event D.

In the example illustrated in the secure mobile gateway decrypts encrypted attachment data from the mobile device when transmitting a request to forward the email message with the attachment from the mobile device to an enterprise resource such as an enterprise email server. The process illustrated in can be implemented in situations in which the email message with the attachment is being transmitted from the mobile device . Such a process can be implemented for example on mobile devices in which the process illustrated in is unsupported such as mobile devices that do not support Smart Forwarding and or disabled.

In event A of the mobile device sends a request to forward an email message with an attachment to the secure mobile gateway . The request can include the encrypted attachment data. The secure mobile gateway detects a previously encrypted attachment and decrypts the encrypted attachment data at in event B. For instance the secure mobile gateway can programmatically identify attachments that are marked and or modified to indicate that they are encrypted such as having the suffix .zendata in an example provided above. More details regarding some example decryption methods that can be performed in event B will be described with reference to . In event C the request to forward the email message including the decrypted attachment data is transmitted to the enterprise resource . The enterprise resource responds to the secure mobile gateway to confirm that the message has been sent in event D. The secure mobile gateway passes through the response to the mobile device in event E.

To encrypt email attachments various keys can be generated delivered to other devices encrypted used to decrypt encrypted attachment data the like or any combination thereof. Although encryption of email attachments may be described herein with reference to certain computing devices performing particular functionalities for illustrative purposes it will be understood that any of the features related to encrypting and or decrypting an attachment described herein can be performed by any suitable computing device. For example some functions related to encryption decryption or a subcombination thereof that are described as being performed by the secure mobile gateway and or the mobile device management system can be performed by the mobile device . As another example some functions related to encryption decryption or a subcombination thereof that are described as being performed by either the secure mobile gateway or the mobile device management system can alternatively or additionally be performed by the other of the two computing systems.

In certain embodiments the secure mobile gateway can generate keys related to an attachment and the mobile device management system can generate keys for selected mobile devices . For instance the secure mobile gateway can generate a symmetric secure mobile gateway key Smgkey and store this key in a suitable data store. The symmetric secure mobile gateway key Smgkey can be generated for example when the secure mobile gateway is being installed and or when software is being installed thereon. According to some embodiments the mobile device management system can generate an asymmetric key DeviceKey associated with a selected mobile device . Alternatively or additionally the mobile device management system can generate an asymmetric key associated with a group of mobile devices a user of the enterprise the like or any combination thereof. Such an asymmetric key can be used in place of the asymmetric key DeviceKey or in combination with the asymmetric key DeviceKey. The mobile device management system can distribute a private key DeviceKeyPr of the asymmetric key DeviceKey to the selected mobile device . The mobile device management system can distribute a public key DeviceKeyPb of the asymmetric key DeviceKey to the secure mobile gateway .

The attachment key AttachmentKey is encrypted at block . For example the secure mobile gateway can encrypt the attachment key AttachmentKey with the secure mobile gateway key Smgkey. This produces an encrypted secure mobile gateway attachment key EncyptedSmgAttachmentKey for the secure mobile gateway which can be used by the secure mobile gateway to decrypt the encrypted attachment data for example as described with reference to . Additionally the secure mobile gateway can encrypt the attachment key AttachmentKey with the public key DeviceKeyPb. This produces an encrypted device attachment key EncryptedDeviceAttachmentKey for the mobile device which can be used by the mobile device to decrypt the encrypted attachment data for example as described with reference to .

At block attachment data is encrypted with the attachment key AttachmentKey to generate encrypted attachment data. The secure mobile gateway replaces previous attachment data with encrypted attachment data at block . The encrypted attachment keys EncyptedSmgAttachmentKey and EncryptedDeviceAttachmentKey can also be included with the encrypted attachment data. For example the secure mobile gateway can replace attachment data with encrypted attachment data the encrypted secure mobile gateway attachment key EncyptedSmgAttachmentKey and the encrypted device attachment key EncryptedDeviceAttachmentKey.

Encrypted attachment data can be decrypted in order to access the attachment data. In certain embodiments a user can be prompted to log in or otherwise supply access credentials when accessing encrypted attachment data on a mobile device . To maintain the protection of the encrypted attachment data the encryption keys associated with the attachment data can be provided to particular computing devices. For instance as discussed with reference to block of the secure mobile gateway can encrypt the attachment key AttachmentKey specifically for use with a selected mobile device and or the secure mobile gateway . is a flowchart illustrating an embodiment of a method of decrypting an attachment. Some or all of the method steps illustrated in can be performed for example by either a mobile device or the secure mobile gateway when encrypted attachment data stored on the mobile device is accessed by an application on the mobile device and or in event B of .

At block a computing device receives an encrypted attachment. In certain embodiments the computing device can also receive an encrypted attachment key with the encrypted attachment data. The encrypted attachment data and the encrypted attachment key can both be included in the same file according to some of these embodiments. The encrypted attachment key is decrypted at block . Then at block the attachment data is decrypted using the attachment key.

The method illustrated in can be performed for example by an enterprise agent on a mobile device . This can include the mobile device receiving an encrypted attachment and an encrypted attachment key for example in accordance with the process illustrated in . The enterprise agent of the mobile device can decrypt an encrypted device attachment key EncryptedDeviceAttachmentKey with a private device key DeviceKeyPr. The decrypted device attachment key can be the attachment key AttachmentKey. With the attachment key AttachmentKey the enterprise agent of the mobile device can decrypt the encrypted attachment data. This can provide the mobile device with the original attachment data sent to the mobile device by an enterprise resource such as an enterprise email server. Such data can be for example plain text data.

The method illustrated in can be performed for example on a secure mobile gateway . This can include the secure mobile gateway receiving an encrypted attachment for example when a mobile device forwards an email message with an encrypted attachment. The secure mobile gateway can decrypt an encrypted secure mobile gateway attachment key EncryptedSmgAttachmentKey with the secure mobile gateway key Smgkey. The decrypted device attachment key can be the attachment key AttachmentKey. With the attachment key AttachmentKey the secure mobile gateway can decrypt the encrypted attachment data. This can provide the secure mobile gateway with the original attachment data previously sent to the mobile device by an enterprise resource such as an enterprise email server. The secure mobile gateway can then forward the attachment data to the enterprise resource .

To support distribution and or updating of public device keys such as the public device key DeviceKeyPb a web service interface or other suitable interface can be provided. The interface can enable a user to define device key pairs and or user key pairs. The interface can enable a user such as an IT staff member or an enterprise network administrator to update the key pairs by for example adding new pairs replacing existing pairs removing pairs the like or any combination thereof. The interface can enable a user to map a mobile device to a set of properties for example name value pairs . Such properties can include the attachment public key blocking attachments blocking selected attachment types blocking contact sync blocking calendar sync client certificate ID any of the other properties described herein the like or any combination thereof.

With reference to a tunneling mediator such as the tunneling mediator of the mobile device management system can be configured to receive access requests generated by software applications installed on the mobile devices for access to the enterprise resources especially enterprise resources comprising software applications and to generate application tunnels between the device applications and the enterprise resources . An application tunnel is a technique in which one network protocol for example the delivery protocol encapsulates a different network protocol. By using tunneling it is possible to for example provide a secure path through an untrusted network.

One benefit of using application tunnels for communications between mobile device applications and enterprise resources is that it is possible to limit the mobile device s access to those enterprise resources that the user of the mobile device needs for the performance of his or her enterprise role . Another potential advantage of using application tunnels is that access control can be provided at the application level for pre existing applications. In preferred embodiments the application tunnels are defined at the application layer in the OSI model. This is in contrast to a virtual private network VPN a methodology which is widely used to provide remote offices or individual users secure access to their organization s network. A VPN operates at the network layer or lower of the Open Systems Interconnection OSI model and ordinarily provides users with full access to all of the resources within an enterprise s computer network. A significant problem with using a VPN connection is that no suitable mechanism exists for restricting access by the mobile applications and potentially mobile applications containing malware to the VPN connection. In contrast as described below each application tunnel may be exclusive to available for use only by a single corresponding mobile application. By limiting access only to enterprise resources needed by a particular user the use of application tunnels can promote enterprise network security.

As explained in further detail below an additional benefit of using application tunnels for communications between a mobile device and an enterprise system is that it allows the enterprise to improve the user s connectivity experience e.g. by caching data in the event of a network connection loss log data flows and implement other features.

In order to implement the application tunnels a tunneling mediator can be provided through which the tunneled communications flow. The tunneling mediator is a component that receives mobile device application communications formatted according to an encapsulation protocol unpacks or extracts data from the communications using the protocol and sends the unpacked or extracted data to a network resource requested or specified by the mobile device application. The tunneling mediator also does substantially the same for communications sent by a network resource to a mobile device application via the tunneling mediator. The tunneling mediator can comprise a software application installed on a server. The tunneling mediator can be located within the enterprise system e.g. the tunneling mediator of the mobile device management system or alternatively outside of the enterprise system e.g. in a cloud computing environment as in .

A tunneling mediator or enterprise agent can use a tunnel definition to construct an application tunnel in accordance with methods described below. The mobile device management system illustrated in includes a repository of tunnel definitions. A tunnel definition can include information to implement an application tunnel between a mobile device application and a remote resource such as an enterprise resource . A tunnel definition can be specific to a particular application or type thereof. Similarly a tunnel definition can be specific to a particular remote resource or type thereof. A tunnel definition can identify a specific port of a mobile device and or a URL or specific port of a computer server on which the remote resource is installed. Accordingly a tunnel definition can include an application or server port and information mapping such a port to a client port to specify the endpoints of an application tunnel. A tunnel definition can also include a URL of a tunneling mediator which can be useful particularly in implementations involving multiple tunneling mediators. Multiple application tunnels can be mapped to a specific port of a mobile device and or a URL or specific port of a computer server on which the remote resource is installed and the multiple application tunnels can be multiplexed such that a single port of the mobile device and or a URL or specific port of the computer server on which the remote resource is installed is used to implement multiple application tunnels. The mobile device management system can be configured to send e.g. push at least portions of the tunnel definitions to mobile devices . For example the tunnel definitions can be sent with the rule packages described below. The enterprise agents can be configured to store the tunnel definitions locally on the mobile devices and use the tunnel definitions to generate application tunnel formation requests as described below.

A tunneling mediator or related system can include an interface such as a web console for viewing creating and editing tunnel definitions. The interface can also allow an administrator or other person to view data associated with mobile devices adapted to connect via application tunnels. At least some of the data can be obtained from the repository of mobile device information .

Many mobile device software applications are capable of issuing network communications also referred to as application generated communications including requests to access and communicate with enterprise resources . The enterprise agent can be configured to intercept and or receive these communications and redirect at least some of them to URLs associated with one or more tunneling mediators such as the mediator . The tunneling mediator can redirect the application generated communications to requested enterprise resources receive responsive communications from the enterprise resources and forward the responsive communications back to the mobile devices . Advantageously the tunneling mediator can add a layer of enterprise security by applying access policies to grant or deny access and restricting access only to the requested enterprise resources .

In one embodiment upon intercepting and or receiving an application generated communication for accessing an enterprise resource or another resource the enterprise agent searches the application tunnel definitions stored in local storage to retrieve a tunnel definition associated with the software application that produced the application generated communication and or associated with the requested enterprise resource or other resource . The enterprise agent generates an application tunnel formation request that identifies the retrieved tunnel definition and encapsulates at least a portion of the application generated communication within one or more headers of an encapsulation protocol. The encapsulated application generated communication is also referred to herein as an agent generated communication. The enterprise agent sends the application tunnel formation request and the encapsulated application generated communication which can together comprise a single communication to the tunneling mediator e.g. via connections and of or via connections and of or another such mediator defined in the tunnel definition. Skilled artisans will appreciate that the defined tunneling mediator can be one of a plurality of tunneling mediators associated with the agent and enterprise system .

The tunneling mediator receives the application tunnel formation request which identifies the tunnel definition and the agent generated communication. The tunneling mediator can read the tunnel definition identified in the tunnel formation request and then retrieve the identified tunnel definition from the repository . The tunneling mediator can determine from the retrieved tunnel definition or even from the information provided in the tunnel formation request a URL and or port of a computer server or other computing device on which the requested enterprise resource is located. The tunneling mediator opens a network connection to the server port e.g. the connection of or the connection of . In some embodiments the tunneling mediator remains connected to the enterprise resource at all times or during pre scheduled time ranges such that a connection can be available immediately upon the receipt of an application tunnel formation request from a mobile device . Based on the encapsulation protocol the tunneling mediator extracts the application generated communication from the agent generated communication and sends the former to the URL server port associated with the requested enterprise resource . At this point an application tunnel has been formed between the mobile device and the requested enterprise resource . In some embodiments the tunneling mediator sends a message back to the mobile device to indicate the formation of the tunnel and asks that the enterprise agent affirmatively accept the tunnel before sending application generated communications to the enterprise resource . Once the tunnel is formed the enterprise agent can send additional application generated communications encapsulated using the encapsulation protocol to the tunneling mediator which can forward them to the enterprise resource .

Communications in the opposite direction e.g. from an enterprise resource to a mobile device application can be encapsulated by the tunneling mediator sent by the tunneling mediator to the mobile device and then unpacked by the enterprise agent in accordance with the encapsulation protocol. The tunneling mediator can communicate with the enterprise resource as though the mediator is the mobile device application and so that responses generated by the enterprise resource are returned to the tunneling mediator e.g. via connection of and connection of . When the tunneling mediator receives such responses to the application generated communications the tunneling mediator can encapsulate at least a portion of each of these resource generated responses within one or more headers such as HTTP headers in accordance with the encapsulation protocol and then send the encapsulated response to the enterprise agent e.g. via connections and of and connections and of . The tunneling mediator can be configured to send its communications to a specific port of the mobile device the port being defined in the tunnel definition associated with the operative application tunnel. The enterprise agent can be configured to listen to this local port for tunneled communications from the tunneling mediator . Based on the encapsulation protocol the enterprise agent can extract the resource generated response from the one or more headers and then provide the resource generated response to the application .

In this type of application tunnel the software application installed on the mobile device can be given an impression that it is connecting directly with a resource such as an enterprise resource associated with the URL of the network request issued by the application . In reality the application is actually communicating with the resource via a tunneling mediator such as the tunneling mediator . Thus the application need not be aware of the tunnel s existence.

In some embodiments the enterprise agent can be configured to filter out those application generated communications that meet predefined and or configurable criteria. Such criteria can include for example any one or more of the following as well as various other critera 1 the URL e.g. of the enterprise system or of web sites whose access is restricted by the enterprise 2 server port s to which an application attempts to send the request 3 data regarding the application that issues the request e.g. name version etc. 4 time of day 5 day of the week and or 6 geographic location of the mobile device . Such filtering criteria can be communicated to a mobile device by the enterprise system via wireless communications to the enterprise agent .

In one method of initiating the formation of an application tunnel the enterprise agent is configured to intercept the application generated communications from the software applications . For instance in mobile devices running certain Microsoft operating systems e.g. Windows Mobile Windows CE it is possible to use a layered service provider LSP to filter network requests issued by mobile device applications . An LSP which is a feature of the Microsoft Windows Winsock 2 Service Provider Interface SPI is a DLL that uses Winsock APIs to insert itself into the TCP IP protocol stack. Once in the stack the LSP can intercept and modify inbound and outbound Internet traffic. The LSP can allow for processing of all the TCP IP traffic taking place between the Internet and the device s software applications . The LSP can be configured to be loaded automatically by any application that uses network connections. The LSP has a layered model like a filter. Thus every time an application makes a network call it goes through the LSP. The LSP allows the enterprise agent to intercept every application network communication attempting to send information to one or more defined URLs and redirect the communication to a tunneling mediator such as the mediator associated with the enterprise system . In this manner the enterprise agent can detect requests from the applications to connect to the enterprise resources and modify and redirect the requests to a URL of the tunneling mediator. The enterprise agent can be configured to filter requests from the applications by one or more identified ports of the enterprise resources . The enterprise agent can be configured to select port s of the tunneling mediator s to send the redirected requests based at least partly on the enterprise resource ports provided within the requests.

As noted above after the tunneling mediator establishes an application tunnel connection between the mediator and the requested resource the mediator can send a notification thereof to the enterprise agent and the enterprise agent can accept the application tunnel connection. All of this can happen transparently with respect to the software application . The application can send network requests via the tunneling mediator without modifications or reconfiguration of the application according to certain embodiments.

Unfortunately in some mobile devices it is difficult or even impossible for a mobile device to intercept network connection requests issued by software applications . Some mobile device operating systems such as iOS and Android can restrict the ability of different software applications to interact and share data with each other. Such restrictions are sometimes referred to as the sandboxing of software applications and can be useful in preventing rogue applications from stealing data from mobile devices and sending the data to unauthorized Internet locations. This can prevent an enterprise agent from accessing or modifying network requests issued by the applications .

Hence another approach to initiating the formation of an application tunnel is to reconfigure how the software applications send their network requests or at least some of them . In certain embodiments a software application is reconfigured to send its network requests to a local host of the mobile device on a defined mobile device port. The enterprise agent can be configured to listen to the port and react to an application s network request by establishing a connection with a tunneling mediator if it is not already established to open an application tunnel with a resource requested by the application . The enterprise agent can consult the relevant application tunnel definition in order to determine the port to which to listen for the application tunnel request. In other embodiments a software application is reconfigured to send at least some of its network requests directly to the tunneling mediator. Further the application can also be configured to unpack communications encapsulated via the encapsulation protocol received from the tunneling mediator. An enterprise can make available an application store of downloadable mobile device applications that are configured to generate application tunnel requests as described herein.

Encapsulation protocols for producing application tunnels are now further described. The enterprise agent or software applications depending on which particular approach to forming an application tunnel is used can be configured to modify the software application s network connection request using any of a variety of different methods or encapsulation protocols. An encapsulation protocol for use in an application tunnel can allow for the addition of metadata for various purposes. For example the encapsulation protocol via added metadata can identify the particular application tunnel which allows the tunneling mediator to distinguish the tunnel from other application tunnels that the tunneling mediator may simultaneously be handling. This can help to prevent mixing data between the different application tunnels helping to ensure that the tunneled data is delivered to the correct resource e.g. enterprise resource . Stated differently the encapsulation protocol may add metadata that enables multiple application tunnels to be multiplexed for transmission on a common connection. The added metadata can also specify the length of each message sent through the tunnel. Added metadata can also be unrelated to the application tunnel or to the application that initiated the tunnel such as a list of software applications installed on the mobile device or results of commands sent to the mobile device by the mobile device management system . Such data can be used by the mobile device management system to update the mobile device information .

A typical network connection request generated by the software application may use a multi layered communication protocol involving multiple protocol headers. In a simplified example the access request generated by the software application may take the following form 

wherein IP refers to the Internet Protocol TCP refers to the Transmission Control Protocol HTTP refers to the Hypertext Transfer Protocol and SOAP refers to the Simple Object Access Protocol. In this example the mobile device s enterprise agent can be configured to intercept this communication e.g. by use of an LSP at the TCP layer and then rewrap or encapsulate the TCP payload which in this example is HTTP header SOAP header SOAP body in multiple layers according to an encapsulation protocol used by the enterprise agent . For example the enterprise agent could rewrap or encapsulate the TCP payload within the following plurality of layers SSL Secure Sockets Layer TCP IP etc. The enterprise agent can then send the encapsulated request to the tunneling mediator. In other embodiments as described above the software application can be configured to send the request to a local port of the mobile device from which the enterprise agent receives encapsulates and redirects the request to the tunneling mediator or even encapsulate the request and send it directly to the tunneling mediator.

Upon receipt of the encapsulated request from the mobile device the tunneling mediator can unpack the request according to the encapsulation protocol. In the above example the tunneling mediator extracts the TCP payload generated by the mobile device s software application . The tunneling mediator can then send the TCP payload to a URL port obtained from the relevant tunnel definition of the requested enterprise resource e.g. a server port of the server on which the requested enterprise resource is installed . In the above example the extracted TCP payload contains the higher level protocols HTTP and SOAP. In certain embodiments the encapsulation protocol uses Secure Sockets Layer SSL over HTTPS to form the tunnel.

The illustrated logging steps and of can allow an enterprise to keep track of data that flows through the resource network connection e.g. connections of between the tunneling mediator and the enterprise resource . The use of application tunnels for such logging enables user and device behaviors to be tracked at more granular level and with a greater level of control. For example because each application tunnel is ordinarily tied to a particular mobile device user and mobile application data transmitted over that tunnel can be stored in association with this mobile device user and application. This gives an enterprise greater visibility into the activities of its mobile device users . The tunneling mediator or other component associated therewith can be configured to log various types of information such as the actual data sent through the resource network connection the amounts of data sent through the resource network connection types of data sent through the resource network connection names of files sent through the resource network connection the number of times a particular user accesses one or more enterprise resources the times at which a user requested access to one or more enterprise resources etc. Analytics can be generated from the logged data. The mobile device management system can set rules based on such analytics. As one example access to one or more enterprise resources can be restricted for a mobile device with a high volume of downloads.

Application tunnels as described above can also be used for purposes other than accessing enterprise resources . For example as described below in connection with and an application tunnel can be used to conduct a remote control session between a mobile device and a controller computer.

Another use of an application tunnel involves so called web filtering or content filtering in which an enterprise may wish to restrict the network sites e.g. websites or other online information resources that a mobile device is authorized to access. Using an application tunnel to perform content filtering can be implemented with features related to modifying a pre existing mobile application and or through the use of a secure web browser as described below. Access can be authorized for example at all times only during business hours etc. In certain embodiments the enterprise agent is configured to redirect intranet and or Internet requests generated by the mobile device e.g. a URL entered into a web browser or an HTTP request generated by the web browser for an information resource available on the world wide web through an application tunnel to a content filtering server associated with the enterprise. The content filtering server acts as a tunneling mediator and inspects each request to determine whether the requested site is authorized by the enterprise. For example the content filtering server can maintain a list of sites that are blacklisted by the enterprise and can deny requests to access blacklisted sites. In certain embodiments this determination may be based on the specific mobile device and user making the request e.g. based on user role . The content filtering server can be located within or outside of the enterprise system and could be a third party server operated at least partially for the benefit of the enterprise. If the request is authorized the content filtering server can send the request to a server associated with the authorized site to be accessed by the mobile device . The content filtering server can be configured to modify the request to strip away any headers that were produced by the enterprise agent to form an application tunnel with the content filtering server according to the encapsulation protocol . The server associated with the requested site can then receive the request in a form as though it was never sent to the content filtering server.

In this embodiment of the enterprise agent upon deployment of the application tunnel creates a socket that listens on a particular port that is known to the mobile application s that use the application tunnel. When a mobile application writes to this port by writing to localhost XXX where XXX is the listened to port number the enterprise agent acting at an HTTP proxy for the mobile application encapsulates and forwards the message for example as described above. More specifically when a mobile application generates an HTTP request that is directed to an application server or other resource of the enterprise system the enterprise agent intercepts the request and sends the request over an application tunnel established between the mobile device and the mobile device management system . The tunnel mediator component of the mobile device management system then extracts the encapsulated HTTP message and sends it to the relevant application server .

One potential problem with this approach is that some application servers such as Microsoft SharePoint will reject the request if the hostname is incorrect. To address this issue the enterprise agent in some embodiments replaces the hostname localhost XXX in the intercepted request with the correct hostname of the target application server . This involves modifying the relevant HTTP header or headers of the original HTTP request received from the mobile application and then sending the modified HTTP request via the application tunnel. In other embodiments the task of replacing the hostname is instead performed by the mobile device management system upon receiving and extracting the encapsulated HTTP request.

The process by which HTTP requests are intercepted and modified in the configuration of is further illustrated in . In event A an administrator configures and deploys an application tunnel between a mobile device and an application server . This may be accomplished using the web admin console as will be described below. In event B the agent in response to the deployment of the tunnel creates a socket and begins listening on the associated port addressable as localhost XXX . In event C the agent acting as an HTTP proxy receives or intercepts an HTTP request from an application running on the mobile device and modifies the hostname to the actual hostname of the target application server . The agent then encapsulates the modified HTTP requests and sends it to the mobile device management system . In event D the tunnel mediator running on the mobile device management system extracts the modified HTTP request and sends it to the application server associated with the tunnel. The tunnel mediator also encapsulates the application server s response for transmission to the mobile device .

Referring again to in some configurations a custom SSL Secure Sockets Layer library may be installed on the mobile device to support secure application tunnels. The custom SSL library may be part of the agent as shown in or may be distinct. The custom SSL library supplements the standard SSL library provided by the mobile device s operating system and modifies the SSL handshaking protocol in a manner that enables the SSL handshaking sequence to be performed over an application tunnel. More specifically the custom SSL library enables the mobile device to accept the application server s transmission of a digital certificate even though the hostname transmitted with this digital certificate does not match the expected hostname. By contrast the standard SSL libraries typically provided with existing mobile operating systems would reject the application server s digital certificate in this situation. The custom SSL library may perform this task by overriding some of the Trust Manager certificate inspection functionality to create an exception to the mismatch in the hostname as part of the certificate. To support the use of the custom SSL library application developers may be provided with an API such as a Java file that enables them to develop mobile applications that use the custom SSL library to establish SSL connections.

In event D of the application server responds by returning a digital certificate containing a public key and cipher suites. This digital certificate contains or specifies the localhost hostname of the agent localhost XXX . Ordinarily i.e. if a standard SSL library were used the SSL library would reject this digital certificate because it expects the digital certificate to specify the application server s hostname. As shown in event E of the custom SSL library avoids this problem by making an exception to this requirement. The custom SSL library can create this exception by updating the SSL Trustmanager to permit a mismatch between the application server s hostname and the localhost hostname used by the agent . Although the exception could be created for all hostnames this could facilitate a man in the middle attack. As further shown in event E the custom SSL library also sends to the application server authentication code keys encrypted with the application server s public key. Thereafter for the duration of the SSL session the mobile device and application server can use symmetric keys for encryption.

If the mobile device management system is used as a tunneling mediator for application tunnels between mobile devices and enterprise resources the system can be configured to regulate the devices access to the resources . The system can be configured to read information from the application tunnel request headers or bodies compare it to the mobile device data to determine information about the user and or mobile device associated with the request and enforce the enterprise access policies to grant or deny the application tunnel requests. Access policies can be enforced based on the locally stored user roles mobile device properties user device assignments other data or any combination thereof. It will also be understood that any tunneling mediator other than the mediator can be configured to enforce the access policies as long as the tunneling mediator has access to the mobile device information .

As noted above in some embodiments the tunneling mediator is positioned outside of the enterprise system e.g. in a cloud computing system as in . It will be appreciated that the mobile device information enterprise access policies mobile device rules and or remedial action descriptions can also be stored outside of the enterprise system such as with the tunneling mediator . In those embodiments the tunneling mediator can still be configured to receive the access requests from the mobile devices and then grant or deny the requests based on the access policies . In such embodiments the tunneling mediator can be configured to send the granted access requests to a network node positioned within the enterprise system which in turn routes the requests to the requested enterprise resources . For example the network node can comprise a computer server the secure mobile gateway or another network device.

There are many possible cases in which an enterprise may wish to regulate or restrict mobile device access to enterprise resources based on mobile device properties and or properties of users assigned to the mobile devices . Several of these use cases are now described. For clarity the use cases are enumerated below. Also for simplicity the use cases are described in the context of access policies stored in the mobile device management system . As discussed above the system can be a provider of gateway rules to the secure mobile gateway and or can regulate mobile device access to enterprise resources via application tunnels. However it will be appreciated that such gateway rules could be created and given to the gateway by any other provider .

Skilled artisans will understand that the following examples represent only a small portion of the full range of possibility for how enterprise access can be regulated using the disclosed components and or processes. For instance it will be appreciated that the access policies can depend on any combination of user properties mobile device properties e.g. device properties the specific enterprise resources for which access is being requested and other information and that the specific examples provided below are merely illustrative and far from exhaustive. Further it will be understood that some use cases can be combined.

One or more of the access policies may require that the mobile device requesting access the access requesting device is enrolled with the mobile device manager . This helps to prevent giving enterprise resource access to people who are not associated with the enterprise.

One or more access policies may require that the access requesting device be a certain device type e.g. iPhone Windows Mobile etc. 

One or more of the access policies may require that the access requesting device have certain settings such as being password protected. This helps to prevent giving enterprise resource access to people who are not associated with the enterprise e.g. are not users but somehow obtain a mobile device e.g. a device that is misplaced or lost by the assigned user and attempt to access the enterprise system .

One or more of the access policies can require that the access requesting device use a current operating system version.

One or more of the access policies can require that the access requesting device complies with a security requirement e.g. an antivirus requirement of the enterprise. If a mobile device is not security compliant e.g. does not have up to date antivirus software installed or has not conducted a sufficiently recent auto scan of its files data or applications for viruses then permitting the device to access an enterprise resource may cause the virus to infect the resource potentially jeopardizing the operability of the enterprise system or at least the specific resource to which access is given. Hence these types of access policies can prevent such undesirable outcomes.

One or more of the access policies can require that the access requesting device not be jailbroken. Jailbreaking is a process that allows a mobile device to gain full access root access to unlock all features of its operating system thereby removing limitations that may be imposed by the device manufacturer. Once jailbroken a mobile device may be able to download previously unavailable applications and extensions. Jailbreaking a mobile device can give access to its root file system allowing modification and installing third party software components. Hence a jailbroken device is often one in which security protections are removed. Thus preventing jailbroken devices from accessing enterprise resources further protects the enterprise system from security threats and vulnerabilities.

One or more of the access policies can require that the access requesting device not have any unauthorized applications installed. In this example an unauthorized application can be a software application that is not authorized to be installed on the access requesting device and or on a particular group of devices of which the access requesting device is a member.

One or more of the access policies can require that the user assigned to the access requesting device have one or more predefined roles associated with the enterprise. For example an access policy can deny mobile device access to one or more of the enterprise resources for mobile devices assigned to users having roles that are not related to sales engineering or upper management.

One or more of the access policies can depend on which particular enterprise resources are being requested to be accessed by an access requesting device . For example the conditions for which an enterprise may grant mobile device access to a CRM resource may be different than the conditions for which an enterprise may grant access to a product information database. Accordingly different access policies can be created and used for different enterprise resources . In addition to depending on the requested enterprise resource s an access policy can require that the user assigned to the access requesting device have certain properties such as a specific role as in Use Case 8 described above or another status indication. For example for a CRM resource an enterprise may wish to grant mobile device access only to users with roles involving sales or upper management. In that case an access policy for the CRM resource may require that the user assigned to the access requesting device have a sales or upper management role and the mobile device manager can be configured to deny access requests from mobile devices assigned to users without those roles . An access policy can further require that the user assigned to the access requesting device be in good standing with the enterprise e.g. users whose employment is not terminated and who are not on a probationary status .

Referring again to the meta application if present can be configured to discover model and or monitor various components of the enterprise system including by methods described in Qureshi 536. The meta application can also be configured to use encoded logic rules to detect features and problems perform root cause analysis plan remedial actions and or execute the remedial actions on the enterprise system including by methods described in Qureshi 536. In this context a logic rule can comprise a logical combination of features of the managed system and can correspond to at least one problem. Further a logic rule can include queries for specific information from the enterprise system telemetry queries or from a model of the enterprise system enterprise model query wherein the enterprise model is generated by the meta application . A problem can comprise any problematic state of any software hardware or firmware of the enterprise system or of a mobile device . The meta application can detect a problem by satisfying the logic of a corresponding logic rule. A feature can comprise a condition of a problem. For example a logic rule can contain a telemetry query or enterprise model query for detecting a feature of the enterprise system . Root cause analysis can refer to the detection of a component again software hardware firmware or even the relationship between such types of components that is a root cause of observed problematic behavior. The meta application can be configured to address detected problems by planning or executing remedial actions associated with the problems.

Inputs e.g. features to the logic rules used by the meta application to detect problems can come not only from the backend of the enterprise system the portion of the system behind the internal firewall but also from other sources such as the secure mobile gateway the enterprise agents on the mobile devices or an application tunnel mediator such as embodiments of the mobile device management system . For example an input to a logic rule can be a grant or denial of a mobile device s access request by the secure mobile gateway . For instance a logic rule can define a particular problem at least in part as the denial by the gateway of enterprise system access to a mobile device used by the CEO of the enterprise. If the CEO is denied access data indicative of this event satisfies this portion of the logic rule. In another example an input to a logic rule can be data indicating that a user has downloaded greater than a certain threshold amount of data within a specified time period. Such data could be provided to the meta application by an application tunnel mediator. In still another example an input to a logic rule can be data indicative of the device s configuration or performance such as data indicating that a user has installed a certain software application on the user s mobile device . Such data could be provided to the meta application by the enterprise agent of the user s device .

In certain embodiments one type of remedial action defined by a logic rule used by the meta application can be the creation of a new gateway rule or the modification of an existing gateway rule along with sending the new or modified gateway rule to the secure mobile gateway . In this manner the meta application can be configured to programmatically control the gateway to block mobile device access requests in an automated fashion. Another type of remedial action can be the creation of a new access policy or the modification of an existing access policy along with sending the new or modified policy to the mobile device management system . Another type of remedial action can be the creation of a mobile device rule or the modification of an existing mobile device rule along with sending the new or modified mobile device rule to the mobile device management system and or one or more of the mobile devices . Another type of remedial action can be to send a command directly to one or more of the mobile devices for execution by the enterprise agent . In this manner the meta application can effectively execute actions on the devices such as wiping data or applications from the devices locking i.e. preventing usage of the devices preventing certain applications installed on the devices from running turning device features on or off adjusting device settings and the like.

In the embodiment of the meta application comprises a portion residing in the enterprise s backend and a portion residing in a cloud computing system or cloud . The cloud based system is ordinarily separate and distinct from the enterprise system e.g. the two systems do not share any physical computers or servers and is ordinarily operated primarily by cloud service provider business entity that is separate and distinct from the enterprise. In certain embodiments the backend meta application portion collects data from the enterprise system sends it to the cloud based meta application portion and possibly also detects features as mentioned above. In certain embodiments the cloud based meta application portion uses the data to model the enterprise system to detect problems and root causes to plan remedial actions and or to execute the remedial actions.

In the illustrated embodiment the enterprise system includes one or more computer servers which can include some or all of the elements shown in the systems of . A meta application agent can be installed on each server having components that are desired to be monitored and or managed by the meta application . Each meta application agent can be born at installation with the URL of the cloud based meta application portion. Alternatively the agents can be configured to receive the URL from an administrator. It will be understood that it is not necessary to install meta application agents on every computer server of the enterprise system . The enterprise based portion of the meta application can be configured to allow an IT administrator to select the enterprise servers on which to install the meta application agents as part of the installation process of the meta application.

In the illustrated embodiment the meta application agent includes an enterprise modeling processor a telemetry processor a feature detector and a remedy agent . These components are now described.

The enterprise modeling processor can be configured to access and or obtain information from the server which is needed or useful for constructing a queriable model of the enterprise system. The enterprise model can describe the hardware software and or firmware of the enterprise system and can include for example configuration information registry data database information and other information useful for evaluating logic rules . The enterprise model can comprise an object graph with the objects representing hardware software firmware relationships therebetween and the like. Exemplary methods and approaches to modeling are described in Qureshi 536 particularly the sections relating to discovery and application models. Each enterprise modeling processor can be configured to construct a model of the particular server on which it is installed. The cloud based meta application portion can be configured to receive data from the enterprise modeling processors and use the data to construct the overall enterprise model . The enterprise modeling processors can be configured to send new data to the cloud based meta application portion on an ongoing basis to support dynamic updating of the enterprise model . Finally it will be appreciated that the enterprise agents of the mobile devices can also be configured to conduct discovery of information about the devices and send the discovered information to the enterprise model and the enterprise model can thereby model one or more of the devices as well as the enterprise system . In other words agents can include enterprise modeling processors or similar functionality.

The telemetry processor can be configured to receive from the cloud based meta application portion requests for specific data about the server on which it is installed. The telemetry processor can be configured to respond to such a request by gathering the requested data referred to herein as telemetry and providing it to the feature detector for analysis. The telemetry can comprise many different types of data about the hardware software and or firmware of the enterprise system including without limitation configuration data performance data data about the mobile devices and data from or about the mobile device management system secure mobile gateway and enterprise resources . Telemetry can comprise state metric data as described in Qureshi 536. State metric data can comprise raw time varying data indicative of a state of the server or any component thereof. It will be appreciated that the enterprise agents of the devices can also be configured to gather device data based on requests for same from the meta application portion and to send the gathered telemetry to a local feature detector or back to the meta application portion . In other words agents can include telemetry processors or similar functionality.

The feature detector can be configured to analyze the telemetry received from the telemetry processor to detect features of the logic rules . The features can be defined within a telemetry query that the cloud based meta application portion sends to the meta application agent . Performing feature detection at least partly within the enterprise system as opposed to within the cloud can significantly reduce the bandwidth for communications between the meta application agent and the cloud because not all of the telemetry is sent to the cloud in certain applications. For instance the meta application agent can merely send the detected features to the cloud . Skilled artisans will understand that a feature can be much less data intensive than the raw telemetry from which the feature is detected. For example a feature can simply be an indication that a particular condition is true. In an alternative embodiment the feature detector resides within the cloud and the telemetry processor can send some or all of the gathered telemetry to the cloud for feature detection. It will be appreciated that the enterprise agents of the mobile devices can also be configured to analyze telemetry gathered in response to a request from the meta application portion in order to detect features of the logic rules and send those features back to the meta application portion . In other words agents can include feature detectors or similar functionality.

The remedy agent can be configured to execute remedial actions on the server on which it is installed. The meta application agent can receive remedial actions from the cloud based meta application portion. Although not shown in the mobile device management system can include a remedy agent and so can the secure mobile gateway . Such remedy agents can allow the meta application to execute remedial actions against the mobile device management system and the secure mobile gateway . It will be appreciated that the enterprise agents of the mobile devices can also be configured to execute remedial actions on the devices . In other words agents can include remedy agents or similar functionality.

Referring still to the illustrated cloud based meta application portion includes a telemetry monitor the enterprise model logic rules repository inference engine repository of detected problems and or root causes user interface notification manager and remedy workflow module . It will be understood that the cloud based meta application portion need not include all of these components and can also include additional components not shown in .

The telemetry monitor can manage communications between the cloud based meta application portion and the meta application agents as well as any other components that provide data that the cloud based meta application portion can use to evaluate the logic rules such as the enterprise agents of the mobile devices the mobile device management system and the secure mobile gateway . Hence the telemetry monitor can receive features detected by the feature detectors and can provide the features to the inference engine . The telemetry monitor can be configured to prioritize incoming features and other data so that more important or urgent information is passed on to other components of the meta application before less important or less urgent information.

The inference engine can be configured to access the repository of logic rules and evaluate whether individual rules are satisfied by features of the deployment wherein each satisfied rule corresponds to the detection of at least one problem. A logic rule can include queries for information such as a telemetry query or an enterprise model query. The inference engine can be configured to process these queries of the logic rules by querying the enterprise model or relevant ones of the meta application agents for the needed information e.g. features of the rule . The inference engine can also be configured to perform root cause analysis to detect root causes of problematic behavior of the enterprise system . A root cause can be an object of the enterprise model which represents a component of the enterprise system . The inference engine can be configured to employ rule evaluation methods and root cause analysis methods as taught in the 536 Qureshi patent refer to discussions of Problem Logic and root cause analysis respectively . The inference engine can further be configured to log detected problems and root causes in a repository .

The user interface can allow administrators to interact with the cloud based meta application portion. The illustrated user interface comprises a web server interface to facilitate access over the Internet. The user interface can also include a server terminal interface as well.

The notification manager can be configured to send notifications to administrators about information detected or computed by the meta application such as problems and root causes. Notifications can comprise for example emails voice messages SMS text messages and the like. Preferably the notification manager allows an IT administrator to set and adjust the criteria under which the notification manager sends notifications.

The remedy workflow module can be configured to select remedial actions for attempting to solve or counter problems or root causes detected by the inference engine . The remedial actions can be stored in the repository of logic rules . A remedial action can be stored in association with one or more of the logic rules . The remedy workflow module can be configured to determine an optimal sequence of execution of remedial actions associated with the detected problems or root causes. The remedial actions can be abstract or generalized for many different types of managed computer systems . In that case the remedy workflow module can be configured to customize the remedial actions into plans that are tailored for the specific enterprise system and mobile devices managed by the meta application. The remedy workflow module can be configured to send the customized plans and or other instructions to the remedy agents of the meta application agents to similar remedy agents of the mobile device management system and secure mobile gateway or to the enterprise agents installed on the mobile devices . These remedy enterprise agents can be configured to execute the plans and or other instructions on such systems and devices. A plan can require human e.g. an IT administrator confirmation of plan steps at stages of the plan. A plan can also be designed to be executed by the remedy agent without human intervention or approval.

The meta application of can include all of the components illustrated in including the components residing within the cloud and all of such components can reside within the enterprise system .

Meta application components installed on the mobile devices e.g. within the enterprise agents or separately can be configured to collect state metric data from the devices and send the data back to the cloud based meta application portion and or the enterprise system . Such data can be collected regularly e.g. periodically or upon specific request by the cloud based or enterprise system based meta application portions. Such data can be analyzed e.g. by the inference engine using the logic rules to diagnose problems involving the devices and to select remedial actions for addressing such problems. Such analysis can be conducted even if there is no currently available connection to the device .

Persons of ordinary skill in the art will understand that the meta application can be configured to enforce and implement a wide variety of different types of logic rules and remedial actions involving the mobile devices . For example a logic rule can define a problem as the downloading of more than a particular threshold amount of data to a mobile device . The enterprise backend portion of the meta application can detect the throughput of data downloaded to a user s device and determine if it exceeds the threshold defined in the rule . A remedial action associated with the rule can require the disabling of the mobile device or perhaps merely the disabling of the device s ability to download data. Such remedial actions may involve the meta application sending to the device s enterprise agent a command or script configured to enforce the remedy. Alternatively the remedial action can require the revocation of the mobile device s certificate by the mobile device management system . Still further the rule can revoke the device s permission to use application tunnels for communicating with enterprise resources or other network resources.

In another example the meta application can be configured to create gateway rules based at least partly on the time s at which a mobile device was wiped e.g. deletion of some or all data stored on the device or removal of software application s from the device .

In an embodiment in which the meta application is configured to manage Microsoft Exchange the meta application can have full visibility into the ActiveSync partnership data for the mobile devices associated with the enterprise. The meta application can use the ActiveSync partnership data to generate gateway rules that filter mobile device access requests based on such data. For example the ActiveSync partnership data includes the ActiveSync DeviceID s of the mobile devices . The meta application can use this information to generate gateway rules that filter access requests based on the known DeviceID s.

In certain embodiments an enterprise may wish to regulate the settings applications uses other activities or any combination thereof associated with the mobile devices used by the enterprise s users . This can safeguard against threats to the security of enterprise data and resources and or to address productivity risks the risk of users using their mobile devices in ways that can negatively affect user productivity in meeting the user s duties toward the enterprise. Such embodiments are now described.

With continued reference to the illustrated mobile device management system includes a computer readable storage repository storing a plurality of different mobile device rules . The storage repository can be implemented on any suitable non transitory computer readable medium. A mobile device rule can be an encoded computer readable rule configured to be used by a mobile device e.g. by an enterprise agent installed on the mobile device to detect a problem indicative of a security risk and or a productivity risk to which the device can expose the enterprise. Numerous examples or use cases of problems that can be detected using the mobile device rules are described below.

The mobile device rules can be relatively simple taking the form of for example IF THEN statements and or simple declarative logic rules. In other embodiments the mobile device rules can be much more complex such as the logic rules described in Qureshi 536 which describes logic rules that are configured to be used to generate virtual circuits that have atomic gates and downstream operator gates. The mobile device rules can include metadata for calculating various parameters associated with the rules and related problems such as a confidence value indicative of a confidence in the detection of the problem associated with a mobile device rule for example as taught by Qureshi 536.

In certain embodiments a mobile device rule maps one or more mobile device state metric data values to one of a plurality of the aforementioned problems indicative of security risks and or productivity risks to which the devices can expose the enterprise. A state metric can be any data item indicative of a mobile device state such as error log entries records of activations of device features operating system version installed software applications including applications that the enterprise may have blacklisted as not being authorized for installation whether the mobile device is roaming a battery level of the mobile device a signal strength of a signal received by of the mobile device available memory of the mobile device etc. For example a state metric can be a metric that indicates whether a mobile device feature e.g. a camera web browser password protection etc. has been activated. Another example of a state metric is an indicator of whether the mobile device s SIM card is properly engaged with the mobile device . Other examples of state metrics will be apparent from the examples of mobile device rule applications provided below.

With continued reference to the repository can include a plurality of encoded computer readable remedial actions for countering the problems. In some embodiments each of the remedial actions corresponds to one or more of the problems associated with the mobile device rules . Examples of remedial actions are provided below. In some embodiments the mobile device management system or another component of the enterprise system can include tools that assist IT personnel in the creation and or editing of mobile device rules and or remedial actions . Such tools can comprise e.g. a customized word processor or other software application with extensions tutorials and the like to help construct the rules and or actions .

In certain embodiments the mobile device rules and their associated remedial actions are organized into separate rule packages each rule package including one or more of the rules and preferably the rules associated remedial actions . Each rule package can be designed or customized for users with specific types of user roles and or mobile device properties . Accordingly each rule package can be associated with one or more of the user roles and or with one or more of the mobile device properties . For example a rule package of mobile device rules and associated remedial actions can be prepared for all users having roles that that are sales oriented e.g. all sales people of the enterprise . As another example one rule package can be prepared for people using iPhones and another rule package can be prepared for people using Android devices. If it is desired to differentiate the permissible activities associated with mobile device users having a given role based on differences in their mobile device properties then different rule packages of mobile device rules and associated remedial actions can be formed for the different types of mobile devices . For example an enterprise can form one rule package of mobile device rules and remedial actions for sales people using iPhones another rule package of mobile device rules and remedial actions for sales people using Android devices and so on. In this manner rule packages can be customized as desired for different user roles and or mobile device properties .

It will be appreciated that different mobile device rule packages can share common mobile device rules and or remedial actions . For example suppose that a first mobile device rule and an associated remedial action is suitable for sales people and corporate board members and a second mobile device rule and associated remedial action is only suitable for sales people. A rule package for users that are sales people can include the first and second mobile device rules and their remedial actions while a mobile device rule package for users that are board members of the corporate enterprise may include the first mobile device rule and remedial action but not the second mobile device rule and remedial action. Many other examples are possible and are in accordance with the principles and advantages described herein.

The mobile device manager is preferably responsible for sending appropriate rule packages to the mobile devices based on e.g. the properties of the mobile devices and or the roles of the users assigned to the mobile devices. In certain embodiments a deployment rule is associated with each rule package or individual mobile device rule and associated remedial actions . The mobile device manager can be configured to use the deployment rule to determine which mobile devices to send the rule package or individual mobile device rule and associated remedial actions . A deployment rule can cause the mobile device manager to access the mobile device information to identify the mobile devices whose assigned users have a role associated with a given one of the rule packages or rules and or the mobile devices whose properties are associated with the given rule package or rule. Further the mobile device manager can be configured to send the given rule package including mobile device rules and or remedial actions to the identified mobile devices . In this manner the mobile device manager can send the appropriate mobile device rule package s to each mobile device .

For example suppose that a new mobile device user e.g. a new employee joins the enterprise. The new user s role information and or mobile device properties can be entered by administrators and or by a computer automated process into the enterprise s mobile device information . In one embodiment the user s role information is entered into an RBAC system of the enterprise and a software module such as the mobile device manager transfers the role information to the mobile device information . In another embodiment the user role information of the mobile device information is an RBAC role repository that directly supports an RBAC system. The mobile device manager can be configured to use the new user s role information and or mobile device properties to determine an appropriate mobile device rule package to send to the new user s mobile device . In another embodiment the mobile device information does not come from or support an RBAC system.

In another example suppose that an enterprise modifies its policies regarding a particular group of mobile device users . IT personnel can modify a mobile device rule package customized for the particular user group. This can include creating new mobile device rules for the rule package deleting rules from the rule package and or modifying some of the rules of the rule package. Alternatively or additionally modifying the mobile device rules package can include creating deleting and or modifying remedial actions of the rules package. The mobile device manager can send the updated mobile device rule package to each of the mobile devices of the users of that particular group.

In many cases the updated mobile device rule package may be fairly similar to older mobile device rule packages that have already been sent to the users mobile devices . In such cases the mobile device manager can be configured to send only the new and or modified mobile device rules and or remedial actions to each mobile device along with instructions for deletion of those rules and or actions that have been deleted from the rule package such instructions being carried out by the enterprise agent of each mobile device . In this manner the mobile device manager can be configured to send mobile device rule package updates to the mobile devices .

In certain embodiments the enterprise agent is configured to implement and or execute the mobile device rules on the mobile device . Accordingly the enterprise agent is preferably configured to receive e.g. via the network interface mobile device rules and or remedial actions from the mobile device management system associated with the enterprise and store the received rules and or remedial actions in a computer readable storage of the mobile device such as the hard drive or a memory card inserted into the memory card port . The enterprise agent can be configured to receive and store the aforementioned mobile device rule packages and rule package updates from the mobile device management system and store them on the hard drive or memory card. In the illustrated embodiment the hard drive stores a plurality of mobile device rules and remedial actions . In some embodiments the enterprise agent is configured to separately store the mobile device rules and remedial actions of the rule packages and or rule package updates. In other embodiments the mobile device rules and their corresponding remedial actions are stored together in association with one another. In some embodiments a mobile device can receive mobile device rules and or remedial actions from sources other than the mobile device management system .

With continued reference to in step the enterprise agent detects one or more problems defined by the mobile device rules . The enterprise agent is preferably configured to programmatically detect instances of the problems at least in part by using the mobile device rules to analyze the received state metric data values. In certain embodiments the received state metric data can be analyzed in combination with other data values e.g. user properties time of day date etc. . Further the enterprise agent can be configured to respond to a detected instance of one of the problems by executing in step one of the remedial actions on the mobile device in which the executed remedial action corresponds to the problem detected in step . In some cases there may be multiple remedial actions corresponding to a particular problem and the enterprise agent may be configured to select among the available remedial actions based on various factors such as likelihood of successfully countering the problem e.g. based on past results of running remedial actions computing costs associated with executing the remedial actions user preferences enterprise preferences and the like. In certain instances the enterprise agent can execute two or more remedial actions in response to detecting a particular problem.

Some remedial actions can comprise producing an alert such as a message delivered to the user of the mobile device . The message can include text images audio and or video. The enterprise agent can be configured to produce the message and convey the message to the user via the user interface such as displaying the message on the screen and or playing an audible message using the speaker . The message can comprise information about a detected problem and or instructions to the user to execute an action on the mobile device such as activating or deactivating a feature of the device . The message can be statically defined in the remedial action . Alternatively the message can be defined using variables that can be bound to actual data values when evaluating a mobile device rule e.g. by the resolution of queries for example as taught in Qureshi 536. This can allow the enterprise agent to customize the message to the specific circumstances of the device . Further any remedial action instructing the agent to produce such a message can further include instructions for actions to be conducted by the enterprise agent if the user or other person handling the mobile device does not execute the action instructed by the message. For example the remedial action can cause the enterprise agent to conduct the action if the user does not execute the instructed action within a time period defined in the remedial action.

An enterprise can vary the punitiveness of the remedial action to be applied for a detected problem or violation of a mobile device rule based on properties of the mobile device and or its user . For instance it may be desirable to vary the remedy based on the role of the user . In one example an enterprise may wish to apply less stringent remedial actions for higher level executives of an enterprise.

As noted above some remedial actions can comprise an action other than generating and conveying a message to the user executed by the enterprise agent on the mobile device . In certain embodiments the remedial actions can comprise actions that the mobile device is already designed to conduct such as activating or deactivating certain mobile device features adjusting device settings and the like. In such cases the enterprise agent can be configured to use the mobile device s API s to conduct such remedial actions .

In some embodiments the enterprise agent includes a scripting engine and at least one of the remedial actions comprises a script that the scripting engine is configured to execute on the mobile device . The scripts can be written in a scripting language associated with the mobile device which can be a command set targeted at controlling the device hardware software and or operating system. The scripting engine can be configured to interpret a script and or to convert the script to a bytecode or other form that can be interpreted relatively quickly. In some cases the mobile device management system or another component of the enterprise system can include one or more script creation tools or applications that assist IT personnel in the creation of the scripts.

From the various use cases described below it will be appreciated that it is possible to provide many different types of mobile device rules that cause the enterprise agent to detect and guard against various types of problematic events associated with the mobile device . It is also possible to provide many different types of corresponding remedial actions that cause the agent to react to such problematic events by conducting various types of actions such as restricting network communications enforcing password protections sending reports back to the enterprise system e.g. reports of data content stored on the mobile device data usage on the device applications running on the mobile device and many other types of information deleting data from the device uninstalling applications from the mobile device and many other actions.

The use of mobile device rules remedial actions and or scripts to be run by the scripting engine can be leveraged to conduct compliance audits of mobile devices . In certain embodiments an enterprise system can be configured to cause the enterprise agents of all or just some of the mobile devices enrolled with the mobile device manager to run one or more mobile device rules at the request of the enterprise.

For example suppose that the enterprise learns of a new computer virus to which the enterprise s mobile devices may be particularly vulnerable. In such a case the enterprise s IT personnel can cause the mobile device manager to send instructions to the enterprise agents for example to run a particular mobile device rule that scans for the new virus or simply determines whether the mobile device is using the latest antivirus software updates.

In some cases the enterprise s IT personnel can cause the mobile device manager to send one or more special mobile device rules to the mobile devices . In certain instances the special mobile device rules can be sent with instructions for the enterprise agents to immediately determine whether the mobile devices comply with these rules. Also the special mobile device rules can be sent with associated remedial actions and it will be understood that different types of these special mobile device rules and remedial actions can be sent to different types of mobile devices . The mobile device manager can send a special mobile device rule to all of the mobile devices whose assigned users have particular roles . These special mobile device rules may or may not be the same as the mobile device rules and remedial actions provided within the customized rule packages described above.

Upon receipt of such a special mobile device rule and possibly a special remedial action or upon receipt of instructions to run a mobile device rule already stored on the mobile device a mobile device s enterprise agent can be configured to immediately determine whether the mobile device is in compliance with the rule . If the mobile device is not in compliance the enterprise agent can be configured to simply implement the special remedial action .

Alternatively or additionally the agent can be configured to send a compliance report to the mobile device manager detailing the results of running the special mobile device rule e.g. a report detailing compliance or non compliance with the rule and or a degree of compliance . The mobile device manager can be configured to use these reports for various purposes. For example the mobile device manager can respond to the reports by sending only to those mobile devices that are not in compliance with the executed mobile device rule s 1 instructions for the agent to run one or more additional mobile device rules and if the mobile device is not in compliance with the additional mobile device rules one or more additional remedial actions or 2 additional special mobile device rules and or special remedial actions . These additional mobile device rules can check for other forms of non compliance based on the assumption that a mobile device that does not comply with one mobile device rule is more likely to be out of compliance with other mobile device rules .

There are numerous possible use cases for which an enterprise may wish to use a mobile device rule and an associated remedial action on a mobile device . Examples of such use cases are now described. It will be understood that the following examples are not exhaustive and that many different types of mobile device rules and associated remedial actions can be used for many different purposes. Further skilled artisans will understand that a remedial action described below for a particular use case can be alternatively be executed for any other mobile device rules problems or use cases as may be desired by the enterprise. Some of the use cases described below contain one or more sub cases also described below. Finally some of these use cases overlap in certain ways.

One possible use case involves a situation in which a mobile device is lost or stolen from its assigned user . A mobile device rule can define conditions for concluding that the device is lost or stolen. The mobile device rule can specify that a mobile device is lost or stolen for example when a different SIM card is installed when a certain period of time elapses without a user login or when the mobile device is reported as lost or stolen. An associated remedial action can cause the enterprise agent to remove data and or software applications from the mobile device such as enterprise related applications all applications enterprise related data or all data. An alternative remedial action can cause the agent to lock the device to render it unusable. These remedies are useful because the mobile device may contain valuable and or confidential enterprise related data that is desired to be kept from persons not associated with the enterprise. In some implementations then the enterprise system can issue a command to the device to delete the data and or destroy an encryption key used to decrypt the data. This command can be sent by the mobile device management system to the mobile device over a wireless carrier network .

This use case relates to Use Case 1. A thief can prevent a wireless command sent from the enterprise system from reaching the mobile device by removing the device s SIM card or depending on the mobile device a similar or equivalent card that securely stores e.g. the service subscriber key IMSI used to identify a subscriber on the mobile device from the SIM card port which can effectively disable the connectivity of the mobile device to the carrier network . In such an instance the enterprise may be prevented from deleting the data from the device and the thief may be able to access the data. This problem can be addressed by providing a mobile device rule that the enterprise agent uses to detect the disengagement of the SIM card from the SIM card port of the device . In this use case the agent can execute a remedial action that comprises producing a message delivered via the user interface the message instructing the person using the device e.g. the user or a thief to reengage the SIM card with the SIM card port . For example the message can instruct the person to reengage the SIM card with the SIM card port within a specified time period e.g. five minutes or all of the data on the mobile device or just the enterprise related data will be deleted. In that case the agent can be further configured to delete the data if the SIM card is not reengaged within the specified time period. Alternatively or additionally an encryption key used to decrypt the enterprise data can be invalidated or deleted as a remedial action associated with problems related to the SIM card disengagement.

The enterprise agent can use a mobile device rule to detect a problem defined as the disablement of password protection for the mobile device . A corresponding remedial action can cause the agent to produce a message on the user interface the message instructing the user to activate password protection on the device perhaps within a specified time period. The remedial action can further include instructions for the agent in the event that password protection is not activated such as disabling the mobile device deleting enterprise related data from the device decommissioning the device e.g. revoking its certificate and or terminating its enrollment with the mobile device manager and the like. It will be understood that deleting data from the mobile device in the context of this use case or any other can include permanently deleting the data or alternatively merely deleting pointers to the data or deleting and or invalidating data decryption keys. In a related example a mobile device rule can require the user to change the password periodically such as every 90 days.

The enterprise agent can use a mobile device rule to detect a problem defined as the mobile device being located outside of an authorized geographical zone or the device being located within an unauthorized geographical zone. A geographical zone can be specified in a variety of different ways such as by inputting a location e.g. on a map or longitude latitude values a shape and size of the geographical zone and a positional relationship between the inputted location and the shape of the zone. For example a circular zone centered about the inputted location can be defined by specifying a radius of the geographic circle. A mobile device rule can also include time ranges hours days etc. within which the restriction applies. The agent can detect the location of the device using the GPS chip .

A corresponding remedial action can cause the agent to produce a message delivered via the user interface the message instructing the user to return the device to the authorized geographical zone or leave the unauthorized zone for example within a specified time period. The remedial action can further include instructions for the agent in the event that the device is moved as instructed such as disabling the mobile device disabling features or software applications e.g. the camera Bluetooth connectivity Wi Fi connectivity etc. of the device deleting enterprise related data from the device and the like. A remedial action can simply send a communication e.g. SMS text email to appropriate authorities of the enterprise alerting them to the mobile device s location.

As described above in Use Case 4 mobile device rules can effectively lead to activation or deactivation of mobile device features based on a location of the mobile device e.g. as determined by using the GPS chip and or temporal data. The mobile device feature in question can be the user interface keyboard touchscreen etc. network interface camera microphone USB connection etc.

Take for example the camera . The enterprise agent can use a mobile device rule to detect a problem defined as the mobile device being located within premises of the enterprise with the camera being available for use. An enterprise may wish to prevent use of the camera while the mobile device is within the enterprise premises to prevent the camera from capturing any sensitive or confidential information images or video from within the premises. As used herein enterprise premises can include any buildings facilities factories campuses design houses or other structures or areas owned used or operated by the enterprise. In one embodiment a remedial action corresponding to this problem can cause the agent to deactivate or disable the camera without the user s consent. In another embodiment a remedial action corresponding to this problem can cause the agent to produce a message delivered via the user interface the message instructing the user to deactivate or disable the camera perhaps within a specified time period. The remedial action can further include instructions for the agent in the event that the user does not deactivate or disable the camera such as deactivating or disabling the camera without the user s consent. Preferably after the remedial action has been executed and the camera has been disabled the agent is configured to detect when the mobile device has left the enterprise premises. At that point the agent can be configured to either reactivate the camera without the user s consent or produce a message delivered via the user interface informing the user that the user is authorized to reactivate the camera .

Related to Use Case 5 another example of a mobile device feature that can be regulated based on mobile device location is a software application such as the device s web browser. For example the enterprise agent can use a mobile device rule to detect a problem defined as the mobile device being located within premises of the enterprise with the device s web browser being available for use. Corresponding remedial actions can cause the agent to instruct the user to disable the web browser by producing a message on the user interface or to simply disable the web browser without the user s consent. Then when the mobile device subsequently leaves the enterprise premises the agent can be configured to detect this and either inform the user that the web browser can be used or simply re enable the web browser without the user s knowledge or consent. It will be appreciated that other software applications aside from the web browser can be regulated similarly.

Related to Use Cases 4 and 5 upon detecting that the mobile device has entered a defined geographical area e.g. the enterprise premises the enterprise agent can be configured to execute a remedial action that causes the agent to require the user to enter a password into the device in order to use certain device features such as the camera and or web browser. Such a remedial action may be more appropriate for users whose roles require the users to have access to such features within the geographical area. Once the mobile device leaves the defined area the agent can be configured to no longer require the password for the user to use such mobile device features.

A mobile device rule can cause the enterprise agent to disable certain mobile device features e.g. camera microphone based on temporal information possibly without considering geographical data such as the time of the day the day of the week a date range of the calendar etc.

The mobile device can comprise a credit card scanner for use within a store or other retail establishment. When an agent of the scanner detects that the scanner has physically left the store the agent can execute a remedial action that instructs a user of the scanner to return the scanner to the store perhaps within a specified time period. The remedial action can further include instructions to delete scanned credit card data from the scanner if the scanner is not returned to the store.

Another mobile device feature that can be regulated is the device s network connection capability such as the network interface . The enterprise agent can use a mobile device rule to detect a problem defined as the mobile device s use of the network connection capability to connect or attempt to connect to a communication network that is unsecured or blacklisted by the enterprise e.g. a false base Wi Fi station . For example the user may attempt to connect to an unsecured Wi Fi network or blacklisted cellular service towers which may expose the mobile device to a security threat. A remedial action can prevent the device from accessing the restricted network s .

In another embodiment a remedial action corresponding to this problem can cause the agent to terminate or prevent the mobile device s connection to the unsecured network without the user s consent. In another embodiment the remedial action can cause the agent to deactivate the mobile device s network connection capability e.g. by shutting down the network interface without the user s consent. Such an action may leave one type of network communication capability e.g. cellular networks such as 3G or 4G networks available while only terminating a network communication capability e.g. Wi Fi associated with the connection to the unsecured network. In another embodiment the remedial action can cause the agent to produce an audio alert to the user or a message delivered via the user interface the message instructing the user of the device to terminate the connection to the unsecured network perhaps within a specified time period. In yet another embodiment the remedial action can cause the agent to produce a message delivered via the user interface the message instructing the user of the device to deactivate the device s network connection capability perhaps within a specified time period. In embodiments in which the agent produces a message delivered via the user interface the remedial action can further include instructions for the agent in the event that the user does not terminate the connection or deactivate the network connection capability such as taking one of such actions without the user s consent. In still other embodiments a remedial action can cause the agent to lock the mobile device to render it unusable perhaps until the device disconnects from the unsecured or blacklisted communication network.

An enterprise may wish to regulate which software applications are authorized for installation on a mobile device . For example certain types of software applications can negatively impact a user s productivity e.g. by distracting the user from his or her duties while other applications can introduce a security threat e.g. file sharing applications that may allow other devices to copy enterprise data stored on the mobile device or a rogue application that has malware or has been determined to collect device data and send the data to a rogue server . The enterprise agent can use a mobile device rule to detect a problem defined as the mobile device having installed a software application that the enterprise has blacklisted i.e. forbidden for installation or at least not white listed expressly permitted for installation . The agent can be configured to use device specific API s to determine which applications are installed on the mobile device .

Since different mobile device platforms vary as to the ability of an enterprise system to uninstall the unauthorized application without the user s consent several different remedial actions are possible. In one embodiment a corresponding remedial action can cause the agent to producing a message on the user interface the message instructing the user to uninstall the unauthorized software application from the mobile device perhaps within a specified time period. The remedial action can further include instructions for the agent in the event that the user does not uninstall the unauthorized application such as disabling the mobile device uninstalling the unauthorized application e.g. by causing the scripting engine to run a script or plan that uninstalls the application preventing the unauthorized application from starting or running e.g. by causing the scripting engine to run a script that terminates one or more processes associated with the unauthorized application deleting enterprise related data from the device which can also be achieved by the scripting engine running an appropriate script sending an alert message SMS text email etc. to enterprise authorities about the installation of the blacklisted software application and the like. In another embodiment a corresponding remedial action can cause the agent to uninstall the unauthorized application from the mobile device without the user s consent. For mobile device platforms that do not permit an enterprise system to uninstall software applications from a mobile device without the user s consent the enterprise may opt to cause the agent to use the scripting engine to run a script that terminates one or more processes associated with the unauthorized application thereby preventing it from running on the mobile device.

An enterprise can vary the punitiveness of the remedial action based on the role of the user assigned to the mobile device that is running an unauthorized software application . For example consider a corporate enterprise having some users with roles corresponding to high level executives other users having roles corresponding to mid level managers and other users having roles that correspond to lower level employees. For a high level executive whose mobile device has an unauthorized application the agent can implement a remedial action that simply instructs the user to uninstall the application . For a mid level manager whose mobile device has an unauthorized application the agent can implement a remedial action that causes the scripting engine to terminate one or more processes associated with the unauthorized application thereby preventing it from running on the mobile device . Moreover the agent might run such a script only under certain conditions e.g. when the mobile device is on enterprise premises during normal working hours . Finally for a lower level employee whose mobile device has an unauthorized application the agent can implement a remedial action that uninstalls the application without the user s consent. Skilled artisans will appreciate that an enterprise can vary its remedial actions in many different ways based on different sets of criteria and that this is just one example.

The enterprise may allow certain software applications to be installed on a mobile device but only under certain conditions such as conditions relating to user roles and or mobile device properties . An enterprise may allow users with particular roles to install such applications on their devices while disallowing other users from doing so. An enterprise may allow mobile devices having certain device types to install particular software applications while disallowing the same for different device types. Prohibitions on the installation of particular software applications on the mobile devices can be regulated in a very flexible and customizable way by defining appropriate mobile device rules .

Related to Use Case 11 a mobile device rule can define a problem as an attempt to run as opposed to install a software application in violation of defined restrictions. Such restrictions can be temporal the application is allowed to run only during certain times and or days geographical the application is allowed to run only when the mobile device is in one or more defined geographical zones password dependent the application is allowed to run only if the user provides a correct password associated with the application other types of restrictions or conditions or combinations thereof.

In one embodiment the rule includes a list of restricted or blacklisted applications and possibly even a list of unrestricted or white listed applications . The enterprise agent can use an application monitor service which can be part of the agent itself or alternatively another part of the mobile device as shown to detect which applications or processes are running. For example the Android operating system provides a mechanism for collecting and viewing system output whereby logs from various applications and portions of the system are collected in a series of circular buffers which then can be viewed and filtered by the logcat command. The logcat command can be used from an ADB Android Debug Bridge shell to read the log messages. Alternatively Android s Dalvik Debug Monitor Server DDMS can automatically report logcat information via connection to ADB. Hence in a mobile device running the Android operating system the enterprise agent can be configured to listen to certain logcat information and detect the invocation of mobile device applications of interest. It will be appreciated that other mobile device operating systems provide alternative systems and methods for detecting the invocation of mobile device applications.

When the agent determines that an application is invoked the agent determines if the application is blacklisted or white listed . If the application is white listed or at least not blacklisted the agent allows the application to run. If the application is blacklisted or perhaps more strictly not white listed the agent can use the rule to determine the defined restriction s for the application and whether the restrictions apply. For example if a restriction is temporal the agent can determine if allowing the application to run currently would violate the temporal restriction. If a restriction is geographical the agent can determine if the device is in a restricted geographical zone. If a restriction is password dependent the agent can invoke a password input activity which can be part of a remedial action that prompts the user for a password associated with the application . If any of the restrictions is violated e.g. unauthorized time or day device outside of authorized geographical zone incorrect password provided other restrictions combinations of these restrictions etc. as defined by the rule then the agent can prevent the application from running by e.g. using the scripting engine to run a script that kills the application.

In certain embodiments the agent is configured to terminate a running application if the use restriction is violated after the application was invoked. In other words if the use conditions are met at the invocation of the application but then subsequently violated during the use of the application the agent can be configured to kill the application . For example suppose that the applicable mobile device rule allows for an application to be used only during a defined time window and that the application is invoked during the allowed time window but then remains in use at the expiration of the time window. In this case the rule may direct the agent to terminate the application . In another example suppose that the mobile device rule allows for an application to be used only when the mobile device is in a defined geographical zone and that the application is invoked when this condition is met. Suppose further that the user takes the device outside of the defined geographical zone during the use of the application . In this case the rule may direct the agent to terminate the application as soon as the device leaves the defined geographical zone.

A mobile device rule can also define a problem as the removal of a required software application from the mobile device . A user might accidentally or intentionally uninstall the application. An associated remedial action can cause the enterprise agent to notify the user of the removal of the application and that its reinstallation is required.

Related to Use Case 13 a mobile device rule can also be used by the enterprise agent to detect when a required software application is installed but not running on the mobile device . An associated remedial action can cause the enterprise agent to notify the user and instruct the user to run the required application.

The enterprise agent can use a mobile device rule to detect a problem defined as the mobile device storing enterprise related data for which the device is not authorized to store. In one embodiment a corresponding remedial action can cause the agent to produce a message on the user interface the message instructing the user to delete the unauthorized enterprise related data from the mobile device perhaps within a specified time period. The remedial action can further include instructions for the agent in the event that the user does not delete the data such as deleting the data from the device without the user s consent disabling the device and the like. In another embodiment a corresponding remedial action can cause the agent to delete the enterprise related data from the mobile device without the user s consent.

A mobile device rule can be used by an enterprise agent to detect when the mobile device is in a roaming network and an associated remedial action can cause the agent to alert the user of the same. A remedial action can also cause the agent to connect the device to available Wi Fi networks while the device is roaming.

A remedial action can cause the agent to begin recording the mobile device s location for a certain time period such as when the device is roaming. The agent can report this information back to the enterprise system .

A mobile device rule can cause the enterprise agent to activate or make applicable new mobile device rules if a mobile device goes a certain time period e.g. a few hours or days without connecting to the enterprise system .

A mobile device rule can cause the enterprise agent to toggle the mobile device from its airplane mode if a Wi Fi or other network becomes available to the device.

If the mobile device uses a VPN a mobile device rule can cause the enterprise agent to disable connectivity to networking hotspots.

Related to Use Case 11 a mobile device rule can cause the enterprise agent to detect when a user or mobile device attempts to use a software application e.g. Facebook Dropbox Gmail Hotmail etc. to send enterprise data that is sensitive or confidential. An associated remedial action can cause the agent to kill the software application uninstall it or other action preventing the data transfer.

Related to Use Case 21 a mobile device rule can cause the enterprise agent to detect when a user or mobile device is connected to an enterprise resource and accessing sensitive or confidential data. In certain circumstances a remedial action can cause the agent to prevent the device from downloading copying and or sending the data to anyone else.

A mobile device rule can cause the enterprise agent to detect when the number of SMS messages in a mobile device inbox exceeds a defined amount and an associated remedial action can cause the agent to alert an IT administrator of the same.

A mobile device rule can cause the enterprise agent to monitor the mobile device s message inbox and detect inbound SMS messages from blacklisted telephone numbers or messages that include enterprise information that is confidential or sensitive. An associated remedial action can cause the agent to alert an IT administrator of the same disable the device delete the sensitive messages disable the device s messaging capability and the like.

Related to Use Case 24 a mobile device rule can cause the enterprise agent to monitor the mobile device s outbound message queue and detect outbound SMS messages to blacklisted telephone numbers or messages that include enterprise information that is confidential or sensitive. An associated remedial action can cause the agent to alert an IT administrator of the same disable the device delete the sensitive messages disable the device s messaging capability and the like.

A mobile device rule can be used by the enterprise agent to detect when a new or unauthorized SIM card is inserted into the mobile device . A remedial action can cause the agent to send a communication to enterprise authorities of the new SIM card instruct the user to remove the SIM card etc.

A mobile device rule can be used by the enterprise agent to detect a pattern or signature of suspicious behavior by a user of a mobile device . For example the rule can define a problem involving some logical combination of user behaviors such as frequenting of blacklisted or suspicious websites use of blacklisted or suspicious IP addresses and or the installation or running of blacklisted mobile device applications. If the agent determines that the behaviors of a user have violated the rule the agent can enforce a remedial action such as preventing the user from logging into the enterprise system deleting all enterprise data from the device etc.

Some mobile device operating systems do not permit an application such as the enterprise agent to see what other applications on the device are doing. This is sometimes referred to as the sandboxing of applications on the device . Preferably the mobile device s applications whose usage is necessary to implicate the mobile device rule that defines the user s suspicious behavior pattern are programmed to record these behaviors into a secure document container which is described more fully below. By doing so the agent can be configured to read those suspicious behaviors by accessing the container .

The enterprise agent can use a mobile device rule to detect a problem defined as the mobile device s receipt of an unauthorized or suspicious network connection. Generally a mobile device receives much fewer incoming network connections than it generates outgoing connections because users of mobile devices more typically connect outwardly e.g. when users browse web sites search online stores etc. . Hence the incoming network connection may be due to an attempt by a third party to hack into the mobile device for nefarious reasons such as to steal enterprise information disable the device and the like. Of course there are some instances when incoming connections are authorized or benign such as when a mobile device receives email. However email is typically received through a well known port of the device which the agent can be configured to determine. Thus the enterprise agent can be configured to react to the receipt of an incoming network connection by inspecting parameters of the connection e.g. the mobile device port for the connection . If the inspection leads to a determination that the incoming connection is authorized then the agent can be configured to allow the incoming connection. On the other hand if the inspection leads to a determination that the incoming connection is not authorized or is suspicious the agent can be configured to execute a corresponding remedial action that denies prevents or terminates the unauthorized or suspicious network connection. This functionality may be referred to as a mobile firewall. 

In some embodiments the enterprise system is provided substantially or entirely within the cloud . Any needed mobile device management systems secure mobile gateways and enterprise resources are deployed substantially or entirely within the cloud in such cloud based enterprise systems . A meta application system can be deployed within the cloud and or the mobile devices to help manage the devices . Such embodiments may or may not include a non cloud enterprise system or meta application components deployed within a non cloud enterprise system.

For example an enterprise e.g. a social networking enterprise can provide mobile devices e.g. iPads to a group of people with meta application components being deployed within the devices and with meta application components and any needed systems gateways and resources being deployed solely within the cloud . In certain embodiments an enterprise can use policies e.g. access policies stored within the cloud and or the devices to help manage or restrict mobile device communications or access to cloud based enterprise resources. The meta application can also be used to monitor measure remediate the cloud or cloud based services used by the enterprise.

For many carrier networks there are typically some geographical areas in which wireless service is weak or unavailable. This can occur if for example the wireless carrier has relatively few or no cellular communication nodes or towers in such areas. With reference to the network connection between the mobile device and the carrier network is often unreliable particularly when the mobile device is located within such areas with weak or nonexistent wireless service. Accordingly the network connection between the mobile device and the enterprise system is often unreliable.

From the perspective of a mobile device the loss of the network connection can be inconvenient when a user inputs data to be sent to an enterprise resource of the enterprise system . For example a software application may be configured to open a network connection to the mobile device management system or other network component and to request data input from the user typically via the user interface of the mobile device . For instance an application can be configured to provide one or more data fields on the display the data fields configured to receive the user s data as text entry via the keypad . The application can be further configured to send the data to the enterprise resource once the data is input by the user . However if the network connection is lost before the data is sent to the mobile device management system the application might discard the data that the user input. For example the application might discard the data upon receipt of a TCP socket error reporting the lost connection . Or the application may attempt to send the data to the mobile device management system and wait for a reply. Since the connection is lost the application would eventually time out after receiving no reply for a certain time period. In either case the application might discard the data that the user provided without the data being sent to the mobile device management system . Ultimately this makes the user re enter the data once the connection is regained.

A somewhat similar dynamic may occur from the perspective of an enterprise resource and tunneling mediator or other tunneling mediator . In particular the mobile device s network connection can become lost when the tunneling mediator attempts to send data to a mobile device via an application tunnel.

In some embodiments upon the creation of an application tunnel between a software application of a mobile device and an enterprise resource as described above the device s enterprise agent and or the enterprise s tunneling mediator or other tunneling mediator can be configured to enhance communications between the mobile device and the enterprise resource by caching data. For example the agent can cache data on the mobile device and the tunneling mediator can cache data within the mobile device management system .

If the network connection is lost and unavailable then in step the agent can prevent the software application from detecting the loss of the network connection . For example the agent can prevent the application from detecting a TCP socket error caused by the loss of the connection . Then in step the agent caches at least a portion and preferably all of the received data that has not been sent from the mobile device to the tunneling mediator . The data can be cached in any suitable machine readable memory device such as the random access memory the hard drive flash memory or a memory card engaged with the memory card port of the mobile device . Then in decision step the agent determines whether the network connection to the tunneling mediator has been regained. The determination in decision step can involve the agent receiving a notification from a notification service to which the agent has subscribed. If the network connection to the tunneling mediator has not been regained the method can wait for a time period and then return to decision step . Once the network connection is regained the agent sends the cached data to the tunneling mediator via the regained network connection .

In the illustrated embodiment the enterprise agent caches user provided data step only after the agent determines that the connection to the tunneling mediator has been lost step . In other embodiments the agent can be configured to cache user provided data before determining whether the connection to the tunneling mediator is lost or available. For instance the agent can cache the data in response to receiving the data from the user at step . In such embodiments the cached data can be erased after the data has been sent to the tunneling mediator .

It will be appreciated that the software application may conduct a process in which the user inputs data in several successive stages wherein the application attempts to send the received data after each stage. If the network connection is lost before the final data input stage and the application receives additional data after the connection is lost then the enterprise agent can be configured to cache at least a portion and preferably all of the additional data. In that case the agent can respond to a regaining of the network connection by sending the cached additional data to the tunneling mediator via the regained network connection .

As noted above in step the enterprise agent can prevent the software application from detecting the loss of the network connection . From the perspective of the software application the connection is available in such circumstances. As far as the application is concerned it has an IP address and a server port with which to communicate. In this way the application can be given the impression that it is communicating with the enterprise resource when in reality it is either communicating only with the agent when the connection is lost or with the tunneling mediator via the agent when the connection is available . When the connection is lost the agent can give the application the impression that the enterprise resource is still in the process of reading and responding to the request thereby preventing the application from timing out.

The mobile device user s experience can be similar to that of the application . The user s experience is dependent on the application . So if the agent keeps the application unaware of the lost network connection the user may also remain unaware of it. This method can prevent for example the aforementioned problem of the user having to reenter the data into the application when the connection is lost.

In some cases particularly when a mobile device is downloading a large amount of data from the enterprise system it may be useful to respond to a lost network connection by caching data packets within the enterprise system . is a flowchart illustrating an embodiment of a method in which an enterprise computer system caches data to be sent to a mobile device when a network connection to the mobile device is lost. The method is described in the context of an enterprise resource sending data to the mobile device . While the method is described in the context of it could be used in other computing systems such as any of the systems of . The method begins in step wherein an application tunnel is established between a mobile device application and an enterprise resource via the tunneling mediator for example as described above. For instance the application tunnel may be established in response to an access request generated by a software application on the mobile device . In step the tunneling mediator receives one or more data packets from the enterprise resource . In decision step the tunneling mediator determines whether the network connection between the tunneling mediator and the mobile device is available. If the network connection is available then in step the tunneling mediator sends the data packets to the mobile device via the network connection . On the other hand if the network connection is not available then in step the tunneling mediator caches the one or more received data packets in a computer readable storage such as a storage of the mobile device management system . In step the tunneling mediator can be configured to send to the enterprise resource one or more acknowledgements of receipt of the data on behalf of the mobile device if the resource expects such acknowledgement s from the device . After either of steps and the tunneling mediator determines in decision step whether the tunneling mediator is receiving additional data packets from the enterprise resource . If so then the method returns to decision step . If not then the method can end in step .

In the illustrated embodiment the tunneling mediator caches data step only after the mediator determines that the connection to the mobile device has been lost step . In other embodiments the tunneling mediator can be configured to cache the data before determining whether the connection to the mobile device is lost or available. For instance the tunneling mediator can cache the data responsive to receipt of the data from the enterprise resource . In such embodiments the cached data can be erased after the data has been sent to the mobile device .

As noted above during the method illustrated in the enterprise agent on the mobile device preferably gives the software application which may be the intended recipient of the data being sent by the enterprise resource an impression that the network connection has not been lost using the methods described above. Similarly the tunneling mediator e.g. the mediator can be configured to give the enterprise resource an impression that the network connection has not been lost for example in accordance with the method illustrated in .

In some embodiments the tunneling mediator e.g. the mediator and or the enterprise agent is configured to compress data transmitted through the application tunnel. The tunneling mediator can be configured to compress data received from the enterprise resource or another resource outside the enterprise system through the resource network connection and to send the compressed data to the mobile device through the network connection . Upon receipt of the compressed data the enterprise agent can be configured to decompress the data before it is provided to a software application that is the intended recipient of the data. Thus the application need not be capable of decompressing the data.

Similarly the mobile device s enterprise agent can be configured to compress data intercepted or received from a software application and to send the compressed data to the tunneling mediator through the network connection . Upon receipt of the compressed data the tunneling mediator can be configured to decompress the data before it is provided to an enterprise resource or another resource outside the enterprise network that is the intended recipient of the data. Thus the enterprise resource need not be capable of decompressing the data.

This compression functionality can be useful when the mobile device is sending or receiving large data files or when the mobile device is in an area in which the network connection has low bandwidth. In certain embodiments data is compressed by about 20 95 . The extent of the data compression can depend on the data type the available bandwidth of the network connections and as well as other factors. Moreover both the application and the user of the mobile device can remain unaware of the compression and decompression of the data.

In some embodiments an application tunnel can be used by the enterprise system for error correction e.g. parity checks resending of lost data packets etc. The tunneling mediator can be used for load balancing or thread safety synchronization of a thread unsafe server application.

In some embodiments a remote control system and methodology can be provided to allow an enterprise s mobile devices to be diagnosed and controlled by one or more helpdesk operators administrators or other persons collectively referred to herein as controllers at computers controller computers that are remotely located with respect to the mobile devices . Such systems and methods are now described.

With reference to the mobile device management system can be configured to facilitate a remote control session between a mobile device and a controller computer having installed thereon a remote control module . The controller computer is operated by a user referred to herein as a controller and may be located either within or outside of the enterprise computer system . In this context the tunneling mediator can help form an application tunnel between the controller computer and the enterprise agent of the mobile device .

With reference to the remote control module is preferably configured to initiate a network connection e.g. over the Internet to a server associated with the tunneling mediator e.g. a server on which the tunnel definitions are stored or a proxy server . In some embodiments this connection is via an application tunnel such as those described above. It will be appreciated that the enterprise may have multiple mobile device management systems . Hence the remote control module can allow the controller to specify one or more tunneling mediators with which to connect.

A user of a mobile device may encounter technical difficulties with the user s mobile device and may wish to seek help from a helpdesk service. A helpdesk service can be operated exclusively by or for the enterprise or alternatively for multiple enterprises. In some embodiments the user can request a remote control session with a controller computer by contacting the helpdesk service e.g. by a phone call email text message and the like . In such embodiments a controller associated with the helpdesk service can then cause a remote control module of a controller computer to send to the user s mobile device a request for a remote control session between the controller computer and the mobile device . In some embodiments the enterprise agent of a mobile device allows the user to request or initiate a remote control session with the controller computer . In some embodiments a remote control session can be initiated by a controller without first being requested by the user .

In step the remote control module provides for the controller identifications of one or more mobile devices that are available for a remote control session. This may be achieved by the remote control module sending a request to the mobile device management system for such identifications and the mobile device manager responding by looking up the information in the mobile device information and sending the requested information to the controller computer . The provided identifications can comprise e.g. the names or usernames of the users assigned to the mobile devices . The identified devices can be filtered e.g. by the mobile device manager or the remote control module in accordance with any criteria such as criteria specified by the controller to the remote control module . For example the remote control module can list only those mobile devices that are currently connected to the enterprise system or only those mobile devices or users that are members of a defined user group etc. Also the remote control module can be configured to allow the controller to conduct searches against the enrolled mobile devices to e.g. search for a specific device or user . In addition to identifying the users of the mobile devices to the controller the remote control module can also be configured to provide additional information about the identified devices such as device model operating system version platform etc. The mobile device manager can obtain such information from the mobile device information such as the mobile device properties .

Referring still to in step the remote control module receives from the controller a selection of at least one of the mobile devices and or an instruction to initiate a remote control session with the selected device . In step the remote control module sends a request for a remote control session to the selected mobile device . In embodiments in which the remote control sessions are conducted via application tunnels the request can be sent to the tunneling mediator . In other embodiments the request is sent directly to the selected mobile device . In step the controller computer begins to repeatedly receive batches of newly updated user interface emulation data from the mobile device . In an application tunnel context this data flows from the mobile device to the controller computer via the tunneling mediator . User interface emulation data may comprise data that the enterprise agent of the mobile device captures using any of various device display scraping methods also referred to as screen scraping and or screen buffer capture as known generally in the desktop computer field. For example in the desktop computer environment one known protocol for providing a graphical interface to another computer is Remote Desktop Protocol RDP developed by Microsoft .

With continued reference to in step the remote control module uses the user interface emulation data to emulate a current state of the user interface of the mobile device . For example shows an embodiment of a screen display for a controller computer including a virtual user interface that emulates a user interface of a mobile device engaged in a remote control session with the controller computer . Referring again to steps and will ordinarily occur repeatedly and one after the other. Accordingly a batch of user interface emulation data is received step and then used by the remote control module to emulate the mobile device s user interface step and then a new batch of user interface emulation data is received step and then used to emulate the user interface step and so on. In this manner the remote control module keeps updating the emulated user interface to reflect a current state of the user interface .

Preferably the remote control module of the controller computer allows the controller to issue commands to the mobile device . Such commands are referred to herein as remote control commands. Accordingly referring still to the remote control module can receive in step remote control commands from the controller . In some embodiments the controller can provide these commands via the emulated user interface . The remote control commands can be for accessing resources installed on the mobile device . In this context the mobile device resources can include operating system features and functionalities software applications mobile device hardware data resources files and the like. Then in step the remote control module sends the remote control commands to the mobile device . At least some of the remote control commands can be commands that the user could otherwise input directly into the mobile device . The mobile device can react to such remote control commands as if they were received via the user interface of the device . These types of remote control commands will typically cause the user interface of the mobile device to change which in turn will be reflected in a new batch of user interface emulation data received from the mobile device. Accordingly in step the remote control module receives updated user interface emulation data from the mobile device reflecting a state of the device s user interface after the device reacts to at least some of the remote control commands as if they were received via the user interface . Then in step the remote control module uses the updated user interface emulation data to emulate the current state of the user interface of the mobile device .

In certain embodiments the remote control module can allow the controller to view information about the mobile device . The controller s viewing of information can be sequestered from the user interface of the mobile device . Hence in step the remote control module can receive a request from the controller for information about the mobile device . In step the remote control module can send the request for information to the mobile device . The request can essentially automate an API for a mobile device feature that returns requested information e.g. API s for task manager file explorer registry editor etc. . In step the remote control module can receive the requested information from the mobile device preferably without displaying the information within the emulated user interface . In step the remote control module can display the requested information on a display associated with the controller computer preferably in a location other than the emulated user interface . Examples of mobile device information that can be requested in steps and received in step and displayed in step include the mobile device s system information processes occurring on the mobile device files stored on the mobile device the mobile device s registry and other data.

For example the screen display of includes a system information display shown next to the emulated user interface . The system information display can provide some or all of e.g. the mobile device s operating system version platform model hardware serial number CPU type total storage memory capacity storage memory in use storage memory that is free total RAM RAM in use RAM that is free total storage card memory e.g. SD card capacity storage card memory in use storage card memory that is free AC power availability remaining battery power and or device usage time available from remaining battery power. It will be appreciated that additional system information can also be provided.

In another example shows an embodiment of a screen display of a controller computer engaged in a remote control session with a mobile device wherein the screen display includes a task manager display showing application processes occurring on the mobile device . The illustrated task manager display is shown next to the emulated user interface . The task manager display can show some or all of e.g. names of applications associated with the processes amounts of RAM being used by the processes percentages of CPU power being utilized by the processes amounts of CPU time consumed by the processes numbers of threads associated with the processes and the device paths. It will be appreciated that additional information concerning such processes can also be provided. In some embodiments the controller can issue remote control commands to the remote control module associated with the task manager such as terminating one or more processes on the mobile device . For instance such remote control commands can be issued responsive to a selection made via the task manager display .

In another example shows an embodiment of a screen display of a controller computer engaged in a remote control session with a mobile device including an interface for viewing and or editing a registry of the mobile device . The illustrated registry interface is shown next to the emulated user interface .

The method begins in step in which the enterprise agent of the mobile device receives a request from a controller computer to participate in a remote control session with the controller computer. In some embodiments the agent can be configured to automatically accept such requests. In other embodiments the agent is configured to obtain permission from the user to participate in the remote control session e.g. by prompting the user for an indication of permission. In the illustrated method the agent determines in decision step whether to accept the request. If the agent does not accept the request e.g. due to the user denying the request or due to the user simply not giving permission within a predefined time period then the method can end in step .

On the other hand if the enterprise agent accepts the request then the agent responds to the request by requesting or establishing an application tunnel connection with the controller computer and obtaining in step user interface emulation data described above from the mobile device . In step the agent sends the user interface emulation data to the controller computer . The agent can repeatedly send updated user interface emulation data for example at fixed time intervals or perhaps only when changes occur to the mobile device s user interface .

Referring still to in step the agent can receive remote control commands from the controller computer for accessing resources installed on the mobile device . As mentioned above such mobile device resources can include operating system features and functionalities software applications mobile device hardware data resources files and the like. At least some of these remote control commands can be commands that the user could otherwise input directly into the mobile device via the user interface . Hence in step the mobile device reacts to at least some of the remote control commands as if they were received via the user interface . Step can involve the agent translating and or providing the remote control commands to the device s hardware and or software in a native language of the device in the same manner that such hardware and or software would receive the commands if the commands had been received via the mobile device s user interface . Since step can result in changes to the device s user interface the agent can be configured to subsequently send updated user interface emulation data to the controller computer .

In step the enterprise agent of the mobile device receives a request from the controller computer for information about the mobile device. For example such information can include the information described above in steps and of . In step the agent sends the requested information to the controller computer without displaying the information on the user interface of the mobile device .

In conducting a remote control session with a remote control module of a controller computer the enterprise agent of a mobile device can be configured to allow the controller to execute actions on the mobile device . In some cases these can include actions that even the user of the device cannot perform e.g. if the remote control module has functionality beyond that of the software applications installed on the mobile device .

It will be appreciated that the remote control module can be configured to allow the controller to conduct numerous other operations against the mobile device during a remote control session. For example the remote control module can be configured to allow the controller to shut down or reboot the mobile device . In another example the remote control module can be configured to allow the controller to install new software onto the mobile device . This may involve sending software application installation files from the controller computer or another networked computer to the mobile device and then installing the application. In another example the remote control module can be configured to allow the controller to uninstall software applications from the mobile device . Many other operations are possible.

In some embodiments the remote control module of the controller computer and the enterprise agent of the mobile device are configured to enable the controller and the mobile device user to communicate with one another using the controller computer and mobile device . For example the remote control module and the enterprise agent can be configured to enable a voice over internet protocol VoIP session that allows the controller and user to speak to each other audibly. The mobile device can use the speaker of the mobile device to audibly broadcast the controller s speech input via a microphone of the controller computer to the user . Alternatively the user can listen to the controller s speech by connecting a pair of headphones to a headphone jack of the mobile device . Similarly a speaker of the controller computer can broadcast the user s speech input at the microphone of the mobile device to the controller .

In another example the remote control module and the enterprise agent can be configured to enable a text chat session between the controller and the user . shows an embodiment of a screen display of a controller computer engaged in a remote control session with a mobile device including a chat session interface. In the illustrated embodiment the remote control module produces a chat session area in which the controller can enter text communications to be sent to the user and in which the user s text communications are displayed to the controller . The illustrated chat session area is shown next to the emulated user interface . shows an embodiment of the mobile device emulated in . The enterprise agent is preferably configured to display on the screen of the mobile device substantially the same text communications displayed in the chat session area of .

In another example the remote control module and the enterprise agent can be configured to enable shared whiteboard communications between the controller and the user . shows an embodiment of a screen display of a controller computer engaged in a remote control session with a mobile device including a shared whiteboard feature. In the illustrated embodiment the remote control module allows the controller to superimpose images onto the emulated user interface . The agent of the mobile device can be configured to receive the images and then superimpose them onto the screen of the mobile device . The images can comprise for example text drawings and the like. In the illustrated screen display the controller has circled an icon on the emulated user interface and superimposed the words click here. 

In certain embodiments the remote control module is configured to allow the controller to adjust the view of the emulated user interface . For example in various embodiments the remote control module is configured to allow the controller to adjust the emulated interface s resolution color scheme bits per pixel BPP zoom level rotational orientation etc. Further the remote control module can be configured to allow the controller to adjust a refresh rate at which the enterprise agent of the mobile device sends updated user interface emulation data to the controller computer . The remote control module can also be configured to allow the controller to specify whether the data received from the mobile device is to be compressed by the enterprise agent as well specify the degree of compression.

In certain embodiments the remote control module is configured to capture and save aspects of remote control sessions. For example the remote control module can be configured to allow the controller to capture images of the emulated user interface print the images onto a hardcopy printout to record video of a remote control session and the like. The remote control module can be configured to allow the controller to edit the captured images or video and or send captured media files to others via email and the like.

In some embodiments the remote control module can be configured to allow the controller to create macros for activating or executing certain features settings and or software applications of the mobile device .

Referring again to the secure mobile gateway can include a repository of logged data. The repository can store data indicative of state information generated at mobile devices or generated by the secure mobile gateway . For example the logged data can include various information such as data regarding grants and denials of mobile device access requests by the gateway filter . The logged data can alternatively or additionally include data logged by and extracted from managed mobile devices . Such logged data can include for example data indicative of documents downloaded to the mobile device system state s on particular mobile devices programs launched on particular mobile devices records of websites or other network resources accessed by particular mobile devices information associated with email accounts of users copied on messages associated with managed mobile devices documents attached to emails or other messages received by the mobile devices etc. The logged data can include data obtained from the mobile device requests . For instance for a secure mobile gateway that supports ActiveSync the logged data can include the DeviceId DeviceType User and or UserAgent from the ActiveSync request as well as the ActiveSync command issued by the request. In the case of an access denial the logged data can also include the provider of the violated gateway rule and information indicative of the reason for the denial. If access is denied based on a violated enterprise access policy of the mobile device management system the gateway can determine which policy was violated from the mobile device management system and store it in the repository of logged data. The logged data can also include mobile traffic data and or other network information about the request such as the IP address of the mobile device that issued the request. The logged data can be stored in accordance with a logging standard such as Syslog so that the data is readable by other applications.

The logged data can be provided to or accessed by an analytics service . In the illustrated embodiment the secure mobile gateway includes a log redirector service that periodically reads the logged data and sends some or all of it to the analytics service . The log redirector service is preferably configurable so that an IT administrator can direct it to send only those portions of the logged data that match configurable criteria. For example the log redirector service can be configured to send only the logged data concerning denied requests or only the logged data concerning granted requests or logged data filtered based on different criteria. Further the log redirector service and or the repository of logged data can comprise a data sharing interface that enables other systems such as the analytics service to query or extract data concerning the logged requests such as user data mobile device data mobile traffic data e.g. IP address of sender device etc. It will be understood that the principles and advantages described with reference to analytics on the secure mobile gateway can be applied to implement a variety of data mining and correlation for security or other purposes. As an example if the logged data indicates that a mobile device has accessed certain prohibited sites and also recently downloaded confidential documents which were then forwarded to an external email this information can be a basis for denial of access to enterprise resources.

The analytics service can comprise for example a Security Information Management SIM system a Security Event Management SEM system or a Security Information and Event Management SIEM system. SIEM solutions are a combination of SIM and SEM solutions. The analytics service can be configured to monitor analyze and or generate and send alerts notifications or reports based on the logged data. The analytics service can be configured to detect patterns in the logged data provide metrics useful for further analysis or actions and diagnose problems associated with the data. The analytics service can be configured to process data formatted according to various standards such as Syslog. For instance the analytics service can utilize Splunk a software program having these types of features. The analytics service can be part of the enterprise system or alternatively can be part of a third party system for analyzing data of the type logged in the repository .

For example the analytics service can be configured to process an access denial by the secure mobile gateway by sending a communication e.g. an email or SMS message to the denied user possibly specifying the reason for the denial of access e.g. Your request to access the XYZ Corp s network was denied because your mobile device does not comply with the enterprise s policy against installing the Angry Birds software application. .

Enterprise networks typically authenticate their users at the onset of the users computer transactions with enterprise resources. In existing systems authentication commonly involves a login process of receiving a username and password from the user s client device verifying that the username corresponds to an authorized user and verifying that the password is the correct password for the username. While some enterprise resources may be configured to consume username data for all transactions with mobile devices e.g. to grant access based on user ID user role or other group membership etc. other resources do not. For some types of enterprise resources after authentication the user is permitted to conduct at least some transactions with the resource without providing login information. For a defined time period after the last transaction with the authenticated user some enterprise resources downstream of the enterprise s firewall s assume that new requests that use the authenticated IP address i.e. the IP address of the device that sent the user s login information to the enterprise network are from the authenticated user. Such enterprise resources generally do not request and confirm the user s login information for each transaction with the user s computing device.

While this approach is generally suitable for non mobile client devices it can present security risks specific to mobile devices. Mobile devices often change their IP addresses when in use. For instance a mobile device connected to a cellular network while in a moving vehicle can switch between different cellular towers. Similarly a mobile device can switch between different Wi Fi networks. A mobile device can also switch between different IP addresses associated with a single cellular tower or Wi Fi network. Hence an enterprise resource that determines the user associated with an inbound mobile device request by examining only the request s IP address risks conducting a transaction with a person who is not the user.

In the illustrated embodiment the secure mobile gateway includes a gateway filter and a repository of logged data for example as described above. The logged data can include data from mobile device access requests received by the gateway filter for example as described above. For example if the gateway supports ActiveSync the logged data can include the DeviceId DeviceType User and or UserAgent property values from an ActiveSync request as well as the ActiveSync command issued by the request .

The request can include mobile traffic data such as an IP address of a mobile device that sent the request . The request may or may not include data about the mobile device that sent the request . The enterprise resource can receive the request and send a user determination request to the analytics service . The user determination request includes the mobile traffic data of the request . The user determination request can additionally include the time at which the enterprise resource received the request the data about the mobile device that sent the request as well as other data associated with the request . In some embodiments the user determination request can include an identification of a user that the enterprise resource or another enterprise component believes to be the sender of the request such that the analytics service is essentially being asked to verify whether the identified user is the actual person who sent the request .

The analytics service can employ a user determination algorithm for determining user information associated with the request received by the enterprise resource . In this context user information can include a determination of whether the request was sent by a user as opposed to someone who is not associated or enrolled with the enterprise a determination of whether a user identified in the user determination request is the person who sent the request to the enterprise resource and or an identification e.g. username of a user who sent the request . The user determination algorithm can additionally determine a reliability score indicative of a confidence level in the computed binding a degree of confidence that a particular user is the actual person who sent the request . The analytics service can produce and send a response containing result s produced by the user determination algorithm. The results of the algorithm can comprise the user information and or the reliability score.

In the embodiment illustrated in the enterprise resource receives the request and sends the user determination request to the analytics service and the analytics service sends the response back to the enterprise resource . In such embodiments the enterprise resource can be configured to use the data within the response to determine how to respond to the request . For example the enterprise can respond to the request by responding to the device that sent the request ignoring the request sending an alert to an IT administrator etc. . The enterprise resource can be configured to make this determination at least partly based on the reliability score if provided and or the specific action or command issued within the request . For example the enterprise resource can be configured to require a relatively high reliability score if the request seeks to download sensitive or confidential enterprise data while imposing a relatively low reliability score requirement if the request seeks to upload data to the resource . The enterprise resource can be configured to allow an administrator to configure the reliability score threshold at which the resource will take any given action in response to the request .

In other embodiments a component upstream of the enterprise resource e.g. a gateway firewall proxy server DLP monitoring device tunneling mediator SSL traffic inspection device or other components different than those of the secure mobile gateway receives the request generates the user determination request and sends the user determination request to the analytics service and the analytics service sends the response to said component upstream of the enterprise resource . In these embodiments the upstream component can be configured to use the data within the response to determine whether to pass the request along to the enterprise resource . Further the upstream component can be configured to make this determination at least partly based on the reliability score and or the action or command issued within the request . For example if the request seeks to download sensitive or confidential enterprise data the upstream component can be configured to send the request to the enterprise resource only if the reliability score exceeds a relatively high value. In another example if the request seeks to upload data to the enterprise resource the upstream component can be configured to require a relatively low reliability score for passing the request along to the resource . The upstream component can be configured to allow an administrator to configure the reliability score threshold at which the upstream component takes any given action in response to the request .

In some embodiments the analytics service proactively sends out its computed bindings of user to mobile traffic data e.g. IP address to the enterprise resources . The analytics service can send the bindings directly to the resources and or to one or more components upstream of the resources which append the bindings or related data to the mobile device communications that are transmitted to the resources . In these approaches the resources can use the computed bindings without requesting them from the analytics service .

The user determination algorithm employed by the analytics service can include scanning some or all of the logged data for mobile traffic data from the mobile device requests received by the secure mobile gateway that matches the mobile traffic data received within the user determination request . For any requests having mobile traffic data that matches that of the request the algorithm can also include determining from the logged data user data or mobile device data provided within the requests . For example the user data and the mobile device data can respectively include the values of the User property and the DeviceID property of an ActiveSync request . The analytics service can determine a user corresponding to the user data and or mobile device data by e.g. requesting it from the mobile device management system . For instance the User and DeviceID property values can correspond to a particular user in the mobile device information . If the logged data does not include or the analytics service is unable to find mobile traffic data that matches that of the request the analytics service can determine that the request was not sent by a user .

In order to determine the user information and compute the reliability score the user determination algorithm can evaluate a variety of factors. In certain embodiments the user determination algorithm compares the time at which the request was received by the enterprise resource to the time of receipt by the secure mobile gateway of mobile device access requests having mobile traffic data matching that of the request . For instance suppose an ActiveSync request has User and DeviceId property values corresponding to a particular user . Suppose further that the sender s IP address within the request is the same as that of the request and that the request was received by the secure mobile gateway within a relatively narrow time period before or after from the time at which the enterprise resource or upstream component received the request . Under these circumstances the analytics service might compute a high reliability score indicating that the user associated with the request is the person who sent the request to the enterprise resource . The user determination algorithm can compute a lower reliability score as the time period between the receipt of the request and the receipt of the temporally closest request having the same sender IP address increases. On the other hand if the sender s IP address within the request is different than that of the request the analytics service might compute a relatively low reliability score and or determine that the user associated with the request is likely not the person who sent the request to the enterprise resource . Further if there were no requests received by the gateway within a predefined or dynamically computed time window from before or after the time of receipt of the request and which have the same sender IP address as the request then the analytics service can compute a relatively low reliability score.

In certain embodiments the user determination algorithm evaluates the frequency with which the enterprise network sees a particular user associated with certain mobile traffic data such as an IP address. For instance suppose that the secure mobile gateway has received numerous ActiveSync requests that have User values corresponding to a particular user within a relatively short time window containing the time at which the enterprise resource received the request . Suppose further that all of said ActiveSync requests include sender IP addresses that are the same as that of the request . Under these circumstances the analytics service might compute a very high reliability score indicating that the user associated with the requests is the person who sent the request to the enterprise resource . On the other hand if the sender IP addresses within the requests is are different than that of the request the analytics service might compute a very low reliability score and or determine that the user associated with the requests is likely not the person who sent the request to the enterprise resource .

In certain embodiments the user determination algorithm evaluates the extent to which different access requests associated with a particular user have different mobile traffic data. For instance the fact that a string of access requests from a particular user have numerous different sender IP addresses likely indicates that the user is on the move and constantly switching IP addresses while communicating with the enterprise system . Under these circumstances the analytics service might compute a relatively lower reliability score than if all of the access requests from the particular user had the same sender IP address as the request . In one specific approach the analytics service determines a total number of access requests that 1 have user data corresponding to a particular user of interest 2 have mobile traffic data that does not match the mobile traffic data received within the user determination request and 3 were received by the secure mobile gateway within a predetermined or dynamically computed time window containing the time of receipt in the user determination request . The analytics service can reduce the computed reliability score in a confidence level that the request was from the particular user as the total number of determined access requests increases.

In certain embodiments the user determination algorithm takes into consideration whether the IP address of a request is from a known block or subnet of IP addresses that are registered or otherwise associated with the enterprise system . Such a block or subnet of IP addresses can be available via the enterprise s own equipment primarily for use by enterprise personnel such as a Wi Fi network an enterprise VPN allocation block or roaming external IP addresses. A block or subnet of IP addresses can be registered with the secure mobile gateway . If a request is sent from an IP address associated with the enterprise the algorithm can be configured to compute a higher reliability score.

It will be understood that the user determination algorithm for computing the reliability score can include factors in addition to those described above. It will also be understood that the algorithm need not consider all of the factors described above and can use any sub combination thereof.

In the embodiment illustrated in the analytics service is configured to inspect the logged data in the repository of the secure mobile gateway to establish bindings of users and or mobile devices to mobile traffic data e.g. IP address . However an analytics service can be configured to query multiple different logs of mobile request data to compute such bindings. If the enterprise system has multiple different secure mobile gateways e.g. for different types or protocols of mobile device communications the analytics service can be configured to query logged data from each of the gateways .

The analytics service can be configured to generate reports and displays of its bindings of user and mobile device to mobile traffic data e.g. IP address . The enterprise system can include a web based or other type of user interface for viewing such bindings. For example such information could be displayed via a user interface of the mobile device management system .

In preferred embodiments various components of the enterprise system can use the bindings of user and or device to mobile traffic data produced by the analytics service to track or log network usage events for one or more mobile devices . The analytics service can be queriable and configured to share its information with other components via e.g. web services.

As noted above the analytics service can be configured to generate and send notifications to users or IT administrators based on the logged data. Additionally the analytics service can be configured to send such a notification at least partly based on one or more reliability scores computed according to the user determination algorithm. For example if a large number of requests were denied and if reliability scores associated therewith satisfy a defined threshold then the analytics service can be configured to send an appropriate alert. On the other hand the analytics service can be configured to ignore situations involving low reliability scores. If there are a large number of access denials but they all have low reliability scores it may not be worth generating and sending a notification.

For security purposes the analytics service can be configured to encrypt the user device and mobile traffic data bindings that the service produces.

Reference is made again to . In some embodiments a mobile device can include a secure document container which can be referred to as a container. As explained herein the container can help prevent the spread of enterprise information to different applications and components of the mobile device as well as to other devices. The enterprise system which can be partially or entirely within the cloud can transmit documents to the devices which can be stored e.g. by the enterprise agent within the container . The container can prevent unauthorized applications and other components of the device from accessing information within the container . For enterprises that allow users to use their own mobile devices for accessing storing and using enterprise data providing containers on the devices helps to secure the enterprise data. For instance providing containers on the devices can centralize enterprise data in one location on each device and can facilitate selective or complete deletion of enterprise data from the device .

As used in this context a document can comprise any computer readable file including text audio video and or other types of information or media. A document can comprise any single one or combination of these media types.

The secure document container can comprise an application that implements a file system that stores documents and or other types of files. The file system can comprise a portion of a computer readable memory of the mobile device . The file system can be logically separated from other portions of the computer readable memory of the mobile device . In this way enterprise data can be stored in secure document container and private data can be stored in a separate portion of the computer readable memory of the mobile device . The container can allow the enterprise agent mobile device applications and or other components of the device to read from write to and or delete information from the file system if authorized to do so . Deleting data from the container can include deleting actual data stored in the container deleting pointers to data stored in the container deleting encryption keys used to decrypt data stored in the container and the like. The container can be installed by e.g. the agent IT administrators of the enterprise system or the device manufacturer. The container can enable some or all of the enterprise data stored in the file system to be deleted without modifying private data stored on the mobile device outside of the container . The file system can facilitate selective or complete deletion of data from the file system . For example a component of the enterprise system can delete data from the file system based on e.g. encoded rules. In some embodiments the agent deletes the data from the file system in response to receiving a deletion command from the enterprise system . In other embodiments the data is deleted without the assistance of the agent for example if an agent is not provided.

The secure document container can comprise an access manager that governs access to the file system by applications and other components of the mobile device . Access to the file system can be governed based on document access policies e.g. encoded rules stored in the documents and or the file system . A document access policy can limit access to the file system based on 1 which application or other component of the device is requesting access 2 which documents are being requested 3 time or date 4 geographical position of the device 5 whether the requesting application or other component provides a correct certificate or credentials 6 whether the user of the device provides correct credentials 7 other conditions or any combination thereof. A user s credentials can comprise for example a password one or more answers to security questions e.g. What is the mascot of your high school biometric information e.g. fingerprint scan eye scan etc. and the like. Hence by using the access manager the container can be configured to be accessed only by applications that are authorized to access the container . As one example the access manager can enable enterprise applications installed on the mobile device to access data stored in the container and to prevent non enterprise applications from accessing the data stored in the container .

Temporal and geographic restrictions on document access may be useful. For example an enterprise administrator may deploy a document access policy that restricts the availability of the documents stored within the container to a specified time window and or a geographic zone e.g. as determined by a GPS chip within which the device must reside in order to access the documents. Further the document access policy can instruct the container or agent to delete the documents from the container or otherwise make them unavailable when the specified time period expires or if the mobile device is taken outside of the defined geographic zone.

Some documents can have access policies that forbid the document from being saved within the secure document container . In such embodiments the document can be available for viewing on the mobile device only when the user is logged in to the enterprise system .

The access manager can also be configured to enforce certain modes of connectivity between remote devices e.g. an enterprise resource or other enterprise server and the container . For example the access manager can require that documents received by the container from a remote device and or sent from the container to the remote device be transmitted through application tunnels for example as described above. Such application tunnels can use the tunneling mediator of the enterprise system . The access manager can require that all documents transmitted to and from the container be encrypted. The enterprise agent or access manager can be configured to encrypt documents sent from the container and decrypt documents sent to the container . Documents in the container can also be stored in an encrypted form.

The secure document container can be configured to prevent documents or data included within documents from being used by unauthorized applications or components of the mobile device or other devices. For instance a mobile device application having authorization to access documents from the container can be programmed to prevent a user from copying a document s data and pasting it into another file or application interface or locally saving the document or document data as a new file outside of the container . Similarly the container can include a document viewer and or editor that does not permit such copy paste and local save operations. Moreover the access manager can be configured to prevent such copy paste and local save operations. Further the container and applications programmed and authorized to access documents from the container can be configured to prevent users from attaching such documents to emails or other forms of communication.

A mobile device application can be programmed to lookup and find the secure document container or a secure web browser described below that includes the container as a resource of the mobile device . In certain embodiments the application can run in a secure virtual machine separate from a virtual machine of an operating system of the mobile device . According to some other embodiments the application can run within the secure web browser . An application can be programmed to write enterprise related data only into the container . For instance the application s source code can be provided with the resource name of the container . Similarly a remote application e.g. an enterprise resource can be configured to send data or documents only to the containers of one or more mobile devices as opposed to other components or memory locations of the devices . Storing data to the container can occur automatically for example under control of the application the enterprise agent or the web browser . An application can be programmed to encrypt or decrypt documents stored or to be stored within the container . In certain embodiments the container can only be used by applications on the device or remote that are programmed to look for and use the container and which have authorization to do so.

The secure document container can serve as a temporary repository for documents and other files sent to the mobile device . Remote applications can be configured to send documents to the container e.g. via application tunnels on a one time or periodic basis. For example a sales related enterprise resource can be programmed to send sales related documents e.g. most recent price sheets every morning to the containers of a team of users having sales related roles e.g. sales persons . The sales related documents can have document access policies such that the documents will self destruct e.g. be automatically deleted from the container the deletion being performed by e.g. the container itself or the enterprise agent at a certain time or at the expiration of a time period beginning at a defined event e.g. the user s opening of a document . Document distribution policies e.g. encoded rules can be provided e.g. within the mobile device management system to control when and how remote applications e.g. enterprise resources send documents to the containers to which users the documents are sent what restrictions e.g. temporal or geographic restrictions are placed on the use and availability of the documents e.g. in the form of document access policies as described above etc.

Remote applications that send documents to one or more secure document containers of mobile devices can be configured to integrate with other repositories for the purpose of sending documents from such repositories to the containers . Such other repositories can be stored for example within the enterprise system e.g. enterprise document repositories such as a Microsoft Sharepoint repository or in a cloud computing system e.g. a Box.net repository .

Another aspect of certain embodiments involves a software development kit SDK that enables an application developer to embed one or more of the functionalities described herein into a mobile device software application such as a software application . As used herein embed can include the modification of an application s source code. illustrates an embodiment of a software development system including an SDK for creating a mobile device application . The software development system can be implemented by any suitable computer hardware. A software developer can create an application such as by generating program code and compiling it into an executable program compatible with a mobile device .

The SDK can comprise a library of development tools providing different functionalities. The development tools can comprise code snippets data structures protocols routines and the like. The SDK can provide an application programming interface API that enables an application to interface with the development tools . The SDK can include a program editor for generating the code for an application and a compiler for converting the code into a machine readable format. The SDK can include a debugging tool for debugging developed code. It will be appreciated that the SDK can include other features in addition to these. It will also be appreciated that the SDK need not include all of the illustrated features.

The development tools can include tools for embedding one or more of the functionalities described herein into a mobile device software application . It will be appreciated that any sub combination of these functionalities can be embedded into the application and that other functionalities not described herein can also be so embedded. Different development tools are now described.

In certain embodiments the SDK includes a development tool that allows an application developer to embed within an application functionality for forming and maintaining an application tunnel for example as described above with a network resource and communicating with the network resource by sending and receiving communications through the tunnel. The network resource can comprise for example an enterprise resource . The tool can be configured to add application tunnel functionality that participates with an enterprise agent . As described above in the application tunnels section the enterprise agent can receive network communications from the application encapsulate them according to an encapsulation protocol send the encapsulated communications to a tunneling mediator receive similar communications from the tunneling mediator which came from a tunnel endpoint resource unpack encapsulated communications received from the tunneling mediator and send the unpacked communications to the application . Alternatively the tool can provide functionality for forming an application tunnel without the participation of the enterprise agent wherein the application itself performs these actions using an encapsulation protocol as described above.

In certain embodiments the SDK includes a development tool that allows an application developer to embed within an application functionality for improving the communication experience between a mobile device and a network resource such as an enterprise resource particularly for application tunnel communications. Such functionality can include caching user inputted data locally on the mobile device in the event of a lost connection to a network as described above. Such functionality can likewise include compression of data to be sent to a network resource and decompression of data received from the network resource as described above. Again such embedded functionality can participate with an enterprise agent to enable these features or can provide these features separate from an enterprise agent .

In certain embodiments the SDK includes a development tool that allows an application developer to embed within an application functionality for participating in a remote control session between a mobile device and a helpdesk operator as described above. Such functionality can allow a helpdesk operator to view data about the application installed on the mobile device and or to control aspects of the application and possibly other features of the mobile device . Such functionality can include sending user interface emulation data to the helpdesk operator s computer as described above. Such functionality can include receiving commands from the helpdesk operator for executing actions on the mobile device . Again such embedded functionality can participate with an enterprise agent to enable these features or can provide these features separate from an enterprise agent .

In certain embodiments the SDK includes a development tool that allows an application developer to embed within an application functionality for finding providing credentials to reading from and or writing to a secure document container as described above. This can allow the application to access and update information within the container . This can also allow the application to access documents securely received by the mobile device from a network resource such as an enterprise resource or other application or component of an enterprise system . The development tool can be configured to modify the source code of an application so that the application can find the container by its resource name on the device . The development tool can be configured to modify the source code of an application so that the application writes all data or perhaps just data relating to the enterprise into the container. For example the development tool can be configured to parse the application s source code to find commands for writing data to a memory e.g. application state data for allowing the user to stop using the application and than later restart the application in the exact state in which the user left it or reading data from the memory and to adjust one or more of those portions of the source code to write data into the container and read data from the container .

In some embodiments the SDK s development tool can embed within the application the ability to encrypt documents to be stored within the container and or the ability to decrypt documents obtained from the container . The development tool can embed within the application an editor for allowing a user of a mobile device to view and or edit documents obtained from the container . The editor can also allow the user to upload edited or newly created documents to the container or to a network resource e.g. an enterprise resource of the enterprise system .

In certain embodiments the SDK includes a development tool that allows an application developer to embed within an application mobile device rules such as the rules described above. Further the development tool can allow the developer to embed functionality for evaluating the mobile device rules including querying the device or other network resources for data needed for the evaluation. The embedded functionality can also include remedial actions associated with the mobile device rules such as the remedial actions described above. The embedded functionality can further include a remedy agent for automatically executing remedial actions on the mobile device as described above. Compared to the aforementioned mobile device rules which are described above predominantly as user specific and device specific rules a software developer can embed rules and remedial actions that are customized to a specific application . In certain embodiments the SDK includes tools for creating and editing mobile device rules and remedial actions such as the tools described above. A software developer can use the creating editing tools to create mobile device rules and remedial actions and to embed them into an application . Certain embodiments provide an online library of mobile device rules and remedial actions that a software developer can use with or without modification and embed within an application .

In certain embodiments the SDK includes a development tool that allows an application developer to embed within an application functionality for application fault detection e.g. using mobile device rules as described above application performance measurement and the detection of related events. The embedded functionality can include the logging of detected faults performance measurements related events event times event locations and other data within a local storage of a mobile device . The development tool can allow an application to be configured to report such data to a network resource such as a component of an enterprise system and or an analytics service such as the analytics service described above. This embedded functionality can give IT administrators visibility into what is happening on the mobile device at least as it pertains to the specific application installed thereon. Further an analytics service can analyze data across multiple different mobile devices that run the specific application . The embedded functionality can include encrypting the data logged on the mobile device and or reported to other components via network communications.

In certain embodiments the SDK includes a development tool that allows an application developer to embed within an application functionality for cooperating with a meta application such as an enterprise system based meta application portion and or a cloud based meta application portion . The embedded functionality can include discovery procedures for discovering information about the installed application or a mobile device on which it is installed and sending the discovered information to the meta application for use in e.g. constructing a queriable model similar to the enterprise model of of which the application and or mobile device forms at least a part. The embedded functionality can include receiving a query from the meta application responding to the query by retrieving the queried data from the mobile device and sending the queried data to the meta application. As discussed above the meta application can use the queried data to detect problems perform root cause analysis and or select remedial actions. Hence the embedded functionality can include receiving a remedial action from the meta application executing the remedial action on the mobile device and reporting results of executing the remedial action to the meta application. In some embodiments the embedded functionality participates with a device resident enterprise agent to provide these features while in other embodiments the embedded functionality provides these features without cooperating with an enterprise agent .

Another aspect of certain embodiments involves a web browser within which other mobile device software applications can run. The web browser can be provided with some or all of the enterprise security and other features described herein and can extend those features for use with the mobile device applications that run within the browser. In this way the browser can be used to implement BYOD policies while maintaining a desired level of control over applications running on a mobile device of an enterprise user . An enterprise can require some or all of its users to install and use this web browser to reduce enterprise security risks associated with the use of such mobile device applications. Further in some circumstances such a web browser can make it unnecessary for application developers to develop different versions of a mobile device application for different mobile device platforms. As mentioned above the secure browser can also be used to enable mobile device users to access a corporate intranet without the need for a virtual private network VPN .

Referring to a mobile device can include a specialized web browser . The web browser can be configured to perform the functions of conventional web browsers including surfing Internet sites displaying and or playing multimedia content received from web servers etc. The web browser can store data accessed via a network in a secure document container and or in a secure browser cache. Such data can be deleted at the direction of an enterprise. For instance a mobile device management system can initiate deletion or otherwise make data stored in the secure document container and or the secure browser cache inaccessible. Additionally the web browser is preferably configured to act as a container for at least some other software applications installed on the mobile device to allow those applications to run within the browser . A software application can be configured to launch the browser when the application is itself launched by a user . Moreover an application can be configured to launch the browser and run within the browser in a manner that is transparent to the user . In other words the user can be given the impression that the application is running conventionally without involving the web browser . The web browser can leverage a protocol that facilitates its usage as a container for other software applications . For example the web browser can leverage HTML5 for this purpose.

The web browser can provide some or all of the functionalities described herein. For example the web browser can include some or all of the functionalities provided by the SDK and or enterprise agent described above. Thus the web browser can be configured to use application tunnels for communications with network resources such as enterprise resources . The web browser can receive or have embedded mobile device rules and remedial actions from the mobile device management system or another component of an enterprise system . The web browser can alternatively have embedded mobile device rules and remedial actions. The web browser can employ caching and or compression methods within application tunnels to improve the user s communication experience as described above. The web browser can be configured to provide credentials to read from write to and or provide an editor for displaying and editing documents obtained from a secure document container of the mobile device as described above. In certain embodiments the web browser can implement the secure document container . The web browser can prompt a user to supply access credentials prior and verify the access credentials prior to exposing functionality of an application running within the browser to the user . Alternatively or additionally the web browser can cause data stored to the mobile device by an application running in the web browser to be encrypted. The web browser can be configured to participate in a remote control session with a helpdesk operator as described above. The web browser can be configured to log fault detections performance measurements related events event times event locations and other data and to provide such data to an analytics service as described above in connection with the SDK . The web browser can be configured to engage in communications with a meta application again as described above. By providing at least some of these and or other functionalities the web browser can make it unnecessary for mobile device application developers to embed such functions within the mobile device applications .

In some embodiments the web browser is configurable so that one or more of these functionalities can be activated or deactivated under defined conditions that can be configured e.g. remotely by a remote computer system such as the enterprise system . Definable conditions include temporal conditions location conditions mobile device properties user properties e.g. roles and others. A temporal condition can be the time of day. For example the web browser can be configured to force all mobile traffic at least for applications configured to launch the browser through application tunnels only during working hours e.g. 8 am to 5 pm on Monday through Friday and to send the traffic conventionally outside of those hours. A location condition can be the location of the mobile device . For example the browser can be configured to activate the aforementioned compression and caching features when the device is in a geographical area known to have bad wireless connectivity.

Different web browsers can be created for different mobile device platforms with each of the browser versions using a single standard for running mobile device applications. This can advantageously allow mobile device application developers to develop mobile device applications in just one programming language as opposed to creating different versions for the various mobile device platforms. This can substantially reduce the application development workload for developers.

An enterprise can require its users to install the web browser onto their mobile devices and can prohibit the use of other web browsers. The required browser can be configured to direct at least some of the mobile device traffic through application tunnels to an enterprise controlled tunneling mediator such as the mediator described above. This gives the enterprise greater control over the traffic reducing security risks. An enterprise can deploy a mobile device rule that enables a device resident enterprise agent or the web browser itself to detect the installation and or use of a prohibited web browser on the mobile device . An associated remedial action can prevent the usage of the prohibited web browser according to methods described above such as by uninstalling it preventing it from running etc.

In some embodiments the secure web browser can be configured to direct some or all web surfing requests to a content filtering server as described above.

A system and process will now be described for enabling non developers such as members of a company s IT department to add to or otherwise modify the behaviors of an existing mobile application such as an Android IOS or Windows Mobile application. The system and process can be used as one example to create different versions of a mobile application with different privileges access rights etc. based on a user s role within the enterprise. For instance different versions of the mobile application can be created for different job categories e.g. executive non executive employee intern etc. and or different departments sales IT human resources etc. . The processes described in this section can be implemented in an application modification or wrapping tool or utility that is made available to enterprises that use the disclosed system. This utility may for example be hosted on a server e.g. as a web service that is accessible to enterprises or may be provided to the enterprises e.g. as a PC application .

In a typical use case scenario the mobile application to be modified is a custom application developed for a particular enterprise. However this need not be the case. For example the disclosed system and process are also applicable to commercially available mobile applications available in app stores. The mobile applications can be modified without being specially written to support or enable such modifications. For example the developer need not include any special code or functionality in the application to enable or facilitate the modifications and need not be involved in the disclosed process of modifying the application.

The behaviors that are modified typically include or consist of behaviors that involve standard API calls or classes. The following are examples of some of the types of behaviors that can be added or modified via the disclosed process 

1. The cut and paste capability commonly provided through mobile device operating systems such as Android and IOS can be disabled within a particular mobile application such as an application that provides access to confidential corporate data. This behavioral change may be desirable to inhibit employees or a certain class of employees from accidentally or maliciously sending or moving confidential data to an unauthorized location.

2. A mobile application that stores its output in a non encrypted format can be modified to store its output in an encrypted format. In one embodiment this is accomplished in part by modifying the mobile application s input output references to cause the application to use an encryption library to encrypt and decrypt the data it write to or reads from memory. Code may also be injected that causes the mobile application to obtain a key from the enterprise agent for use in encrypting and decrypting the data.

3. A mobile application that uses a certain level or type of encryption can be modified to use a different level or type of encryption. For example if the Federal Government requires the enterprise to begin using a particular encryption library an existing mobile application can be modified to effectively replace the existing encryption library with the new one.

4. An enterprise can modify a mobile application to cause it to use a special secure connection to the enterprise s network or enterprise system. For example the mobile application can be configured to use a secure application tunnel as described above.

6. A mobile application can be configured to log and or report data regarding its usage. This data may include for example the time and duration of use the location based e.g. on GPS coordinates of use the application features invoked the access points accessed etc. Existing mobile device operating systems such as Android and IOS provide functionality for enabling applications to obtain these and other types of usage parameters . This usage data may be used by an enterprise to for example monitor employee compliance with the enterprise s usage restriction policies to identify and correct problems with particular enterprise mobile applications or to determine whether to continue paying for application licenses for particular users. The application usage data collected on a mobile device may for example be reported by the enterprise agent to the mobile device management system or some other system for analysis.

7. A mobile application can be modified to enable an enterprise to remotely initiate deletion of the application s data on a particular mobile device of a particular employee without affecting other users of the application. As mentioned above such selective wipe operations may also be executed when for example a user fails to enter a valid enterprise passcode a threshold number of times.

8. A mobile application can be modified such that it can only be launched in by a secure launcher B and not by the general launcher of the mobile device s operating system. This may be accomplished by for example changing one or more references in the mobile application to the mobile operating system s general launcher so that they point instead to the secure launcher. As explained above the secure launcher may implement one or more security policies such as requiring entry of a valid passcode before the enterprise application is launched. The secure launcher may also cause the enterprise applications to run in a secure execution environment such as by causing the enterprise applications to be executed using a secure virtual machine that is separate from the mobile operating system s virtual machine. See section below. 

9. A mobile application can be modified to cause it to launch in a secure virtual machine C . This may be accomplished by for example modifying a reference in the application e.g. in an Android application s manifest or in any manner in which the application is launched to cause it to be launched in a secure VM. As explained below in the section titled Secure Virtual Machine the secure VM may implement some of the client side security functions described herein encryption application tunnels etc. reducing or eliminating the need to add such functions to the mobile applications themselves. This can enable enterprise applications to be run in a secure execution environment while personal applications are run in a default VM.

Other examples include disabling offline access adding URL filtering adding API filtering disabling writes to local storage and preventing documents from being opened in new applications.

As shown in the transformer accesses a policy library containing policy descriptions for various policies and associated behaviors such as those listed above. For example a disable cut and paste policy may be provided. The policies may be described in any appropriate language and format. For example the policy descriptions may be stored as smali files. As further shown in the system also includes a control interface or console that enables an administrator to select the policy or policies to be applied to a given mobile application. The console may also include a tool for enabling administrators to define new policies. For example a new policy could be defined that adds an authentication sequence disables cut and paste and causes all files to be stored in encrypted form. This policy could then be used as a basis for modifying multiple mobile applications.

In a typical use case scenario a member of a company s IT department uses the control interface to select a mobile application to be modified select the policy or policies to be applied and initiate the transformation process. The modified application is then distributed to the relevant employees or other users e.g. through a special application store that is accessible through the enterprise agent as described above . This process may be repeated with different policy selections to create different versions of the application for different users. The policy library may for example include policy files for implementing some or all of the types of policies described above and various others .

In block the analyzer mapper B analyzes and maps the application code in smali format to generate information regarding API calls that will potentially be replaced. In block the relevant API calls are replaced with new API calls for implementing the selected policy or policies. In addition the associated code from the policy library is added. For example if the cut and paste functionality is being disabled any API calls that are used by the application to access the operating system s cut and paste functionality may be removed or replaced.

As one example a new version of the Java I O File Input Stream Java.io.FileInputStream class may be generated and all references to the original class may be modified to point to this new version. The new version may for example include code for encrypting and decrypting data on file write and read operations respectively.

In block of additional code may be added if applicable to implement one or more features or behaviors that do not require the replacement of any existing API calls. As one example code may be added for enabling an authorized administrator to remotely trigger the deletion on a user specific or mobile device specific basis of the application s data stored on a particular mobile device. In this example the code added in block would add functionality for receiving and processing a message containing a command to perform such a selective wipe or deletion operation.

To provide an additional layer of security the portions of the code that are modified in the preceding blocks may be obfuscated using obfuscation methods and functions that are known in the art. The use of obfuscation impairs the ability of others to reverse engineer the security functions added to the application. Obfuscation may be applied to the disassembled code e.g. smali code or may be applied at a different level.

In block of the application s manifest e.g. AndroidManifest.xml is modified if necessary to reflect the modified behaviors. As one example if the application is being modified to be launched in a secure shell the manifest would be modified to instruct the Android operating system to use the secure shell to launch the application. In some embodiments this involves replacing a reference to the operating system s general launcher with a reference to a secure launcher B . In block the modified smali code and manifest together with the other extracted application components are compiled into a new .APK file. In block this new .APK file is signed using a digital certificate.

Mobile applications written for the IOS operating system may be modified in a similar manner. Typically such an application is distributed as an IPA file that includes an executable in Mach O format a P list and resources. Once the executable has been disassembled to produce ARM assembly code it is mapped to identify classes to potentially be replaced and is then modified by 1 identifying one or more specific classes to be replaced 2 adding modifying the code to replace such class es 3 adjusting the class structure to reflect the modifications so that each new class is a subclass of the original code and 4 updating the references to point to the new class or classes.

In some embodiments the above described process may be augmented with one or more tests for verifying that the mobile application to be modified does not contain malware or does not otherwise present a risk to enterprise security. One such test involves generating a hash of some or all of the application files and then comparing this hash to library of hashes that are associated with known malware. If a match is found indicating that the application likely includes malware the application modification process may be terminated.

Another such test involves inspecting the API calls and URL requests made by the application to check for suspicious activity. Examples of suspicious activity include reading the personal contacts stored on the device sending an email to a cloud storage service and sending location information without first requesting user permission. Based on this analysis a score e.g. on a scale of 1 to 100 may be generated that represents the level of risk posed by the mobile application. The modification process may be terminated if this score exceeds a threshold. The score may additionally or alternatively be included in a report that details the suspicious activity detected. The application modification tool may for example output this report for review and may prompt the administrator user to confirm or indicate whether the modification process should proceed.

The application modification system shown in may for example be implemented on a server personal computer workstation or other computer or system of computers within a company s enterprise system. Alternatively the application modification system may be implemented as a hosted service that is accessible to corporate customers over the Internet. The various components of the system may be implemented as code modules that are stored on any type s of non transitory computer storage device or system.

The components of the system shown in may be provided to companies as part of a larger system such as the system described in other sections of this specification for enabling the companies to manage mobile devices and to protect data accessed by such devices. For example these components may be bundled and licensed with various other components described in this disclosure. Alternatively the application modification system of may be provided to companies as a standalone product or as a system that is hosted by a service provider and accessed over a network.

As mentioned above one approach for effectively adding a security layer to the enterprise mobile applications is to configure or force such applications to run within a secure VM C installed on the mobile device. The secure VM may be similar to the mobile operating system s VM but may point to special code libraries that are added to the mobile device including code libraries for performing such functions as encrypting decrypting data and using application tunnels. The use of a secure VM enables an enterprise s IT department to effectively add a security layer to a pre existing mobile application with little or no modification to the application itself. This may be desirable when for example the enterprise wishes to use a popular commercially available mobile application as an enterprise application but does not have authorization to or otherwise does not wish to make certain types of modifications to the application.

The secure VM C can be loaded with its own set of private libraries for storage networking policy management etc. For example some or all of the data stored by an application running in the secure VM C can use a certain encryption library. The secure VM C can implement a set of policies such as authentication disabling of cut paste prevention of access to certain URLs prevention of access to certain APIs etc. to control execution of the application within the secure VM C.

The secure VM C can block the execution of an application running therein based on detecting certain conditions such as conditions indicative of the application having a virus or being malware. Hooks can be added to the secure VM C to prevent programs from being executed when certain conditions are detected. The secure VM C can observe the execution characteristics of an application running therein to determine that the application does not have exhibit malicious behavior.

By using a custom VM all corporate content can essentially be separated from other content stored on the device. Such a custom VM can prevent data or applications from being shared with applications that are executed in the default VM of the mobile device . Moreover the data accessed and or manipulated by an application running in the custom VM can be stored in the secure data container as described above.

In one embodiment a single secure VM is provided on the mobile device for running enterprise applications and can be used to concurrently run multiple enterprise applications concurrently. In another embodiment multiple secure VMs are provided on the mobile device such that each enterprise application runs within a separate secure VM. A hybrid of these two approaches is also possible.

A variety of methods can be used to force or configure a pre existing mobile application to use a secure VM. One such approach involves modifying the mobile application to cause it to use a secure launcher B as described in the preceding section. When the application is launched the secure launcher launches the secure VM and then effectively passes the mobile application to the secure VM for execution. Another approach involves modifying the mobile application by replacing references to the operating system s default virtual machine with references to the secure VM. Another approach involves instructing the mobile device s operating system at the time of installation of the application to execute the mobile application in the secure VM.

In one embodiment whenever a mobile application running in the secure VM performs a file read or write operation the secure VM uses an encryption library to process the data being read or written. The secure VM thereby applies encryption to the enterprise data stored locally by enterprise applications.

Library files used by the secure VM may in some embodiments be incorporated into the operating system or otherwise installed on the mobile device with the cooperation of the OS developer device manufacture seller or other party that has the appropriate permission levels for making such additions. The ability to add such library files generally increases the security capabilities of the secure VM but is not essential.

One benefit of running an application in a secure VM is that the secure VM can be loaded with an alternate set of private libraries for storage networking policy management etc. For example a library can be loaded that causes all data stored by the application to be encrypted using a certain encryption library. Libraries can also be loaded that for example disable cut copy paste operations require user authentication prevent access to certain URLs prevent access to certain APIs etc. The particular libraries that are loaded may for example depend on the role or position of the user within the enterprise the particular application being launched and or other criteria.

Another benefit of running an application in a secure or custom VM is that the application s execution can be blocked if the application exhibits suspicious behaviors of the type present in malware or viruses. This may be accomplished by adding hooks to the secure VM to enable an application s execution to be monitored and or blocked.

The secure or custom VM also provides a mechanism for keeping enterprise content separate from other content stored on the device. For example through the use of the secure VM the data stored by an enterprise can be stored in a secure container as described above. This data advantageously is not accessible in unencrypted form to the device s default VM or the applications that run within it.

In the context of the Android OS one method that can be used to launch an application in the secure VM involves the use of the app process command to modify the standard launch sequence. For example a command of the following format may be used once Zygote initializes a child process execvp system bin app process .... . Zygote is a special process that is created when Android boots once created it opens a server socket to listen for process creation requests. This call replaces the old executable image with a fresh one and enables the secure VM to be loaded with some existing libraries jars and with some new libraries jars that implement e.g. enterprise policy push secure storage and secure networking features. The new instance is not a share of Zygote or any other parent process but rather is a completely new process with its own execution environment and added set of behaviors. Once the secure VM is loaded the following steps can be performed to launch the application in the secure VM 1 the newly created process performs an attachment operation 2 once the ActivityManagerService receives the attach request from the newly created process it sends the stored intent to it so that ActivityThread will look for the intent in the application s Manifest and will create that Activity and 3 it then starts running the application. These three steps are the same as the last three steps ordinarily performed when an application is launched in Android. Android Runtime or any other compatible runtime can be loaded in the secure VM such that the application is compatible with the secure VM. This above process can be varied for use with other operating systems by those skilled in the art.

An application can be configured or marked to use the secure custom VM in various ways. For example in the context of Android the standard command adb shell pm enable package name can be used to set the enabled state or flag of the application package. As another example the enterprise agent installed on the device can upon installation make a call to this API and specify all of the applications that will run in the secure custom VM. When such an application is later launched the enabled flag can be checked before Zygote is asked to create fork a new process and a new secure VM instance can be created based on the state of this flag. This process can be varied for use with other operating systems by those skilled in the art.

The secure mobile gateway and the mobile device management system may each be implemented by a computer system made up of one or more computing devices e.g. physical servers workstations etc. which may but need not be co located. Each such computing device typically includes a processor or multiple processors that executes program instructions or modules stored in a memory or other non transitory computer readable storage medium or device. The secure mobile gateway and mobile device management system may be implemented on common hardware or on separate and distinct hardware.

All of the methods and processes described above may be embodied in and fully automated via software code modules executed by one or more computing devices e.g. smartphones tablets other types of mobile devices physical servers etc . Each such computing device typically includes a processor or multiple processors that executes program instructions or modules stored in a memory or other non transitory computer readable storage medium or device. The code modules may be stored in any type of computer readable storage medium or other computer storage device. Some or all of the methods may alternatively be embodied in specialized computer hardware e.g. ASICs or FPGAs . Where a given software component such as the enterprise agent or secure launcher is herein described as performing or implementing a given function it should be understood that the component through executable instructions instructs one or more processors e.g. the processor of a mobile device to perform or implement the function.

Various modifications to the implementations described in this disclosure may be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other implementations without departing from the spirit or scope of this disclosure. Thus nothing in this specification is intended to imply that any feature characteristic or attribute of the disclosed systems and processes is essential.

Certain features that are described in this specification in the context of separate implementations also can be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation also can be implemented in multiple implementations separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

