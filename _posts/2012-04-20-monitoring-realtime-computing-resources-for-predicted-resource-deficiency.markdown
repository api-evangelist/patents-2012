---

title: Monitoring real-time computing resources for predicted resource deficiency
abstract: Techniques used to enhance the execution of long-running or complex software application instances and jobs on computing systems. In one embodiment, inadequate system resources and failure of a job execution on the computing system may be predicted. A determination may be made as to whether inadequate resources exist prior to execution of the job, and resource requirements may be monitored to detect in real time if inadequate resources will be encountered during the job execution for cases where, for example, resource availability has unexpectedly decreased. If a resource deficiency is predicted on the executing computer system, the job may be paused and corrective action may be taken or a user may be alerted. The job may resume after the resource deficiency is met. Additional embodiments may integrate resource monitoring with the adaptive selection of a computer system or application execution environment based on resource capability predictions and benchmarks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08875150&OS=08875150&RS=08875150
owner: International Business Machines Corporation
number: 08875150
owner_city: Armonk
owner_country: US
publication_date: 20120420
---
This application is a continuation of U.S. patent application Ser. No. 12 915 140 filed Oct. 29 2010 which is incorporated herein by reference in its entirety for all purposes.

The present invention generally relates to the operation of jobs and executable software in a computing environment. The present invention more specifically relates to techniques for predicting and responding to resource usage in computing environments including a general purpose computer and a massively parallel processing computer architecture.

It is fairly common for complex scientific applications such as life science applications to run jobs for a significantly long time in supercomputers or clustered environments. It may even take days or weeks for a single job to fully execute. Therefore it is very costly if such application instances or jobs after running for days fail because of a lack of adequate system resources in the computing environment. The lack of system resources might result from inadequate hard drive space memory CPU cycles or a variety of other reasons.

Jobs and application commands are commonly executed in high performance computer systems with the assumption that the system is capable and available to fully process the jobs. Users and systems typically do not perform a check before executing the job to verify that the job will have adequate resources to finish. Further once a job has started there is no way to be alerted to decreasing system resources that will affect the job. Techniques are needed to predict job failure and save valuable time cost and resources. Techniques are also needed to implement real time changes in the computing environment and prevent long running jobs from failing.

One aspect of the present invention includes configuration of a real time self predicting job resource monitor. This resource monitor may operate to predict the lack of adequate system resources on computing systems needed to execute the job such as inadequate hard drive space memory or CPU capabilities and the like. In one embodiment a job resource estimator is configured to process an input file or other input data for a scientific application. The estimator analyzes and returns a set of resource requirements relative to an estimated schedule for the job such as how much disk space it will require over the entire lifespan of the job. The estimator then predicts the amount of time that will take to complete this job. The job can then be submitted or redirected to the appropriate computing system that meets the resource requirements or other appropriate action may be taken in connection with the user to ensure that certain failure will not occur.

In one embodiment periodically during the job run a monitor may calculate the remaining resources required for complete execution of the job. For example if the job will require 500 MB disk space and so far the job has written to 100 MB of disk space then it is estimated that 400 MB disk space will still be needed. If the remaining resources required are not available or are removed from the system then the job will be paused and the system administrator may be notified to correct the resource deficiency. The paused job can be resumed or continued after the resource deficiency is met without having to restart the job from the beginning This prevents jobs from running for days or weeks only to unexpectedly fail due to the lack of system resources. It also saves time and resources by eliminating the need to restart the job from beginning.

Based on the evaluation of the monitor a variety of actions may be taken. For example the monitor may be used as a trigger to the environment to free up resources as needed to complete the job. Changes to the job may also occur in conjunction with these actions. An administrator may also be alerted before the resources have become completely exhausted. These and a number of other steps may be taken to predict and prevent a possible failure due to a real time loss of resources in the computing system.

In one specific embodiment described herein performing real time self predicting job resource monitoring in a computing system includes a series of steps for estimating and monitoring job execution processing resources of the computing system. The estimating steps may include analyzing input for a job to be executed with one or more application instances on a computer system and estimating total resource requirements of the job execution based on the input analysis. The monitoring steps may include verifying resource availability for the job execution throughout execution of the job and detecting any present or future resource deficiency.

More specifically a resource deficiency may be detected by measuring cumulative resource consumption for the job and available resource levels in the computing system estimating future resource requirements of the execution of the job based on the total resource requirements of the job and cumulative resource consumption for the job and comparing the future resource requirements of the execution of the job with the available resource levels in the computing system to predict any resource deficiency. If a resource deficiency is detected or otherwise predicted the job is paused and one or more corrective actions may be implemented to prevent failure of the job execution on the computer system.

One aspect of the present invention relates to the execution of long running applications on computing systems. For example a scientific computer application which processes a large amount of data and performs a high volume of computations may take days or even weeks to compute and finish a single job. The time and computing resources needed to fully execute any given application is dependent on the job input to the application. However typical users such as scientists and engineers are simply aware of the type and amount of input but not how the input will be processed in a computing system. Therefore it is not apparent to users of the computing system what computing resources are needed to fully execute the program or whether the job is more or less computationally complex than other types of jobs.

Even if the full input of a job or a batch of jobs is understood the resources and processing capability of computing systems and especially supercomputer systems varies significantly based on a given system s configuration. Various embodiments of the present invention integrate use of a resource estimator component to address this concern. The presently described resource estimator may be used to accurately estimate the resource capabilities of a particular computing system and measure the amount of needed resources for complete execution over a period of time. From this an accurate estimation of needed resources can be provided and responded to within the computing system before execution of the job begins.

Additionally while resources are consumed and still needed for execution of the job the executing job may be monitored to ensure that system resources will not elapse or otherwise be removed from the computing system. As further discussed below a resource monitoring component may be used to stay apprised of the resource consumption status of the job and ensure that adequate resources remain available throughout execution of the job. This monitoring component may also be configured to recognize when resources are no longer needed by the job at various points in time preventing false resource depletion alerts and improper actions from occurring.

As discussed below embodiments of the present invention may be configured to be used in conjunction with a web based or application programming interface to a supercomputer or massively parallel processing cluster. The presently described resource estimator and resource monitor for example may be used in connection with a job launching interface that is initiated from a web browser web service application programming interface or other like external interface.

Typically there is no way of running scientific applications on supercomputers such as IBM Blue Gene from any web browser or any GUI as a Linux command line terminal is generally the only way to launch and execute applications on these machines. In conjunction with one embodiment of the present invention a web interface may be provided to connect to the supercomputer or cluster. This interface provides an easy way for non technical users to interface with customer applications and various back end operating systems that are not otherwise supported by the supercomputer s native environment.

Further many scientific applications run on Linux and a typical back end environment may include both a supercomputer and a general purpose Linux system. The web interface and its corresponding processing components may be capable of smartly selecting the appropriate supported back end system based on the application that the user wants to run the input to the application resource requirements and availability and various other factors. This enables selection of a lower cost system such as the general purpose Linux system or a high resource system such as the supercomputer as needed by the particular job.

In one embodiment the web application may be used to receive an input file data for a computing application. As a non limiting example the application to be executed might be a scientific computing application used to analyze molecules of a given chemical composition defined in data input. This received data may be sent to a resource estimator component to analyze and return a set of resource requirements for the particular computing system based on the execution of a job having this input more specifically this certain chemical composition .

The processing systems depicted in are a general purpose computer such as a PC and a supercomputer . Those skilled in the art would recognize that both a general purpose computer and supercomputer would provide a varying configuration of hardware and software components. Moreover a multi computer system environment is likely to contain a heterogeneous mix of computing systems with differing capabilities and performance characteristics. Each of the general purpose computer and the supercomputer provide an executable platform for instances of the one or more applications and respectively. These applications are used to process the input on one or more processing systems using the appropriate software and hardware components and produce usable output.

As a further detail of one configuration of general purpose computer this system may include processing hardware including CPUs and memory and storage disk . Likewise the supercomputer may be comprised of a plurality of I O nodes and compute nodes with the illustrated compute nodes each containing multiple CPUs and memory and interfaced to a storage volume maintained on storage disks Those skilled in the art would recognize that similar configurations of a computing cluster or grid may be substituted for the depicted supercomputer.

As illustrated in a series of additional components are used to provide resource related functions and capabilities for the computing systems . These components are further described in the following paragraphs and may include a scheduler a resource estimator and a resource monitor .

The techniques required for resource estimation of a job first require that an accurate measurement of the executing computing system s capabilities are fully understood. For example a certain amount of memory hard disk space and processor cycles may be required to execute an application instance in a certain period of time regardless of the complexity of input for the application.

To accomplish this estimation in one embodiment the resource estimation component runs or otherwise obtains a series of application specific benchmarks against the computing hardware. The benchmarks may be based on test runs actual test runs or theoretical calculations from simulated test runs of the application on the hardware configuration. The benchmarks can then be used to obtain an accurate resource requirement estimation and a rate of consumption of each particular computing system. Further benchmarks may be compared or extrapolated to other applications that are executed on the computer system to gain a larger view of the capabilities of a larger computer system and each of the applications that the computer system is capable of executing.

According to the benchmarks of the system and the performance requirements and measurements of a certain application on the system the resource consumption rate for an application which is required to process the input may be determined. The input can then be analyzed to correlate benchmarking data with the problem size of the input. The goal of this calculation is to provide an accurate measure of job complexity that compares the input with historical application specific execution information provided by the benchmarking data.

In connection with the web application interface previously described an example scenario might be conducted as follows. The user goes to a website GUI connected with the web application interface and selects the appropriate application to perform for instance Scientific Application 1. Scientific Application 1 specific input fields will be shown. In the website GUI the user enters the necessary values and uploads the input file s to the application and submits the input file. The appropriate computing system may be manually selected by the user or automatically selected for the user. The web application is then configured to interface with the resource estimator component and scheduler component which collectively function to verify the resource availability of the selected computing system based on the application specific input file.

The scheduler may verify if it makes sense to run this particular job on a supercomputer such as supercomputer based on the input or if another lower cost or lower power computing environment such as personal computer would be acceptable. In one embodiment based on the estimation of the resource usage a series of choices may be provided to the user in a user interface to ask or verify where the user wishes to execute the application.

Alternatively the decision of which computing system or environment to execute the job may be made automatically by the scheduler having smart job capabilities. The scheduler may also automatically select the appropriate execution environment based on consideration of one or more currently executing or scheduled jobs or resource usage thresholds in connection with resource estimator and potentially resource monitor . After the decision is made whether manually or automatically a request is sent to the appropriate back end resource such as a supercomputer or a general purpose computing machine to execute the job.

In more specific embodiments the resource requirements for a particular application job may be computed based on the job input as follows. The resource requirements may be represented in a variety of forms and contain multiple sub requirement values but for purposes of simplicity the resource requirements will be referred to in the following sections as R. As a non limiting example Rmay represent a numerical value of how much disk space a particular instance of the application requires to fully execute. Disk space requirement is a common requirement among long running scientific applications because typically large output files are produced. The size of such output files often depends on the specific input data.

The resource estimator may be configured to after analyzing the input data also predict the time that will take to finish this job. This time value will be referred to in the following sections as T. The scheduler can then submit the job to the system that meets the resource requirements R. This verification at the front end allows the minimum system requirements to be compared with the system resource capabilities and exclude incompatible systems from the outset.

Next once the job begins execution on the selected system a real time resource monitor may be used to probe the executing computing system at regular intervals and verify resource availability for the job. This interval time value will be referred to in the following sections as t. t is often a function of Tand can be expressed as t f T . For example if Tre 50 hours t may equal 5 seconds requiring the monitor to probe the system every 5 seconds until the job finishes.

Next the resource estimator operates to verify the current resource availability of each processing system as in step . The scheduler then provides the job to the appropriate processing system based on the resource requirements of the job and the capabilities of the system as in step . At this point the job has been submitted and will begin execution on the computer system. One variation is that the scheduler may pause the execution of the job until resources become available such as for a preferred job or computer system.

Upon the execution of the job instance the future resource requirements of the job execution are monitored at regular intervals as in step . Every time the resource monitor probes the computing system it may perform a calculation to determine whether the current and future system resources are adequate. If there is a lack of current or future resources then a response may be initiated as in step .

The verification of future required resources may be a repeated calculation verifying the total required by the application against the current level of resources. provides a more detailed illustration of verifying resource requirements during the execution of a job according to one embodiment of the present invention. The following formula for calculating future resources may be computed at a regular interval as follows x Resource required R Resource used at time t. If x Resource available at time t then appropriate action may be taken.

Upon execution of the job in step the interval time value for repeating the resource monitoring is determined as in step . As previously suggested this interval time value may be calculated based on the size of the job or the resource requirements of the job. Next as in step the total resource requirements are determined or obtained. The total resource requirements may be provided by the scheduler or by other components which analyze the job input and the application requirements prior to execution of the job.

Once the job execution has begun the monitor pauses for the interval time period as in step . Once the interval time period elapses the future resource requirements for the remainder of the job may be computed as in step and the current resource availability for the computing system may be probed and verified as in step .

In step the future resource requirements are determined from a derivation of the total resource requirements of the job and the actual resource consumption of the job measured at the present point in time. These future resource requirements are compared in step to the current resource levels of the computing system. If the future resource requirements are greater than the available current resource levels as in step then various actions need to be performed in order to prevent future failure of the job execution.

For example as in step the job may be paused indefinitely or for a period of time until resources become available. Alternately or in combination with pausing of the job the executing user and the system administrator may be alerted. The job may be postponed until necessary actions are taken to allocate additional resources to finish this job successfully as in step after which time the job can be continued. In most scenarios the job will be paused to provide sufficient time to successfully initiate application or resource actions. In a further embodiment when the job is paused all changes and or work that was performed for the job is saved.

If the future resource requirements are not greater than the current resource levels and therefore adequate resources are projected to exist in the future then the job may continue. The monitor waits for the interval time period as in and then repeats the steps of checking the future resource requirements until the job is complete as in step .

As an illustrating example suppose an application requires 500 MB of disk space and needs to run for 50 hours. Assume the system had 800 MB space available at the time the user submits the job with this amount of available space being calculated before the job was submitted and approved. Assume the job is submitted and runs for 10 hours while consuming 100 MB space. However during that 10 hour period some other user job or application consumes another 600 MB space from the system.

At this point the monitor will probe the system as follows x Resource required 500 MB disk space Resource used after 10 hours 100 MB disk space . x 400 MB. Because x resource available at time t 100 MB then the monitor will need to initiate corrective action to prevent failure of the job execution. The monitor may automatically initiate actions to pause the job or otherwise prevent further execution of the job until the appropriate actions are taken to ensure completion of the job. In this disk space example the appropriate responsive action may require a system administrator to physically add additional hard drives into the system which may take hours or days to complete . The job may stay paused until the administrator allocates more resources for its successful execution at which time the user or system administrator may resume the execution of the job. Alternately the job may automatically resume execution once adequate system resources are detected or predicted.

Thus the resource monitor may implement real time self predicting characteristics to prevent a failure from happening due to the lack of adequate system resource. This may occur without having to compromise the job or application instance. In one embodiment the application does not change the run time behavior of the currently executing job if inadequate resources are discovered. Rather the environment frees up or otherwise manages resource as needed by the application. This enables functionality beyond simply predicting job completion on the outset to preventing a possible failure from to real time loss of resources.

Although a number of example system configurations and techniques have been described above those skilled in the art would recognize that a number of variations may be adapted to these configurations and techniques. For example the previously described web application interface may be configured to present results and output produced from the job. After the job is complete the user may access the output files within a browser. This and other graphical user interfaces may be used to present the results and display the status of the job and its resource consumption during and after its execution.

Additionally although multiple computer systems are depicted in connection with the scheduler and benchmarking of system capabilities use of multiple systems are not required for the resource monitoring techniques. Many aspects of the resource estimation and resource monitoring techniques disclosed herein may apply to a job or application instance executed in a single computer system.

Those skilled in the art would appreciate that other variations to the previously described techniques may be implemented in order to establish real time monitoring and resource responses. As will also be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Although various representative embodiments of this invention have been described above with a certain degree of particularity those skilled in the art could make numerous alterations to the disclosed embodiments without departing from the spirit or scope of the inventive subject matter set forth in the specification and claims.

