---

title: Method and system for protecting user choices
abstract: A system, method, and computer-accessible medium for protecting user choice settings are provided. The system and method provide an application programming interface that uses a security subsystem to unlock, write, and relock the user choice settings to insure that the user's choices are enforced and respected by the applications that attempt to change them in a manner that is verifiable and transparent to the user. The user is notified whenever a change to their user choice settings is made.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09443105&OS=09443105&RS=09443105
owner: Microsoft Technology Licensing, LLC
number: 09443105
owner_city: Redmond
owner_country: US
publication_date: 20120409
---
This application is a continuation of U.S. patent application Ser. No. 10 783 558 filed 20 Feb. 2004 which is hereby incorporated herein by reference in its entirety.

In general the present invention relates to computer software and user choice settings and in particular to systems and methods for controlling modifications to user choice settings.

Proprietary software applications have become more aggressive in how they manipulate user choice settings when installed in a user s computer. User choice settings are typically indications of certain user preferences for when and how an application is to operate on their computer. For example during the installation process for a popular proprietary media player application users are guided through a series of pop up windows to set certain user choices such as whether to make the player the default player for popular media such as .mp3 files CDs DVDs MPEG and AVI video files and or other types of media. Users are further prompted to authorize the player to periodically check their system to maintain their user choice settings even when the player is not actively being used to play anything. Users who provide that authorization may unwittingly defeat their ability to change preferences afterwards such as choosing a different media player to play .mp3 files. This is because the previously installed player periodically reverts to the user choice settings that the user set during the initial installation. Any changes to the user s choices that the user set afterward using a different media player are lost. If both media players employ the same aggressive tactic of periodically checking the system to maintain the user choices set for that player the results can be unpredictable with one media player set as the default player some of the time and the other media player set as the default player some of the time. Needless to say this presents users with a very confusing and annoying situation. The only solution is to uninstall the offending media player or to reinstall the player to remove the authorization to periodically maintain the user s choice settings for that player. Even reinstallation of the application may not correct the problem if the installation procedure is not followed properly or if as sometimes happens the application automatically changes certain settings without giving the user a way to opt out of the changes.

In the context of the Windows operating system the user choices are typically set by storing those choices in the Windows registry. The Windows registry is a central hierarchical database used in Microsoft Windows operating systems to store information necessary to configure the systems for one or more users applications and hardware devices. Applications such as media players store user preferences in registry data generally referred to as registry keys. The operating system uses the current values of the registry keys to determine how to handle certain events. For instance using the above media player example the operating system interrogates the Windows registry keys relating to .mp3 files in the event that the user activates an .mp3 file in order to determine which media player to choose to play the file. Another example is when a browser application interrogates the Windows registry to determine which Web page to display as the default home page when the user first activates the browser.

While the ability to store user choice settings in the Windows registry is a convenient service of the Windows operating system the registry itself is unfortunately not secure. Applications are able to change the values of keys in the registry to suit their goals. Thus competing applications often step on one another resetting the values of the same keys and thereby resetting the corresponding user choice settings that those keys represent without the user s knowledge or consent.

To overcome the above described problems a system method and computer accessible medium for modifying user choice settings are provided. The system and method provide a user choice setting process that permits applications to safely modify user choice settings in a manner that is verifiable and transparent to the user. The system and method operate to advantageously enforce and protect user choice settings and to deter applications from modifying those settings without explicit user approval.

In accordance with one aspect of the present invention user choice settings are stored as protected values. A protected value is an object that may be secured by a corresponding access control indicator that has been initialized to only allow the user to read but not write the value in accordance with an existing security subsystem in which the access control indicator operates. Applications request modifications to the user choice settings by calling the user choice setting process to obtain approval from the user. Upon receiving approval the user choice setting process first modifies the corresponding access control indicator of the protected value to allow the user to write the value. Once the corresponding access control indicator of the protected value has been modified the user choice setting process is able to modify the user choice setting as requested. Before returning control of the protected value to the system the user choice setting process restores the corresponding access control indicator to again only allow the user to read but not write the newly modified protected value.

In accordance with another aspect of the present invention the user choice setting process generates an approval user interface to display to the user their user choice settings and to receive from the user an input to approve the application s request to change those settings. Should the user not approve the application s request the user choice setting process terminates the request and does not modify the corresponding access control indicator of the protected value nor does it modify the protected value.

In accordance with a further aspect of the present invention the user choice setting process modifies the corresponding access control indicator by providing to the user the rights to modify the access control indicator in accordance with the security subsystem in which the access control indicator operates. Alternatively the user choice setting process modifies the corresponding access control indicator by providing to the user ownership of the protected value object that the access control indicator secures where ownership of the object automatically grants to the user rights to modify the corresponding access control indicator in accordance with the security subsystem in which the access control indicator operates. In a variation on this alternative the user choice setting process modifies the corresponding access control indicator by allowing the user to temporarily take ownership of the protected value object that the access control indicator secures in accordance with the security subsystem in which the access control indicator operates thereby temporarily granting to the user the right to modify the corresponding access control indicator in accordance with the security subsystem in which the access control indicator operates.

In accordance with yet another aspect of the present invention the user choice setting process automatically generates a change notification to the user once the protected value has been modified whether the modification to the protected value was made in response to an approved request from an application or whether the modification to the protected value was made by an unauthorized application or any other entity outside of the user choice setting process.

In accordance with yet other aspects of the present invention a computer accessible medium for modifying user choice settings is provided. The computer accessible medium comprises data structures and computer executable components comprising an application programming interface for permitting applications to safely modify user choice settings in a manner that is verifiable and transparent to the user. The data structures define protected value objects and access control indicator data in a manner that is generally consistent with the above described method. Likewise the computer executable components are capable of performing actions generally consistent with the above described method.

The following discussion is intended to provide a brief general description of a computing system suitable for implementing various features of the invention. While the computing system will be described in the general context of a personal computer usable in a distributed computing environment where complementary tasks are performed by remote computing devices linked together through a communication network those skilled in the art will appreciate that the invention may be practiced with many other computer system configurations including multiprocessor systems minicomputers mainframe computers and the like. In addition to the more conventional computer systems described above those skilled in the art will recognize that the invention may be practiced on other computing devices including laptop computers tablet computers personal digital assistants PDAs and other devices upon which computer software or other digital content is installed. In particular although the description of the computing system suitable for implementing various features of the invention will include numerous references to the Windows operating system and security subsystem and the Windows registry those skilled in the art will recognize that the invention may be practiced in the context of other operating systems and security subsystems and in the context of other ways of storing user choice settings other than in a Windows registry.

While aspects of the invention may be described in terms of applications and interfaces executed by an operating system in conjunction with a personal computer those skilled in the art will recognize that those aspects also may be implemented in combination with other program modules or subsystems such as a security subsystem of the operating system. Generally program modules include routines programs subprograms subroutines interfaces components data structures etc. which perform particular tasks or implement particular abstract data types.

For the sake of convenience much of the description herein is provided in the context of the Microsoft Windows operating system and associated security subsystem. However the references to specific types of protected values and access control indicators in the context of the Windows operating system such as the references to the Windows registry and the registry keys and the references to access control lists ACLs and access control entries ACEs are only illustrative and do not serve to limit the general application of the invention.

The protected user choice settings include among others settings where an application is chosen to handle a certain event by default or not as well as settings that alter the behavior of access points to applications. In an embodiment implemented in the Windows operating system the protected settings may include those that change the look of the Windows desktop experience. Table 1 below lists some examples of the types of user choice settings that may be protected.

In one embodiment the protected values are implemented as the values of keys in the Windows registry of the Windows operating system. A key for a user choice setting in the registry may include a string not shown indicating that it represents a user choice setting and should not be changed except as authorized by the user choice setting process . In one embodiment the string may include a reference to a document or other text not shown that includes instructions on how to use the user choice setting process to properly modify a user choice setting implemented as a key in the registry .

In one embodiment the registry keys for user choice settings function as objects that are protected by one or more access control indicators . The access control indicators restrict which users or entities can access the protected object i.e. the registry key and the indicators further specify how that access is restricted. Among other restrictions the access may be restricted to only allow read access where the protected value of the key may be read but not written or may be unrestricted i.e. the access may include write access to allow modification of the protected value stored in the key .

In one embodiment the access control indicators are implemented as access control entries ACE organized into an access control list ACL stored in an access control data repository . The ACL is defined as a list of security protections that apply to an object where the object can be a file process event or anything else having a security descriptor in accordance with the security subsystem of the Windows operating system. In this case the object is the registry key but in other embodiments it may be any object that contains the protected value . An ACE of an ACL contains a set of access rights and a security identifier SID that identifies a trustee in this case a user for whom the rights are allowed denied or audited. The operation of ACLs and ACEs in the security subsystem of the Windows operating system are known in the art and will not be further described except as they pertain to the description of embodiments of the present invention.

In operation an application interfaces with the user choice setting process to generate and or process a request to change a protected value for a user choice setting . The user choice setting process is responsible for generating a user choice UI to display to the user the current user choice settings as represented by the current protected values . In one embodiment the current user choice settings are displayed along with the user s other choices and the user choice setting process is further responsible for receiving from the user a user choice input to approve or decline the request by the application to modify the user choice setting s . An example of a user choice UI is described in further detail in below and in some embodiments may be generalized to include the display of multiple user choice settings represented by multiple protected values associated with one or more applications running concurrently on the user s computer.

In one embodiment upon receipt of a user choice input that approves the application s request the user choice setting process is responsible for modifying the protected value s in question in accordance with the user s preferences as communicated by the application or via further user choice input entered in response to the user choice UI . Before modifying the protected values the user choice setting process first modifies the access control indicators to the corresponding objects that contain the protected values in this case the registry keys in order to unlock the user choice settings that the application has requested to modify. Specifically the user choice setting process modifies the access control indicators to allow the user to write to the corresponding registry keys . In the context of the Windows operating system and associated security subsystem modifying the access control indicators may be accomplished in a number of different ways without departing from the scope of the claims that follow. For example in one embodiment modification entails giving the user the right to modify ACLs that secure registry keys that contain protected values e.g. to change read only access to write access and vice versa. In an alternate embodiment the user choice setting process may give the user ownership of objects being secured i.e. the registry keys since having ownership of an object enables the owner to modify the corresponding ACL as needed. In yet another variation of the embodiment the user choice setting process enables the user to take temporary ownership of the objects being secured during which time the owner user may temporarily modify the corresponding ACL as needed.

In one embodiment once the ACL or other access control indicator has been modified to permit the user to write to or otherwise modify the protected value the user choice setting process is further responsible for the actual modification of the protected value in this case updating the registry keys . Afterward the user choice setting process is further responsible for restoring the previous restrictions for reading and writing the protected values in this case changing the access control indicators to restore the system write read only restrictions that prevent the user and application from writing to the objects containing the protected values .

In view of the above described block diagram overview the system and method for protecting user choices advantageously protects a group of settings so that applications are deterred from tampering with the user s choices and settings and encouraged to respect user s preferences on how and when applications operate on the user s computer.

In one embodiment the logic implemented by the user choice setting process may be functionally organized into one or more processes. For the sake of illustration those processes may include an approval user interface process access control modification process and a protected value modification process . It is understood however that the logic may be organized into other processes without departing from the scope of the claims that follow. For example in one embodiment the user choice setting process may be implemented as an application programming interface or incorporated directly or indirectly into an application either during coding or during execution in an internal program function an external function residing in a program library a code segment or other programming module.

In the illustrated embodiment the approval user interface process is responsible for responding to user inquiries to change a user setting and includes obtaining the current protected values if any and displaying those protected values to the user along with their other options. The approval user interface process is further responsible for generating the user choice settings user interface to display the current values of the protected values and to receive an input from the user approving or disapproving an application s request to change the protected values.

The access control modification process is responsible for locking and unlocking the objects that contain the protected values . Unlocking the objects is accomplished by modifying the access control indicators to allow the user to write to the protected values . This includes taking temporary ownership of the objects that contain the protected values e.g. the registry keys and giving the user temporary write access. The access control modification process is further responsible for restoring the access control indicators back to their previous states i.e. locking the registry keys by removing the write access and returning to read only access after determining that the protected value has been successfully modified.

The protected value modification process is responsible for actually modifying the protected values once they have been unlocked by the access control modification process . The protected value modification process may be implemented using other existing APIs to modify values such as using a Windows registry API or other Windows registry function to update an unlocked registry key . Alternatively the user choice setting process may update the unlocked protected value directly. The protected value modification process may also be responsible for notifying the user whenever a protected value has been modified. For example in one embodiment the protected value modification process automatically generates a change notification to the user once the protected value has been modified whether the modification to the protected value was made in response to an approved request from an application or whether the modification to the protected value was made by an unauthorized application or any other entity outside of the user choice setting process .

In the illustrated embodiment the computing device in which the exemplary computing components are shown also include an operating system that provides executable program instructions for the general administration and operation of the device . Suitable implementations for the operating system are known or are commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein. Those of ordinary skill in the art will recognize that the computing device will also typically employ a memory and processor in which program instructions are stored and executed for operation of the processes that comprise the system to protect user choice settings. For example the memory may include computer program instructions for implementing the user choice setting process that operates in cooperation with the protected values and access control data to protect user choice settings in accordance with an embodiment of the invention. Likewise the memory may include other executable program instructions such as instructions for maintaining and updating the registry operating the applications and responding to requests received from applications .

Processing continues at processing block when the user choice setting process receives a call or other type of request from an application to change a user setting. In one embodiment the user choice setting process obtains the current value of the protected value from a registry for example reading the current value of a registry key that is the object containing the protected value. The process further generates a user choice setting UI to display the current value to the user and to obtain his or her approval of the request by the application to change the user settings i.e. to modify the protected values that represent the user choice settings.

Once the user choice settings UI has been generated the process receives the user input to approve or not approve the request to make changes to the user choice settings. At decision block the process determines whether the user input indicates that the request has been approved or not approved. If the request has not been approved then the process terminates any efforts to change the protected values at termination oval . On the other hand if the request has been approved then the process continues at process block illustrated in .

At process block illustrated in the user choice settings process first modifies the access control data that controls access to the desired protected value to allow the user to write to the protected value. As previously described this may be accomplished in a number of ways depending on the security subsystem employed by the system . For example in one embodiment the process employs a security subsystem that gives the user the right to modify ACLs that secure registry keys that contain protected values e.g. to lock and unlock protected values by changing read only access to write access and vice versa. In an alternate embodiment the user choice setting process may give the user ownership of objects being secured e.g. the registry keys since having ownership of an object enables the owner to modify the corresponding ACL that secures the object as needed. In yet another variation of the embodiment the system employs a security subsystem that enables the user to take temporary ownership of the objects being secured during which time the owner user may temporarily modify the corresponding ACL as needed.

In one embodiment once the protected value has been unlocked processing continues at process block where the user choice setting process generates a request to change a protected value for a user choice setting . At processing block the transaction can be acted on directly by the process or can be sent to an existing API such as the registry API . Either way the system changes the protected value for the user choice setting as requested by the application and as approved by the user.

Once the protected value has been modified processing concludes at preparatory block where the user choice setting process locks the modified protected value by resetting the access control data to allow only the operating system to write to the protected value and to restrict the user to only reading the values i.e. restoring the access restrictions that were imposed during the initialization process . In one embodiment locking the modified protected value is accomplished by modifying the ACL that secures the registry key to allow read only access. In one embodiment this may include returning temporary ownership of the access control data such as the ACL from the user to the system.

When callers attempt to write the protected values the write access is allowed because the callers are using a new shell registry function SHSetProtectedValue that implements the user choice setting process to first modify the ACL to unlock the protected values and to afterward modify the ACL to relock them.

However when callers attempt to write to the protected value using existing registry functions such as registry function RegWriteValue and shell registry function SHGetValue the attempt fails because the access control data e.g. the ACL is applied using the existing registry storage functions. The existing registry functions do not have the ability to lock and unlock the protected values as needed. In operation the existing registry functions fail because they compare the current user s ID against the owner and privileges in the ACL e.g. system write user read and deny the write operation.

While the presently preferred embodiments of the invention have been illustrated and described it will be appreciated that various changes may be made therein without departing from the spirit and scope of the invention. For example in one embodiment of the present invention the various components of the system to protect user choice settings and in particular the functionality of the user choice setting process as described with reference to the access control data and the registry may be implemented in different combinations of processes programs or interfaces and may be distributed across one or more computing devices.

