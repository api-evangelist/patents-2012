---

title: Fast switching hybrid video decoder
abstract: Techniques are presented herein for switching between a software decoder and a hardware decoder in a hybrid decoder. A video bit stream is received. The video bit stream is analyzed to determine whether or not the video bit stream can be decoded by the hardware decoder. When the video bit stream can be decoded by the hardware decoder, the video bit stream is routed to the hardware decoder and also stored in a first buffer. The video bit stream is decoded by the hardware decoder and when a reference frame is decoded, the reference frame is stored in a second buffer. When the video bit stream cannot be decoded by the hardware decoder, the video bit stream is routed to the software decoder for decoding. When an instantaneous decoder refresh (IDR) frame is decoded by the software decoder, the IDR frame is stored in the first buffer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09179144&OS=09179144&RS=09179144
owner: Cisco Technology, Inc.
number: 09179144
owner_city: San Jose
owner_country: US
publication_date: 20121128
---
Many microprocessors use a hardware accelerator to perform coding for video encoding and decoding. The hardware accelerator however is fixed to a particular coding and decoding codec standard and cannot be used for new codec standards and certain abstractions from the codec e.g. variations provided by a Network Abstraction Layer NAL that are used to provide variable bandwidth and network customization options under the International Telecommunication Union Telecommunications standardization sector ITU T H.264 advanced video codec AVC standard. The AVC standard is defined in part in Motion Pictures Expert Group version 4 MPEG 4 part 10. As a result some coding tasks for network abstraction can not be performed in hardware and in many instances can be performed in software.

In general codecs implemented using an Application Specific Integrated Circuit ASIC are faster and more energy efficient than codecs implemented in software and executed on a central processing unit CPU . For example many chip manufacturers provide H.264 AVC hardware decoding units as part of a graphics processing unit GPU . To facilitate hardware decoding several public application programming interfaces APIs have been provided by hardware manufacturers and software Operating System OS providers e.g. DirectX Video Acceleration DXVA is provided by Microsoft Corporation while Video Decode Acceleration Framework VDA is supplied by Apple Inc. For royalty free mobile platforms OMX Integration Layer IL is provided by the Khronos Group. The above mentioned APIs can be used by setting decoder parameters or by sending NAL data to the hardware decoding unit. The hardware decoding unit preprocesses the video bit stream along with API calls. However in many circumstances the hardware decoding unit will fail during NAL processing thereby resulting in a poor user experience.

Techniques are provided herein for fast switching in a hybrid video decoder having a hardware decoder and a software decoder. A video bit stream is received at the hybrid decoder. The video bit stream is analyzed to determine whether or not the video bit stream can be decoded by the hardware decoder. When the video bit stream can be decoded by the hardware decoder the video bit stream is routed to the hardware decoder and also stored in a first buffer. The video bit stream is decoded by the hardware decoder and when a reference frame is decoded the reference frame is stored in a second buffer. When it is determined that the video bit stream can not be decoded by the hardware decoder the video bit stream is routed to the software decoder and decoded by the software decoder. When an instantaneous decoder refresh IDR frame is decoded by the software decoder the IDR frame is stored in the first buffer. The use of the first and second buffers to store the requisite data allows the hybrid decoder to rapidly switch between the software and hardware decoders based on the contents of the received video bit stream. These techniques may be embodied in apparatus form as well as in the form of a computer readable media storing instructions that when executed by a processor cause the processor to perform operations described herein.

When using a NAL e.g. an H.264 NAL enhanced coding efficiency can be obtained in a variety of network environments e.g. cable television video over Internet Protocol IP Digital Subscriber Line DSL satellite digital storage wireless Long Term Evolution LTE networks and the like. The enhanced coding efficiency becomes more beneficial as the transmission bandwidth decreases. A NAL facilitates this by formatting a Video Coding Layer VCL representation of the video along with header information to accommodate the network transport layer that ultimately terminates e.g. at a user video device or interim storage device. In other words NAL among other functions maps video to the transport layer.

NAL processed video is transmitted in NAL units having a header and a video payload. As such NAL units can be used for packet or bit stream transport generically referred to herein as a bit stream. When NAL streaming is employed a sliding or other correlator is employed with known bit patterns that define a NAL boundary. For NAL packet based transport e.g. IP or Real time Transport Protocol RTP the packets or headers are used to delineate NAL boundaries. Most of the transported data are VCL units such as sampled video video slices or macroblocks while non VCL data is used to transport parameters and enhancement data timing that are not sampled video.

Parameters or parameter sets carried in non VCL units may apply to a single coded picture or a sequence of coded pictures e.g. a larger number of NAL units. Accordingly the non VCL units decouple slowly changing information e.g. encoding type from more rapidly changing information e.g. the video itself. By way of example the non VCL units may indicate that the video is Phase Alternating Line PAL coded using context adaptive variable length coding CAVLC format or context based binary arithmetic coding CABAC format.

A set of NAL units in a specified form e.g. specified using non VCL units is referred to as an Access Unit AU . AUs are a set of NAL units that form a complete picture e.g. a single viewable picture in a video sequence. For example a set of video slices or VCL NAL units that form a single full screen of video is an AU. AUs may consist of base or intra coded pictures or inter coded pictures. Intra coded pictures can be decoded without decoding any other picture while inter coded pictures are predicted from other intra or inter coded pictures i.e. intra pictures are self contained while inter pictures need another decoded picture to predict from e.g. for motion prediction. In the context of NALs decoded intra pictures may be considered IDR pictures or frames. Furthermore since intra pictures are complete in and of themselves they are commonly used as reference pictures for motion prediction.

By virtue of the NAL and other encoding parameters to be described later video reaching a hardware decoder may have issues that prevent the decoder from fully rendering decoded video at the receiving endpoint. According to the techniques described herein hardware decoder deficiencies can be compensated for by using a hybrid decoder that fast switches the video bit stream between the hardware decoder and a software decoder as necessary. However switching from a hardware decoder to a software decoder requires a finite amount of time that may disrupt video presented to a user. Briefly the techniques presented herein minimize video disruption to the user whether by switching from hardware to software decoders or vice versa by employing a storage buffer. Further the ability to switch between decoders with minimal disruption to the user experience is achieved by the techniques presented herein.

Referring first to an example block diagram is shown for a hybrid decoder having a software decoder and a hardware decoder . The hybrid decoder may comprise a CPU e.g. a digital signal processor DSP and an on or off chip hardware encoder decoder ECD that is described hereinafter in connection with . The hybrid decoder has a transfer buffer and a decoder switch or flag . As shown NAL data is received by hybrid decoder decoded and output as rendered video at .

The decoder flag is for example a binary state machine bit or switch that indicates whether NAL data is to be decoded by software decoder or hardware decoder . When acting as a switch decoder flag switches NAL data between software decoder and hardware decoder . Conceptually a binary state machine has two states e.g. 0 or 1 true or false or on or off. depicts a state in which NAL data are decoded software decoder while described hereinafter depicts a state in which NAL data are decoded by hardware decoder . The assignment of states can be a matter of design or ease of implementation e.g. 0 indicates use software decoder while 1 indicates use hardware decoder or vice versa.

In the example shown in NAL data are decoded by software decoder and sent to a video rendering device. At the same time when a new IDR frame is obtained it is stored in transfer buffer . As mentioned above hybrid decoder is preferentially operated using hardware decoder because a hardware decoder is generally faster and more energy efficient than a software decoder. To this end software decoder or another component monitors NAL data to determine if and when NAL data can be switched to hardware decoder . If NAL data can be switched to hardware decoder then software decoder signals decoder flag to switch states. By virtue of the IDR frame or frames stored in transfer buffer hardware decoder can immediately start to decode any NAL data that it receives. This is one technique for fast switching from a software decoder to a hardware decoder.

Turning now to hybrid decoder from is shown again but in this figure decoder flag is set to the hardware decode state or mode and NAL data are routed to hardware decoder . In addition the hardware decoder has an NAL data preprocessor a memory management control operation MMCO and a decode picture buffer DPB . Hardware decoder decodes NAL data for rendering e.g. at a video device . At the same time NAL data are stored in transfer buffer should switching to the software decoder occur. When a new reference frame is decoded it is stored by MMCO in DPB . Thus when switching to the software decoder the previously stored NAL data can be merged with the NAL data being received. Furthermore by transferring one or more reference frames from DPB to the software decoder seamless near real time decoding of the NAL data is performed by the software decoder.

NAL data preprocessor is largely a software function as indicated by the dashed box. NAL data preprocessor preprocesses NAL data in order to determine if any decoding problems may occur when NAL data are eventually decoded by hardware decoder . If and when preprocessor determines that a hardware decoder error will occur hardware decoder or other component signals decoder flag to switch states to decode NAL data by a software decoder e.g. software decoder . If a potential error is not detected by NAL data preprocessor the NAL data are forwarded for hardware decoder API calls.

While hardware decoding may be preferred switching to software decoding can preserve video rendering for the end user. As mentioned above by storing NAL data in a transfer buffer and storing reference frames in a DPB software decoder can immediately start to decode any NAL data that it receives. This constitutes another technique for fast switching from a hardware decoder to a software decoder. The DPB may be part of a memory that may be stand alone or part of a processor memory. Reference frames may be e.g. IDR intra or other inter reference frames. Transfer buffer or DPB may be implemented e.g. as a buffer pool a first in first out FIFO or circular buffer for storing video bits streams reference frames IDR frames and the like.

Note that in a real time application absent a transfer buffer or DPB either of the decoders has to request and wait for an IDR frame to begin any decoding sequence thereby delaying video to the end user. The delay is a function of the condition and bandwidth of the transport network. By using the transfer buffer and DPB switching is faster than waiting for an IDR frame from the network in real time.

Preprocessing of a bit stream may include parsing the video bit stream. MMCO commands may be recorded during parsing. MMCO commands are inserted by the encoder in order for the decoder to manage decoded pictures. When a decoded result from the hardware API indicates that a reference frame has been decoded the reference frame is stored in the DPB and managed by MMCO . The decoded results in stored DPB are prepared data that can be used to switch to the software decoder.

When in the hardware decoding mode e.g. as indicated by decoder flag the hardware decoder parses NAL data for limitations in each NAL AU. If the NAL data were not checked and an unsupported bit stream is sent to the hardware encoder decoding will result in an error or decoder crash. A hardware decoder error or failure may not be acceptable in certain products or applications. The parameters that are used for checking NAL data limitations can be chosen by the design engineer based on the code in use e.g. AVC or SVC encoding syntax. When in the software decoding mode e.g. as indicated by decoder flag and no limitations are found in the NAL data the AU type is for each received frame is checked to see if an IDR frame has been received. Once the IDR frame is received a switch to the hardware decoder can be made. In some applications the initial NAL data parsing should be performed in the software mode since it is presumed that the software decoder can otherwise decode a bit stream with a hardware decoder limitation.

Referring to an apparatus e.g. hybrid decoder for decoding a video sequence or bit stream is shown. Hybrid decoder comprises hardware decoder e.g. a logic device such as an ASIC or field programmable gate array FPGA and a software decoder e.g. software decoder illustrated as a processing device e.g. a DSP and memory . The hardware decoder and the DSP may be connected to a network interface or input output I O device for reception and transmission of video NAL data and the like. Hybrid decoder has switching logic for switching data e.g. NAL data between the hardware decoder and DSP . Memory stores software hardware decoder switching process logic for performing NAL data analysis and signaling to determine when switching logic should switch between hardware and software decoder functions. Process logic software hardware decoder switching process logic may be referred to herein simply as process . Process is described in greater detail in connection with and

Switching logic may be a separate switch with switch signaling or a bit in a memory or register that either performs actual data switching or signals I O to route NAL data to the appropriate software or hardware decoder. Any suitable switching mechanism or data bus logic may be employed and switching logic is an example of how NAL data switching between a hardware decoder and software may be performed. It should be understood that the various signal paths shown between the components in are simplified for ease of illustration and that many signal pathways and supporting electronic components are not shown.

The processing functions shown in including process may be implemented by logic encoded in one or more tangible computer readable non transitory media or memory device e.g. embedded logic such as an ASIC DSP instructions software that is executed by a processor etc. e.g. memory . Thus the processing functions of the hardware decoder or DSP in combination with memory may be implemented with fixed logic or programmable logic e.g. a programmable processor programmable digital logic e.g. an FPGA or an ASIC that comprises fixed digital logic or a combination thereof. The memory may be separate or part of the DSP or hardware decoder or a combination thereof. The memory may be used to buffer bit streams as described above and store various instructions and data including IDR frames and reference frames as mentioned above. Various buffers may be employed or a memory sharing scheme may be used when memory may be limited. Thus in one form the techniques described herein may be embodied by one or more computer readable storage media encoded with software comprising computer executable instructions and when the software is executed operable to perform the operations described herein.

The DSP comprises a CPU and may comprise hardware decoder e.g. a hardware ECD if so designed and a memory that may be on chip or off chip memory e.g. memory . Accordingly since an on chip or off chip ECD may not support all of the various video codecs or that can decode all various NAL data structures that are received switching between a fixed hardware decoder and a software decoder provides for advantages described herein namely fast switching that aids the user experience when limitations of the hardware decoder are encountered. These techniques are applicable to various video coding techniques that may be outside the commonly employed H.264 MPEG standards including e.g. AVC or scalable video coding SVC . It should be understood that these video standards are examples only and other codecs may be employed e.g. Video Codec 1 VC 1 .

Turning now to and software hardware decoder switching process logic is now described. As shown in process is described as a generalized process with respect to both the software decoder and hardware decoder. In aspects of the process are described with reference to NAL data sent to the software decoder e.g. software decoder . In aspects of the process are described with reference to NAL data sent to the hardware decoder e.g. hardware decoder . These separate descriptions with respect to process are labeled processes and respectively.

Regarding at a video bit stream is received at a hybrid decoder comprising a software decoder and a hardware decoder. At the video bit stream is analyzed to determine whether or not the video bit stream can be decoded by the hardware decoder e.g. hardware decoder . At when it is determined that the video bit stream can be decoded by the hardware decoder the video bit stream is routed to the hardware decoder and also stored in a first buffer. The first buffer may be part of a memory or dedicated buffer e.g. transfer buffer . As the video bit stream is decoded by the hardware decoder when a reference frame is decoded the reference frame is stored in a second buffer e.g. DPB . At when the video bit stream can not be decoded by the hardware decoder the video bit stream is routed to the software decoder and decoded by the software decoder e.g. software decoder . When an IDR frame is decoded by the software decoder the IDR frame is stored in the first buffer e.g. transfer buffer shown in .

Referring now to an example flow chart is now described for more detailed operations generally described above in connection with for the software decoder. As in the previous examples NAL data is received by hybrid decoder which is illustrated with a dashed line to indicate that the flowchart depicts a process executed within hybrid decoder . At the NAL data is parsed or otherwise analyzed to determine if a bit stream limitation is found. At if a bit stream limitation is found processing continues with software decoding at . At if a bit stream limitation is not found parsing NAL data further reveals whether or not an IDR frame has been received. If an IDR frames has not been received then software decoding continues. At if an IDR frame has been received a switch to the hardware decoder is attempted otherwise software decoding continues. As described above video is rendered at .

In this example when the switch to the hardware decoder is attempted it may not always be successful for a number of reasons. For example the switch could be rejected by the hardware decoder. The hardware decoder may reject the decoder switch if it is not ready a proper IDR frame has not been detected in the transfer buffer or the hardware decoder can not process the switch signal e.g. an Interrupt Service Routine ISR can not be invoked. Although not previously described a handoff or handshake mechanism may be employed to verify a complete and accepted decoder transfer otherwise decoding remains with the software decoder.

Referring now to an example flow chart is now described for more detailed operations generally described above in connection with for the hardware decoder. NAL data is received by hybrid decoder which again is illustrated with a dashed outline. At the NAL data is preprocessed or otherwise analyzed to determine if a bit stream limitation is found. At if a bit stream limitation is found processing switches to software decoding. At if a bit stream limitation is not found API calls are made in order to decode the NAL data. An example API call may be made via the OpenMAX application to hardware API developed by the Khronos Group. APIs allow application developers to concentrate on application development without having to know the details of the underlying hardware i.e. the APIs allow a degree of hardware independence. At API exceptions or hardware decoder failure is monitored. If an exception or hardware decoder failure is detected a switch to the software decoder is made otherwise hardware decoding continues and video is rendered at .

The techniques described herein allow for fast switching between a hardware decoder and a software decoder when a hardware decoder limitation is encountered. A video bit stream is received at a hybrid decoder comprising a software decoder and a hardware decoder. The video bit stream is analyzed to determine whether or not the video bit stream can be decoded by the hardware decoder. When it is determined that the video bit stream can be decoded by the hardware decoder the video bit stream is routed to the hardware decoder and also stored in a first buffer e.g. transfer buffer e.g. shown in . The video bit stream is decoded by the hardware decoder and when a reference frame is decoded the reference frame is stored in a second buffer e.g. DPB shown in . When the video bit stream can not be decoded by the hardware decoder the video bit stream is routed to the software decoder and decoded by the software decoder. When an instantaneous decoder refresh IDR frame is decoded by the software decoder the IDR frame is stored in the first buffer. The use of the first and second buffers to store the requisite data allows the hybrid decoder to rapidly switch between the software and hardware decoders based on the contents of the received video bit stream.

If while routing the video bit stream to the hardware decoder it is determined that the video bit stream can not be decoded by the hardware decoder the software decoder decodes the video bit stream using the contents of the first and second buffers. For example API error a hardware exception or decode fail condition in the hardware decoder may be detected and the video bit stream is routed to the software decoder when the API error hardware exception or decode fail condition is detected.

If while routing the video bit stream to the software decoder it is determined that the video bit stream can be decoded by the hardware decoder the video bit stream is routed to the hardware decoder after an IDR frame is received. Once the video bit stream is routed to the hardware decoder the hardware decoder can decode the video bit stream using the contents of the first buffer.

To facilitate switching between the two decoders a routing flag bit or switch may be employed. When the video bit stream can be decoded by the hardware decoder a routing flag is set to a first state e.g. 0 or 1 or off or on otherwise the routing flag is set to a second state e.g. a state opposite to that of the first state. Accordingly the video bit stream is routed to the hardware decoder when the routing flag is set to the first state and routed to the software decoder when the routing flag is set to the second state.

The video bit stream may comprise an NAL that is parsed for parameters that indicate whether or not decoding of the video bit stream is supported by the hardware decoder. The video bit stream may be parsed for a video resolution or resolution ratio that indicates whether or not decoding of the video bit stream is supported by the hardware decoder.

Without the techniques describe herein e.g. by way of a fast switching hybrid decoder video rendered by the endpoint application may exhibit delay distortion macro blocking etc.

