---

title: Techniques for authenticating a user with heightened security
abstract: A method performed by a computing device is described. The method includes (a) receiving an authentication request from an application server seeking to authenticate a user for access to a service provided by the application server, (b) communicating with a first authentication server to obtain a first authentication of the user, (c) communicating with a second authentication server to obtain a second authentication of the user, the second authentication server being distinct from the first authentication server and the second authentication being of a type distinct from the first authentication, (d) rejecting the authentication request if and only if one or both of the first authentication and the second authentication is negative, and (e) upon rejecting the authentication request, sending a rejection message to the application server without informing the application server whether the first authentication or the second authentication was negative.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09032490&OS=09032490&RS=09032490
owner: EMC Corporation
number: 09032490
owner_city: Hopkinton
owner_country: US
publication_date: 20120912
---
This Patent Application is related to co pending U.S. patent application entitled BROKERING MULTIPLE AUTHENTICATIONS THROUGH A SINGLE PROXY filed on even date herewith by Anton Khitrenovich Oleg Freylafert Yedidya Dotan Larry Friedman and Karl Ackerman having Ser. No. 13 611 919 the contents and teachings of which are incorporated herein by this reference.

This Patent Application is related to co pending U.S. patent application entitled BROKERING MULTIPLE AUTHENTICATIONS THROUGH A SINGLE PROXY filed on even date herewith by Anton Khitrenovich Oleg Freylafert Yedidya Dotan Larry Friedman and Karl Ackerman having Ser. No. 13 611 919 the contents and teachings of which are incorporated herein by this reference.

Application servers such as virtual private network gateway servers restrict access by performing user authentication. In one conventional arrangement the application server delegates responsibility for the authentication to a remote authentication server e.g. a username password authentication server by sending an access request message to the remote authentication server. In another arrangement after the remote authentication server authenticates the user the application server initiates supplemental authentication by sending a second access request message to a second remote authentication server or a proxy device.

The above described approach may suffer from deficiencies. For example in the conventional approach the supplemental authentication is performed by the second remote authentication server only after success of the first authentication. Thus if a fraudster attempts from a single client machine to log in to many different user accounts in a ploy to find an account with an easy to crack password the second remote authentication server will not have knowledge of the failed requests from the same client machine to different accounts. If the supplemental authentication uses a risk based authentication scheme it would be useful for the second remote authentication server to have access to the knowledge of the failed attempts because it may signify that the login attempt is a high risk transaction. However in conventional approaches information about these failed attempts is not provided to the second remote authentication server.

As an additional example if the first authentication is one time password based authentication in which the user has a token that provides a temporary passcode if the remote authentication server challenges the user to respond with an updated passcode e.g. due to the use of an old passcode that challenge information is not provided to the second remote authentication server even if the primary authentication eventually succeeds after several challenges. However such information may be useful to the second remote authentication server if it performs risk based authentication because multiple challenges may be indicative of a replay attack.

Thus techniques are presented for utilizing an authentication broker for contacting multiple authentication servers and sending information gleaned from a first authentication by a first authentication server to a second authentication server for use by that second authentication server. Thus the application server only needs to communicate with a single device the authentication broker to allow for efficient authentication by two authentication servers the second authentication server being aware of details of the first authentication. These embodiments also provide enhanced security and robustness.

Further presented are features addressing a potential security loophole if failure of the first authentication precludes the second authentication from taking place wherein a fraudster may obtain knowledge that the first authentication was rejected rather than the second authentication which was not performed . This may be dangerous because if the fraudster has this knowledge then it may facilitate the ability of the fraudster to evade the authentications. Thus embodiments of the present invention are directed to techniques for performing a first authentication by a first authentication server and a second authentication by a second authentication server regardless of whether the first authentication succeeds or fails and refraining from indicating to the user which authentication failed if authentication is rejected.

In one embodiment a method performed by a computing device is described. The method includes a receiving an authentication request from an application server seeking to authenticate a user for access to a service provided by the application server b communicating with a first authentication server to obtain a first authentication of the user c communicating with a second authentication server to obtain a second authentication of the user the second authentication server being distinct from the first authentication server and the second authentication being of a type distinct from the first authentication d rejecting the authentication request if and only if one or both of the first authentication and the second authentication is negative and e upon rejecting the authentication request sending a rejection message to the application server without informing the application server whether the first authentication or the second authentication was negative. A corresponding apparatus and computer program product are also described.

Embodiments of the invention are directed to techniques for performing a first authentication by a first authentication server and a second authentication by a second authentication server regardless of whether the first authentication succeeds or fails and refraining from indicating to the user which authentication failed if authentication is rejected.

Client may be any kind of computing device such as for example a personal computer a workstation a server an enterprise server a laptop computer a mobile computer a smart phone a tablet computer etc. A user operates the client in order to attempt to gain access to a service e.g. a web site a file share a virtual private network etc. running on or accessible via the application server or to access a protected resource e.g. a storage array a camera a virtual private network etc. guarded by the application server . For example the user may desire to access a virtual private network VPN accessible via the application server as a VPN gateway. In order to do so the user executes login client on the client and attempts to log in to the application server to access the VPN or other service or resource using the login client . It should be noted that a user accessing a protected resource guarded by the application server may be considered to be a species of the more generic description of a user accessing a service running on or accessible via the application server since the service may include the application server providing a gateway to the protected resource .

Application server may be any kind of computing device such as for example a personal computer a workstation a server an enterprise server a laptop computer a mobile computer a smart phone a tablet computer etc. although typically application server will be a server or an enterprise server.

Authentication broker may be any kind of computing device such as for example a personal computer a workstation a server an enterprise server a laptop computer a mobile computer a smart phone a tablet computer etc. although typically authentication broker will be a server or an enterprise server. Further detail with respect to authentication broker will be provided below in connection with .

CBA server may be any kind of computing device such as for example a personal computer a workstation a server an enterprise server a laptop computer a mobile computer a smart phone a tablet computer etc. although typically CBA server will be a server or an enterprise server such as an RSA SecurID Appliance produced by RSA The Security Division of EMC based in Hopkinton Mass. running Authentication Manager software produced by RSA The Security Division of EMC. CBA server is configured to perform CBA on credentials provided by client via application server and authentication broker . For example user may type a username and password into login client running on client . The username and password in this example are the credentials that are sent to the CBA server via application server and authentication broker . As another example user may operate a token for example an RSA SecurID token produced by RSA The Security Division of EMC to generate a one time passcode OTP . The user may either type the OTP into the login client running on client possibly together with a username and password or the token may connect directly to client in order to directly transmit the OTP to the login client . In this example the credentials may include the OTP as well as in some embodiments also the username and password .

RBA adapter may be any kind of computing device such as for example a personal computer a workstation a server an enterprise server a laptop computer a mobile computer a smart phone a tablet computer etc. although typically RBA adapter will be a server or an enterprise server. RBA adapter is configured to collect additional data from the user and client in order to pass the additional data on to RBA server in order for RBA to be performed such as for example Adaptive Authentication provided by RSA The Security Division of EMC. While CBA is a deterministic determination based on the correctness of the credentials RBA is a complex determination that evaluates a plurality of factors e.g. number of login attempts location of the user time since last successful login time since last login attempt whether the client has been used for successful logins before whether the client is known to be used by fraudsters etc. associated with a particular transaction e.g. a login attempt in order to assess a risk that that particular transaction is fraudulent. In some embodiments RBA allows for asking a user for more data e.g. a user generated challenge question such as What high school did you go to in suspicious circumstances. In some of these embodiments this communication of additional data may involve out of band communication e.g. user receives information via e mail SMS text message or telephone and then transmits the received information to the RBA adapter in band user is requested to send additional data to the RBA adapter via e mail SMS text message or telephone etc. The additional data collected by RBA adapter may include the network address of the client the type and version of the browser and or login client running on client etc.

RBA server may be any kind of computing device such as for example a personal computer a workstation a server an enterprise server a laptop computer a mobile computer a smart phone a tablet computer etc. although typically RBA adapter will be a server or an enterprise server. RBA server is configured to perform RBA as mentioned above.

The various components of the system communicate with one another along communication paths as indicated by the solid lines in . These communication paths may be of any type but typically they are network based for example over a local area network a wide area network or a storage area network although other arrangements are possible such as for example point to point connections serial bus connections or a fabric of hubs and switches.

The dotted line indicates that RBA adapter is configured to communicate an RBA decision to the authentication broker however this may be done in an indirect manner. For example RBA adapter sends the RBA decision which it has received from RBA server to a depository server which stores the RBA decision in conjunction with a username and or transaction identifier. Authentication broker is then able to query depository server in order to obtain the RBA decision.

Authentication broker also contains a processor and memory . Processor may be any kind of processor configured to perform operations such as for example a microprocessor a multi core microprocessor a digital signal processor a collection of electronic circuits or one or more of the above. Memory may be any kind of digital memory such as for example random access memory read only memory static memory volatile memory non volatile memory system memory solid state storage disk based storage or some combination of the above. Memory stores programs executing on processor as well as data used by those programs. Memory stores an operating system a Remote Authentication Dial In User Service RADIUS proxy application a session broker program and a SOAP client program all of which run on processor . Memory typically includes both a system memory portion for storing programs and data in active use by the processor as well as a persistent storage portion e.g. solid state storage and or disk based storage for storing programs and data even while the authentication broker is powered off. The RADIUS proxy application session broker program and SOAP client program are typically stored both in system memory and in persistent storage so that they may be loaded into system memory from persistent storage upon a system restart. The RADIUS proxy application session broker program and SOAP client program when stored in non transient form in system memory form a computer program product. The RADIUS proxy application session broker program and SOAP client program when stored in non transient form in persistent storage form a computer program product as well.

Authentication broker is designed to serve as a front end for various functions such as for example CBA. In order to do so it includes the functionality of RADIUS proxy whereby it is able to offload CBA tasks to a remote server such as CBA server which is able to specialize in CBA while authentication broker is able to perform other tasks. It should be understood that in some embodiments the functionality of CBA server may be provided by a CBA application server running on the same machine as authentication broker .

RADIUS proxy operates according to the RADIUS protocol defined by RFC 2865 promulgated by the Internet Engineering Task Force of Fremont Calif. in June 2000 and updated by various additional RFCs such as RFC 2868 RFC 3575 and RFC 5080. The contents and teachings of RFCs 2685 2868 3575 and 5080 are incorporated herein by this reference in their entirety. RADIUS proxy contains a request path and a response path . Request path receives incoming RADIUS request messages received via network interface from application server and forwards in some cases with modification the request messages on towards the CBA server via network interface . Response path receives incoming RADIUS response messages received via network interface from CBA server and forwards in some cases with modification the response messages on towards the application server via network interface . Interception module sits within request path and response path and intercepts certain request messages and response messages for processing by session broker . Thus many RADIUS response messages upon receipt by response path are intercepted by interception module and sent to session broker which sends details of each particular RADIUS response message to SOAP client to be sent to the RBA server via network interface . SOAP client sends information to the RBA server in an XML based format such as the SOAP format version 1.2 promulgated by the World Wide Web consortium of Cambridge Mass. as a Recommendation on Apr. 27 2007 the contents and teachings of which are incorporated herein by this reference in their entirety. In addition RADIUS access accept and access reject messages may be converted into access challenge messages with different parameters by session broker prior to being returned to response path .

Upon receiving the access challenge message with the parameter indicating that an RBA challenge should be performed application server sends a re direct command to the login client directing the login client towards RBA adapter . Login client sends a page request for an RBA page to RBA adapter which responds by returning an RBA page to the login client . RBA page includes various queries for additional information that may be useful in performing RBA. Some of these queries may be automatically responded to by login client while other queries may be responded to by user . These additional details in response to the queries are then sent from login client to RBA adapter . RBA adapter is then able to create and send an access request message containing the additional details to the RBA server for performance of RBA . The RBA includes either a positive or a negative determination based on a real time risk assessment of the login attempt in light of the additional details and the previously received decision information as well as other stored information regarding previous login attempts by the same user or received from the same client . RBA server then sends an access response message indicating whether the RBA was positive or negative back to the RBA adapter . RBA adapter then informs authentication broker typically indirectly via depository server of the RBA access decision . RBA adapter also sends a reply page back to the login client . In some embodiments reply page only includes a hidden indication of whether the RBA was positive or negative so that the login client does not display that information to the user . In other embodiments reply message may not even include any information about the RBA decision at all the reply message merely directing the login client to reply to the application server in response to the re direct command . In any case login client sends a re login request message to the application server . Application server then sends a RADIUS access request message to the authentication broker .

Since the authentication broker already knows what the result of the RBA authentication was via RBA access decision from RBA adapter or depository server authentication broker is able to easily process the access request message in processing step . As long as both the CBA and the RBA were both positive the login attempt is successful and response path under control of session broker sends a RADIUS access accept message back to application server as the access response . However if one or both of the CBA and the RBA were negative then response path under control of session broker sends a RADIUS access reject message back to application server as the access response . Application server performs a processing operation on the access response and sends an appropriate access decision back to the login client so that the user is informed whether the login attempt was successful or not. If successful user is then able to access the service or resource as initially desired.

At this point in one embodiment described in further detail in connection with below operation skips over the steps of box down to the bottom of and response path merely forwards the access reject message unmodified as access reject message to application server . Application server performs a processing operation on the access response and sends an access rejection message back to the login client so that the user is informed that login attempt was unsuccessful.

Alternatively in another embodiment associated with below operation proceeds with the contents of box in order to initiate RBA upon performing processing and sending decision information . There are two reasons why it may be advantageous to operate in this manner. First it allows collection of additional details by the RBA adapter that would not be available to the RBA server for future RBA decisions were the contents of box omitted. Second operation from the perspective of the user appears the same whether or not the CBA server accepted or rejected the authentication thereby preventing the user from learning whether any rejection was issued by the CBA server or the RBA server . This hiding of information can increase system security by giving less direction to a fraudster seeking to impersonate a valid user .

In box upon performing processing in response to receiving the access reject message session broker modifies the incoming access reject message to create a RADIUS access challenge message containing a parameter indicating that an RBA challenge should be performed. Session broker then sends the modified access challenge message to the response path so that the modified access challenge message can be sent to the application server via network interface . Upon receiving the modified access challenge message with the parameter indicating that an RBA challenge should be performed application server sends a re direct command to the login client directing the login client towards RBA adapter . Login client sends a page request for an RBA page to RBA adapter which responds by returning an RBA page to the login client . RBA page includes various queries for additional information that may be useful in performing RBA. Some of these queries may be automatically responded to by login client while other queries may be responded to by user . Additional details in response to the queries are then sent from login client to RBA adapter . RBA adapter is then able to create and send an access request message containing the additional details to the RBA server . In response to receiving the access request message RBA server may immediately respond with a rejection message since RBA server already knows from decision information that the CBA server has already rejected the authentication. RBA adapter then sends a reply page back to the login client . In some embodiments reply page only includes a hidden indication of whether the RBA was positive or negative so that the login client does not display that information to the user . In other embodiments reply message may not even include any information about the RBA decision at all the reply message merely directing the login client to respond to the application server . In any case login client sends a re login request message to the application server . Application server then sends a RADIUS access request message to the authentication broker . Since the authentication broker already knows that the CBA server has already rejected the authentication session broker knows that the proper response to the access request message is to issue an access reject message as described previously.

Although communication of the additional details from the RBA adapter to the RBA server has been described as being done via an access request message with a corresponding rejection message being sent back this may not be necessary in embodiments in which the RBA adapter is already aware that the CBA server has already rejected the authentication. In such embodiments the additional details from the RBA adapter to the RBA server may be sent as an informational message rather than as an access request message and the rejection message is not sent since the RBA adapter is already aware that the CBA server has already rejected the authentication.

Upon receiving the modified access challenge message with the parameter indicating that an NTC challenge should be performed application server sends an NTC challenge page or a CBA challenge page for another type of CBA challenge to the login client . The user is then able to respond to the challenge by entering in a new OTP or other challenge information in order that the login client is then able to send the NTC or other challenge information back to the application server . Upon receipt application server sends the NTC to the authentication broker to be authenticated by sending a RADIUS access request message with the NTC as a parameter. Request path of the authentication broker receives the access request message and forwards the request on to the CBA server as message . CBA server then performs an authentication function in order to decide whether to accept reject or challenge the login attempt and operation resumes with the step or of methods or respectively as appropriate.

In step RADIUS proxy at request path forwards the user credential to the CBA server via the network interface for CBA to be performed by the CBA server . Typically this forwarding involves sending RADIUS access request message which may either be an exact copy of RADIUS access request message respectively or it may include minor modifications .

In step RADIUS proxy at response path receives an authentication decision message e.g. RADIUS access accept message RADIUS access reject message or RADIUS access challenge message from the CBA server .

In step interception module intercepts the received authentication decision message and sends it to the session broker which directs the SOAP client to send via the network interface decision information regarding the received authentication decision message to the RBA server the decision information to be used by the RBA server in performing RBA decisions. The decision information includes the user credentials as well as an indication of the authentication decision positive negative or challenge made by the CBA server .

In parallel with step authentication broker also performs one of steps and . Session broker determines which of steps to perform based on what kind of authentication decision message has been received.

In step if the authentication decision is positive e.g. if it is access accept message then session broker generates a challenge message e.g. access challenge message indicating that the application server should initiate RBA to be performed by the RBA server supplementary to the CBA and inserts that challenge message into the response path to be sent to the application server via network interface . In response in step authentication broker receives at request path a challenge response message e.g. access request message from the application server via network interface . In some embodiments the challenge response message includes an indication of what the RBA decision was while in other embodiments the challenge response message includes no indication as to what the RBA decision was in order to avoid the user finding out what the RBA decision was . Interception module intercepts the challenge message and sends it to the session broker which in step verifies what the result of the RBA was independently of the application server for example by contacting depository server to retrieve the RBA decision without any possibility of tampering by the user . In step if the verification indicates that the RBA was successful then since the CBA was also successful then session broker generates an acceptance message e.g. a RADIUS access accept message as access response message indicating that the authentication was successful and inserts that acceptance message into the response path to be sent to the application server via network interface thereby causing application server to grant the user access to the service or resource .

In step if the authentication decision is negative e.g. if it is access reject message then in step session broker generates a rejection message e.g. access reject message indicating that the authentication was unsuccessful and inserts that rejection message into the response path to be sent to the application server via network interface thereby causing application server to refuse the user access to the service or resource . In some embodiments prior to performing step in step session broker generates a challenge message e.g. access challenge message indicating that the application server should initiate RBA to be performed by the RBA server supplementary to the CBA and inserts that challenge message into the response path to be sent to the application server via network interface . In response in step authentication broker receives at request path a challenge response message e.g. access request message from the application server via network interface . At this point since the session broker knows that the CBA was unsuccessful it doesn t matter what the result of the RBA was steps and serving to ensure that the RBA server obtains the necessary additional details and to hide the outcome of the CBA from the user by performing RBA regardless of the result of the CBA so authentication broker is able to immediately issue a rejection by proceeding to step .

In step if the authentication decision is a challenge e.g. if it is access challenge message then session broker generates a challenge message e.g. access challenge message indicating that the application server should initiate a CBA challenge and inserts that challenge message into the response path to be sent to the application server via network interface . Operation then proceeds with step as the authentication broker then receives a challenge response message e.g. access request message containing the NTC as the user credentials the challenge response message then being processed in the same manner as an initial access request message .

In step authentication broker receives an authentication request message e.g. access request message from an application server seeking to authenticate a user for access to a service or resource provided by the application server .

In step authentication broker communicates with a first authentication server e.g. CBA server to obtain a first authentication of the user e.g. using CBA and one or more credentials provided by the user . The result of the communication with the first authentication server may be positive negative or a challenge.

In step authentication broker communicates with a second authentication server e.g. RBA server to obtain a second authentication of the user e.g. using RBA additional details provided by the user to perform RBA . The result of the communication with the second authentication server may be either positive or negative.

The first authentication step and the second authentication step although depicted as being done in that order may actually be performed in parallel or even the second authentication step may precede the first authentication step . Typically however the first authentication step is done first so that the authentication server is able to send decision information regarding the first authentication to the second authentication server for use in the second authentication.

In step authentication broker rejects the authentication request if either or both of the first authentication step and the second authentication step yield negative results. Otherwise if both of the first authentication step and the second authentication step yield positive results then authentication broker accepts the authentication request. If the first authentication attempt step yields a challenge then the first authentication attempt step may be repeated until a positive or negative result is reached or until the second authentication attempt yields a negative result which would render the result of the first authentication attempt moot .

Upon rejecting the authentication request see step above in step authentication broker sends a rejection message e.g. access reject message to the application server without informing the application server whether the first authentication step or the second authentication step was negative.

Thus techniques have been described for performing a first authentication by a first authentication server e.g. CBA server and a second authentication by a second authentication server e.g. RBA server regardless of whether the first authentication succeeds or fails and refraining from indicating to the user which authentication failed if authentication is rejected.

While various embodiments of the present disclosure have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present disclosure as defined by the appended claims.

For example it should be understood that although reference has been made to the RADIUS protocol this is by way of example only. Various other authentication protocols such as for example SAML and OAuth could be used instead with only minor modifications.

As an additional example it should be understood that although reference has been made to the SOAP protocol this is by way of example only. Various other remoting protocols such as for example REST CORBA and COM could be used instead with only minor modifications.

As an additional example it should be understood that although the RBA process has been described as involving one set of queries within RBA page for additional information and one set of additional details this is by way of example only. In some embodiments there may be more than one back and forth exchanges in which RBA adapter sends several RBA pages to client with various queries and client sends several sets of additional details back to RBA adapter . There may also be several exchanges of access request messages and access response messages between RBA adapter and RBA server as needed.

As an additional example it should be understood that although various embodiments have been described as being methods software embodying these methods is also included. Thus one embodiment includes a tangible non transient computer readable medium such as for example a hard disk a floppy disk an optical disk computer memory flash memory etc. programmed with instructions which when performed by a computer or a set of computers cause one or more of the methods described in various embodiments to be performed. Another embodiment includes a computer which is programmed to perform one or more of the methods described in various embodiments.

Furthermore it should be understood that all embodiments which have been described may be combined in all possible combinations with each other except to the extent that such combinations have been explicitly excluded.

Finally nothing in this Specification shall be construed as an admission of any sort. Even if a technique method apparatus or other concept is specifically labeled as prior art or as conventional Applicants make no admission that such technique method apparatus or other concept is actually prior art under 35 U.S.C. 102 such determination being a legal determination that depends upon many factors not all of which are known to Applicants at this time.

