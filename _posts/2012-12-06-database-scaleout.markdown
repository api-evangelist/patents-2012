---

title: Database scale-out
abstract: A method for scaling out database information may include creating second database instantiation. The method may include configuring one or more partitions of a first database for transfer to the second database and configuring the second database for receiving the one or more first database partitions. The method may also include transferring the one or more first database partitions to the second database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189503&OS=09189503&RS=09189503
owner: Microsoft Technology Licensing, LLC
number: 09189503
owner_city: Redmond
owner_country: US
publication_date: 20121206
---
Databases are software systems that support the storage of data as collections of logical constructs called tables each of the tables containing records with a specified structure. As the number of applications grows in a single database the load on that database may become be too high for the database to provide reasonable response times. One approach to solving this problem is adding more storage in the database for the additional data. However this solution may increase data delivery time providing a less desirable end user experience. Further in some instances scaling out of a database may be necessary because scaling up e.g. adding additional disk space RAM CPU etc. has practical and physical limitations e.g. a single database server may only support a certain amount of RAM .

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description section. This summary is not intended to identify key features or essential features of the disclosure subject matter nor is it intended to be used as an aid in determining the scope of the disclosure.

Embodiments are provided to enable database scale out. A database reaching capacity may be scaled out in real time to provide additional databases and decrease the load on a single database. To this end methods and systems providing scale out of database content are disclosed. A first database may be at or near capacity and a server component may be triggered to initiate a data move. The server component may then execute a process for creating or extending a second database and transferring a portion of first database data to the second database.

An embodiment includes a method for providing scale out of database content. The method may generally include creating an instantiation of a second database the second database instantiation based in part on a first database reaching capacity configuring one or more partitions of the first database for transfer to the second database configuring the second database to receive the one or more first database partitions and transferring the one or more first database partitions to the second database.

A computer readable medium comprising executable instructions that when executed by a processor provide scale out of database content is also disclosed. The computer readable medium includes instructions executable by the processor for creating an instantiation of a second database the second database instantiation based in part on a first database reaching capacity configuring one or more partitions of the first database for transfer to the second database configuring the second database for receiving the one or more first database partitions and transferring the one or more first database partitions to the second database.

A computer readable medium comprising executable instructions that when executed by a processor provide scale out of database content is also disclosed. The computer readable medium includes instructions executable by the processor for receiving an alert message from a first database the alert message indicating that the first database is reaching capacity creating a first data sub range for the first database the first data sub range having a read only mode extending a range of a second database to at least the range of the first data sub range creating a second data sub range on the second database the second data sub range having a changing mode the second data sub range created at a database location adjacent to the first data sub range transferring data associated with key values representing a start point and an end point of the first data sub range to the second database changing the mode of the second data sub range to read only changing the mode of the first data sub range to deleted removing the second data sub range on the second database which changes the data mode of contained data to read write clearing the first data sub range on the source database which causes the source database data range to contract to exclude the first data sub range and deleting the data in the first database associated with the key values.

In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

Embodiments are provided to enable real time database scale out for databases reaching capacity. Methods and systems providing database scale out are disclosed. In the embodiments described herein the database scale out systems and methods provide improved response time in the fast access scenarios to data in systems with rapidly growing data size and user base. The methods and systems provide flexible scaling out where any database may be dynamically divided which provides increased reaction time to changing user behavior.

The database scale out system provides the necessary mechanisms for any database to implement data transfer operations between databases. Embodiments herein also provide a set of rules for runtime operations which may enable runtime operations running in parallel with data transfer operations between databases. Embodiments herein further provide a data transfer history of data states which may be utilized to select a data recovery application in instances where a database is recovered from a back up executed during the data transfer.

Referring now to the drawings in which like numerals represent like elements various illustrative embodiments will now be described. illustrates the high level architecture of a system for providing database scale out according to one embodiment. The system shown in is for illustration purposes only. The computer system and its components include functionality to communicate with other computing devices communication devices and or other systems and are not intended to be limited to the embodiments and examples described herein.

As shown in the computer system includes without limitation a first databases and second database in communication with a server . First and second databases may hereinafter also be referred to as source and destination databases respectively. Generally the databases may be configured to store a collection of related data such as the financial transactions of a business. In exemplary embodiments the first and second databases may be configured to be operable with SharePoint services technology to provide access to data stored in the databases for use in workflows documents etc. The databases include associative structures. Associative structures are transparent to the users of the database but are necessary for efficient operation and control of the database management system. An example of an associated structure is an index typically but not necessarily in the form of a B tree or a hash index.

The first and second databases may preferably be relational databases in which data is organized in multiple tables having a two dimensional column and row form. For instance a relational database may particularly include a relational database management system RDBMS which may be a control system that supports database features including but not limited to storing data on a memory medium retrieving data from the memory medium and updating data on the memory medium. Generally data stored in a relational database is accessed by way of a user defined query that is constructed in a query language such as SQL. Typically for any given SQL query there are numerous procedural operations that need to be performed on the data in order to carry out the objectives of the SQL query. For example there may be numerous joins and table scans that need to be performed so as to accomplish the desired objective. While the embodiments above describe a system including databases utilizing SQL database services technology it should be understood that the embodiments described herein should not be construed as being limited to SQL database services technology and that other database services technology from other developers and or manufacturers may also be utilized.

The server of may include a simplified SQL server RDBMS architecture. As described more fully below the server may include a database scale out module . In accordance with various embodiments the server may also include various program modules and application programs including without limitation server applications Application Programming Interfaces APIs a tools interface and the like. In some embodiments a database scale out procedure may be initiated by a user however in preferred embodiments the scale out procedure may initiate automatically for instance upon a database reaching capacity.

The database scale out module may provide the ability to transfer data between homogenous data sources. Specifically the database scale out module may provide a data transfer mechanism for transferring data between two databases with the same schema. This mechanism can be used to move scale out partitions of databases between multiple instances of the same implementation of a database server. To this end the system may provide communication between the database scale out module which may be a database management middle tier component of the server and the databases . Communications between the database scale out module and the databases may include the requests that manage a data range and scale out partitions for a given scale out for which the server is responsible. The database scale out module may be further configured to provide one or more the communication sequences used to perform data query and update operations on the server in relation to data ranges and partitions. The database scale out module relies on the fact that each database or database instance is configured to maintain a notion of data range and provide the necessary stored procedures to create and modify the database. The database scale out module may also send requests to read or write data into scale out partitions on the server using any known transport protocol to call stored procedures and to return return codes and result sets.

In one specific example a developer may notice that database deployment has slowed down considerably in one of his databases. When looking at the load of an SQL server the developer may notice that the database storing a certain type of document e.g. licenses is at or near capacity. The developer may have another server running SQL and may want to offload a portion of the data stored in the first database to another database. The system may enable the developer to initiate a data transfer to the second database. Upon transfer of at least a portion of the first database data response times may decrease due to the decreased load on the database. The system may alternatively provide dynamic data transfer deployment to ensure that data may be transferred from one database to another without user intervention if a need for a database scale out arises again.

It should be appreciated that the aforementioned program modules and application programs may be utilized to provide database scale out. It should be appreciated however that database and application programs from other manufacturers may also be utilized to embody the various aspects of the technical features discussed herein.

Turning now to a flow diagram illustrating a routine for providing database scale out at run time in accordance with various embodiments will now be described. In some embodiments the routine may be implemented via the system components and or applications described above with respect to . Further examples of the systems and methods described herein are also provided in . further illustrate a routine for providing database scale out according to an embodiment of the disclosure. Additional or alternative embodiments using components other than those described herein are also contemplated.

The routine begins at operation where a message regarding a first database capacity is received. For instance the database scale out module may receiving a message from the first database indicating that the first database is reaching capacity. Receiving a database capacity message may include receiving a request to move a pre determined amount of data to another database. For example a user may request to move one or more scale out partitions of the first database . A scale out partition may be collection of data about a logical entity. The move request may include a request to move one or more first database scale out partitions having a total weight equal to some percentage e.g. 50 of the total weight of all the first database scale out partitions. Alternatively a scale out may be triggered automatically and the amount of data to be moved may be pre determined by the system . Upon receiving the database capacity message and move request the database scale out module may then initiate a data transfer procedure.

From operation the routine continues to operation where a first database sub range is created. A data sub range may be subset of consecutive scale out partition keys inside a data range. A data range may be a range of binary key values associated with a start and an end point. As will be described in greater detail below the database scale out module may be configured to provide a data transfer operation between a source database and a destination database having adjacent data ranges. Specifically to effect a data transfer a first data range end point may be the same as a second data range start point. As illustrated in a first data sub range may be created at an end point of the first database . An initial range end point may be designated and may represent the end point of the original data range. A data sub range either starts with the same scale out partition key or ends with the same scale out partition key as the data range it belongs to does. A scale out partition key size may be specified. A scale out partition key may be a binary value that uniquely identifies a logical entity. An upper data sub range may be a data sub range that ends with the same scale out partition key as the data range it belongs to. Only one upper data sub range may exist inside a data range. The upper data sub range may include an upper data sub range end point. A lower data sub range may be a data sub range that starts with the same scale out partition key as the data range it belongs to. Only one lower data sub range may exist inside a data range. The lower data sub range may include a lower data sub range end point.

With respect to initiating sub range creation a procedure may be called to create a first data sub range in the first database with specified start and end points. For instance the database scale out module may send a request to create a data sub range at the first database. A data transfer may occur in chunks hereinafter also referred to as data sub ranges. A data move chunk may be a unit of data moved during a move operation that contains a set of scale out partitions designated at the beginning of the scale out procedure. A chunk size may be the limit for the sum of weight attributes of the scale out partitions in a data move chunk. The weight to move may be the limit for the sum of weight attributes of all the scale out partitions that have scale out partition keys falling into any of the data move chunks that are represented by the data move chunk limit points to be returned. As with a data range a data sub range may be a range of binary key values associated with a start and an end point. Specifically key values may be associated with the first data sub range start and end points to assist with transferring the data chunks. Key values may determine the way that the server responds to queries made to the scale out partitions. A database may include a single data sub range either at the beginning or at the end of its data range. A data sub range may be assigned a mode dictating the runtime behavior of the data residing in that data sub range. Data sub range mode may be the runtime state of the data sub range which determines the data access conditions for all of the scale out partitions that have scale out partition keys falling inside the data sub range. For instance when a first database sub range is created the data sub range may be designated as read only. The first data sub range may also be assigned a random identifier.

The database scale out module may be configured to call the first database to determine the total count and the total weight of the first database partitions available for scaling out. In preferred embodiments the total count may be the total number of partitions available for scaling out and the total weight may be the sum of the weight attributes of all the scale out partitions that are stored on the first database. The first database may provide a response message to the database scale out module including the total count and weight of all first database partitions. Upon receiving the response message the database scale out module may then calculate a percentage or other sub portion of the partitions. For instance continuing the example above the database scale out module may calculate 50 of the total weight and obtain the weight to move. The database scale out module may then create a data move plan for the calculated weight and receive one or more scale out partition keys from the first database to execute the data move. Upon receiving the scale out partition keys from the first database the database scale out module may call a procedure to create a first data sub range bounded by the scale out partition key and the start or end point of the current data range of the first database. The first database may create a first data sub range with the specified values. The database scale out module may then pass in the first data sub range mode as read only to this call.

From operation the routine continues to operation where the range of a second database may be extended. To this end the database scale out module may be further configured to expand the data range on for instance database . illustrates a extending a second database range to include a second sub range . In preferred embodiments the range of a second destination database may be extended to at least the range of the first data sub range on the first database . For instance a procedure may be called to extend the data range of the second database up to a designated scale out partition key received from the first database . The database scale out module may then extend the data range accordingly.

From operation the routine continues to operation where a second data sub range is created on the second database. For instance the database scale out module may create a second data sub range covering the extension of the second database. The second data sub range may be created at a database location adjacent to the first data sub range. The second database data range may be extended at either a start point or an end point. If the data range is extended by modifying the second database start point a second database data sub range will have the extended second database data range start point its start point and the original second database data range start point as its end point. If the data range is extended by modifying its end point the second data sub range will have the extended end point of the second database data range as its end point and the original end point of the second data range as its start point. illustrates a second data sub range created at a start point of the second database . In such instances the database scale out module may request the second data sub range be created at a second database point adjacent to the first database end point. Extending the second database range may also initiate the creation of a new scale out log entry including any the extension properties and any other specified log details. A scale out log entry may be information that is recorded about a scale out operation after the operation completes.

To create a second data sub range the database scale out module may receive a message from the first database that includes information regarding the first data sub range. For instance database scale out module may receive a list of result sets containing data for the scale out partitions in the first data sub range. The database scale out module may call a procedure to create a second data sub range bounded by the scale out partition key and the start or end point of the current data range of the second database. For instance a mark data sub range procedure may be called to create a new data sub range or modify an existing one on the second database . If a lower data sub range is targeted and one already exists the second data sub range mode and end point of the lower data sub range may be updated. Otherwise a lower data sub range may be created with the specified data sub range mode and end point. If an upper data sub range is targeted and one already exists the data sub range mode and start point of the upper data sub range may be updated otherwise an upper data sub range may be created with the specified data sub range mode and start point. The second database may then create a second data sub range with the specified values. The second data sub range may be designated as in changing mode as illustrated in with respect to second data sub range . To this end the database scale out module may also pass in the second data sub range mode as changing to this call. Creating a second data sub range may also initiate the creation of a scale out log entry with any specified scale out action attributes and any specified log details.

From operation the routine continues to operation where the data associated with the first database sub range is transferred to the second database. In some embodiments to effect the data move a query routing logic may dispatch a query at runtime to a designated destination database according to the key value included in query and the last known data ranges of all the databases. Using the established data move plan the database scale out module may obtain a set of data move chunk start or end points in either descending or ascending order respectively. The end point of the first data move chunk may be the end point of the first data range and the end point of each data move chunk except for the first may be the same as the start point of the previous data move chunk. If end points are returned the start point of the first data move chunk may be the start point of the first data range and the start point of each data move chunk except for the first may be the same as the end point of the previous data move chunk. In some embodiments start points may be returned in descending order and end points may be returned in ascending order.

To effect the data move the database scale out module may populate transferred data into returned partition data insert table types with the data coming from the result set which may be at the same index as the partition data insert table type and call each corresponding partition data insert stored procedure with the populated partition data insert table type on the second database. The second database may then receive instructions to insert all the data passed into the partition data insert stored procedures into the second data sub range.

From operation the routine continues to operation where the mode of the second data sub range is changed to read only. A runtime data transfer query may initiate a shared lock on the data range object in the database which may not be released until the end of a data move thus ensuring that runtime queries get serialized with the data transfer operations. A runtime query may also verify whether the queried data key is within the first database data range and also whether the data key is in a data sub range having a mode compatible with the query. For instance the database scale out module may call a mark data sub range procedure on the second database to set the data sub range mode of the extension data sub range to read only. The second database may then set the data sub range mode on the specified data sub range to read only as illustrated in with respect to second data sub range .

From operation the routine continues to operation where the mode of the first data sub range is changed to deleted. For instance once the data from the first data sub range has been transferred to the second data sub range the database scale out module may call a mark data sub range procedure on the first database to set the data sub range mode of the first data sub range to deleted. The first database may then set the first data sub range mode on the specified data sub range to deleted as illustrated in with respect to the first data sub range .

From operation the routine continues to operation where the second data sub range on the second database is removed. illustrates that the second data sub range has been removed. Removing the second sub range may then change the data mode of contained data to read write. For instance the database scale out module may call a mark data sub range procedure on the second database to set the data sub range mode of the extended data sub range to read write. The second database may then set the data sub range mode on the specified data sub range to read write.

From operation the routine continues to operation where the data associated with the key values representing a start point and an end point of the first data sub range start and end points is deleted. The call may then initiate the deletion of the first data sub range created for the first database. The first database may delete the first data sub range along with all the data associated with the scale out partitions inside the first data sub range. For instance a clear deleted sub range stored procedure may be called to remove both a first data sub range for which the first data sub range mode is deleted and all the scale out partitions that have scale out partition keys inside the first data sub range. The stored procedure may also create a scale out log entry including any specified scale out action attributes and or specified log details. A value may be specified to indicate whether the first data sub range to be removed is a lower data sub range or an upper data sub range. The start or end point of the first data sub range to be removed may be designated as an initial deleted sub range point. If the first data sub range is a lower data sub range the value may represent the end point otherwise the value represents the start point. The value also may represent the sub range point attribute of the scale out log entry to be created. The initial data range start point may be designated and may represent the starting point of the first original data range. If the first data sub range to be removed is the lower data sub range the value may also represent the range limit point attribute of the scale out log entry to be created.

From operation the routine continues to operation where the first data sub range on the first database is cleared. The database scale out module may call a procedure to clear the excluded sub range on the first database. The clearing of the first data sub range may cause the first database data range to contract to exclude the first data sub range.

From operation the routine may then terminate at operation . Alternatively the above routine may repeat until the desired percentage of data is transferred to a destination database instance. In some embodiments the database scale out module may notify a user that the data move operation is finished. illustrates termination of a data move wherein neither database includes a data move initiated data sub range.

The routine may be subject to one or more runtime rules. Specifically at run time one or more runtime rules may be applied to any or all of the operations discussed herein. For instance with reference to the components of the database scale out module may provide one or more runtime rules for executing a data transfer. A first runtime rule may be that a query may not write data for keys within a data sub range in read only mode. A second runtime rule may be that a query may not read or write data for keys within a data sub range in either changing or deleted mode.

A data transfer history may also be provided upon termination of any or all data transfers. For instance the operations performed during a data transfer may be logged into each database with all the information about the data sub ranges. In case of a catastrophic failure any database back up will contain the necessary information which will have all the history of the operations that involved that particular database instance. This knowledge can be used to identify if another back up from an older snapshot of the database is needed or to create a data ranges state for an array of database instances.

Embodiments above the above described system and method may be implemented as a computer process a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media or device readable by a computer system and encoding a computer program of instructions for executing a computer process.

The example systems and methods in have been described with specific client devices applications modules and interactions that may execute in conjunction with an application program that runs on an operating system on a personal computer. Embodiments are not limited to systems according to these example configurations. Furthermore specific protocols and or interfaces may be implemented in a similar manner using the principles described herein.

The embodiments and functionalities described herein may operate via a multitude of computing systems including wired and wireless computing systems mobile computing systems e.g. mobile telephones tablet or slate type computers laptop computers etc. . In addition the embodiments and functionalities described herein may operate over distributed systems where application functionality memory data storage and retrieval and various processing functions may be operated remotely from each other over a distributed computing network such as the Internet or an intranet. User interfaces and information of various types may be displayed via on board computing device displays or via remote display units associated with one or more computing devices. For example user interfaces and information of various types may be displayed and interacted with on a wall surface onto which user interfaces and information of various types are projected. Interaction with the multitude of computing systems with which embodiments may be practiced include keystroke entry touch screen entry voice or other audio entry gesture entry where an associated computing device is equipped with detection e.g. camera functionality for capturing and interpreting user gestures for controlling the functionality of the computing device and the like. and its associated description provide a discussion of a variety of operating environments in which embodiments may be practiced. However the devices and systems illustrated and discussed with respect to are for purposes of example and illustration and are not limiting of a vast number of computing device configurations that may be utilized for practicing embodiments described herein.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by a removable storage and a non removable storage .

As stated above a number of program modules and data files may be stored in system memory including operating system . While executing on processing unit programming modules may perform processes including for example one or more of the processes described above with reference to . The aforementioned processes are an example and processing unit may perform other processes. Other programming modules that may be used in accordance with embodiments may include browsers database applications etc.

Generally consistent with embodiments program modules may include routines programs components data structures and other types of structures that may perform particular tasks or that may implement particular abstract data types. Moreover embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Furthermore embodiments may be practiced in an electrical circuit comprising discrete electronic elements packaged or integrated electronic chips containing logic gates a circuit utilizing a microprocessor or on a single chip containing electronic elements or microprocessors. For example embodiments may be practiced via a system on a chip SOC where each or many of the components illustrated in may be integrated onto a single integrated circuit. Such an SOC device may include one or more processing units graphics units communications units system virtualization units and various application functionality all of which are integrated or burned onto the chip substrate as a single integrated circuit. When operating via an SOC the functionality described herein may be operated via application specific logic integrated with other components of the computing device system on the single integrated circuit chip . Embodiments may also be practiced using other technologies capable of performing logical operations such as for example AND OR and NOT including but not limited to mechanical optical fluidic and quantum technologies. In addition embodiments may be practiced within a general purpose computer or in any other circuits or systems.

Embodiments for example may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or tangible computer readable storage medium. The computer program product may be a computer readable storage medium readable by a computer system and tangibly encoding a computer program of instructions for executing a computer process. The term computer readable storage medium as used herein may include computer storage media. Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all computer storage media examples i.e. memory storage. Computer storage media may include but is not limited to RAM ROM electrically erasable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as a keyboard a mouse a pen a sound input device a touch input device etc. Output device s such as a display speakers a printer etc. may also be included. The aforementioned devices are examples and others may be used.

Communication media may be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media.

Embodiments herein may be used in connection with mobile computing devices alone or in combination with any number of computer systems such as in desktop environments laptop or notebook computer systems multiprocessor systems micro processor based or programmable consumer electronics network PCs mini computers main frame computers and the like. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network in a distributed computing environment programs may be located in both local and remote memory storage devices. To summarize any computer system having a plurality of environment sensors a plurality of output elements to provide notifications to a user and a plurality of notification event types may incorporate embodiments.

Embodiments for example are described above with reference to block diagrams and or operational illustrations of methods systems and computer program products according to embodiments. The functions acts noted in the blocks may occur out of the order as shown in any flowchart or described herein with reference to . For example two processes shown or described in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality acts involved.

While certain embodiments have been described other embodiments may exist. Furthermore although embodiments have been described as being associated with data stored in memory and other storage mediums data can also be stored on or read from other types of computer readable storage media such as secondary storage devices like hard disks floppy disks a CD ROM or other forms of RAM or ROM. Further the disclosed processes may be modified in any manner including by reordering and or inserting or deleting a step or process without departing from the embodiments.

It will be apparent to those skilled in the art that various modifications or variations may be made to embodiments without departing from the scope or spirit. Other embodiments are apparent to those skilled in the art from consideration of the specification and practice of the embodiments disclosed herein.

