---

title: Using push notifications to reduce open browser connections
abstract: A browser request is received at a computing device. A determination is made as to whether to replace the browser request with a push notification based upon characteristics of the browser request. The browser request is replaced with the push notification in response to determining, based upon the characteristics of the browser request, to replace the browser request with the push notification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009283&OS=09009283&RS=09009283
owner: International Business Machines Corporation
number: 09009283
owner_city: Armonk
owner_country: US
publication_date: 20120330
---
This application is a continuation of and claims priority to and claims the benefit of U.S. patent application Ser. No. 13 282 916 titled USING PUSH NOTIFICATIONS TO REDUCE OPEN BROWSER CONNECTIONS which was filed in the United States Patent and Trademark Office on Oct. 27 2011 and which is incorporated herein by reference in its entirety.

The present invention relates to web browser request processing. More particularly the present invention relates to using push notifications to reduce open browser connections.

A web browser executed by a computing device opens a hypertext transfer protocol HTTP connection to a web server to request data from the web server. The web server responds to the request via the open HTTP connection. The HTTP connection may be closed after the response from the web server is received by the web browser at the computing device.

A method includes receiving at a computing device a browser request determining whether to replace the browser request with a push notification based upon characteristics of the browser request and replacing the browser request with the push notification in response to determining to replace the browser request with the push notification based upon the characteristics of the browser request.

A system includes a messaging interface module and a processor programmed to receive at a computing device a browser request via the messaging interface module determine whether to replace the browser request with a push notification based upon characteristics of the browser request and replace the browser request with the push notification in response to determining to replace the browser request with the push notification based upon the characteristics of the browser request.

A computer program product includes a computer readable storage medium including computer readable program code where the computer readable program code when executed on a computer causes the computer to receive at a computing device a browser request determine whether to replace the browser request with a push notification based upon characteristics of the browser request and replace the browser request with the push notification in response to determining to replace the browser request with the push notification based upon the characteristics of the browser request.

The examples set forth below represent the necessary information to enable those skilled in the art to practice the invention and illustrate the best mode of practicing the invention. Upon reading the following description in light of the accompanying drawing figures those skilled in the art will understand the concepts of the invention and will recognize applications of these concepts not particularly addressed herein. It should be understood that these concepts and applications fall within the scope of the disclosure and the accompanying claims.

The subject matter described herein provides technology for using push notifications to reduce open browser connections. Push notifications are used to replace web browser requests responses such as hypertext transfer protocol HTTP requests or extensible markup language HTTP requests XMLHttpRequest XHR and the respective responses so that open connections may be reduced. The present subject matter adapts one or more computing devices to recognize situations either where a request may be an enduring request for updates e.g. keep alive or where it may take some time for a web server to formulate and reply with a response. In any such situation the present subject matter operates to convert HTTP requests or XHRs to be implemented via push notifications from a push server. The present subject matter may be implemented at either a client computing device or at a web server device to recognize via the respective computing device situations where HTTP requests or XHRs may be converted to push notifications and to perform the respective messaging to implement the conversion and to cause the push server to send the results of the respective request to the client computing device as described in detail below.

A variety of possible implementations are described herein. For example a client device may make a determination to convert an HTTP request that would ordinarily be sent to a web server into an XHR request that is instead sent to a push server to instruct the push server to issue an HTTP request to the web server and to instruct the push server to issue a push notification to the client device with the requested data when the requested data is obtained from the web server. Alternatively the client device may issue an HTTP request or an XHR request to a web server. The web server may receive the HTTP request or the XHR request via an open HTTP connection and infer that a push notification may be used to replace the outstanding request. The web server may instruct the web browser to close the open HTTP connection and indicate that the web server will push the requested data when the data is available. As such the present subject matter may be implemented in a variety of manners to use push notifications to reduce open browser connections.

For purposes of the present description HTTP and or XHR requests and HTTP connections will be used for purposes of example as web browser requests and web browser connections respectively. However it should be understood that the present technology may be applied to any form of web browser requests and web browser connections without departure from the scope of the present subject matter. Further push notifications as described herein may be implemented in any format appropriate for a given implementation. Accordingly any form of push notification is considered within the scope of the present subject matter.

With further reference to a client device sending an HTTP or XHR request to a web server for an implementation where a web server determines that a push notification may be used to replace the outstanding request the web server may send a push identifier ID with the instruction to the client device to close the HTTP connection. The client device assigns one or more callback functions routines to be invoked in response to receipt of a subsequent push notification that includes the push ID. The client device uses the push ID to register the assigned callback function s . The web server may request a push server to issue a push notification to the client device including the requested data and the push ID. In response to receipt of the push notification the client device may look up the assigned callback function s using the push ID and invoke the callback function s to process the requested and received data. The push ID may include for example a hash of a timestamp of when the request was received by the web server a numeric identifier an alphanumeric identifier or any other identifier appropriate for a given implementation.

Additionally for periodic or status change based data requests such as sports scores stock quotes data subscription requests or other forms of periodic or status change based data requests ongoing push notifications may be configured to cause a push server to issue additional push notifications with data updates from the respective data source at a given periodic interval or in response to status change or data change events. Additionally for timed duration connection requests such as requests that result in data being requested over a period of time e.g. keep alive connection requests push notifications may be configured to cause a push server to issue push notifications with data updates from the respective data source for each data update that is available during the configured period of time. Many other possibilities exist for improvement of web browser connection utilization using push notifications to reduce open browser connections and all such possibilities are considered within the scope of the present subject matter.

It should be noted that conception of the present subject matter resulted from recognition of certain limitations associated with conventional HTTP connection utilization. For example it was recognized that conventional use of HTTP connections results in many HTTP connections being open for extended periods of time such as where data is not instantaneously available from a web server or where periodic updates are requested from a web server via an open HTTP connection. The present subject matter improves HTTP connection utilization by automatically recognizing via a computing device when a push notification may be used to replace an HTTP connection and utilizing one or more push notifications to provide the data requested by a client computing device rather than the HTTP connection as described above and in more detail below. As such reduced and improved HTTP connection utilization may be obtained by using push notifications to reduce open browser connections as described herein.

The automated use of push notifications to reduce open browser connections described herein may be performed in real time to allow prompt reduction in browser connections. For purposes of the present description real time shall include any time frame of sufficiently short duration as to provide reasonable response time for information processing acceptable to a user of the subject matter described. Additionally the term real time shall include what is commonly termed near real time generally meaning any time frame of sufficiently short duration as to provide reasonable response time for on demand information processing acceptable to a user of the subject matter described e.g. within a portion of a second or within a few seconds . These terms while difficult to precisely define are well understood by those skilled in the art.

As will be described in more detail below in association with through each of the computing device  through the computing device N the server and the push server operate cooperatively to provide automated use of push notifications to reduce open browser connections. The automated use of push notifications to reduce open browser connections is based upon computer recognition of situations where web browser connections such as HTTP connections or XHR connections may be replaced with push notifications for data delivery to client devices such as the computing device  through a computing device N for responses to browser requests.

It should be noted that the computing device  through the computing device N may be portable computing devices either by a user s ability to move the respective computing device to different locations or by the respective computing device s association with a portable platform such as a plane train automobile or other moving vehicle. It should also be noted that the computing device  through the computing device N may be any computing device capable of processing information as described above and in more detail below. For example the computing device  through the computing device N may include devices such as a personal computer e.g. desktop laptop etc. or a handheld device e.g. cellular telephone personal digital assistant PDA email device music recording or playback device etc. or any other device capable of processing information as described in more detail below.

The network may include any form of interconnection suitable for the intended purpose including a private or public network such as an intranet or the Internet respectively direct inter module interconnection dial up wireless or any other interconnection mechanism capable of interconnecting the respective devices.

The server may include any device capable of providing data for consumption by a device such as the computing device  through the computing device N via a network such as the network . As such the server may include a web server application server or other data server device. The push server may include any device capable of providing push notifications to client devices such as the computing device  through the computing device N with data obtained from the server .

A central processing unit CPU provides computer instruction execution computation and other capabilities within the core processing module . A display provides visual information to a user of the core processing module and an input device provides input capabilities for the user.

The display may include any display device such as a cathode ray tube CRT liquid crystal display LCD light emitting diode LED electronic ink displays projection touchscreen or other display element or panel. The input device may include a computer keyboard a keypad a mouse a pen a joystick or any other type of input device by which the user may interact with and respond to information on the display .

It should be noted that the display and the input device are illustrated with a dashed line representation within to indicate that they may be optional components for the core processing module for certain implementations. Accordingly the core processing module may operate as a completely automated embedded device without direct user configurability or feedback. However the core processing module may also provide user feedback and configurability via the display and the input device respectively. For example the computing device  through the computing device N may each include the display and the input device for use in association with a web browser while the server and the push server may be remotely configurable without direct user configurability or feedback or either device may include the display and the input device as appropriate for the given implementation.

A communication module provides interconnection capabilities that allow the core processing module to communicate with other modules within the system to use push notifications to reduce open browser connections. The communication module may be considered a messaging interface or messaging interface module for purposes of the present description. The communication module may include any electrical protocol and protocol conversion capabilities useable to provide the interconnection capabilities. Though the communication module is illustrated as a component level module for ease of illustration and description purposes it should be noted that the communication module may include any hardware programmed processor s and memory used to carry out the functions of the communication module as described above and in more detail below. For example the communication module may include additional controller circuitry in the form of application specific integrated circuits ASICs processors antennas and or discrete integrated circuits and components for performing communication and electrical control activities associated with the communication module . Additionally the communication module may include interrupt level stack level and application level modules as appropriate. Furthermore the communication module may include any memory components used for storage execution and data processing for performing processing activities associated with the communication module . The communication module may also form a portion of other circuitry described without departure from the scope of the present subject matter.

A memory includes a data storage area that stores data within the core processing module . For implementation of the core processing module at the server the data storage area may store data for retrieval by either the push server or the computing device  through the computing device N . For implementation of the core processing module at the push server the data storage area may store data retrieved from the server for delivery to any of the computing device  through the computing device N . For implementation of the core processing module at any of the computing device  through the computing device N the data storage area may store data retrieved obtained from the push server as described in more detail below.

The memory also includes a web browser that may be executed by the computing device  through the computing device N within the core processing module implemented in association with client devices. The web browser may include any web browser application appropriate for a given implementation.

The web browser is shown to include a web application . The web application may include executable code obtained from a server such as the server via the push server or otherwise. The web application may include executable Java programming language implemented or Javascript implemented application code or other executable code that may be downloaded and executed within the web browser as appropriate for a given implementation.

The web browser is also shown to include a browser implementation . The browser implementation represents an operating system OS implementation specific portion of the web browser .

The web browser is also illustrated in a dashed line representation within to show that it may be associated with the computing devices through . The web application is illustrated in a solid line representation to show that it may be downloaded from the server and or the push server . The browser implementation is illustrated in a dashed line representation to show that it may be associated with the computing devices through and selected based upon the operating system executed by the respective client computing device.

An operating system is executed by the CPU for operational control within the core processing module . The operating system may be any operating system appropriate for implementation of the core processing module within the respective implementation of the computing device  through the computing device N the server and the push server . An interface via the operating system to the browser implementation such as for messaging from the web application may be considered a messaging interface or messaging interface module for purposes of the present description in addition to the communication module for external communications received from other devices e.g. the server and the push server .

It is understood that the memory may include any combination of volatile and non volatile memory suitable for the intended purpose distributed or localized as appropriate and may include other memory segments not illustrated within the present example for ease of illustration purposes. For example the memory may include a code storage area a code execution area and a data area without departure from the scope of the present subject matter.

A push notification processing module is also illustrated. The push notification processing module provides push notification decision making capabilities and processing of push notifications for the core processing module as described above and in more detail below. The push notification processing module implements the automated use of push notifications to reduce open browser connections of the core processing module . The push notification processing module may instruct the browser implementation to perform processing associated with push notifications as described in association with and below. Alternatively as described below the push notification processing module may be implemented within the browser implementation without departure from the scope of the present subject matter. As such the examples described herein may refer to the push notification processing module and the browser implementation interchangeably unless explicitly noted below.

Though the push notification processing module is illustrated as a component level module for ease of illustration and description purposes it should be noted that the push notification processing module may include any hardware programmed processor s and memory used to carry out the functions of this module as described above and in more detail below. For example the push notification processing module may include additional controller circuitry in the form of application specific integrated circuits ASICs processors and or discrete integrated circuits and components for performing communication and electrical control activities associated with the respective devices. Additionally the push notification processing module may include interrupt level stack level and application level modules as appropriate. Furthermore the push notification processing module may include any memory components used for storage execution and data processing for performing processing activities associated with the module.

It should also be noted that the push notification processing module may form a portion of other circuitry described without departure from the scope of the present subject matter. Further the push notification processing module may alternatively be implemented as an application stored within the memory . In such an implementation the push notification processing module may include instructions executed by the CPU for performing the functionality described herein. The CPU may execute these instructions to provide the processing capabilities described above and in more detail below for the core processing module . The push notification processing module may form a portion of an interrupt service routine ISR a portion of an operating system a portion of a browser application such as the browser implementation or a portion of a separate application without departure from the scope of the present subject matter.

A timer clock module is illustrated and used to determine timing and date information such as timing for use in association with periodic push notifications as described above and in more detail below. As such the push notification processing module may utilize information derived from the timer clock module for information processing activities such as the automated use of push notifications to reduce open browser connections.

The CPU the display the input device the communication module the memory the push notification processing module and the timer clock module are interconnected via an interconnection . The interconnection may include a system bus a network or any other interconnection capable of providing the respective components with suitable interconnection for the respective purpose.

While the core processing module is illustrated with and has certain components described other modules and components may be associated with the core processing module without departure from the scope of the present subject matter. Additionally it should be noted that while the core processing module is described as a single device for ease of illustration purposes the components within the core processing module may be co located or distributed and interconnected via a network without departure from the scope of the present subject matter. For a distributed arrangement the display and the input device may be located at a kiosk or other location while the CPU and memory may be located at a local or remote server. Many other possible arrangements for components of the core processing module are possible and all are considered within the scope of the present subject matter. Accordingly the core processing module may take many forms and may be associated with many platforms.

For purposes of the examples that follow the following pseudo syntax examples will be utilized. An example pseudo syntax XMLHttpRequest XHR that may be modified as described herein is represented as follows 

A web application operating at a computing device may generate the example pseudo syntax XHR to initiate a data request to a web server. The request is noted to be a polling request that results in repeated responses as updates are available for the requested file e.g. updates.json .

In such a situation the browser implementation may then send an HTTP message that may be modified as described herein such as the following pseudo syntax HTTP message to the web server 

This request designates the connection as a connection to remain open for some time e.g. keep alive . The web server would eventually return a response such as the following example pseudo syntax response with the requested JSON document e.g. updates.json attached 

The above messaging sequence may be modified based upon the subject matter described herein either by a client device such as the computing device  or by a server device such as the server . In the case where the processing and message modification is client device controlled the browser implementation of the respective client computing device may use underlying push application programming interfaces APIs which may be different for each operating system implementation to register an event to get the updates.json file and to subscribe to updates to that file with the push server . The push server may then make the previous HTTP request to the server on behalf of the requesting client device receive the updates and send the updates to the registered client device.

In the case where the processing and message modification is server controlled the browser implementation may send a request such as the following pseudo syntax request to the server 

The server may recognize that the connection is a request for enduring updates e.g. keep alive and modify the messaging to avoid the open HTTP connection. The server may send back a continue message e.g. 100 Continue with an indication that push control processing is enabled such as the following pseudo syntax response to acknowledge receipt of the client device request 

This response would inform the respective client device browser implementation that the server accepts this request and that for the next thirty 30 minutes the server will push all changes to the requesting client device for the requested file e.g. updates.json via the push server for identifier ID xyz teleo.com.

Within the present example the web application issues an HTTP request Line such as in association with a data request intended for the server to the browser implementation . For purposes of the present example it is assumed that the initial HTTP request of the pseudo syntax examples described above is issued by the web application .

The browser implementation detects the HTTP request and determines that the request is a polling request that would result in the HTTP connection being open for a duration of time e.g. other than a single request . As a result the browser implementation determines that use of a push notification may be implemented to reduce an enduring open browser connection that would result from the open HTTP connection.

The browser implementation opens a socket to the push server and blocks a thread operating via the web application that issued the HTTP request. The browser implementation sends a push request to register for the requested data with the push server Line . The push server opens an HTTP connection to the server and generates and sends an HTTP request for the data to the server Line . The server sends a notification to the browser implementation instructing the browser implementation to close the open socket Line . The browser implementation closes the open socket thus freeing an open HTTP connection. As such the browser implementation may conserve battery power if on battery power by not polling an open socket.

At some later time when the requested data is available or when an update to the requested subscription is available the server generates and sends an HTTP response to the push server including the requested data Line . The push server closes the HTTP connection with the server and generates and sends a push notification to the browser implementation Line that includes the requested data update. The browser implementation unblocks the thread of the web application and returns the results of the original HTTP request to the web application Line .

As such the message flow illustrates one example of a situation where a client device identifies a request that may be modified to use a push notification. The client device communicates with a push server to register for the requested data and the push server communicates via an HTTP connection with a web server to retrieve the requested data. It should be noted that for periodic updates the push server may periodically open an HTTP connection to retrieve the requested data and close the HTTP connection in response to receipt of the requested data for each update period. As such open HTTP connections may be minimized.

Within the present example the web application issues an XHR request Line to the server . For purposes of the present example it is assumed that the initial XHR request of the pseudo syntax examples described above is issued by the web application .

The server may recognize that the request is a polling request that would result in the HTTP connection being open for an extended duration of time or that fulfilling the data request may take some time to complete. As a result the server determines that use of a push notification may be implemented to reduce an enduring open browser connection that would result from the open HTTP connection associated with the XHR request.

The server generates and sends an acknowledgement of the XHR request to the web application Line such as that described in association with the last pseudo syntax example above. The acknowledgement operates to notify the web application that the server intends to use a push notification to return the requested data. For purposes of the present example the server also generates a hash H of a timestamp e.g. using the clock timer at which the XHR request was received and sends the hash H along with the acknowledgement to the web application .

In response to receipt of the acknowledgement from the server the web application closes the HTTP request connection associated with the initial XHR and assigns one or more callback functions routines to be executed in response to receipt of the push notification at block . The web application sends a request to register with the browser implementation for the push notification Line .

At some time later when the requested data is available or when an update to the requested subscription is available the server generates and sends an HTTP response to the push server including the requested data and the hash H of the original timestamp associated with the request Line . The push server closes the HTTP connection with the server looks up the registration information for the push request and generates and sends a push notification to the browser implementation that includes the requested data data update and the hash H of the timestamp Line . The browser implementation returns the results of the original XHR request and the hash H of the timestamp to the web application Line . The web application uses the hash H of the timestamp to invoke the respective assigned callback function s at block and processes the results returned from the server .

As such the message flow illustrates one example of a situation where a server device identifies a request that may be modified to use a push notification. The server device acknowledges the request of the client device and informs the client device that a push notification will be used to return the requested data and includes an identifier to correlate the push notification with the acknowledgment. It should be noted that the present example utilizes a hash H of a timestamp of a time at which the request was received as the correlation identifier. However any identifier appropriate for a given implementation may be used. The client device assigns one or more callback functions routines to process the push notification and registers with the browser implementation to receive the push notification. The server communicates with a push server to send the requested data and the correlation identifier via an HTTP connection with the push server. The push notification with the correlation identifier is propagated to the requesting client device. The client device looks up the push notification using the correlation identifier and invokes the assigned callback function s . It should be noted that for periodic updates the push server may periodically open an HTTP connection to send the requested data and close the HTTP connection in response to receipt of the requested data by the push server for each update period. As such open HTTP connections may be minimized.

At decision point the process makes a determination as to whether a browser request has been received detected. As described above the browser request may include an HTTP request or an XHR and may be received from web application code such as the web application .

In response to determining that a browser request has been received detected the process makes a determination at decision point as to whether the browser request includes a request for updates over time e.g. a polling request or a request with a keep alive attribute set . A browser request for updates over time is one example of a situation that may be used to replace a browser request with a push notification and to use push notifications to reduce open browser connections. However it should be noted that other possibilities exist for using push notifications to reduce open browser connections and all are considered within the scope of the present subject matter. Further use of push notifications to reduce open browser connections may be implemented for all browser requests without making a determination such as the determination at decision point where appropriate for a given implementation without departure from the scope of the present subject matter.

In response to determining that the request does not include a request for updates over time the process sends the request to a web server such as the server at block . At decision point the process makes a determination as to whether a response has been received from the web server. It should be noted that the response from the web server may include a response to the browser request including data that fulfills the request or may include an acknowledgement from the web server including an indication e.g. push indication that the web server will push the response to the web request via a push server such as the push server .

In response to determining at decision point that a response has been received the process makes a determination as to whether the response includes a push indication at decision point . It should be noted that the acknowledgement may further include an identifier assigned to the browser request by the web server that may be used to correlate any subsequent push notification s with the original browser request.

In response to determining that the response does not include a push indication at decision point the process returns the result data results in the response to the browser application at block . The process returns to decision point and iterates as described above.

In response to determining that the response includes a push indication at decision point the process assigns one or more callback functions to be executed in response to receipt of the push notification to be received from the web server at block . At block the process registers for the push notification with the respective push server. At decision point the process makes a determination as to whether a push notification has been received from the push server. In response to determining that a push notification has been received from the push server the process executes the assigned callback function s at block . The identifier assigned to the browser request by the web server may be used to lookup the assigned callback function s for execution of the respective callback function s . The process returns to decision point and iterates as described above.

Returning to the description of decision point in response to determining that the browser request includes a request for updates over time e.g. a polling request or a request with a keep alive attribute set the process opens a socket for communications with a push server such as the push server at block . At block the process notifies the respective push server to issue the HTTP request to the web server associated with the web request. This notification may be performed for example using an underlying push application programming interface API which may be different for each operating system implementation to register for the respective updates associated with the web request. The push server may then make the previous web request such as via an HTTP request to the respective web server on behalf of the requesting client device receive the updates and send push the updates to the registered client device as described in more detail below. Further the push request to the push server may include a request for a series of push notifications to be issued to replace the browser request for the updates to the requested data over time and as such cause the push server to issue a series of push notifications with data updates to the client computing device.

At decision point the process makes a determination as to whether an indication to close the socket associated with the web request has been received from the web server associated with the original browser request. The indication from the web server represents an acknowledgement of the notification from the push server to issue the browser request to the web server. As such the communication loop between the three devices is acknowledged by receipt of the indication to close the socket. The process closes the socket at block .

At decision point the process makes a determination as to whether a first push notification from the push server with the results of a web reply to the browser request issued by the push server to the web server has been received. In response to determining that a push notification has been received from the push server with the results of a web reply to the browser request issued by the push server to the web server the process returns the results to the browser application at block .

In response to either completion of returning the results to the browser application at block or determining at decision point that a push notification has not been received the process makes a determination at decision point as to whether processing of push notifications has been completed for the respective original browser request e.g. a time period associated with the original request has expired or a specified number of push notifications have been received . As described above the original push request to the push server may include a request for a series of push notifications to be issued to replace the browser request for the updates to the requested data over time to cause the push server to issue a series of push notifications including data updates associated with the original browser request.

In response to determining at decision point that processing of push notifications has not been completed the process returns to decision point and iterates as described above. In response to determining at decision point that processing of push notifications has been completed the process returns to decision point and iterates as described above.

As such the process operates at a client computing device to make determinations as to whether a browser request may be replaced with one or more push notifications. The determination may be based upon characteristics of the browser request such as that the browser request includes a request for updates over time e.g. a polling request or a keep alive request . The process may process push indications from a web server that include an indication that the web server will push the response to the browser request and may assign one or more callback functions routines to process the push notification s . The process may alternatively autonomously initiate push notification processing by sending a push request to a push server that requests the push server to operate a proxy for the client computing device and to issue the browser request to the web server. The process may process multiple push notifications over time that would otherwise have required an open browser connection throughout the duration. As such open browser connections may be reduced using push notifications as described herein.

At decision point the process makes a determination as to whether a push request has been received. As described above a push request may be received for example from a client computing device such as the computing device  through the computing device N at a push server such as the push server . The push request may cause the push server to initiate an HTTP connection and request to a web server such as the server as a proxy and on behalf of the requesting client computing device. In response to determining that a push request has not been received the process makes a determination at decision point as to whether results of a browser request have been received. As described above results of a browser request may be received from a web server such as the server in response to initiation of a browser request by a client computing device. Further the results that are received may include an identifier e.g. a hash of a timestamp of the time at which the initial browser request was received assigned to the browser request by the web server device to allow the client computing device to utilize callback functions routines to process the subsequent results that are returned via a push notification. In response to determining that results of a browser request have not been received the process returns to decision point and iterates as described above.

Returning to the description of decision point in response to determining that a push request has been received the process forms an HTTP request using information received within the push request that identifies the target web server and the requested information at block . At block the process sends the HTTP request to the designated identified web server. At decision point the process makes a determination as to whether an HTTP response has been received from the designated web server. In response to determining that the HTTP response has been received the process sends a push notification to the requesting client device with the results of the HTTP request initiated by the push server at block . The process returns to decision point and iterates as described above.

Returning to the description of decision point in response to determining that results of a browser request have been received the process sends a push notification to a client device designated identified within the results of the browser request that was initiated via the web server at block . As described above the results may include an identifier e.g. a hash of a timestamp of the time at which the initial browser request was received assigned to the outstanding browser request by the web server that may be used by the client computing device to invoke a callback routine to process the results of the browser request. The process returns to decision point and iterates as described above.

As such the process operates to process both push requests that are initiated by client computing devices and autonomously receive results that include identifiers of initial browser requests. Accordingly the process operates to facilitate the example implementations described above for interactions between multiple computing devices to use push notifications to reduce open browser connections.

At decision point the process makes a determination as to whether a push server HTTP request has been received that instructs the server to respond to the push server via an HTTP response with the results. As described above a push server HTTP request may be received for example from a push server such as the push server in response to a push request received from the requesting client computing device. In response to determining that a push server HTTP request has not been received the process makes a determination at decision point as to whether a browser request e.g. HTTP or XHR has been received from a client computing device such as one of the computing device  through the computing device N . In response to determining that a browser request has not been received from a client computing device the process returns to decision point and iterates as described above.

Returning to the description of decision point in response to determining that a push server HTTP request has been received that instructs the server to respond to the push server via an HTTP response with the results the process sends a message to the requesting client computing device instructing the client computing device to close any open socket associated with its communications with the push server at block . At block the process obtains the requested results associated with the original browser request as received from the push server within the push server request. At block the process forms an HTTP response including the requested data. At block the process sends the HTTP response to the push server . As described above the push server may utilize a push notification to provide the results to the requesting client computing device. The process returns to decision point and iterates as described above.

Returning to the description of decision point in response to determining that a browser request e.g. HTTP or XHR has been received from a client computing device the process makes a determination at decision point as to whether to replace the browser request with one or more push notifications. Any decision criteria appropriate for a given implementation may be used. For example the process may determine that the browser request includes a request for updates over time or that the request may take a long time to fulfill due to data preparation times or other factors. In response to determining not to replace the browser request with one or more push notifications the process forms a response to the browser request at block sends the response to the browser request to the requesting client computing device at block and returns to decision point and iterates as described above.

In response to determining to replace the browser request with one or more push notifications at decision point the process assigns an identifier to the browser request e.g. HTTP request of XHR received from the client device at block . As described above the assigned identifier may include a hash H of a timestamp of a time at which the browser request was received. This hash value may be generated using information derived from a module such as the timer clock module .

At block the process sends an acknowledgement to the client computing device including an identifier assigned to the browser request. As described above updates that are requested over time e.g. sports scores stock quotes etc. may be generated periodically on a data change e.g. score or price change or otherwise as appropriate for a given implementation. As such many variations on update events are possible and all such variations are considered within the scope of the present subject matter.

At decision point the process makes a determination as to whether results to fulfill at least one iteration of the browser request are available. In response to determining that results are available to fulfill at least one iteration of the browser request the process sends results of the browser request to the push server with an instruction to push the results to the requesting client device via a push notification at block . The results sent to the push server may include the identifier assigned to the browser request e.g. hash value of the timestamp of the time at which the request was received .

At decision point the process determines whether processing of the outstanding request is completed e.g. whether it was a request for a single result data set or a browser request for updates over time . In response to determining that processing of the outstanding request is not completed the process returns to decision point and iterates as described above to process additional results data sets. In response to determining at decision point that processing of the outstanding request is completed the process returns to decision point and iterates as described above.

As such the process operates to process browser requests from either a push server or a client computing device. The process may assign identifiers to browser requests and inform requesting client devices that it will use push notifications to reduce open browser connections. The process may obtain results to the browser request over time and send them to the push server for forwarding to the requesting client computing device via push notifications to reduce open browser connections.

As described above in association with through the example systems and processes provide for use of push notifications to reduce open browser connections. Many other variations and additional activities associated with use of push notifications to reduce open browser connections are possible and all are considered within the scope of the present subject matter.

Those skilled in the art will recognize upon consideration of the above teachings that certain of the above examples are based upon use of a programmed processor such as CPU . However the invention is not limited to such example embodiments since other embodiments could be implemented using hardware component equivalents such as special purpose hardware and or dedicated processors. Similarly general purpose computers microprocessor based computers micro controllers optical computers analog computers dedicated processors application specific circuits and or dedicated hard wired logic may be used to construct alternative equivalent embodiments.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as JAVA Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention have been described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable storage medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable storage medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

