---

title: Method and system for deep links in application contexts
abstract: A first application running on an electronic device may receive a first request that was triggered by a second application running on the electronic device. In response to the first request, the first application may provide a token that corresponds to a state of the first application at the time of receiving the first request. In response to receiving—after the state of the first application has changed—a second request that comprises the previously-provided token, the first application may return to the state that it was in at the time of the first request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510764&OS=08510764&RS=08510764
owner: Google Inc.
number: 08510764
owner_city: Mountain View
owner_country: US
publication_date: 20121102
---
Aspects of the present application relate to electronic devices. More specifically to a method and system for deep links into application contexts.

Existing methods and systems for interacting with applications running on an electronic device can be cumbersome and time consuming. Further limitations and disadvantages of conventional and traditional approaches will become apparent to one of skill in the art through comparison of such approaches with some aspects of the present method and system set forth in the remainder of this disclosure with reference to the drawings.

A method and or system is provided for deep links into application contexts substantially as illustrated by and or described in connection with at least one of the figures as set forth more completely in the claims.

As utilized herein the terms circuits and circuitry refer to physical electronic components i.e. hardware and any software and or firmware code which may configure the hardware be executed by the hardware and or otherwise be associated with the hardware. As utilized herein and or means any one or more of the items in the list joined by and or . As an example x and or y means any element of the three element set x y x y . As another example x y and or z means any element of the seven element set x y z x y x z y z x y z . As utilized herein the term module refers to functions than can be performed by one or more circuits. As utilized herein the terms e.g. and for example set off lists of one or more non limiting examples instances or illustrations.

Each of the applications and may comprise code executed to cause the electronic device to perform specific tasks and or functions. Each of the applications and may be a native application i.e. installed by a manufacturer of the electronic device and or a manufacturer of the OS and or may be a third party application installed by a user of the electronic device after purchasing the electronic device. A non exhaustive list of example applications includes a media player application that accepts media files as inputs and outputs the corresponding video and or audio to the output device s an e reader application which accepts electronic documents books magazines etc. as input and presents the content of the document via the output device s a feed reader that accepts feeds delivered over the Internet e.g. RSS feeds and or feeds from social network sites as input and presents the feeds via the output device s a map application that displays a map via the output device s a note taking application a bookmarking application and a word processing spreadsheet and or presentation application that accepts specifically formatted files as inputs and presents them via the output devices for viewing and or editing.

The hardware may comprise for example a central processing unit a graphics processor memory an input output I O interface user input device s and user output device s .

The central processing unit CPU may be operable to effectuate the operation of the electronic device by executing lines of code stored in memory. Such lines of code may include the operating system and the applications and . The controller may for example comprise a single or multi core processor an application specific integrated circuit ASIC field programmable gate array FPGA and or any other suitable circuitry.

The graphics processor may be operable to generate a video stream for output to the screen based on instructions and or data received from the CPU. That is data structures corresponding to images to be displayed on the screen may be stored to and read from the memory module by the CPU. The central processing unit may convey such data structures to the graphics processor via a standardized application programming interface API such as for example Standard Widget Toolkit SWT the DirectX Video Acceleration API the Video Decode Acceleration Framework API or other suitable API.

The memory may comprise program memory and run time memory. The memory may for example comprise non volatile memory volatile memory read only memory ROM random access memory RAM flash memory magnetic storage and or any other suitable memory. Program memory may store lines of code executable by the CPU to effectuate operation of the OS and the applications and . Runtime memory may store data generated and or used during execution of the OS and or applications and

The input output I O interface may be operable to receive signals from the input device s and provide corresponding signals to the CPU and or the graphics processor.

The input device s may comprise for example a mouse a touchpad a motion sensor a trackball a voice recognition device a keyboard and or any other suitable input device which enables a user to interact with the electronic device .

The output devices may comprise for example a screen and speakers. The screen may be for example a liquid crystal display LCD screen a OLED screen an e ink screen and or any other suitable device for presenting a graphical user interface.

An initial state of an example media player application launched via a launcher may be one in which for example a screen which prompts the user to select a media file is presented. Upon the user selecting a media file the media player application may move to a state in which it presents a screen via which the selected media file can be played by the user pressing Play. In response to the user pressing Play the media file may begin playing and the state of the media player application may continually update as the media file plays e.g. each frame of a video or audio file may correspond to a different state of the media player application .

An initial state of an example E Reader application launched via a launcher may be one in which for example a screen prompting the user to select a book or magazine is presented. Upon the user selecting a book or magazine the E Reader application may move to a state in which it displays the cover page of the book or magazine. The user may then flip through the pages of the book or magazine to reach a particular portion of a particular page. The state of the application may update for example each time the user scrolls flips pages zooms highlights and or otherwise interacts with the book or magazine.

An initial state of an example feed reading application launched via a launcher may be one in which for example a screen prompting the user to select a feed is presented. Upon the user selecting a feed the feed reading application may move to a state in which it displays the latest post of a particular feed. The user may then scroll through the posts of the selected feed to reach a particular post of the selected feed. The state of the application may update for example each time the user scrolls expands a post minimizes a post deletes a post highlights and or otherwise interacts with the book or magazine in some way. Additionally or alternatively the state of the application may update as new posts are made to the feed.

An initial state of an example video game application launched via a launcher may be one in which for example a screen prompting the user to select a difficulty is presented. Upon the user selecting a difficulty the game may begin and a state of the application may update continually as time passes as new events occur and or as user and or sensor input is received.

An initial state of an example map application launched via a launcher may be one in which for example a screen displaying the entire United States is presented. The user may then zoom scroll add markers and or otherwise interact with the map with each interaction resulting in a new corresponding state of the application.

An initial state of an example email application launched via a launcher may be one in which for example an inbox is presented. The user may then select an email and the state of the application may update to one in which the contents of the selected email is displayed. Alternatively the user may search for emails and the state of the application may update to one in which emails meeting the search requirements are listed. Generally speaking the state of the email application may change in response to user inputs events such as receipt of new email and or the passage of time.

An initial state of an example word processing application launched via a launcher may be one in which for example a screen prompting the user to select a document is presented. Upon the user selecting a document the word processing application may move to a state in which it displays the beginning of the document. The user may then scroll through the document edit the document highlight portions of the document zoom in or out and or otherwise interact with the document. The state of the application may update in response to one or more of the interactions e.g. all interactions predetermined interactions and or a user selected subset of interactions .

Still referring to in block the application sends a request for a token corresponding to the current state of the application

In block the application generates the requested token and sends or makes it available to the application . For example the token may be written to a designated memory address that the application can then read. The token may comprise for example an alphanumeric string generated via for example a look up table and or an algorithm for converting various parameters and or context information associated with a state into a token.

In block the application stores the token such that it can be later accessed by the application another application and or by a user of the electronic device . For example the application may be a note taking application and may store the token as text in the note and or may store a hyperlink in the note that points to the stored token. As another example the application may be a bookmarking application that stores the token URL of websites and or other tokens or links for quick access to information.

In block the application sends the token to the application along with a request that the application return to the state corresponding to the token. If the application is not running the sending of the token may cause the application to be launched. Block may occur at any time while the token is still stored in memory. For example after block a user may set down the device or even turn it off and return to it minutes hours or even months later. As long as the token is still stored the process may resume at block .

In block it is determined whether it is possible for the application to return to the state corresponding to the token. If the state is not directly accessible the process advances to block .

In block the application may present a screen or window that the state is not directly accessible using the token. The state may not be accessible because for example the state is a secured state and the requisite security credentials have not been presented. Similarly the state may not be directly accessible because for example the state depends on user input that has expired and needs to be re entered.

In some instances in addition to or as an alternative to indicating that the state is not directly accessible the application may present a screen or window via which needed security credentials and or other user input can be provided. This screen or window may for example accept input that in originally reaching the state corresponding to the token was input over the course of multiples screens or windows. In this manner the state may be reached more quickly after using the token than it was when starting at the initial state of the application.

In block the application goes to the state that it was in when the token was generated in block . Where the application was launched in block then the application effectively launches directly to the state corresponding to the token and skips the initial state and any intermediate states between the initial state and the state corresponding to the token.

While application is in state a user of the electronic device touches the icon represented by arrow to bring up the application . The window of application comes up while the application continues to run.

In the displayed screen of the application is a user control that when selected triggers a request from the application to the application for a token corresponding to the current state of application . In response to the user interacting with e.g. clicking or touching the control as represented by arrow the request is sent the application generates and sends the requested token and the application receives and stores the token. The token or a link or pointer to the token may be displayed in the window of the application . The link or pointer may be for example the name of the application and or a timestamp of when the token was generated. In some instances a text field via which a user can enter notes about the token or the state of the application corresponding to the token may also be displayed. For example where the application is a media player application the user may enter a note such as this is the best part of the song As another example where the application is an E Reader application the user may enter a note such as This paragraph summarizes the author s key argument. In response to the user entering the note and clicking save as represented by arrow the application may close or return to running in the background.

The user then closes the application as represented by arrow and then perhaps immediately or perhaps weeks later for example opens up the note that was taken during arrow . The note comprises the text that was entered and a link that points to the stored token. The user then interacts e.g. clicks or touches with the link as represented by the arrow . In response the application opens up and proceeds directly to state i.e. skipping state and any other intermediate states without the user interactions and or time passage represented by arrow that were previously required to move from state to state .

Other implementations may provide a non transitory computer readable medium and or storage medium and or a non transitory machine readable medium and or storage medium having stored thereon a machine code and or a computer program having at least one code section executable by a machine and or a computer thereby causing the machine and or computer to perform the process as described herein for deep links into application contexts.

Accordingly the present method and or system may be realized in hardware software or a combination of hardware and software. The present method and or system may be realized in a centralized fashion in at least one computing system or in a distributed fashion where different elements are spread across several interconnected computing systems. Any kind of computing system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computing system with a program or other code that when being loaded and executed controls the computing system such that it carries out the methods described herein. Another typical implementation may comprise an application specific integrated circuit or chip.

The present method and or system may also be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

While the present method and or system has been described with reference to certain implementations it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted without departing from the scope of the present method and or system. In addition many modifications may be made to adapt a particular situation or material to the teachings of the present disclosure without departing from its scope. Therefore it is intended that the present method and or system not be limited to the particular implementations disclosed but that the present method and or system will include all implementations falling within the scope of the appended claims.

