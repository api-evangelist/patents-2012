---

title: Method and system for filtering common fields across multiple data sets
abstract: A system and method for display of graphical components on a user interface. Multiple components may be displayed on a graphical user interface an active dashboard. Each component is a graphical representation of a report generated from plurality of data fields stored in objects on a database. At least some of the reports are generated from different data models. The displayed components are filtered on the basis of at least one data field that is a common field among the different data models.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613326&OS=09613326&RS=09613326
owner: salesforce.com, inc.
number: 09613326
owner_city: San Francisco
owner_country: US
publication_date: 20120724
---
The present application claims the benefit of U.S. Provisional Patent App. No. 61 511 756 filed on Jul. 26 2011 entitled Method and System for Providing Deduplication and Representation of Common Fields Across Multiple Data Sets which is incorporated herein by reference in its entirety.

Portions of this disclosure contain material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the records of the United States Patent and Trademark Office but otherwise reserves all copyright rights whatsoever.

This disclosure relates generally to systems computer program products and computer methods for displaying performance metrics on a dashboard interface and more particularly to providing a filter for the dashboard interface.

An ongoing business enterprise uses and maintains data related to the company s business such as sales numbers customers business opportunities and other information pertinent to sales revenue inventory networking etc. The data is stored on a database that is accessible to company employees and frequently a third party maintains the database containing the data. For example the database can be a multi tenant database which maintains data and provides access to the data for a number of different companies.

To facilitate effective use of data many business organizations have a system to help manage the company s interactions with customers clients and sales prospects commonly known as a customer relationship management CRM system. A CRM system may provide various mechanisms for reporting and viewing data such as a dashboard which is a specialized graphical user interface GUI that provides visualization of data particularly performance metrics. A dashboard typically contains one or more components each of which represents information of significant analytical value to the user. A dashboard can combine information from multiple and often disparate data sets which makes it difficult to filter information that is presented on the dashboard. Thus known solutions may filter a few components and usually only if the components come from the same data set. The problem is that users rarely know which components are filtered thus creating some ambiguity about the information displayed on the dashboard.

Therefore it would be desirable to provide systems and methods that overcome the above and other problems relating to facilitating the analysis of shared information to improve networking across a database system maintained on an external server such as a multi tenant database.

This disclosure describes systems and methods for global filtering of all components displayed on a dashboard application. Dashboard applications are used primarily to provide visualization of key performance indicators for an enterprise. Each component is sourced by a report that includes a plurality of data fields stored in objects on a database. At least some of the reports are generated from different data models. The displayed components are filtered on the basis of a common field among the different data models.

A user may be presented with a list of available choices for the common field filter. A method for determining which fields are common is described wherein the underlying report for each component is identified. The base objects in each report are then evaluated and a list of common base objects across all the reports is generated. Each of the common base objects includes a plurality of data fields that include data or link to other fields reports or objects. Any of these data fields that map to each and every report that underlies the active dashboard is considered a common field and may be selected as a basis for a global filter.

As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. As used herein the term query refers to a set of steps used to access information stored in a database system.

The operation of MTS is controlled by a processor and network interface manages inbound and outbound communications between the network and the MTS. One or more applications are managed and operated by the MTS through application platform . For example a database management application runs on application platform and provides program instructions executed by the processor for indexing accessing and storing information for the database. In addition a number of methods are described herein which may be incorporated preferably as software routines into the database management application.

MTS provides the users of user systems with managed access to many features and applications including tenant data storage which is configured through the MTS to maintain tenant data for multiple users tenants. The tenant storage and other processor resources may be available locally within system as shown or hosted remotely with high speed access.

User system may be any machine or system used to access a database user system. For example any of the user systems could be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which in this embodiment is system .

An on demand database service such as system is a database system that is made available to outside users that are not necessarily concerned with building and or maintaining the database system but instead only that the database system be available for their use when needed e.g. on the demand of the users . Some on demand database services may store information from one or more tenants into tables of a common database image to form a multi tenant database system MTS . Accordingly the terms on demand database service and system will be used interchangeably in this disclosure. A database image may include one or more database objects or entities. A database management system DBMS or the equivalent may execute storage and retrieval of information against the database objects or entities whether the database is relational or graph oriented. Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global network of networks often referred to as the Internet that network will be used in many of the examples herein. However it should be understood that the networks that the one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the data stored in the MTS however other alternative configurations may be used instead.

In one embodiment system implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms web pages and other information to and from user systems and to store to and retrieve from a database system related data objects and Web page content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process web pages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system may be any combination of one or more processors. Memory system may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks.

As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases or in distributed memory as described herein.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned co pending U.S. Provisional Patent App. No. 60 828 192 entitled Programming Language Method And System For Extending APIs To Execute In Conjunction With Database APIs filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be coupled for communications with database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is coupled for communication between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant and handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be shared organization wide or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that the terms table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema such as illustrated in and described below. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with the terms object and table. 

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. Pat. No. 7 779 039 entitled Custom Entities and Fields in a Multi Tenant Database System is hereby incorporated herein by reference and teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

Tenants or subscribers of MTS may invoke dashboard applications in order to visualize and evaluate data such as key performance indicators KPI s for the enterprise. A dashboard is a computer implemented graphical user interface presenting one or more components as visual representations on a display. In a typical application each component represents some KPI. The components are typically metrics defined in a graphical format by a database user for an enterprise such as a business having sales marketing operations etc. A graphical metric can include for example a table graph plot gauge chart or any other visual display of statistical data produced by an aggregation of data across one or more fields in a selection of records from a database like MTS . Configuration of dashboard applications is generally known and will therefore not be described in great detail herein.

The illustrated dashboard includes three main parts a dashboard toolbar configured with command buttons related to dashboard control operations such as Save Save As Close Dashboard Properties Add Dashboard Sections as illustrated a dashboard visualization panel for displaying components and a component configuration panel including one tabbed page labeled Components shown and another tabbed page labeled Data Sources hidden .

A user may assemble dashboard by dragging and dropping components from the Component page into the dashboard visualization panel . The user may also be presented with a list not shown of existing dashboards to which the user has access rights to view the dashboards. A data source may be associated with each component dropped onto the dashboard by selecting a report from the Data Source page and dragging it onto the component to thereby have the report feed data to the component. The user can also define or redefine properties of components using the Dashboard Properties button on toolbar or add new components using the Add Dashboard Sections button on toolbar .

As illustrated in the visualization panel of dashboard displays a number of active dashboard components . Each dashboard component is driven by a report stored in the database where the report feeds data to the dashboard component. Each report may also have multiple data fields where each field is related to a base object stored on the database as further described below.

There are typically many different reports available on the database and some reports may be created from different data models. In addition different entities may have different data models each model created to suit the needs of the particular entity. For example there may be different data models for sales marketing manufacturing and distribution organizations within the same company. Further although reports from different data models may reference the same underlying object s in the database such as an Account object there may be different labels attached to the same object in different reports and or different data models. Also rather than reference the same objects reports may reference different but equivalent objects which may also have different labels.

The organization of different data models has prevented known dashboard applications from providing a global filtering function i.e. a single filter that may be applied over all displayed dashboard components. However by identifying common fields or equivalent fields in the reports that underlie the displayed components a global dashboard filter may be provided. To that end the dashboard visualization panel also includes a command toolbar above the displayed components that provides two commands Filter and Add Filter and further described in Section 4 below.

A multi tenant database is comprised of a number of entities or objects that represent tables containing the information of one or more organizations. Each entity may have related child objects that define the entity. For example a common business object represents Accounts such as customers partners and competitors and may have related child objects including one or more data feeds. Both the entity object also called the base object and its child objects have records associated with them which may include data defining the object as well as one or more data fields having values or links which are referenced in operations involving the object.

The objects are typically accessible through an application programming interface API which is provided through a software application such as a customer relationship management CRM software product such as Salesforce CRM. The term record is used to describe a specific instance of an object like a specific customer account that is represented by an account object. A record may be thought of as simply a row in a database table. In a typical database application standard objects may be provided while custom objects may be created by the user.

It should also be noted that users may only access objects for which they have authorization as determined by the organization configuration user permissions and access settings data sharing model and or other factors related specifically to the system and its objects. For example users of the database can subscribe to one or more objects on the database in order to access create and update records related to the objects including data feeds or dashboard applications.

In one embodiment the database may maintain a user subscription table as shown in that provides a list of all objects to which a user has access e.g. the user is subscribed and or authorized for these objects. In subscription table the first column is a list of users identified by user id the second column is a list of organizations associated with respective users in the first column and identified by org id and columns through list objects to which the listed user is subscribed and identified by a respective obj id. The records for the objects identified in columns may further identify specific fields and or other related records.

One of the objects subscribed to by a user may be a dashboard application. For example the first row shown in table shows that user U is subscribed to object D in column which is a dashboard. The dashboard object D may have related records and related child objects all of which can be referenced through use of the dashboard object.

The database may thus also maintain a dashboard table as shown in . Each dashboard has an object created on the database to represent the dashboard where the features of the dashboard are stored in a record associated with the dashboard object. Each time a dashboard is created the database assigns an identifier dash id as shown in the first column and allocates a row to that dashboard in the dashboard table . Fields are created and stored with the table to include identifying features such as the name of the dashboard dash name in column and a description of the contents dash descrip in column . As components are added to the dashboard a link to each component comp link is added to column of table . The links point to a component table as shown in which is a record that defines each component. Additional columns of links or other information may be defined.

In the first column contains a component identifier comp id that is assigned by the database and which is used in field of dashboard table to reference and call the related records and values associated with that component when the component is generated as part of a dashboard rendered in a user interface. The component table also includes a field for the name of the component comp name and a field for a description of the component comp descrip. The component table further includes field listing the dashboard dash id with which the component is associated and field references a report report id that produces values for the component.

The reports are maintained in tables such as table in . The first column includes the report id that was referenced in column of component table in . Other columns are defined with descriptive fields and links to objects data etc. Column contains the Report Name and column identifies the object on the database that stores the report identified in each row. Column identifies the fields associated with the object in column and column provides one or more report values.

It should be noted that table is indicative of a particular data model that is the organization of the report is defined by the identification of data and links within a row of the table. However other report tables may be organized in a different manner to suit the needs of a particular organizational entity. It is this different organization of report tables that has hindered efforts to provide global filters for dashboard application. Nevertheless each report may reference many of the same base objects fields and links. By drilling down into each report and finding which base objects are referenced in a particular report a set of common objects can be determined. For example each row of column of table contains a specific reference to a base object and each corresponding row of column of table contains a specific identification of fields that are contained on the base object in that row. Thus by examining the underlying report table for each displayed component common objects and common fields may be identified and used as the basis for global filtering of all components displayed on the active dashboard.

One embodiment of a process for providing a filter overlay for a dashboard application is shown in . Process represents an interaction between a user and a dashboard application. The filter process is made available when the user has an active dashboard displayed with multiple components and allows users to see different views of the dashboard data through filters that are common to all components on the active dashboard.

In step a link is displayed on the user interface for invoking a routine to configure the filter such as the Add Filter command displayed on toolbar in . In step the user selects the link and that user selection is received and processed by the database system in step . The system then presents a dialog box to the user in step with controls for configuring the filter for example as a pop up window on the user interface see . At a minimum the filter pop up window includes at least one data box for allowing the user to select a data field to be the basis of the filter. Further the system may populate the data box with a list of fields available for user selection. In one embodiment only common fields may be selected as the filter basis i.e. fields that are common across all data models that are represented by the various components on the active dashboard.

In step the user selects a data field to be the filter overlay on the active dashboard. For example the user may wish to display results that are filtered to show sales related metrics by region or by division or by industry. As noted above in one embodiment only common fields are available for selection as filters. Methods for determining the common fields are described in more detail below. In step the database system receives and processes the user s selection of a common field as the basis for the filter.

In this embodiment the filter may be applied after a common field is selected. If the user selects the OK button in step then the filter is applied in step . If instead the user selects the CANCEL button in step then the filter operation is cancelled in step .

Another process for providing a filter overlay for a dashboard application is shown in . Steps through are the same as on but after receiving the user s selection of a common field in step the system proceeds to display one or more labels that correspond to the selected field in step . There may be different labels associated with a common field in different data models. In one embodiment all labels associated with the common field may be displayed so that the user may choose and preferably duplicate entries are removed.

At this point the user may select one of three options. The user may choose to apply the filter based on the selected common field by clicking the OK button in step even without choosing a label and the filter will be applied by the system in step . Likewise the user may also cancel the filter operation by selecting the CANCEL button in step thus cancelling the filter operation in step . Alternatively the user may provide additional information for the filter operation by associating a label with the selected common field and or establishing additional criteria to be applied in the specified filter operation.

In step the user chooses a label for the selected common field and in step the database system receives and processes the user selection thereby associating the selected label with the selected field for the purpose of this filter configuration.

In step the system displays additional options or criteria for the filter operation and an embodiment for doing so is described below. And once again the user may select one of three options. The user may choose to ignore the additional options feature and simply apply the filter based on the selected common field with selected label by clicking the OK button in step and the filter is applied in step . The user may also cancel the filter operation by selecting the CANCEL button in step thus cancelling the filter operation in step . The user may instead proceed to configure additional options and or criteria for the filter operation.

In step the user selects and or enters options and or criteria to be applied with the filter and in step these options and or criteria are received and processed by the system.

Finally the user must decide to apply the filter by selecting OK in step or cancelling the operation by selecting the CANCEL button in step . Upon receiving the user s selection of OK the system applies the filter to all components displayed on the active dashboard and saves the filter.

The following example illustrates one possible implementation of the method described above as a filter overlay for a dashboard application. As noted above when the user selects the Add Filter command from dashboard toolbar see a new window pops up as shown in to provide a dialog box for user input to configure the filter operation. The exemplary dialog window is configured with three data boxes namely data box Field Name data box Display Label and data box Filter Operations and two control buttons e.g. button OK and button Cancel . Data box is single text buffer e.g. 40 character maximum for the user to enter and or select a Field Name to be the basis for the filter function. Data box automatically displays one or more Labels corresponding to the Field Name entered or selected by the user in box . Data box allows the user to configure additional options.

The user may begin to enter text into field and automatically invoke a search function on the entered text to locate a match among a list of common fields. Alternatively the user may select from a pull down menu showing available fields to choose from by selecting pull down arrow . For example shows a pull down menu that is expanded from field when pull down arrow is selected. The pull down menu lists all common fields from each report that underlies the dashboard under its corresponding object. Advantageously the list may include duplicate fields if there are different report types different fields or different labels and likewise duplicate fields may be removed where there is the same field or label associated with reports.

Upon selecting a field name the second data field displays a label corresponding to the selected field name as shown in . For example upon selecting the field name Account Name in data box that same value is entered as a default value in the Display Label data box . Alternatively as shown in a list of equivalent field names may be displayed in pop up box by selecting or hovering over a link for equivalent fields that may be displayed below the field name data box. A conservative approach is to display all of the equivalent field names but remove duplicate entries. However it must be determined which fields are common or equivalent how to label these common fields and ultimately how to apply the filter back to the individual components.

Returning to once the field name has been selected in data box the data box also becomes active and additional options and or criteria may be configured for the filter overlay using well known methods. In one embodiment dashboard filters may be configured with drop down parameter lists that allow users to select subsets of the displayed components.

In one embodiment the base objects in the report type join hierarchy such as the objects listed in column of report table are the main field of search but the first level lookups of these objects such as the fields identified n column of table may also be included in the field of search.

In step each field associated with each of the common objects is identified. In step each of those fields identified in step is evaluated to determine whether it is mapped to each report type represented as a component on the active dashboard. If a field is mapped to each report type then it is included on the available list of common fields in step . If not then the field is ignored in step and the evaluation step continues until all fields have been evaluated.

Thus the list generated in step may be stored for example and referenced in a dashboard table associated with the active dashboard and used to present choices for display as described above. This process ensures that every component displayed on the active dashboard may be filtered on the common fields. Some of the common fields may have multiple mappings within each report type but simple rules may be devised to pick a default mapping and to change the mappings as described further below.

If the Common Field does not have a unique label in step but instead multiple labels across report types then each of those multiple labels will be associated with the Common Field in step and used in the field name drop down menu so that the user can make the choice.

If the Common Field does not have a unique mapping in step but instead multiple mappings across report types then each possible label for each of the multiple mappings will be associated with the Common Field in step and used in the field name drop down menu so that the user can choose.

Once the filter overlay is created and saved the system must determine how to apply the filter on each component of the active dashboard. illustrates a process to be applied for each component for determine how to apply the filter.

In step the report for the component is evaluated to determine whether it has the exact same field as the selected filter field. If so then the filter is applied to that field with no ambiguity in step . If there is no exact match in step however then the various possible mappings onto the report must be evaluated. As noted earlier fields may have multiple mappings on a report and that can provide ambiguity in both configuring the filter overlay and in applying the filter.

If there is only a single mapping into a field on the report by the filter field in step then the filter is applied in step using that field. If there is not a single mapping in step then there are possible multiple mappings. In order to resolve any ambiguities the report is then traversed in step beginning at the root object and proceeding to the bottom of the join hierarchy including lookups at each level as necessary.

If the filter field maps to a field in the root object in step then use that field to apply the filter in step . If not then the next priority is to determine if the filter field maps to a field in the lookups of the root object in step . Since the root object may have multiple lookups in one embodiment they are evaluated in the order they are defined in the report. If the filter field maps to a lookup of the root object in step then that field is used to apply the filter in step .

If the filter field does not map to the root object or its lookups then the process proceeds down the join hierarchy to the next level in step using the same logic to evaluate possible mappings of the filter field. If a mapping is not found in step then the process moves to the next level in step again. When a mapping is found in step it must be determined whether there are multiple mappings in step . If not then that mapping is used in step . If so then the system will simply select the column of the report that is also used in the underlying report in step . If there is more than one column used in the underlying report then the first matching column is selected in step .

Regardless of whether or not a mapping ambiguity exists in one embodiment the filter field mapping will be shown on each component. For components whose report types do have ambiguity i.e. multiple possible mappings users can change the filter field mapping. One consequence is that a filter field may be mapped in one component to a different column mapped in another component to a totally different column even though both the components use the same report.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

