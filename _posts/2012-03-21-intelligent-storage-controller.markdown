---

title: Intelligent storage controller
abstract: An intelligent storage controller operating in conjunction with a computer running an application that uses the data managed by the intelligent storage controller, and requires data transformation operations to be performed on the data. The intelligent storage controller is adapted to directly perform the data transformation operations on the data controlled by the controller, under the direction of the computer running the application, thereby offloading this processing entirely to the intelligent storage controller. The intelligent storage controller may also provide an application programming interface for the computer running the application to use in directing commands to the intelligent storage controller. To accommodate varying workloads on the intelligent storage controller, data transformation tasks may be load balanced between the intelligent storage controller, the computer running the application, and/or other hosts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09423983&OS=09423983&RS=09423983
owner: Syncsort Incorporated
number: 09423983
owner_city: Woodcliff Lake
owner_country: US
publication_date: 20120321
---
This application claims priority to Provisional Application Ser. No. 61 588 351 filed Jan. 19 2012 and Provisional Application Ser. No. 61 590 851 filed Jan. 26 2012 the entire disclosures of which are hereby incorporated by reference.

This disclosure is in the field of information technology and relates more particularly to an intelligent storage controller configured to be controllable to perform data transformation operations directly on data residing in physical storage managed by the intelligent storage controller.

The typical enterprise deploys a wide range of business systems. Such enterprises often use data integration technologies to pull together the information in such systems to ensure that its decision makers are working with a unified current consistent view of information from across the enterprise.

Data integration tools are often used to pool the data from these diverse systems to form data warehouses from which the data may be accessed in coherent formats and compilations. The data integration tools may then be used to reorganize the data in the data warehouse to provide a plurality of data marts each tailored to the needs of different classes of users in the enterprise e.g. sales finance operations human resources etc. . Other operations in the enterprise apart from data integration may involve processing large volumes of data.

Data integration and other enterprise data processing often necessitates repeated operations involving data transformation converting data from a source format and organization to a destination format and or organization. Data transformation includes for example operations such as sorting data aggregating the data by specified criteria summing averaging or sampling the data compressing decompressing encoding decoding or otherwise manipulating the data etc. Data transformation operations are often performed on large and sometimes enormous volumes of data and commonly require a substantial portion of a computer s resources. Such operations can be a substantial portion of the overhead of a data integration or data processing process and can be performance critical. These requirements become more critical as enterprises develop larger systems and require tools to deal with what has become known as big data the huge volumes of data that accumulate as a result of the automation of business processes by electronic commerce and telecommunications. Accordingly there exists a growing need to provide more efficient tools for data transformation in order to achieve suitable performance with data integration and other large scale applications.

Sorting is one example which is representative in some respects of the processing demands imposed by data transformation operations. A large sort job will often involve sorting a data set that is larger than will fit in the computer s memory at one time. Such a sort process is referred to as an external sort because work in process data developed during the sort job must be stored outside of the main memory of the computer resulting in additional I O. Techniques for reducing I O and processing requirements during an external sort are described in references such as commonly assigned U.S. Pat. No. 4 210 961 to Whitlow et al.

Conventionally a sort process involves in addition to other steps a step of reading the data to be sorted from storage into the computer s memory and sorting the data and a step of writing the sorted data to the designated output file on a storage unit. Further in the case of an external sort where the amount of data to be sorted is larger than the memory can hold the sorting step will have to be re performed in order to sort all of the data and one or more merge steps may be required to merge the individually sorted portions into a single run in the correct order. Each of these steps even when optimized in accordance with the current art entails substantial CPU activity as well as the I O of reading and writing the input file the intermediate merge strings and the output file.

Commonly assigned U.S. Pat. No. 5 519 860 disclosed a method of using the processing capabilities of intelligent secondary storage attached to a main computer in order to enhance the sorting process on the main computer. Rather than reading all of the data from storage and sorting it on the main computer the 860 patent taught to read a sort key and a record storage location for each record to be sorted sort a skeleton containing only the extracted data on the main computer and then use the sorted record locators and the sort order derived on the main computer to instruct the intelligent controller to reorder the records in sorted order. In this way the volume of data I O between the main computer and the intelligent controller was reduced and the work of physically reordering the data records was offloaded to the intelligent controller thereby increasing the efficiency of the sorting process.

Nevertheless under the approach developed in the commonly assigned 860 patent it remained the case that the sort operation was still carried out by the main computer and that the data I O though reduced was not eliminated because the keys and record pointers still had to be transferred to the main computer from the intelligent controller the main computer still had to transfer the reordering instructions back to the intelligent controller thereby leaving considerable processing volume for the main computer and its communications channels.

In one embodiment an intelligent storage controller is provided fashioned to operate in conjunction with a computer running an application that uses the data managed by the intelligent storage controller. The intelligent storage controller includes processing capability which is adapted to directly perform data transformation operations on data controlled by the controller. The intelligent storage controller is further adapted to operate under the direction of the computer running the application through a service configured on the intelligent storage controller and preferably responsive to an application programming interface provided by the intelligent storage controller. Thereby the workload and bandwidth consumption of the data transformation operation may be entirely offloaded to the intelligent storage controller. To accommodate varying workloads on the intelligent storage controller data transformation tasks may be load balanced between the intelligent storage controller the computer running the application and or other hosts.

The following detailed description is provided to illustrate the principles of the disclosure by a detailed description of certain illustrative embodiments. The features and attributes selected for purposes of these illustrations should not be understood as limiting the appended claims.

Virtual storage and specialized devices to provide such storage have become widely used in data processing operations. Such devices include equipment knows as storage controllers file servers logical volume managers network attached storage NAS devices storage attached network SAN devices filers storage array controllers virtual tape servers etc. Such devices are generally referred to herein as intelligent storage controllers ISCs .

ISCs commonly have processors for managing their own local operations and peripherals as well as upstream communications with the systems to which they provide storage services. ISCs tend to be dedicated devices and the operating systems that control their processors tend to be embedded OSes. Nevertheless the processing power on these devices has steadily increased to the point that currently in many cases the power provided internally within an ISC is comparable to that found in general purpose computers.

In data processing operations today the data to be processed by applications in an enterprise s information systems will often reside on virtual storage managed by a plurality of ISCs.

Conventionally the computer running any given information processing operation which shall be referred to as an application computer AC may treat the data under the control of the ISC in the same way for application purposes as data stored locally such as on one of the AC s own hard disks. The ability to provide remote storage that may be treated as local is one of the principal advantages of an ISC. As mentioned above an AC performing a data integration or other data intensive task may have need at various stages of operation to perform data transformation operations on data under the control of one or more ISCs. Conventionally in order to perform the data transformation operation the AC will read the data from storage perform the data transformation operation and write the integrated and or transformed data back to storage.

U.S. Pat. No. 5 519 860 discussed above took advantage of ISCs such as those available at the time to off load some of the data transformation task in that case sorting from the AC to the ISC. As discussed above the 860 patent taught to read a sort key and an record storage location for each record to be sorted sort a skeleton containing only the extracted data on the main computer and then use the sorted record locators and the sort order derived on the main computer to instruct the ISC how to reorder the records. In accordance with this approach the AC obtained from the ISC a key and a storage location for each record forming a key value pair in which the key was the extracted key and the value was data representing the original position of the record containing the key as stored in the external storage device. The ISC was capable of reading writing and temporarily storing data read from the managed storage devices. The AC created a sorted index for the external data by sorting the key value pairs and then used the results to instruct the ISC how to reorder the data. The volume of data I O between the AC and the ISC was thereby reduced and the work involved in rearranging records was off loaded to the ISC. However it remained the case that the sort operation was still carried out by the AC and the data I O though reduced was not eliminated because the keys and record pointers still had to be transferred to the AC from the ISC and the AC still had to transfer back to the ISC the respective record storage locations for the affected records.

It is further possible given the processing power of modern ISCs to create and sort the index itself on the ISC thereby offloading all of the sorting to the ISC and eliminating as well all of the data transfer between the AC and the ISC. Furthermore in such an approach it is not necessary any more as it was in accordance with the 860 patent to perform a key sort the entire record exists in the storage under the control of the ISC and any suitable sort algorithm can be used. Moreover the operations that may be performed are not limited to sorting and may include any data transformation operation.

During the execution of application on AC it may become necessary to perform a data transformation operation on data residing in physical storage under the control of ISC . For example it may be necessary for purposes of application to sort a file for example file residing in physical storage . For simplicity of presentation I refer herein to sort with the understanding that any other data integration transformation operation or process could be substituted for sort to the achieve a corresponding result. 

In the prior art some or all of the data in file would be read into AC by means of file or block I O operations directed to ISC and the required sort operation would be performed on AC with the data written back to file itself or another file designated for output under the control of ISC or otherwise . This might have been done by using a sort routine internal to application or by calling out to a standalone sort program such as the sort program natively provided by the AC s operating system e.g. bin sort in UNIX or Linux or another program such as the SyncSort or DMX programs provided by Syncsort Incorporated of Woodcliff Lake N.J. the assignee of this application or other data transformation software. In any of these prior art cases the sort would be performed on data that had been moved at least in part to the AC using the processor of the AC.

In the system of rather than reading and sorting data itself AC simply directs ISC to perform these operations. In order for ISC to carry out these directions ISC is provided with software to perform the necessary data transformation operation in this case sorting also under operating system . Software could be any data integration transformation software operable under OS and the resources provided by the ISC for example an embedded version of SyncSort on an ISC that runs some variant of UNIX Linux Microsoft Windows or other OS supported for SyncSort. Further the ISC is provided with logic to accept commands to invoke the data integration transformation software over communications connection .

In a preferred embodiment an application programming interface API may be provided for the ISC to accept data transformation instructions from remote hosts such as AC over communications connection for execution by software . In such a case application on AC may be adapted to use the specified API in order to create appropriate commands and pass them to ISC over communications connection to be performed by ISC for example on file in physical storage .

The API provides a structure for the AC to specify the data transformation operations to be performed and for relaying result and or error codes back to application on AC .

In a further embodiment a service may be installed on ISC to listen for API commands on a particular network port associated with communications connection with the service configured to pass the commands to software . The service may be further configured to pass result and or error codes back to the sender of the command formatted in accordance with the API.

AC may of course from time to time also direct data read and write operations to ISC independent of data transformation operations performed in accordance with this disclosure. Thus AC may access the data in physical storage before or after data transformation operations are performed in accordance with this disclosure or at any other time . This disclosure presumes that applications may be running in a distributed manner. Accordingly AC may alternatively direct other machines and processes to obtain data through ISC including data that has been transformed in accordance with this disclosure or provide to other machines or processes the file addresses specifications or offsets for the other machines or processes to perform data transformation operations in accordance with this disclosure.

In another embodiment ISC and physical storage may comprise a Virtual Tape Library VTL taking the place of a library of physical tapes as conventionally used in a mainframe computer installation. The VTL controller may be provisioned with a copy of SyncSort executable on the controller s operating system e.g. Linux and with a suitable API for invoking SyncSort commands and relaying execution results such as what might have been provided and returned by SyncSort s own local API . One object of a VTL is to replace legacy tape operations with much faster and reliable disk operations especially for a multitude of short tapes. The techniques of the present disclosure provides even greater acceleration not only by eliminating tapes but by offloading to the ISC all data transformation processing for the selected data and eliminating all of the data transfer that otherwise would have been required for such processing on the AC. Contemporary ISC hardware for example for VTL applications typically runs an embedded operating system such as Linux uses multi core processors and has sufficient resources including memory such that they may readily be provisioned with data integration transformation software such as SyncSort.

The left column of addresses the example where the data transformation task is a sort and is intended to be exemplary. It is a simplified presentation of one variation of steps involved in an external merge sort. For further detail and variations see e.g. the 961 and 860 patents referred to above.

Briefly in a conventional approach as shown on the left side of AC running a data integration process will specify in step data transformation operation required to be performed in support of the data integration process. The example of a sort operation is illustrated here as representative of a data transformation operation.

In step AC performs initialization setting up the sort operation initializing variables and data structures and planning for the job.

In step AC reads a core load the amount configured for memory to hold of data from input file through ISC .

In step AC writes the sorted string to a sortwork file in some media accessible to AC whether through ISC or otherwise .

In step AC determines if there is more data to sort. If so processing from step is repeated i.e. another read and another sort . If not processing continues.

In step AC determines if there is more than one string sorted string in sortwork. If so processing continues to step . Otherwise the processing skips to step .

In step AC reads up to n strings to the extent available from the sortwork file where n is the power of the merge i.e. how many strings can be merged at once as determined by the size of memory and the sort records and the setup step .

In step AC writes the merged string to the sortwork file and then loops back to step to determine if there remains more than one string in sortwork.

At such time as there remains only one string in sortwork AC reads this string and writes it to the output file which may be file or some other file under the control of ISC or otherwise. Conventional processing is complete.

It is evident that the conventional processing entailed significant processing overhead. It is an O n log n comparison based sorting operation with a complete read of the input file repeated reads and writes to and from the sortwork file and a complete write of the output file.

By contrast the operations required of AC to perform the equivalent data transformation operation in accordance with this disclosure is shown in the right hand column of .

As in the conventional example in step AC will specify the data transformation operation required to be performed in support of the data integration process.

In step AC will call ISC to perform the specified data transformation task using the API provided by ISC . Processing is complete for AC .

Of course equivalent processing to that represented in steps on the left side of is performed by ISC . But such processing occurs on ISC s own CPU and the related I O takes place on its own local busses and interfaces not burdening AC or the data communications network outside of the storage subsystems. This is far preferable insofar as ISCs such as ISC generally have considerable unutilized processing and data transfer capacity. The use of such capacity relieves application servers such as AC of the entire processing load of the data transformation operations required to perform data integration operations and other data intensive activities requiring substantial data transformation.

Accordingly an ISC such as ISC with logic built in to perform data transformation operations locally to the ISC on data controlled by it and with an API so that external devices may call upon this functionality can be used to achieve considerable acceleration for data integration and other data intensive applications.

The processing load on ISC will vary from time to time during operation. As noted above in general it is expected that at most times there will be sufficient processing capacity on this type of equipment to deal with the workload of data transformation tasks. However there may be times during operation when ISC is facing higher than average demands from data storage and I O. At such high demand times adding to the ISC s workload might adversely impact overall system performance and or economy.

Such an adverse impact may be avoided by load balancing among ISC and other processors including AC . Under this approach processing may be less aggressively allocated to ISC when it is determined based on past and present conditions that such action will benefit performance and or economy.

For example ISC itself AC or another machine may monitor the loads on ISC and or the tasks it is performing. It may also maintain a log of such monitoring. The current monitoring data either alone or in combination with the accumulated data in the log may be used as a basis for such load balancing.

Some tasks may be performed on ISC on a recurring schedule which will result in periodic occurrences of higher than average workload on the device. The log data may be used to predict high load conditions based on past patterns. The prediction can be verified by current readings after initially acting on the prediction and appropriate correction made in real time.

The control outputs of such monitoring may indicate for example the volume of the current and or anticipated workload on ISC and an estimate of how long the workload at that level will continue.

If ISC itself performs such monitoring it may be adapted to communicate the monitoring information to AC and or other machines preferably using an extension of the API discussed above.

If the monitoring of the workload of ISC indicates a need to moderate the load of data transformation processing a number of options may be exercised. These include for example one or more of the following measures 

One implementation of load balancing as described above is shown in . is a flow chart showing in simplified form the steps performed in one embodiment in order to perform load balancing between an ISC and an AC and or other hosts.

Referring to step is initialization. In addition to application or task specific initialization this includes initializing and starting a monitoring process as described above to monitor and log conditions on the ISC. The results of the monitoring provides information on running tasks as well as an estimate of ISC processing capacity. This information is used e.g. at steps and .

Step represents the Run state of the application requiring the ISC s services for example a data integration application requiring data transformation services . Within the Run state a process repeatedly checks the status of required data transformation tasks including both those that are already running as well as a list or queue of those that need to be started.

If a new data transformation task is needed the ISC s processing capacity is checked at step . If the ISC has sufficient capacity then in step the task is executed on the ISC.

If there is insufficient capacity on the ISC then in step it is determined whether the task can be delayed. If so a delay loop executes until the situation changes a more detailed implementation would have timeouts etc. . If the task cannot be delayed then a check is made at step whether the ISC has capacity for partially performing a task and if so a key sort with processing divided between the ISC and the host may be commenced at step . If there is insufficient capacity even for partial execution on the ISC then the task is commenced on the AC at step .

If step determines that there are running tasks the priority of each running task is determined at step . The relative priority may be used to allocate available resources or for scheduling in the case of multiple running tasks.

At step the task is checked to determine where it is running. If the task is running on the ISC then the capacity of the ISC is checked at step . If the capacity is sufficient execution of the task continues on the ISC. In a further step not shown in if this is a situation in which execution of the task has been split between the ISC and the AC and the ISC has sufficient capacity at that time to perform all of the processing for the task then the execution of the entire task can be shifted to the ISC.

If there is insufficient capacity to continue the current processing of the task on the ISC without undesired degradation then it is determined at step if the task can be delayed. If so then a delay loop similar to the delay loop at is executed while this is true. If the process cannot be delayed the task is shifted to the AC in step . The following is not shown in but if conditions permit the task may be partially shifted to the AC at this point in a manner analogous to that shown in steps and .

If step determines that the running task is on the AC step checks if conditions still require this task to be shifted off the ISC. If so processing continues on the AC as shown in step . If not the task is shifted to the ISC in step . Again if conditions permit this may be done partially not shown by splitting execution in a manner similar to steps and .

The steps following the status check on step are performed repeatedly. A new task started at steps or becomes a running task on subsequent iterations. As tasks are completed they are no longer included at step . Various of the steps as shown will also need tests to determine if tasks are still running or are nonresponsive etc.

While the preferred embodiment of the invention has been described in detail variations in fashioning and implementing the systems and methods described herein will be apparent to those of skill in the art without departing from the scope and spirit of the invention as defined in the following claims.

