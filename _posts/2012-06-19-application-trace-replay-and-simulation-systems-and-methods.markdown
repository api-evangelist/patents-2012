---

title: Application trace replay and simulation systems and methods
abstract: Example systems and methods for trace replay and simulation are presented. The system creates a trace entry for each one of a plurality of transactions through the server interface for a client, A message type and message data are recorded into the trace entry for each one of the plurality of transactions. A collection of trace entries for an individual one of the plurality of clients is transferred to a trace player. A client identifier is replaced in the trace entry with an identifier associated with the trace player, An interaction between the server and the clients is replayed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898643&OS=08898643&RS=08898643
owner: SAP SE
number: 08898643
owner_city: Walldorf
owner_country: DE
publication_date: 20120619
---
This document generally relates to systems and methods for simulation and testing of software and multi device systems and particularly but not by way of limitation to simulation and testing of applications in a client server environment.

Software developers typically invest many hours testing each section or module of software they develop to help ensure that the software will operate as expected without generating errors faults or other execution maladies. Such testing may include tests executed to test functional interactive and communication behavior of the software within a development environment such as that provided by a testing lab that includes one or more representative hardware systems However despite attempts to deliver error free software to the user untested or unanticipated uses of the software may cause problems to occur. Problems may occur or only be detected when hardware that was not part of a testing lab is used to operate or interact with the software.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

To detect sources of errors in such cases some software provides a tracing mode in which the interactions or communications of the software is recorded for subsequent perusal by software developers or maintenance personnel. By reviewing the resulting trace which is often provided in a log file or similar data structure the developer may determine the cause of the error and revise the software to eliminate it. In some cases message types and communication data associated with software interactions may be added to the log file to provide useful information to the developer.

At least some of the embodiments described herein provide various techniques for tracing application interactions when an application accessed by an application on a remote device and replaying that trace in a environment different from the remote device. Examples of object oriented languages employable for producing the application interactions the tracing mechanism and trace replay systems include ABAP Advanced Business Application Programming by SAP AG Java by Sun Microsystems Inc. and others.

The trace replay systems facilitate inspection and debugging of the applications and their respective systems by for example recording interactions for later analysis and testing of the applications. Described below are techniques for replaying recorded traces in an environment other than where the trace was recorded. Any particular tracing mechanism according to the embodiments discussed herein may be utilized to record the interactions between multiple devices or software applications. Other aspects of the embodiments discussed herein may be ascertained from the following detailed description.

Turning specifically to the enterprise application platform web servers and application program interface servers are coupled to and provide web and programmatic interfaces to application servers . The application servers are in turn shown to be coupled to one or more database servers that may facilitate access to one or more databases . The web servers application program interface servers application servers and database servers may host cross functional services . The application servers may further host domain applications .

The cross functional services may provide user services and processes that utilize the enterprise application platform . For example the cross functional services may provide portal services e.g. web services database services and connectivity to the domain applications for users that operate the client machine the client server machine and the small device client machine . In addition the cross functional services may provide an environment for delivering enhancements to existing applications and for integrating third party and legacy applications with existing cross functional services and domain applications . Further while the system shown in employs a client server architecture the present disclosure is of course not limited to such an architecture and could equally well find application in a distributed or peer to peer architecture system.

The portal modules may enable a single point of access to other cross functional services and domain applications for the client machine the small device client machine and the client server machine of . The portal modules may he utilized to process author and maintain web pages that present content e.g. user interface elements and navigational controls to the user. In addition the portal modules may enable user roles a construct that associates a role with a specialized environment that is utilized by a user to execute tasks utilize services and exchange information with other users and within a defined scope. For example the role may determine the content that is available to the user and the activities that the user may perform. The portal modules may include in one implementation a generation module a communication module a receiving module and a regenerating module in addition the portal modules may comply with web services standards and or utilize a variety of Internet technologies including but not limited to the JAVA programming language J2EE SAP s Advanced Business Application Programming ABAP Language and Web Dynpro XML JCA JAAS X.509 LDAP WSDL WSRR SOAP UDDI and Microsoft .NET.

The relational database modules may provide support services for access to the database that includes a user interface library. The relational database modules may provide support for object relational mapping database independence and distributed computing. The relational database modules may be utilized to add delete update and manage database elements. In addition the relational database modules may comply with database standards and or utilize a variety of database technologies including but not limited to SQL SQLDBC Oracle MySQL Unicode and JDBC.

The connector and messaging modules may enable communication across different types of messaging systems that are utilized by the cross functional services and the domain applications by providing a common messaging application processing interface. The connector and messaging modules may enable asynchronous communication on the enterprise application platform .

The application program interface API modules may enable the development of service based applications by exposing an interface to existing and new applications as services. Repositories may be included in the platform as a central place to find available services when building applications.

The development modules may provide a development environment for the addition integration updating and extension of software components on the enterprise application platform without impacting existing cross functional services and domain applications .

Turning to the domain applications customer relationship management applications may enable access to and facilitate collecting and storing of relevant personalized information from multiple data sources and business processes. Enterprise personnel that are tasked with developing a buyer into a long term customer may utilize the customer relationship management applications to provide assistance to the buyer throughout a customer engagement cycle.

Enterprise personnel may utilize financial applications and business processes to track and control financial transactions within the enterprise application platform . The financial applications may facilitate the execution of operational analytical and collaborative tasks that are associated with financial management. Specifically the financial applications may enable the performance of tasks related to financial accountability planning forecasting and managing the cost of finance.

Human resources applications may be utilized by enterprise personnel and business processes to manage deploy and track enterprise personnel. Specifically the human resources applications may enable the analysis of human resource issues and facilitate human resource decisions based on real time information.

Product life cycle management applications may enable the management of a product throughout the life cycle of the product. For example the product life cycle management applications may enable collaborative engineering custom product development project management asset management and quality management among business partners.

Supply chain management applications may enable monitoring of performances that are observed in supply chains. The supply chain management applications may facilitate adherence to production plans and on time delivery of products and services.

Third party applications as well as legacy applications may be integrated with domain applications and utilize cross functional services on the enterprise application platform .

Additionally collaborative applications may facilitate joint creation and modification of documents and other work product by multiple users and data management applications may enable data organization and other management functions to be performed on data generated by one or more other domain applications .

The API library may define one or more object oriented classes by which objects of the API may be created. The created API objects may include methods available for use by an external application to access the various domain applications provided in the enterprise application platform . As described more fully below the use of the API objects by the external application may be traced to allow analysis of the functioning of the API and the use of the API by the external application. The API objects may be structured such that the external application need only access one or a few root API objects directly to perform its desired functions. In this example the external application may access other API objects via the root API objects. In other cases a significant number of API objects may be accessible to the application directly. Also some API libraries may be designed to allow only one way calls of API methods from the external application while other API libraries may include objects that call methods of the external application thus facilitating a two way calling environment. Such an environment facilitates eventing in which the API may asynchronously alert the external application to an event detected by the API. In some implementations the design or structure of the API may be considered in determining how the tracing of the API is best implemented.

The proxy object generation module may generate or create the one or more proxy objects responsible for recording method calk and other information involving the use of the API. In one example the API library may include or make reference to the proxy object generation module to facilitate the creation of the proxy objects in response to the creation of one or more of the API objects. In another example the functionality of the proxy object generation module may be incorporated into one or more Of the API classes such that a call to a constructor method for an API object may result in the creation of the both the intended API object and its corresponding proxy object. Other implementations of the proxy object generation module are also possible.

The execution trace generation module may receive the recorded method calls and other related information from the one or more proxy objects created via the proxy object generation module and generate a trace data structure such as the trace file . In one example the trace file may be a human readable e.g. textual or XML sequential listing of the various Method calls made to the API possibly along with parameters and return values associated with those calls. Other information that may be recorded by the proxy objects may also be included. In another example the execution trace generation module may generate a trace file that includes machine executable or machine interpretable information such as a sequence of method calls and associated data that may be executed by the test execution module to recreate the recorded execution of the API.

The variety of clients may each be a separate system with a unique hardware and software application configurations. Two or more of clients may share a common hardware platform and utilize different software applications. Two or more of the clients c may share a common software application and utilize different hardware platforms. Each of the clients may communicate and interact with server through interface .

Clients may include and provide mechanisms to communicate with other devices users databases or equipment. For example a client may include a communication management system CMS client configured to communicate and interact with a customer relationship manager CRM server. A CMS client may be configured to receive communications e.g. telephone calls or on line queries from a customer and interact with a CRM server based on the received communications. A CRM server may include a database of customer accounts that May be accessed or Utilized by a CRM client to facilitate communications with the customer.

Interface may provide a common base of commands and interactions that may be utilized by each of the clients . Interface may provide extensions that allow individual clients e.g. client to perform specific operations or interactions with server . All interactions and communications between server and each of the clients may be logged to a trace file. For example interface may include an integrated communication interface ICI interface that supports communication between a OM server and a CMS client.

Trace player may be an independent standalone tool to simulate communication with server using the content of a trace or any user input. The trace may include a record of ICI communication between a CRM server and a CMS client.

The trace player may include a user interface that provides a user with a mechanism to review or modify the contents of a trace the before the trace is played on the trace player . In an example the interface may allow the user to review each interaction between the trace player and the server before the interaction is begun. In another example a user may create trace content without a preexisting trace file from a client or server.

Continuing with the method at the user identifier user ID included in the trace file may be replaced. The original user identifier in the trace may contain user information that is specific to an individual client or user that may not be available on a trace replay system. The replacement user identifier may be a generic user identifier for testing purposes or a specific user identifier associated with a user authorized to use the trace replay system.

Similar to the user identifier replacement at at the session identifier session ID included in the trace file may be replaced. The original session identifier may be unique to the client server interactions that generated the trace file. As a server may require a unique session identifier for each server client session a substitute session identifier may be inserted into the trace file to replace the original session ID.

At the replay or simulation of a trace session may commence by establishing a connection between a trace replay client and a server. A second replay trace log may be generated to record the interactions between the server and the trace replay client. At the trace replay client may automatically step through each of the interactions in the trace file thereby simulating the actions of a specific client with a server. In an example the replay client may include a user interface that allows a user to manually select the rate at which the trace simulation is conducted. For example a user may limit the rate of the simulation to one request response pair every thirty seconds two minutes five minutes or other user specified time interval.

While the operations through of the method of are shown in a specific order other orders of operation including possibly concurrent execution of at least portions of one or more operations may be possible in some implementations. For example the user id and session id may be replaced concurrently or in a different order in some implementations.

While the above discussion focuses on enterprise applications and platforms and their associated client systems any device executing software or firmware may benefit from application of the various principles described herein. For example the tracing techniques discussed above may be implemented in general purpose computing systems as well as in special purpose embedded systems such as cellular phones personal digital assistants PDAs computer tablets entertainment system components smart appliances gaming systems and so on.

The machine is capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example of the processing system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory e.g. random access memory and static memory e.g. static random access memory which communicate with each other via bus . The processing system may further include video display unit e.g. a plasma display a liquid Crystal display LCD or a cathode ray tube CRT . The processing System also includes an alphanumeric input device e.g. a keyboard a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit a type of non volatile memory storage includes a machine readable medium on which is stored one or more sets of data structures and instructions e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions may also reside completely or at least partially within the main memory the static memory and or within the processor during execution thereof by processing system with the main memory and processor also constituting machine readable tangible media.

The data structures and instructions may further be transmitted or received over a computer network via network interface device utilizing any one of a number of well known transfer protocols e.g. HyperText Transfer Protocol HTTP .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. the processing system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may include dedicated circuitry or logic that is permanently configured for example as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also include programmable logic or circuitry for example as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware Module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry for example configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules include a general purpose processor that is configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Modules can provide information to and receive information from other modules. For example the described modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously communications may be achieved through signal transmissions such as for example over appropriate circuits and buses that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times communications between such modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple modules have access. For example one module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then at a later time access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices and can operate on a resource for example a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments include processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors may be located in a single location e.g. within a home environment within an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of claims provided below is not limited to the embodiments described herein. In general the techniques described herein may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the claims. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the claims and their equivalents.

