---

title: System and method for reducing power consumption for push messaging
abstract: A method, apparatus and machine readable medium are described for reducing power consumption for push messaging. For example, a method in accordance with one embodiment comprises the operations of: registering with a push notification service over a first communication interface, the push notification service to push notifications to the wireless client in response to detected events; detecting that a usable connection to the push notification service may be established over a second communication interface, the second communication interface being an interface which will be operative for reasons other than a connection to the push notification service; responsively disconnecting from the push notification service over the first communication interface and re-connecting over the second communication interface; and temporarily powering down the first communication interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08868065&OS=08868065&RS=08868065
owner: Apple Inc.
number: 08868065
owner_city: Cupertino
owner_country: US
publication_date: 20120608
---
This invention relates generally to the field of data processing systems. More particularly the invention relates to an improved apparatus and method for reducing power consumption for push messaging.

Current wireless data processing devices such as the iPhone and iPad designed and sold by the assignee of the present patent application are capable of registering with a push notification service to receive push messages. Push messages are transmitted over a wireless network such as a Wifi or cellular data network to provide notifications to the end user. For example when the user receives a new email message the push notification service will push a notification to the wireless data processing device informing the end user of the new email message. Various other types of applications may utilize the push notification service to provide push notifications to the end user including phone service notifications application store notifications instant message notifications and calendar notifications to name just a few.

As mentioned wireless data processing devices are capable of connecting to the push notification service through multiple different communication interfaces including Wifi interfaces e.g. 802.11 interfaces and cellular data interfaces e.g. GPRS G3 G4 interfaces . for example illustrates a wireless client with a Wifi interface for connecting to the push notification service over a Wifi network and a cellular interface for connecting to the push notification service over the cellular network . Thus in some circumstances the wireless client may be connected to the push service over the Wifi network even when a reliable cellular connection exists thereby consuming power using both the Wifi interface and the cellular interface. It would be beneficial in these circumstances to select one of the two interfaces over which to receive push notifications so that the other interface may be temporarily powered down to conserve power.

Described below are embodiments of an apparatus method and machine readable medium for intelligently selecting to receive push notifications over a particular wireless interface to conserve power. Throughout the description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances well known structures and devices are not shown or are shown in a block diagram form to avoid obscuring the underlying principles of the present invention.

In one embodiment illustrated in a wireless client includes push notification service connection logic for implementing the techniques described herein to select between a Wifi interface and a cellular interface for receiving push notifications from a push notification service . In one embodiment if the wireless client is currently connected to the push notification service over the Wifi network via the Wifi interface and detects that a reliable connection exists over the cellular network via the cellular interface it will break the connection over the Wifi network and reconnect to the push service over the cellular network . One reason for connecting over the cellular network in these circumstances is that the cellular connection needs to remain open regardless of how the wireless client connects to the push service i.e. so that the wireless client can receiving incoming phone calls over the cellular network . Thus connecting to the push notification service via the cellular network allows the Wifi interface to be temporarily powered down thereby conserving power.

One embodiment of a method implemented by the push service connection logic to switch between Wifi and cellular interfaces is illustrated in . At the wireless client is initially connected to the push notification service over the Wifi network. At a degradation of link quality of the Wifi connection is detected. In one embodiment the quality of the Wifi connection is measured with a numeric value e.g. from 0 to 7 and threshold values may be set to establish poor link quality e.g. a value of 3 or below . In one embodiment the link quality thresholds are programmable and may be set on the wireless client dynamically by a remote configuration service not shown . In this way the link quality thresholds may be periodically tweaked to improve performance.

Regardless of the specific thresholds used and the manner in which the thresholds are set if a poor link quality is detected then in one embodiment the wireless client will automatically transmit a keep alive message to the push notification service at . In one embodiment the wireless client is configured to automatically send keep alive messages in response to a detected degradation in link quality below the specified threshold.

If a timely response is received determined at then the wireless client will remain connected to the push notification service over the Wifi interface at . In one embodiment a timely response is one which is received within a designated time period.

If a timely response is not received then at the push service connection logic disconnects from the push notification service and at connects to the push notification service over the cellular interface. If the connection is initially unsuccessful determined at then it will wait a specified time period and re attempt to connect. If successful then the push service connection logic will register to receive push notifications from the push notification service over the cellular interface. The Wifi interface may then be temporarily powered down to conserve power at .

In an alternate implementation the wireless client may bypass the keep alive message at and automatically disconnect from Wifi at and attempt to connect over the cellular data network at as soon as a poor link quality is detected. Additionally in one embodiment if the connection over the cellular interface is unsuccessful at then the wireless client may re attempt to connect over Wifi and return to rather than waiting a period of time and attempting to connect over the cellular network at .

When it is time to transmit the keep alive message a determination is made as to whether the cell interface is historically usable at . In one embodiment the number of off transitions is recorded for the cellular network over a designated window of time e.g. 1 hour . If the number of off transitions is below a specified threshold then the cell interface is designated historically usable indicating that there is likely to be a reliable cellular connection . By contrast if the number of off transitions is above or equal to the specified threshold then the cell interface is designated to be historically unusable. 

If the cell interface is historically usable then at the Wifi connection is closed severing the connection to the push notification service and at the client device connects to the push notification service via the cellular network. Once again once the connection is made over the cellular network the Wifi interface may be temporarily powered down to conserve power.

It should be noted that both of the embodiments illustrated in may be implemented concurrently on a wireless client. For example the embodiment from may be implemented in response to a detected deterioration in link quality while the embodiment from may be implemented periodically in response to the specified timing for a new keep alive message . Regardless of which technique is employed the end result is that a connection with the push notification service may be established over the cellular interface to conserve power.

If the cellular connection has not failed at then at a keep alive message is transmitted and at a determination is made as to whether a timely response has been received to the keep alive message. If a timely response is received then the process returns to and the wireless client remains connected to the push notification service over the cellular network. If a timely response is not received then the cellular connection is closed at and at the wireless client reconnects to the push notification service over the Wifi interface.

While the embodiments of the invention are described above within the context of two specific communication channels Wifi and cellular the underlying principles of the invention are not limited to any particular type of communication channel. For example the underlying principles of the invention may be employed on any client device with multiple communication interfaces capable of connecting over multiple different types of communication channels. For example the principles of the invention may be implemented to connect to a push notification service over a first communication interface so that a second communication interface may be temporarily powered down to reduce power consumption.

Different embodiments described herein include an application programming interface API implemented by a software component hereinafter API implementing software component that allows a different software component hereinafter API calling software component to access and use one or more functions methods procedures data structures and or other services provided by the API implementing software component. For example an API allows a developer of an API calling software component which may be a third party developer to leverage specified features provided by an API implementing software component. There may be one API calling software component or there may be more than one such software component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from a software application. An API can be specified in terms of a programming language that can be interpretative or compiled when an application is built rather than an explicit low level description of how data is laid out in memory.

The API defines the language and parameters that API calling software components use when accessing and using specified features of the API implementing software component. For example an API calling software component accesses the specified features of the API implementing software component through one or more API calls sometimes referred to as function or method calls exposed by the API. The API implementing software component may return a value through the API in response to an API call from an API calling software component. While the API defines the syntax and result of an API call e.g. how to invoke the API call and what the API call does the API typically does not reveal how the API call accomplishes the function specified by the API call. Various function calls or messages are transferred via the one or more application programming interfaces between the calling software API calling software component and an API implementing software component. Transferring the function calls or messages may include issuing initiating invoking calling receiving returning or responding to the function calls or messages. Hence an API calling software component can transfer a call and an API implementing software component can transfer a call.

By way of example the API implementing software component and the API calling software component may be an operating system a library a device driver an API an application program or other software module it should be understood that the API implementing software component and the API calling software component may be the same or different type of software module from each other . The API calling software component may be a local software component i.e. on the same data processing system as the API implementing software component or a remote software component i.e. on a different data processing system as the API implementing software component that communicates with the API implementing software component through the API over a network. It should be understood that an API implementing software component may also act as an API calling software component i.e. it may make API calls to an API exposed by a different API implementing software component and an API calling software component may also act as an API implementing software component by implementing an API that is exposed to a different API calling software component.

The API may allow multiple API calling software components written in different programming languages to communicate with the API implementing software component thus the API may include features for translating calls and returns between the API implementing software component and the API calling software component however the API may be implemented in terms of a specific programming language.

It will be appreciated that the API implementing software component may include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling software component . It should be understood that the API calling software component may be on the same system as the API implementing software component or may be located remotely and accesses the API implementing software component using the API over a network. While illustrates a single API calling software component interacting with the API it should be understood that other API calling software components which may be written in different languages or the same language than the API calling software component may use the API .

The API implementing software component the API and the API calling software component may be stored in a machine readable medium which includes any mechanism for storing information in a form readable by a machine e.g. a computer or other data processing system . For example a machine readable medium includes magnetic disks optical disks random access memory read only memory flash memory devices etc.

In Software Stack an exemplary embodiment applications can make calls to Services or using several Service APIs and to Operating System OS using several OS APIs. Services and can make calls to OS using several OS APIs.

Note that the Service has two APIs one of which Service API receives calls from and returns values to Application and the other Service API receives calls from and returns values to Application . Service which can be for example a software library makes calls to and receives returned values from OS API and Service which can be for example a software library makes calls to and receives returned values from both OS API and OS API . Application makes calls to and receives returned values from OS API .

As illustrated in the computer system which is a form of a data processing system includes the bus es which is coupled with the processing system power supply memory and the nonvolatile memory e.g. a hard drive flash memory Phase Change Memory PCM etc. . The bus es may be connected to each other through various bridges controllers and or adapters as is well known in the art. The processing system may retrieve instruction s from the memory and or the nonvolatile memory and execute the instructions to perform operations as described above. The bus interconnects the above components together and also interconnects those components to the optional dock the display controller display device Input Output devices e.g. NIC Network Interface Card a cursor control e.g. mouse touchscreen touchpad etc. a keyboard etc. and the optional wireless transceiver s e.g. Bluetooth WiFi Infrared etc. .

According to one embodiment of the invention the exemplary architecture of the data processing system may used for the mobile devices described above. The data processing system includes the processing system which may include one or more microprocessors and or a system on an integrated circuit. The processing system is coupled with a memory a power supply which includes one or more batteries an audio input output a display controller and display device optional input output input device s and wireless transceiver s . It will be appreciated that additional components not shown in may also be a part of the data processing system in certain embodiments of the invention and in certain embodiments of the invention fewer components than shown in may be used. In addition it will be appreciated that one or more buses not shown in may be used to interconnect the various components as is well known in the art.

The memory may store data and or programs for execution by the data processing system . The audio input output may include a microphone and or a speaker to for example play music and or provide telephony functionality through the speaker and microphone. The display controller and display device may include a graphical user interface GUI . The wireless e.g. RF transceivers e.g. a WiFi transceiver an infrared transceiver a Bluetooth transceiver a wireless cellular telephony transceiver etc. may be used to communicate with other data processing systems. The one or more input devices allow a user to provide input to the system. These input devices may be a keypad keyboard touch panel multi touch panel etc. The optional other input output may be a connector for a dock.

Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine executable instructions which cause a general purpose or special purpose processor to perform certain steps. Alternatively these steps may be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

Elements of the present invention may also be provided as a machine readable medium for storing the machine executable program code. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnetic or optical cards or other type of media machine readable medium suitable for storing electronic program code.

Throughout the foregoing description for the purposes of explanation numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without some of these specific details. For example it will be readily apparent to those of skill in the art that the functional modules and methods described herein may be implemented as software hardware or any combination thereof. Moreover although some embodiments of the invention are described herein within the context of a mobile computing environment the underlying principles of the invention are not limited to a mobile computing implementation. Virtually any type of client or peer data processing devices may be used in some embodiments including for example desktop or workstation computers. Accordingly the scope and spirit of the invention should be judged in terms of the claims which follow.

