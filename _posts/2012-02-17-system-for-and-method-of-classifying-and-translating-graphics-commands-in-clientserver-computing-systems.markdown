---

title: System for and method of classifying and translating graphics commands in client-server computing systems
abstract: A client-server computing system includes a server that has a virtual display driver that classifies and, if necessary, translates graphics application programming interface (API) functions to a cross-platform format. Classification involves determining whether the graphics command(s) are platform-specific and/or client-supported functions. After classification and translation, the graphics command(s) are marshaled and transmitted to a client via a network. The client includes a client display driver that executes the functions using a client 3D library and renders the resulting image data to a display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09064292&OS=09064292&RS=09064292
owner: hopTo, Inc.
number: 09064292
owner_city: Campbell
owner_country: US
publication_date: 20120217
---
This application is a continuation in part of U.S. patent application Ser. No. 13 341 110 filed Dec. 30 2011 the entirety of which is incorporated by reference herein.

The present disclosure relates generally to graphics command processing in client server computing systems and more particularly to a system for and method of classifying and translating graphics commands in client server computing systems.

In a client server computing system a computer application or program that is running on one computer i.e. the server may be accessible to another computer i.e. the client over a network such as over the Internet. The user interface running on the server is exposed and visible to the client. In this way the client has remote access to the server and the user of the client device can interact with the application that is running on the server.

The server application may be for example an application that processes two dimensional 2D and or three dimensional 3D graphics. In this example a 2D and or 3D graphics application may be used to render graphical objects on a computer display. Currently in a client server computing system the high level graphics representation e.g. Direct3D OpenGL is reduced to an image e.g. a bitmap image at the server. The image is then transmitted from the server to the client over the network. Once received at the client the image is rendered on the client display. Creating compressing and transmitting these image files may result in high CPU utilization i.e. computing load at the server especially when the application displays objects in motion and when there are a large number of remote users sharing the server. Further images are often large and therefore transmitting images to a large number of remote users consumes a large amount of network bandwidth.

The disclosure provides a client server computing system that enables remote access to 3D graphics applications and methods of classifying and translating graphics commands such that graphic objects may be efficient displayed on a computer client located remotely from a computer server that is running the 3D graphics application regardless of whether the client and the server operate on different computing platforms. The client server computing system of the disclosure exhibits numerous advantages over existing systems. In various embodiments the client server computing system of the disclosure and associated methods may enable a server to provide 3D graphics application capabilities to a large number of clients while avoiding excessive computing load at the server. Further client server computing system of the disclosure may provide such 3D graphics application capabilities at lower network bandwidth requirements. Further still the client server computing system of the disclosure may be configured such that clients operating on different platforms can achieve these advantages.

While client and display are illustrated as separate physical components e.g. illustrative of a common implementation of a desktop or a workstation computing system such as clients running natively on Windows Linux UNIX and Mac OS X operating system the capabilities of such separate components can also be integrated in a single device e.g. a mobile device or a tablet computer . For example the mobile device can be an iPad tablet computer on the iOS operating system Apple Inc. Cupertino Calif. or other mobile client on either the Android operating system Google Inc. Mountain View Calif. or the Windows CE operating system Microsoft Corp. Redmond Wash. . Thus as used herein the terms client or client computer should be understood to include any such implementations.

Server includes a server application a server 3D library and a virtual display driver that in accordance with the client server model of computing collectively function to enable server to provide various resources or services to client which may be located remotely from the server. In accordance with the present disclosure these resources or services pertain to computer graphics.

Client includes a client application a client 3D library and a client display driver . Collectively these elements function to enable the client and the client user to consume computer graphics resources or services provided by server .

Server application represents an application executing i.e. running on server . The functionality of server application shall be visible to and accessible by client via network . For example server application may be a computer aided design CAD application such as AutoCAD Autodesk Inc. San Rafael Calif. USA or Cadence Virtuoso Cadence Design Systems San Jose Calif. a medical clinical workflow application such as Symbia.net Siemens AG Munich Germany an interactive mapping application such as Google Earth Google Inc. or a 3D game. The functionality of server application shall be visible to and accessible by client via network . For example the functionality of server application may be accessed from client using a process herein known as application publishing which is currently supported by products such as GraphOn GO Global Microsoft Remote Desktop Services and Citrix XenApp. Such application publishing may be performed in accordance with teachings of commonly owned U.S. Pat. No. 5 831 609 filed Jun. 6 1995 entitled Method and system for dynamic translation between different graphical user interface systems which is incorporated by reference as though fully set forth herein.

Client application represents an application installed on and executing on client that emulates a user interface of server application . For example the client application may run in a browser and be implemented in a scripting language such as JavaScript a multimedia platform such as Adobe Flash or as a browser add on e.g. ActiveX control for Internet Explorer . Additionally client application may run as a standalone application. Client application may receive various input commands from the user via an input device not shown in then transmit these commands to server and update the user interface of client application in response to computer graphics commands transmitted from server back to client over network .

Server 3D library and client 3D library provide a set of interfaces or graphics functions to server and client respectively. These components are also referred to herein as a high level graphics language or a graphics application programming interface API . In one embodiment of the disclosure both server 3D library and client 3D library support and same graphics API. For example both libraries may be based on the OpenGL API Khronos Group Beaverton Oreg. Direct3D API Microsoft Corp Redmond Wash. or other 3D graphics API of conventional or novel design.

In one aspect of this disclosure server 3D library and or client 3D library can include 3D graphics API functions that provide native support to the specific operating system utilized by server and or client . For example if client operates on the X Window System i.e. X11 platform and client 3D library utilizes the OpenGL language client 3D library can further include the GLX i.e. OpenGL Extension to the X Window System API or the GLUT i.e. OpenGL Utility ToolKit library. This means that certain functions are platform specific that is certain functions in server 3D library may be executable only by server and certain functions in client 3D library may be executable only by client . Certain inventive aspects of this disclosure are directed towards translating platform specific functions into cross platform or client supported functions.

Virtual display driver is a software code module that enables commands or functions that are called in server 3D library to be marshaled i.e. encoded and transmitted to client over network . Marshaling or marshalling is the process of transforming the memory representation of such commands to a data format suitable for transmission via network . For example virtual display driver assigns an ID to each graphics function and converts function arguments from a platform specific byte order into a common byte order that all clients can read regardless of the native byte order of the client device. This encoding allows graphic objects and their motions to be represented much more efficiently than the conventional method of generating an image for each arrangement or view of the objects. Significantly less data must be compressed and transmitted by the server greatly reducing CPU usage on the server and network bandwidth usage.

Client display driver includes a software code module that receives marshaled data from server via client application and executes the 3D library functions using client 3D library . This enables client to handle intensive graphics rendering operations such as blending or shading while enabling server to share server application with a large pool of clients. This also reduces the bandwidth requirements of network as pixel array image data e.g. in the form of Bitmap image files no longer needs to be transmitted from server to individual clients such as client as was the case in conventional client server computing systems.

In operation client connects to server via network by suitable connection of either conventional or novel design e.g. Transmission Control Protocol Internet Protocol model . Optionally client may transmit capability information to server such as information about the particular APIs supported by client display driver . Server may forward such information to virtual display driver for later use. Client then initializes server application on server e.g. initialize various startup instructions of the AutoCAD application and issues a graphics request to server application e.g. draw 3D cube . Server application loads and initializes server 3D library Then server 3D library queries virtual display driver to determine its capabilities. Virtual display driver generally returns the capabilities of client but may also return capabilities that are not support by client but are supported by virtual display driver . Server application calls or invokes the appropriate function or functions i.e. graphics command s in server 3D library that satisfy the client request. Server 3D library receives the call made by server application and executes the function by calling or invoking virtual display driver . According to one inventive aspect of the disclosure virtual display driver classifies and if necessary translates the commands such that they can be executed by client regardless of whether client operates on a different platform or utilizes a different native 3D graphics API than server . Then virtual display driver encodes and transmits the commands to client . Client decodes the commands and executes each command by making calls to client 3D library . In turn client 3D library calls client display driver with the resulting pixel image array data and client display driver renders image s to display .

At a step virtual display driver of server receives one or more graphics command s from client via network as described either herein above or by any other means.

At a decision step virtual display driver of server determines whether the graphics command s are specific to the platform on which client is operating. This determination is a form of platform classification for graphics commands. According to one embodiment the classification is a binary or hard decision either the graphics command s are platform specific or cross platform. For example virtual display driver can contain predetermined logic that any OpenGL call that is specific to WGL e.g. wglCopyContext is a platform specific call. WGL is a windowing system interface to the Microsoft Windows implementation of OpenGL. By way of another example glXCreateGLXPixmap is an OpenGL call that is specific to the X Window System platform. This classification may be made by accessing data structures that maintain attributes of specific graphics commands or it may be made implicitly in code that is specific to a given graphics command. If virtual display driver determines that the graphics command is platform specific method proceeds to a step . However if the search indicates that the graphics command is not platform specific method proceeds to a step .

At a step having determined that the graphics command s are platform specific function s virtual display driver of server translates the graphics command s from a platform specific format to a cross platform format. This translation represents an abstraction of the description of the graphics command s such that the abstraction can be understood and implemented on any collection of computing platforms namely the collection of potential platforms on which client operates.

For example step can involve a translation of the concrete platform specific command to a more abstract data type that is platform independent and can be executed on client regardless of its platform. For example if the call is wglCopyContext it may be translated to an abstract command e.g. abstractCopyContext that can be implemented on other client platforms. In this example when client operates on an X11 platform client translates abstractCopyContext to glXCopyContext alternatively when client operates on a Windows platform client translates abstractCopyContext to wglCopyContext. Alternatively step may involve a translation of the command to an equivalent function that is supported by client 3D library of client . For example if client operates on an X11 platform virtual display driver may convert wglCopyContext to glXCopyContext. As yet another alternative virtual display driver may convert a platform specific command to a cross platform alternative. One such example of a cross platform graphics API is the OpenGL Utility Toolkit GLUT . For example if the call is CreateWindow a GLUT function that could be executed by client to achieve the same command functionality regardless of platform could be glutCreateWindow.

At a decision step having determined that the graphics command s are not platform specific at step virtual display driver of server determines whether the graphics command s are client supported functions. This determination is a form of version classification for graphics commands. According to one embodiment the classification is a binary or hard decision either the function is supported by client or it is not. One example of a scenario in which the graphics command s may be considered cross platform but not client supported functions arises when server and client operate on the same platform server 3D library and client 3D library include different versions of a 3D graphics API specific to the platform and a graphics command called in server 3D library is not included in the version of client 3D library . To compute this classification virtual display driver may utilize capability information transmitted from client to server which might include the API version or versions supported in client 3D library .

If both client and virtual display driver do not support a given capability at the time when server 3D library calls virtual display driver to determine its capabilities virtual display driver reports that it does not support the capability. In this case server 3D library forwards graphics commands to virtual display driver that client supports and method proceeds to a step .

However if client does not support a given capability but virtual display driver supports the capability at the time when server 3D library calls virtual display driver to determine its capabilities virtual display driver reports that it supports the capability. In this case server 3D library may forward graphics commands to virtual display driver that client does not support and method proceeds to a step .

At a step having determined that the graphics command s are not client supported functions at step either virtual display driver of server or client translates the graphics command s functions that are supported by client 3D library . For example if client 3D library supports OpenGL version 2.2 and server 3D library supports OpenGL version 3.0 but client supports the GL ARB vertex array object extension which is not supported in OpenGL version 2.2 virtual display driver forwards GL ARB vertex array object commands to client and client translates the commands to APIs that are supported by client 3D library .

At a step virtual display driver of server encodes each of the received graphics command s and transmits the information to client via network . As described herein above virtual display driver may utilize marshaling to transform the memory representation of such commands to a data format suitable for transmission via network .

Various embodiments of the present disclosure allow for the functionality of this disclosure to be performed by an intermediary device such as a cloud server not shown which may be associated with the server and client or reside elsewhere in the network e.g. in the cloud . For example while client is interacting with server some of the methods described herein may be offloaded to the cloud server to be performed. Additionally the cloud server may be used to facilitate interaction between individual or multiple clients and server by performing protocol and or graphics conversions as described herein.

