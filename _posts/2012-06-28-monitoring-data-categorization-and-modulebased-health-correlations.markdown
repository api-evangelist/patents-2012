---

title: Monitoring data categorization and module-based health correlations
abstract: Architecture for aggregating health alerts from a number of related components into a single aggregated health state that can be analyzed to isolate the component responsible for the fault condition. In a hierarchy of related components within various component groups in a computer system, a number of health indicators can indicate alerts occurring in one or more of the related components whereas the fault condition occurs in only one component upon which the other components depend. The health indicators of related components are aggregated into an aggregated health state for each component group. These aggregated health states are analyzed to identify the related component associated with a root cause of the alert condition for an affected component group.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533536&OS=08533536&RS=08533536
owner: Microsoft Corporation
number: 08533536
owner_city: Redmond
owner_country: US
publication_date: 20120628
---
This application claims the benefit of and priority to previously filed U.S. patent application Ser. No. 12 141 056 entitled Monitoring Data Categorization And Module Based Health Correlations filed on Jun. 17 2008 the subject matter of which is hereby incorporated by reference in its entirety.

A monitoring solution can be used in software systems to check the data outputs and confirm whether these outputs are within acceptable parameters. In the event that the data is not within acceptable parameters a monitoring alert can be issued to notify maintenance personnel of potential problems with the health of the system.

Software components are interdependent and a fault condition with a single component can result in a cascade of fault conditions with a number of interrelated components in the system. Thus a number of different alerts can be sounded for the same fault condition. These multiple alerts can become noise since action is required for only a single component not each affected component. This noise can make it difficult for administrators to identify the root cause of the fault condition.

Noise can also arise from other sources. Multiple health indicators can be used to monitor the same issue from different perspectives in order to improve monitoring coverage or robustness. These health indicators can be useful individually but can be redundant when the indicators all independently discover the issue at about the same time.

Additionally while monitoring information can be useful for analyzing system performance the information is not necessarily useful for alerting since only partial information about the problem is indicated. The administrators need not immediately work on the problem unless other indicators also raise alerts. Data of this type is not actionable and becomes noise if presented in the form of an alert. Many monitoring solutions today collect such forensic data to ease troubleshooting though such data is typically presented in the form of an alert that can produce noise.

Noise can also occur if multiple valid alerts having different scope or severity are raised at about the same time. The lesser issues can make it difficult to isolate and identify the greater issues thereby requiring extra time and effort by system administrators to ascertain the source of the problem.

Solutions for noise control are known in which specific correlation rules are written to describe relationships between individual health indicators to accommodate specific problem scenarios e.g. certain problem alerts are issued upon certain concurrent combinations of health indicators . However such solutions have drawbacks.

Since each alert condition needs its own rule a large number of rules are required and can still fail to accommodate every potential problem path. Additionally different rules can correlate to the same health indicator and if the rules are evaluated separately the same problem can be reported multiple times. Further a single health indicator can exist in multiple problem paths and if a shared health indicator is updated or removed from the health model all the associated rules need to be updated. Still further such noise reduction solutions do not perform well if the components belong to a different team or product since errors can be introduced by the foreign components. Probability based noise reduction solutions are known for estimating statistical likelihoods for root cause candidate. However it can be difficult to define good probability numbers for each cause impact link since the impact of changing one probability number is often not intuitive.

The following presents a simplified summary in order to provide a basic understanding of some novel embodiments described herein. This summary is not an extensive overview and it is not intended to identify key critical elements or to delineate the scope thereof. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

To that end architecture is disclosed herein for diagnosing the health of a computer system by aggregating multiple related alerts into a single alert and systematically analyzing each alert to isolate a root cause thereby allowing system administrators to directly resolve the problem. A health model represents a hierarchy of related components within various component groups of the computer system. Health indicators are generated to indicate an alert condition occurring in any the related components within the health model. These health indicators are aggregated into a single aggregated health state for each component group. The aggregated health states are then analyzed to identify a related component representing the root cause of the alert condition for an affected component group.

To the accomplishment of the foregoing and related ends certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative of the various ways in which the principles disclosed herein can be practiced all aspects and equivalents of which are intended to be within the scope of the claimed subject matter. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

The disclosed architecture relates to a computer diagnostic system for aggregating health alerts from a number of related components into a single aggregated health state that can be analyzed to isolate the component responsible for the fault condition. For example in a hierarchy of related components within various component groups in a computer system a number of health indicators can indicate alerts occurring in one or more of the related components whereas the fault condition occurs in only one component upon which the other components depend. The health indicators of related components are aggregated into an aggregated health state for each component group. The aggregated health states are analyzed to identify the related component associated with a root cause of the alert condition for an affected component group.

Reference is now made to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It can be evident however that the novel embodiments can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof. The intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the claimed subject matter.

One or more health indicators can be obtained from the same component different components on the same machine or components across machine boundaries. Good health represents normal operation whereas poor health signifies an operational problem with the component. One or more of the health indicators can be associated with a particular component to measure various parameters of the component.

The health indicators used for monitoring and troubleshooting related data can fall into three general categories key health indicators KHIs forensic data and non service impacting NSI issues. A key health indicator represents the client perceived health of a component measured against a service level agreement SLA that represents normal operation. Forensic data reveal some aspect of the service health from a different angle and can be linked to other health indicators to assist forensic analysis but not be self alerted. NSI issues are lower priority problems that require attention but do not necessarily affect the service health.

The aggregated health state is an aggregation of the health indicators associated with related components. In the event that an alert is indicated in the health indicators of each of the related components the aggregated health state will be represented as a single aggregated alert. In this way noise in the system is reduced as only one alert is presented rather than multiple alerts.

As also illustrated in the system includes a correlation component for analyzing the aggregated health state to identify a related identified component having an alert condition. Since components in the system can be interdependent the correlation component analyzes each of the health indicators in the aggregated health state to ascertain the identified component responsible for creating the alert condition in the other components that depend on the identified component .

Correlation is generally associated with a time window. Health indication events that occur outside of the time window are not regarded as related to the same problem. The time window can be pre defined based on the specific characteristics of the services past experience and heuristics for example. The correlation component outputs a correlated alert and the health indicators used in correlation are linked to the correlated alert so that all available information can be used in diagnosis and evaluation. Such information can be useful in forensic analysis as explained in detail hereinbelow.

In an example where two KHIs monitor the health of an email component the first KHI compares average response time of client requests to a threshold. The second KHI runs a diagnostic tool to periodically sample the latency to a test mailbox. Each KHI can cast a green vote indicating the component is healthy or a red vote indicating the component has a problem. If the votes conflict then the voting component decides which vote wins.

As mentioned hereinabove freshness of the data and vote weight are factors determined by the voting component . Freshness is measured by a time window rather than precise timestamps. Freshness accounts for latency in propagation of the root cause problem through a hierarchy of dependent components. There is also latency due to the monitoring system detecting the problem and reporting it back. The correlation time window can be pre defined based on specific characteristics of the components and the monitor system efficiency in addition to past experience and heuristics. Vote weight considers the relative importance or significance of the KHIs and selects a KHI deemed to be most relevant to the aggregated health state .

The health model models components into class hierarchies linked by dependency or containment relationships. The health indicators monitor components at each level in the class hierarchy. Problems that occur in a lower level component affect the health of higher level components that depend on the lower level component. Therefore the health indicators for the higher level components will also indicate an alert condition. The aggregated health state corresponding to the health model identify the lowest level component upon which the others depend. Thus the alert condition will correspond to one of the health indicators closest to the root cause at the lowest level in the problem path.

As also shown in a plurality of health indicators are provided for indicating an alert condition of the related components within the health model . One or more of the health indicators can correspond to any related component in any of the component groups and more than one of the health indicators can be associated with a single related component from one of the component groups .

The embodiment of also includes the correlation component for analyzing the aggregated health state of each of the component groups in the health model . The correlation component identifies the related identified component associated with a root cause of the alert condition for an affected component group.

It is to be appreciated that the system can also include the categorization component shown hereinabove with respect to . As with that embodiment the categorization component categorizes the health indicators into key health indicators forensic data and non service impacting issues .

Encapsulation simplifies authoring of the correlation relations between components since the components can be treated as black boxes without calling out component functions or creating specific rules for individual component health issues.

As an example if a higher level component depends on a lower level component to perform its designated function the higher level component cannot meet its service level agreement if the lower level component is not healthy. There can be one or more factors that caused the lower level component to report a poor health indication but it is sufficient for root cause analysis to simply establish whether the service agreement between each component in the hierarchy has been broken.

Following is a series of flow charts representative of exemplary methodologies for performing novel aspects of the disclosed architecture. While for purposes of simplicity of explanation the one or more methodologies shown herein for example in the form of a flow chart or flow diagram are shown and described as a series of acts it is to be understood and appreciated that the methodologies are not limited by the order of acts as some acts can in accordance therewith occur in a different order and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a methodology can alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all acts illustrated in a methodology can be required for a novel implementation.

At a health model can be created that represents a hierarchy of related components within component groups. This health model creation can include representing dependency relationships within the hierarchy of related components as indicated at . Additionally as indicated at the health model can be analyzed to identify a related component having a root cause of the alert condition.

A first KHI of the email component issues an alert that connectivity failed even though the access server component remains within its service level agreement. A second KHI for the email component issues an alert that average response time is greater than seconds. A first KHI for the mailbox component from which the email component depends issues an alert that MAPI message application programming interface connectivity failed while a second KHI issues an alert that log files cannot be written. Additionally the forensic data is that the mailbox component failed to submit a message.

A first KHI for the disk issues an alert that the disk is full. However a second KHI for the disk indicates that the associated or related disk controller succeeded thereby not indicating an alert condition. The correlation component thereby determines that the disk full condition is the root cause of the alert that a disk failure caused the mailbox component to fail which in turn caused the email component to fail.

The dependency links between EMAIL MBX and MBX DISK allow the correlation of the failures in the email component the mailbox component and the disk and thereby generate a single alert rather than three. The alert can be presented in the following form 

At the various entities and health states are loaded and or refreshed for each component class entity as indicated at . At a check is made as to whether any NSIs are red indicating an alert condition.

If no NSIs are red flow is to where a correlation component is called to vote on new KHIs in which KHIs within the boundary of each component are correlated. The voting component can run either a default voting algorithm or a custom voting algorithm to generate the aggregated health state of the component. If there are red NSIs flow is from to to flag these NSIs as a fix me soon alert. Flow is then from to .

At a check is made to determine if a vote correlation indicator is red indicating an alert condition. If no the flow is to terminal bubble which will be explained hereinbelow in connection with . If there is a red correlation vote indicator flow is from to to check for a red forensic indicator indicating an alert condition. If yes forensic data is collected at within the same time window as well as the contents of the loser KHIs are linked to the winner KHI. After and if a red forensic data if found at flow is to terminal bubble as will be explained hereinbelow in connection with .

Referring to flow is received from terminal bubble corresponding to a NO decision at of indicating that a red vote correlation indicator was not found. Accordingly at the correlation indicator is set to green. At a check is made whether an entity has an active alert. If so flow is to where the alert is resolved. If no entity has an active alert flow is from to to check if a dependent entity is red not due to configuration KHIs. If so the dependent entity is reset and flow returns to . If not the flow is to terminal bubble which returns to of . After resolving the alert at flow is also to to make the designated check.

Referring to flow follows from terminal bubble of . A check is made at as to whether an entity has an active alert. If so the alert is updated with the new problems as indicated at . From and a NO decision at cause impact correlation flow continues to where the health model DAG directional acyclic diagram is traversed from the root to correlate the aggregated component health across each level.

At the correlation engine walks down through each entity dependency link through each path leading to a red correlation indicator alerting only on the entity at the lowest dependency level. At a check is made as to whether an entity depends on another entity. If so flow is to where a check is made as to whether the depended entity has an active alert. If so correlation flow ends as the lowest level component is reached and the problem is reported at this level.

If the depended entity does not have an active alert flow is to to check if a timestamp of the depended entity is within the correlation time window. If so flow returns to where the traverse is resumed and searching is continued for different problem paths.

If at the timestamp of the depended entity is not within the correlation window and the entity does not depend on another entity as indicated at flow is to where a check is made as to whether an alert has already been raised. If so correlation workflow ends. If no alert has already been raised flow is from to where an alert is raised after which correlation workflow ends.

Further to the example of it may be the case that the access server component can be broken because of a configuration issue and the mailbox component is down at the same time because of the aforementioned disk problem. In this situation the correlation algorithm of reports the configuration issue as one issue continues to traverse the health model and reports the disk failure as another issue.

The correlation algorithm illustrates that only two settings are specified for the correlation to work the hierarchy of dependency relationships between the components and the categorization of the health indicators as KHIs forensic data or NSIs. In this way a significant improvement is obtained over previous systems that require a number of rules to be written and maintained.

The hereinabove described correlation algorithm and the associated health model schema are thus advantageous in simplicity to understand author and maintain. Component operations need not be considered in order to perform correlations. Rather correlations are enabled by simply defining the relationships among components and categorizing the health indicators into KHIs forensic data or NSIs based on the SLAs of the components. The health aggregation within a component the linking of forensic data to key health indicator alerts and the root cause analysis will occur without creating correlation rules for all possible cause impact combinations of individual health indicators within or cross component boundaries.

As used in this application the terms component and system are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component can be but is not limited to being a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers. The word exemplary can be used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

Referring now to there is illustrated a block diagram of a computing system operable to execute the computer implemented diagnostic system in accordance with the disclosed architecture. In order to provide additional context for various aspects thereof and the following discussion are intended to provide a brief general description of a suitable computing system in which the various aspects can be implemented. While the description above is in the general context of computer executable instructions that can run on one or more computers those skilled in the art will recognize that a novel embodiment also can be implemented in combination with other program modules and or as a combination of hardware and software.

Generally program modules include routines programs components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods can be practiced with other computer system configurations including single processor or multiprocessor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like each of which can be operatively coupled to one or more associated devices.

The illustrated aspects can also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules can be located in both local and remote memory storage devices.

A computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes volatile and non volatile media removable and non removable media. By way of example and not limitation computer readable media can comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital video disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer.

With reference again to the exemplary computing system for implementing various aspects includes a computer having a processing unit a system memory and a system bus . The system bus provides an interface for system components including but not limited to the system memory to the processing unit . The processing unit can be any of various commercially available processors. Dual microprocessors and other multi processor architectures can also be employed as the processing unit .

The system bus can be any of several types of bus structure that can further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The system memory can include non volatile memory NON VOL and or volatile memory e.g. random access memory RAM . A basic input output system BIOS can be stored in the non volatile memory e.g. ROM EPROM EEPROM etc. which BIOS are the basic routines that help to transfer information between elements within the computer such as during start up. The volatile memory can also include a high speed RAM such as static RAM for caching data.

The computer further includes an internal hard disk drive HDD e.g. EIDE SATA which internal HDD can also be configured for external use in a suitable chassis a magnetic floppy disk drive FDD e.g. to read from or write to a removable diskette and an optical disk drive e.g. reading a CD ROM disk or to read from or write to other high capacity optical media such as a DVD . The HDD FDD and optical disk drive can be connected to the system bus by a HDD interface an FDD interface and an optical drive interface respectively. The HDD interface for external drive implementations can include at least one or both of Universal Serial Bus USB and IEEE 1394 interface technologies.

The drives and associated computer readable media provide nonvolatile storage of data data structures computer executable instructions and so forth. For the computer the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer readable media above refers to a HDD a removable magnetic diskette e.g. FDD and a removable optical media such as a CD or DVD it can be appreciated by those skilled in the art that other types of media which are readable by a computer such as zip drives magnetic cassettes flash memory cards cartridges and the like can also be used in the exemplary operating environment and further that any such media can contain computer executable instructions for performing novel methods of the disclosed architecture.

A number of program modules can be stored in the drives and volatile memory including an operating system one or more application programs other program modules and program data . All or portions of the operating system applications modules and or data can also be cached in the volatile memory . It is to be appreciated that the disclosed architecture can be implemented with various commercially available operating systems or combinations of operating systems.

The aforementioned application programs other program modules and program data can include the computer implemented diagnostic system the aggregation component the health indicators the aggregated health state the correlation component and the identified component from the voting component and the selected health indicator from the forensic component and the forensic data from the health model and analysis component for example.

The application programs other program modules and program data can also include the categorization component the key health indicators the forensic data and the non service impacting issues from the computer implemented diagnostic system the health model and the component groups from the aggregated health indicators from the non selected aggregated health indicator from the encapsulation component and the component from and the hierarchy of related components from for example.

A user can enter commands and information into the computer through one or more wire wireless input devices for example a keyboard and a pointing device such as a mouse . Other input devices not shown can include a microphone an IR remote control a joystick a game pad a stylus pen touch screen or the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port IEEE 1394 serial port a game port a USB port an IR interface etc.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adaptor . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer can operate in a networked environment using logical connections via wire and or wireless communications to one or more remote computers such as a remote computer s . The remote computer s can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wire wireless connectivity to a local area network LAN and or larger networks for example a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which can connect to a global communications network for example the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a wire and or wireless communication network interface or adaptor . The adaptor can facilitate wire and or wireless communications to the LAN which can also include a wireless access point disposed thereon for communicating with the wireless functionality of the adaptor .

When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wire and or wireless device is connected to the system bus via the input device interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with wire and wireless devices or entities using the IEEE 802 family of standards such as wireless devices operatively disposed in wireless communication e.g. IEEE 802.11 over the air modulation techniques with for example a printer scanner desktop and or portable computer personal digital assistant PDA communications satellite any piece of equipment or location associated with a wirelessly detectable tag e.g. a kiosk news stand restroom and telephone. This includes at least Wi Fi or Wireless Fidelity WiMax and Bluetooth wireless technologies. Thus the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices. Wi Fi networks use radio technologies called IEEE 802.11x a b g etc. to provide secure reliable fast wireless connectivity. A Wi Fi network can be used to connect computers to each other to the Internet and to wire networks which use IEEE 802.3 related media and functions .

Referring now to there is illustrated a schematic block diagram of an exemplary computing environment that interacts with the computer implemented diagnostic system . The environment includes one or more client s . The client s can be hardware and or software e.g. threads processes computing devices . The client s can house cookie s and or associated contextual information for example.

The environment also includes one or more server s . The server s can also be hardware and or software e.g. threads processes computing devices . The servers can house threads to perform transformations by employing the architecture for example. One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet can include a cookie and or associated contextual information for example. The environment includes a communication framework e.g. a global communication network such as the Internet that can be employed to facilitate communications between the client s and the server s .

Communications can be facilitated via a wire including optical fiber and or wireless technology. The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s e.g. cookie s and or associated contextual information . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

What has been described above includes examples of the disclosed architecture. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art can recognize that many further combinations and permutations are possible. Accordingly the novel architecture is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

