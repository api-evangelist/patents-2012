---

title: Managing digital media presented in online digital media store
abstract: Systems, methods and computer program products are disclosed for managing digital media for an artist or author in an online digital media store using an automated data feed with a unique data structure or a web service having a simple and intuitive user interface. In some implementations, a webpage is provided by the web service that allows a user to request access to manage an artist or author. Upon such request, a rules-based vetting process is employed by the online digital media store for determining the eligibility of the user to manage the digital media of the artist or author.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09319480&OS=09319480&RS=09319480
owner: Apple Inc.
number: 09319480
owner_city: Cupertino
owner_country: US
publication_date: 20120831
---
This disclosure is related generally to data communication systems for managing digital media presented in an online digital media store.

Digital media such as music e books video and software applications can be distributed to the public through an online digital media store. One example of an online digital media store is the iTunes store operated by Apple Inc. Cupertino Calif. Some online digital media stores such as the iTunes store allow content providers e.g. music distributors to provide and manage digital media using a web based application or an automated data feed.

Systems methods and computer program products are disclosed for managing digital media in an online digital media store using an automated data feed with a unique data structure or a web service. The automated data feed has a unique data structure that allows users to manage digital media for a large numbers of artists and to provide digital media to the online digital media store. The automated data feed can be controlled by the content provider using a command line interface or script file. The web service provides a user with a simple and intuitive user interface that allows the user to manage digital media associated with an artist presented on one or more pages in the online digital media store.

The web service also allows new users to be added and assigned one or more roles with various levels of access privileges to digital media or functions associated with an artist or author. A rules based vetting process is used to determine whether a user is eligible to manage the digital media of an artist or author. The vetting process avoids conflicts between multiple users that claim to have legal rights to manage the digital media of the artist in the online digital media store.

In some implementations a method of providing digital media to an online digital media store comprises establishing an automated data feed with a client computer operated by a content provider receiving a data structure over the automated data feed the data structure including a first metadata or asset associated with a first digital media item the first digital media item associated with an artist or author having a presence in the online digital media store and presenting the first digital media item in the online digital media store.

In some implementations a method of providing digital media to an online digital media store comprises establishing a communication channel with a client computer operated by a content provider receiving input through the communication channel the input specifying an asset associated with an artist or author having a presence in the online digital media store receiving the specified asset from the client computer and presenting or providing access to the asset in the online digital media store.

In some implementations a method of claiming an artist or author having a page presenting digital media in an online digital media store comprises receiving a request from a user to manage an artist or author determining if the artist or author is assigned to another user if the artist or author is assigned to another user rejecting the request if the artist or author is not assigned to another user determining if all content delivered to the online digital media store that is associated with the artist or author was provided by the user if all the content was provided by the user accepting the request if all the content was not provided by the user determining if one content item was provided by the user to the online digital media store within the past x months if one content item was provided by the user within the past x months accepting the request if one content item was not provided by the user within the past x months determining if the user provided the last content item to the online digital media store if the user provided the last content item accepting the request and if the user did not provide the last content item rejecting the request.

Other implementations are directed to systems computer program products and computer readable mediums.

Particular implementations disclosed herein provide one or more of the following advantages. Administrators artist managers and other users are provided with an automated data feed with a unique data structure or web service with a simple and intuitive user interface for managing digital media of an artist or author presented on one or more pages of an online digital media store.

The details of the disclosed implementations are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

Content providers can include various providers of digital media such as record companies artist managers publishers and any other individual or entity that is involved in the management of an artist or author in the case of e books . Content providers are also referred to herein as users. Digital media can include any digital content including but not limited to music video artwork e books podcasts software applications and ring tones.

In the example shown content provider is coupled to online digital media store through network and an automated data feed. An example of an automated data feed is an Extensible Markup Language XML feed.

Content provider is coupled to online digital media store through network through a web service. A web service is an application that is accessed over a network such as the Internet or an intranet using a browser.

Each of the content providers can include computer systems or other devices e.g. e tablets smart phones that allow a human user to send digital media to online digital media store . For example content provider can include a computer system that allows a user to create and edit XML documents and send those documents to online digital media store using a command line interface or script. Content provider can include a computer system with a browser application that allows a user to provide digital media through user interfaces e.g. webpages provided by a webpage server operated by or on behalf of the online digital media store .

Online digital media store provides consumers access to various digital media items. Consumers can use consumer devices e.g. computers smart phones e tablets to stream or download digital media from online digital media store . Consumers can browse various webpages in store or sections of the store that are dedicated to artists or authors e.g. an artist page or an author page . An artist page can include a variety of digital media including artwork e.g. album cover art a biography of the artist video clips and artist images. A playlist page can include elements for previewing songs of an album. An album or playlist page can display cover art for the artist s albums and allow a user to preview purchase and download songs using their various consumer devices 

A conventional artist page may use a stock image of an artist that is associated with all of the digital media of the artist. In many cases however this approach may be undesirable. For example on an album webpage it may be more desirable to display a different artist image or gallery of images next to each album cover art. For example an artist manager may find it desirable for marketing an album to place an image of the artist next to the album cover art that depicts the artist at his or her age when the album was first released. It may also be desirable to have a gallery of images of the artist in concert during a tour of the album.

System provides an advantage over conventional data communication systems and methods by using an automated data feed with a unique data structure and a web service with a simple and intuitive user interface. These systems and methods allow administrators artist managers and other users to add or replace or digital media e.g. metadata assets of an artist or author on one or more webpages e.g. artist page album or playlist page in an online digital media store.

Album table lists albums of the artist. Each row in album table is associated with a single album and can include a thumbnail image of the album cover art a vendor identification number the number of galleries associated with the album and a the number of images associated with the album. Link opens a page for managing album images.

In some implementations artist page can be used by an administrator artist manager or other user to manage artist image and gallery images . For example artist image can be edited by selecting user interface element . Selecting element opens artist image lightbox which allows a user to edit the images displayed on an artist page and is further described in reference to .

In the example shown the user previously selected artist image and therefore user interface element is used to replace artist image . If the user did not previously select an artist image a silhouette gray image or other visual indicator is displayed and user interface element is used to choose an artist image file from the user s local database .

In some implementations upload gallery images page includes image thumbnail of each uploaded gallery image and corresponding text input fields for adding metadata e.g. image details for the uploaded image. Text input fields can include a caption field a photographer attribution field a location taken field an artist name s field and a date taken field. Other text input fields are also possible. Caption field allows the user to specify a caption for the corresponding image . Photographer attribution field allows the user to specify the name of the photographer who took the image. Location taken field allows the user to specify the location where the image was taken. Artist name s field allows the user to specify the name of the artist or artists in the image. Date taken field allows the user to specify the date the image was taken. Selecting calendar icon in the date taken field displays a mini calendar not shown to facilitate the selection of a date by the user.

In some implementations view gallery page includes one or more gallery images image edit element reorder element and add new image icon . Element opens an edit gallery image page that allows a user to change image details and add a new language for the gallery name. Element allows the user to add more images to the gallery. Element opens a reorder images page as described in reference to . Clicking on a gallery image opens an image details lightbox not shown which displays the image and its metadata e.g. caption photo attribution location taken . A user can then delete the image or edit the metadata.

Roles tab includes table for assigning one or more roles to a user. Each role has an associated read and write or read only access privilege for digital media and other functions e.g. reports . The rows of table correspond to the various digital media or functions arranged in categories. Some example categories are sales and trends or payments and financial reports. Other categories are also possible. The columns of table correspond to the roles that can be assigned to a user. Some examples of roles are administrator legal technical financial read only sales artist and encoder. Other roles are also possible. A colored checkmark in a cell of table indicates read and write access e.g. a green checkmark or read only access e.g. a gray checkmark for the role. A user is assigned one or more roles by clicking the appropriate checkbox s at the top of each column of table and then clicking the continue element.

In the example shown the assignment was rejected and error message was displayed rejecting the user s request to be assigned an artist. Error message can be presented for several reasons. Some example reasons include but are not limited to 1 the user is not eligible since no content has been provided by the user for this artist 2 the artist was assigned to another user e.g. assigned to another content provider and the user has provided content dispute link is presented 3 the artist is being managed by the user and is already assigned to the user a link to page is presented and 4 an inaccurate link URL to online digital media store was input into text input field a link to a help manager is provided .

In the example shown the artist was assigned to another content provider and the user has provided digital media to online digital media store . The user can dispute the rejection by clicking dispute link in error message . Upon clicking dispute link dispute lightbox is opened as described in reference to .

Process can begin by receiving a request for access to manage an artist . Step can occur when assign element is clicked by the user. Process can continue by determining if another user has been assigned to the artist . If another user has been assigned to the artist the request is rejected and error message is displayed.

If another user has not been assigned to the artist process can continue by determining if the user provided all the content e.g. all albums provided by the user for the artist to the online digital media store. If the user e.g. a single artist manager has provided all the content for the artist to the online digital media store the request is accepted and the artist is added to table .

If the user did not provide all the content for the artist process can continue by determining if the user provided at least one content item e.g. one album under the artist s name within the last x months e.g. 12 months . If the user provided at least one content item under the artist s name within the last x months then the request is accepted and the artist is added to table .

If the user did not provide at least one content item within the last x months then process can continue by determining if the user provided the last content item to the online digital media store . If the user provided the last content item to the online digital media store then the request is accepted and the artist is added to table . Otherwise the request is rejected and error message is displayed.

XML is a markup language that defines a set of rules for encoding documents in a format that is both human readable and machine readable. It is defined in the XML 1.0 Specification produced by the W3C standards organization and several other related specifications based on open standards. As described below XML can be used for the representation of data structures in web services. An XML feed sends data formatted with XML tags to online digital media store . Server computers operated by or on behalf of online digital media store run automated programs e.g. an XML parser to validate the format of the data structure and then to parse out data e.g. files metadata from the validated XML data structure. The parsed out data can be indexed and stored in one or more databases . Databases can be used by other automated programs to populate webpages of online digital media store with the data received from the XML feed.

The XML data structure shown below includes tags that are relevant to supporting artist images under an tag. In the example shown the artist is recording artist Madonna and the online digital media store is iTunes store. Madonna s artist manager or administrator desires to add an artist image and gallery images of Madonna on her artist and album pages in iTunes store. The example XML data structure can be populated with metadata and asset files by Madonna s manager administrator or other authorized user.

The following paragraphs provide annotations for the metadata in the example XML data structure. These annotations can be used by content providers to correctly populate the XML data structure so that it passes validation by automated validation programs running on the iTunes store server computers.

A user can add new galleries and change the order of the galleries as they appear on the album or playlist webpage. To change the order of the galleries an optional attribute force sequence true in the tag can be used to indicate that the galleries are to appear in the store in the order listed in the metadata. When using the force sequence true attribute all galleries are referenced by and . Note that the block may be omitted when submitting an update with the sole purpose of reordering galleries.

An example XML data structure for reordering galleries of images is set forth below. In the example shown the galleries are being reordered. None of the gallery items will be changed so those tags have been omitted from the metadata. The annotations for the tags in this XML were previously described above for artist image metadata and will not be repeated here.

In some implementations process can begin by establishing an automated data feed with a client computer . The client computer can be operated by or on behalf of a content provider. The data feed can be an XML data feed as described above.

Process can continue by receiving a unique data structure over the automated data feed . The data structure can be an XML data structure that includes tags for use in parsing metadata and assets from the data structure at the online digital media store.

Process can continue by presenting or providing access to the metadata and assets on the webpage . When the XML data structure is received by for example a server computer at the online digital media store the XML data structure is parsed and the data and assets are indexed and stored in a database. An automated program can retrieve the metadata and asset from the database and use the metadata and asset to populate one or more pages associated with the artist or author.

In some implementations process can begin by establishing a communication channel with a client computer . The communication channel can be established through a web services application that provides interactive web pages to a user of a client computer. The client computer can be operated by or on behalf of a content provider.

Process can continue by receiving input specifying metadata and one or more assets associated with an artist or author . The artist or author has one or more web pages in the online digital media store.

Process can continue by receiving the specified asset from a storage device coupled to the client computer . The asset can be for example a digital photo or an audio or video file. The user can be provided with a browser window that allows the user to navigate a local database of assets and select an asset to be provided to the online digital media store.

Process can continue by presenting or providing access to the metadata and asset s on the webpage . When an asset is received by for example a server computer of the online digital media store the asset can be indexed and stored in a database. An automated program can retrieve the metadata and asset from the database and use the metadata and asset to populate one or more pages associated with the artist or author.

The architecture can be implemented on any data processing apparatus that runs software applications derived from instructions including without limitation personal computers or mainframe computers. In some implementations the architecture can include processor s storage device s network interfaces Input Output I O devices and computer readable medium e.g. memory . Each of these components can be coupled by one or more communication channels .

Communication channels can be any known internal or external bus technology including but not limited to ISA EISA PCI PCI Express NuBus USB Serial ATA or FireWire. Storage device s can be any medium that participates in providing instructions to processor s for execution including without limitation non volatile storage media e.g. optical disks magnetic disks flash drives etc. or volatile media e.g. SDRAM ROM etc. .

Computer readable medium can include various instructions for implementing an operating system e.g. Mac OS Windows Linux . The operating system can be multi user multiprocessing multitasking multithreading real time and the like. The operating system performs basic tasks including but not limited to keeping track of files and directories on storage devices s controlling peripheral devices which can be controlled directly or through an I O controller and managing traffic on communication channels . Network communications instructions can establish and maintain network connections with client devices e.g. software for implementing communication protocols such as TCP IP HTTP Ethernet etc. .

Computer readable medium can store instructions which when executed by processor s implement one or more applications . For server computers operated by online digital media provider applications can include instructions for implementing a data parser e.g. XML parser instructions for verifying the data structure of the data feed instructions for storing and indexing the parsed data into a database e.g. database of online digital media store . Applications can also include instructions for generating the pages of online digital medial store and for populating those pages with data from database .

For server computers operated by content providers applications can include instructions e.g. UNIX scripts for creating XML documents instructions for establishing an automated feed with online digital media store and instructions for a browser application for processing HTML documents and displaying webpages provided by a web service application hosted by online digital media store .

The features described can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The features can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device for execution by a programmable processor and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output.

The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language e.g. Objective C Java including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors or cores of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer can communicate with mass storage devices for storing data files. These mass storage devices can include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with an author the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the author and a keyboard and a pointing device such as a mouse or a trackball by which the author can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

One or more features or steps of the disclosed embodiments can be implemented using an Application Programming Interface API . For example the data access daemon can be accessed by another application e.g. a notes application using an API. An API can define on or more parameters that are passed between a calling application and other software code e.g. an operating system library routine function that provides a service that provides data or that performs an operation or a computation.

The API can be implemented as one or more calls in program code that send or receive one or more parameters through a parameter list or other structure based on a call convention defined in an API specification document. A parameter can be a constant a key a data structure an object an object class a variable a data type a pointer an array a list or another call. API calls and parameters can be implemented in any programming language. The programming language can define the vocabulary and calling convention that a programmer will employ to access functions supporting the API.

In some implementations an API call can report to an application the capabilities of a device running the application such as input capability output capability processing capability power capability communications capability etc.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made. Elements of one or more implementations may be combined deleted modified or supplemented to form further implementations. As yet another example the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

