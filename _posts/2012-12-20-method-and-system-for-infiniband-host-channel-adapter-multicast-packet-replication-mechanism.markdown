---

title: Method and system for Infiniband host channel adapter multicast packet replication mechanism
abstract: A method for multicast replication by a host channel adapter (HCA) involving receiving a multicast packet, by a receive pipeline for processing packets of the HCA, storing, in a payload RAM within the HCA, a multicast packet payload corresponding to a data portion of the multicast packet, identifying, from a multicast header of the multicast packet, a plurality of destination underlying functions and a plurality of corresponding destination QPs to which the multicast packet is directed, wherein each destination underlying function of corresponds to a virtual machine located on a host, identifying, from the multicast header, information to be replicated for each multicast packet destination, injecting, by the HCA, a number of multicast packet descriptors corresponding to a number of the corresponding destination QPs into the receive pipeline of the HCA, and copying, from the payload RAM, the multicast packet payload to each of the corresponding destination QPs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08937949&OS=08937949&RS=08937949
owner: Oracle International Corporation
number: 08937949
owner_city: Redwood Shores
owner_country: US
publication_date: 20121220
---
The present application contains subject matter that may be related to the subject matter in the following U.S. patent application which is assigned to a common assignee and is incorporated by reference in its entirety Method and System for Infiniband Host Channel Adapter Quality of Service application Ser. No. 13 149 449 filed on May 31 2011.

The Infiniband network includes nodes that communicate through a channel based switched fabric Infiniband is a registered trademark of Infiniband Trade Association located in Beaverton Oreg. . For example the nodes may be a host an input output subsystem or a router which connects to another network. The switched fabric is made of a collection of switches routers and or links that connect a set of channel adapters. The channel adapters form an interface between the switched fabric and the nodes. The channel adapter of the host is referred to as a host channel adapter. The channel adapter of an I O subsystem is referred to as a target channel adapter.

In Infiniband two processes communicate using a queue pair. A queue pair QP includes a send queue and a receive queue. Specifically in order for a process to send a message to another process the process posts the message to the send queue. The host channel adapter sends the message in the form of packets to the channel adapter having the receive queue. Each packet that is sent may include a packet sequence number. Logic associated with the receive queue ensures that packets are processed in a particular order using the packet sequence number.

Infiniband supports operations such as multicast packet replication. Specifically multicast packet replication requires that a copy of a packet be delivered to multiple QPs on the host system. Common solutions to this use software replication. Specifically all incoming multicast packets are redirected to a single QP on a single virtual machine VM . Host software on that VM is responsible for implementing replication to all VMs. Each VM is then responsible for replicating a packet to each group member QP.

In general in one aspect the invention relates to a method for multicast replication by a host channel adapter HCA involving receiving by the HCA a multicast packet wherein the HCA comprises responder processing logic for processing packets through a receive pipeline in the HCA storing in a payload random access memory RAM within the HCA a multicast packet payload corresponding to a data portion of the multicast packet identifying from a multicast header of the multicast packet a plurality of destination underlying functions and a plurality of corresponding destination QPs within a multicast group to which the multicast packet is directed wherein each destination underlying function of the plurality of destination underlying functions corresponds to a virtual machine located on a host operatively connected to the HCA identifying from the multicast header information to be replicated for each multicast packet destination injecting by the HCA a number of multicast packet descriptors corresponding to a number of the corresponding destination QPs into the receive pipeline of the HCA wherein each multicast packet descriptor comprises the information to be replicated wherein the multicast packet descriptors are processed in the receive pipeline of the HCA and copying from the payload RAM the multicast packet payload to each of the corresponding destination QPs in host memory.

In general in one aspect the invention relates to a host channel adapter HCA comprising a plurality of underlying functions wherein each of the plurality of underlying functions corresponds to a virtual machine in a host operatively connected to the HCA a receive packet processing pipeline the receive packet processing pipeline being configured to receive a multicast packet comprising a multicast header and a payload corresponding to a data portion of the multicast packet store in a payload random access memory RAM within the HCA the multicast packet payload a multicast inspection engine configured to identify from the multicast header of the multicast packet a subset of the plurality of destination underlying functions and a plurality of corresponding destination QPs within a multicast group to which the multicast packet is directed and identify from the multicast header information to be replicated for each multicast packet destination wherein the receive packet processing pipeline is further configured to inject a number of multicast packet descriptors corresponding to a number of the plurality of corresponding destination QPs identified by the multicast inspection engine into the receive packet processing pipeline wherein each multicast packet descriptor comprises the information to be replicated and copy from the payload RAM the multicast packet payload to each of the corresponding destination QPs in host memory.

In general in one aspect the invention relates to a system including a host and a host channel adapter HCA operatively connected to the host. The host includes a first virtual machine comprising a first destination queue pair QP and a second virtual machine comprising a second destination QP. The HCA comprises a first underlying function corresponding to the first virtual machine a second underlying function corresponding to the second virtual machine a receive packet processing pipeline the receive packet processing pipeline configured to receive a multicast packet comprising a multicast header and a payload corresponding to a data portion of the multicast packet store in a payload random access memory RAM within the HCA the multicast packet payload a multicast inspection engine configured to identify from the multicast header of the multicast packet the first and second underlying functions and corresponding first and second destination QPs within a multicast group to which the multicast packet is directed and identify from the multicast header information to be replicated for each multicast packet destination wherein the receive packet processing pipeline is further configured to inject a multicast packet descriptor for each of the corresponding first and second destination QPs identified by the multicast inspection engine into the receive packet processing pipeline wherein each multicast packet descriptor comprises the information to be replicated and copy from the payload RAM the multicast packet payload to each of the first and second corresponding destination QPs in host memory.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid unnecessarily complicating the description.

In general embodiments of the invention provide hardware facilities on a host channel adapter for replicating multicast packets. Hardware within the Infiniband host channel adapter stores a state for tracking copies of the packet and mechanisms for limiting the number of multicast packets stored at any time.

In one or more embodiments of the invention the host includes one or more guest virtual machines e.g. virtual machine virtual machine Y a control virtual machine a hypervisor and a root complex . Each of these components is discussed below.

Broadly speaking the virtual machines e.g. virtual machine virtual machine Y control virtual machine are distinct operating environments configured to inherit underlying functionality of the host operating system via an abstraction layer. In one or more embodiments of the invention each virtual machine includes a separate instance of an operating system e.g. OS OS Y OS in . The separate instances of the operating system may be the same type of operating system or different types of operating systems.

Specifically the guest virtual machine operating system e.g. OS OS Y operates as if the guest virtual machine operating system is the only operating system on the host and the resources e.g. processor cycles memory resources of the host channel adapter allocated to the guest virtual machine are the only resources available on the host . Thus the guest virtual machine operating system e.g. OS OS Y includes functionality to control the operating environment of applications executing in the guest virtual machine using resource allocated to the guest virtual machine Each virtual machine may be allocated disjoint or non overlapping physical memory .

Many different types of virtual machines exist. For example the Xen virtualization project allows for multiple guest operating systems executing in a host operating system. Xen is a trademark overseen by the Xen Project Advisory Board. In one embodiment of the invention the host operating system supports virtual execution environments not shown . Another example is a Solaris Container. In such cases the Solaris Container may execute in the host operating system which may be a Solaris operating system. Solaris is a trademark of Oracle America Inc. In one embodiment of the invention the host operating system may include both virtual machines and virtual execution environments.

In one or more embodiments of the invention the guest virtual machine includes a virtual host channel adapter device driver e.g. vHCA driver vHCA driver Y . The virtual host channel adapter device driver is software program that provides an interface to host channel adapter for the guest virtual machine operating system. Specifically when the guest virtual machine operating system wants to send commands to the host channel adapter the virtual machine operating system invokes a routine in the virtual host channel adapter device driver. In response the virtual host channel adapter device driver issues commands to a virtualized device controller not shown presented by the hypervisor discussed below . In turn the hypervisor includes functionality to transmit the message to the host channel adapter .

In addition to the guest virtual machine e.g. virtual machine virtual machine Y the host may also include a control virtual machine . In one or more embodiments of the invention the control virtual machine has a separate address space and operating system environment than the guest virtual machine e.g. virtual machine virtual machine Y . The control virtual machine includes a control virtual machine operating system a control virtual machine manager and a virtual machine host channel adapter device driver . The virtual machine host channel adapter device driver includes functionality similar to the guest virtual machine host channel adapter device drivers e.g. vHCA driver vHCA driver Y discussed above. The host virtual machine operating system includes functionality to provide an operating environment for software executing in the control virtual machine .

In one or more embodiments of the invention the software executing in the control virtual machine includes a virtual machine manager discussed below . In one or more embodiments of the invention the virtual machine manager includes functionality to configure the hypervisor configure the host channel adapter create remove and configure guest virtual machines and perform the management of the host . With regards to configuring the host channel adapter the virtual machine manager includes functionality to send commands to the host channel adapter to adjust the number of resources allocated to each virtual machine To receive parameter values for performing the above management tasks the virtual machine manager may include a user interface and or an application programming interface for communicating with a computer administrator or another program in one or more embodiments of the invention.

Continuing with the hypervisor includes functionality to control the sharing of hardware resources on the host . Specifically the hypervisor includes functionality to virtualize the physical devices of the host so that more than one operating system may share the same physical device transparently in accordance with one or more embodiments of the invention. Further the hypervisor controls when the guest virtual machine e.g. virtual machine virtual machine Y and the control virtual machine are allowed to execute. For example the hypervisor may be a thin privileged layer of software that only manages which guest virtual machine or the host virtual machine is executing.

Continuing with the host the host includes hardware . The hardware may include for example a central processing unit memory and a root complex . In one or more embodiments of the invention the CPU is a hardware processor component for processing instructions of the host. The CPU may include multiple hardware processors. Alternatively or additionally each hardware processor may include multiple processing cores in one or more embodiments of the invention. In general the CPU is any device configured to execute instructions on the host .

In one or more embodiments of the invention the memory is any type of hardware device for storage of data. In one or more embodiments of the invention the memory may be partitioned on a per virtual machine basis such that each virtual machine e.g. control virtual machine virtual machine virtual machine Y is allocated separate and distinct memory. In one or more embodiments of the invention the memory includes functionality to store a send queue not shown .

A separate send queue may be stored in memory for each virtual machine. Alternatively or additionally multiple virtual machines may share one or more send queues. In one or more embodiments of the invention a send queue includes functionality to store an ordered list of command identifiers for commands for processing by the host channel adapter . In one or more embodiments of the invention the command identifiers may be the actual commands and or references to the commands.

In one or more embodiments of the invention the root complex includes functionality to connect the CPU and memory subsystem to a peripheral component interconnect PCI Express switch fabric. Specifically in one or more embodiments of the invention the root complex connects the host to the host channel adapter . Although shows the root complex as separate from the CPU the root complex may be integrated as part of the CPU.

The root complex includes an input output memory management unit IOMMU in one or more embodiments of the invention. The IOMMU includes functionality to connect a direct memory access DMA input output I O bus to the memory. In one or more embodiments of the invention the IOMMU includes functionality to translate addresses from one level of abstraction to another.

Continuing with the host is connected to the host channel adapter . In one or more embodiments of the invention the connection between the host and the host channel adapter may be a PCI express connection. Specifically the host channel adapter may connect to a PCI express fabric connector on the host.

In one or more embodiments of the invention the host channel adapter is a hardware device configured to connect the host to the Infiniband network . Specifically the host channel adapter includes functionality to receive commands from the host and process the commands. Processing the commands may include performing DMA with host memory to obtain and store packet data and to obtain control information performing any validation required on the packet data generating packets from the packet data and sending and receiving packets on the Infiniband network . shows a schematic diagram of the host channel adapter from the prospective of the host . As shown in the host channel adapter includes at least one Infiniband port e g. Infiniband port Infiniband port a resource pool and an embedded processor subsystem . Each of the components of the host channel adapter is discussed below.

In one or more embodiments of the invention an Infiniband port e.g. Infiniband port Infiniband port is a physical interface connector between the host channel adapter and the Infiniband network . Although shows two Infiniband ports more or fewer ports may exist without departing from the invention.

The resource pool is a collection of resources that are required to send and receive packets on the Infiniband network. Specifically the resource pool corresponds to the collection of hardware and stored data that is shared by the virtual machines e.g. control virtual machine virtual machine virtual machine Y . In general the resource pool is configured to receive and execute commands from the virtual machines . A command corresponds to an instruction to the host channel adapter. For example a command may be an instruction to send a message on the Infiniband network not shown . A command includes command data in one or more embodiments of the invention. Specifically command data is data in the command. When the command is an instruction to send a message on the Infiniband network the command may include the message itself or one or more addresses in the host memory having the message. The host channel adapter is configured to obtain the command obtain the message from the command or from host memory referenced in the command partition the message into packets if required and send the packets on the Infiniband network in accordance with an Infiniband protocol. In one or more embodiments of the invention the message is packet data. Specifically packet data is data sent in the packets on the Infiniband network. Thus the packet data may be in the command or in the one or more addresses in host memory. Further aspects of the resource pool as relevant to the receipt of multicast packets are discussed in below.

In one or more embodiments of the invention the sharing of the resource pool is performed using the concepts of physical function and virtual functions. A physical function exposes the actual hardware of the host channel adapter to an operating system. Specifically by way of the physical function the control virtual machine operating system may control the host channel adapter. Thus the physical function allows the control virtual machine to control the host channel adapter such as to disable the host channel adapter .

A virtual function e.g. virtual function virtual function Y exposes a virtualized host channel adapter to a virtual machine Specifically the virtual function e.g. virtual function virtual function Y exposes to the virtual machine operating system only the partition of the resource pool allocated to the virtual machine To the guest virtual machine e.g. virtual machine virtual machine Y the resources exposed by the virtual function e.g. virtual function virtual function Y appear as if the resource are the only resources on the host channel adapter . Thus the virtual function e.g. virtual function virtual function Y allows the virtual machine operating system e.g. OS OS Y to control the portion of resources allocated to the virtual machine. In other words a virtual function e.g. virtual function virtual function Y provides the virtual machine operating system e.g. OS OS Y the appearance that the virtual machine operating system e.g. OS OS Y is controlling the host channel adapter as a whole even though the actions of the virtual machine operating system e.g. OS OS Y do not affect any other virtual function e.g. virtual function virtual function Y .

In one or more embodiments of the invention the term underlying function UF is used to generically refer to either a physical function or a virtual function. Specifically as used herein an underlying function may be a physical function or a virtual function.

The embedded processor subsystem EPS corresponds to an embedded processor and logic for managing the host channel adapter . The logic may be firmware or hardware logic. The embedded processor subsystem includes a service processor resource manager . The service processor resource manager includes functionality to receive and process the management commands on the host channels adapter. For example the management commands may be to change the allocation of host channel adapter resources change the configuration of the host channel adapter and perform other management of the host channel adapter. With regards to resource allocation the service processor resource manager includes functionality to change the allocation of the host channel adapter resources to underlying functions and change the allocation of the host channel adapter resources to quality of service QoS levels within the underlying functions.

As described above the host system of is configured to receive multicast packets from the Infiniband Network . Each multicast packet received via the Infiniband Network may transit via multiple destination functions to eventual virtual machine queue pair QP destinations. Accordingly in one or more embodiments of the invention the host channel adapter is configured to determine which destination underlying functions and destination QPs are to receive the multicast packet. More specifically the EPS firmware logic may include functionality to inspect multicast packet headers extract relevant information from the headers and determine the destination functions and corresponding QPs for each destination function for the multicast packet. This functionality of the host channel adapter is described in detail in .

Continuing with the EPS may include a send queue scheduler . The send queue scheduler includes functionality to schedule commands identified in the send queue on the host channel adapter. Specifically the send queue scheduler includes functionality to iterate through the send queue and store commands identified in the send queue on the host channel adapter .

As discussed above provides a general diagram of the host channel adapter in one or more embodiments of the invention. shows a schematic diagram of the receiving pipeline within the host channel adapter . Specifically shows components of the resource pool for receipt of messages on the Infiniband network as shared between virtual machines and components to allocate resources of the resource pool in one or more embodiments of the invention. More specifically resource pool includes a transmit pipeline not shown for transmitting packets through the Infiniband network with transmitting processing logic not shown and a receive packet processing pipeline also referred to as a receive pipeline of the HCA for receiving packets from the Infiniband network . The receive pipeline includes with responder processing logic for processing each received packet. The packets received by the responder processing logic may be a combination of multicast packets and unicast packets.

As shown in in one or more embodiments of the invention the receive pipeline is partitioned into modules . Each module corresponds to hardware and or firmware that includes functionality to perform a portion of the receive pipeline. Each module is configured to process data units. Each data unit corresponds to a command or a received message or packet. For example a data unit may be the command an address of a location on the communication adapter storing the command a portion of a message corresponding to the command a packet an identifier of a packet or any other identifier corresponding to a command a portion of a command a message or a portion of a message.

Referring to the dark arrows between modules show the transmission path of data units between modules as part of processing commands and received messages in one or more embodiments of the invention. Data units may have other transmission paths not shown without departing from the invention. Further other communication channels and or additional components of the host channel adapter may exist without departing from the invention. Each of the modules for the responder processing logic is described in detail below.

The responder processing logic may include the Infiniband packet receiver module IPRM receive module descriptor fetch module receive queue entry handler module and DMA validation module . As shown the multicast information data structure and replication request data structures may be extensions of the responder processing logic or of the IPRM which handle functionalities specific to hardware multicast packet replication.

In one or more embodiments of the invention the Infiniband packet receiver module IPRM includes functionality to receive multicast and unicast packets from the Infiniband port s . In one or more embodiments of the invention the IPRM includes functionality to perform a checksum to verify that the packet is correct parse the headers of the received packets and place the payload of the packet in memory. Accordingly the IPRM is configured to split the packet header from the packet payload data and store the packet payload in payload memory. In one or more embodiments of the invention the payload memory may be random access memory RAM and or flash memory. Accordingly while embodiments of the invention describe and show a payload RAM such a configuration is not meant to limit the invention to a RAM for storing packet payloads. Information contained in the packet header is stored in the packet header details data structure .

The information stored in the packet header details data structure is identical to what is passed up the pipeline for all packet types e.g. unicast packets. In one or more embodiments of the invention the purpose of the packet header details data structure is to pull the multicast packets out of the general packet data stream so that non multicast packets may continue to be processed while waiting for multicast replication to take place without having to stall the whole input stream while copies are made. The packet header details data structure may be a first in first out FIFO a linked list a table or any other suitable data structure. In one or more embodiments of the invention the payload reference counter PRC keeps track of when a payload is written to the payload RAM and ensures the payload remains in the payload RAM until all copies of a multicast packet have been processed through the packet processing pipeline. More specifically the PRC tracks a number of copies of the multicast packet descriptors injected into the packet processing pipeline and does not decrement to zero 0 until the final copy of the multicast packet descriptor has been processed.

In one or more embodiments of the invention multicast packet headers are also split from the multicast packet payload in the same manner. However multicast packet headers are pulled out of the packet processing pipeline and parsed by the IPRM for information that is stored in the multicast information data structure . In contrast headers for unicast packets and other packet types are sent directly into the normal packet processing pipeline through modules . That is the multicast packet headers are processed via a different route than single destination packet headers. The multicast information data structure may be a first in first out FIFO or any other type of suitable data structure linked list table etc. configured to store information which the EPS firmware needs to find all of the recipients of the multicast packet.

In one or more embodiments of the invention information stored in the multicast information data structure may include a Multicast Destination Local Identifier MC LID and a Multicast Global Identifier MC GID . The MC LID is conceptually used by the vSwitch to replicate a copy of the packet to all eligible virtual HCAs. In one or more embodiments of the invention the MC LID identifies each underlying function corresponding to the vHCAs in the host . In one or more embodiments of the invention the MC LID may be a 16 bit Infiniband address that is unique within an Infiniband subnet. The MC GID is conceptually used by each vHCA to determine the QPs which belong to the corresponding multicast group. The MC GID may be a 128 bit multicast address used to identify an endpoint for the multicast packet. A MC GID is a valid IPv6 address that is a global unique address across Infiniband subnets in one or more embodiments of the invention. Accordingly the MC LID and the MC GID provide information regarding the two virtualized levels of destinations i.e. vHCAs and corresponding QPs belonging to corresponding virtual machines for each multicast packet header.

The EPS is configured to obtain the first entry stored in the multicast information data structure and determine all of the destinations for the packet. In one or more embodiments of the invention the EPS includes a separate multicast inspection engine which includes functionality to inspect the MC LID and MC GID stored in the multicast information data structure and determine all destinations functions and all destination QPs within each underlying function for each multicast packet header. While shows the multicast inspection engine being part of the EPS firmware in one or more embodiments of the invention the multicast inspection engine may be a stand alone component that is not within the EPS or any other system component. For example the multicast inspection engine functionality may be implemented in hardware on chip. Alternatively the multicast inspection engine may be implemented in software on the host .

Based on the number of destinations of the multicast packet header determined by the multicast inspection engine the multicast inspection engine writes a command to the replication request data structure . In one or more embodiments of the invention the command written to the replication request data structure includes the destination vHCA number and the destination QP number in that vHCA for each destination of the multicast packet. The replication request data structure may be a FIFO or any other suitable data structure.

In one or more embodiments of the invention the replication request data structure also stores information which is replicated per packet for each destination of the multicast packet. Such information may include some details about the packet header itself and some control information used by the receive pipeline. For example the information which is replicated for each multicast packet destination QP may include 1 a pointer to the payload in the payload RAM and the size of the payload stored 2 the partition and queue key from the IB header used for validating that the request is legal 3 immediate data from the IB header up to 4B of data which is written in the completion queue which might be included in the header 4 the sender global identifier SGID and the sender local identifier SLID and some assorted fields from the header used to identify the sender of the packet and how to respond to the sender if necessary 5 a packet opcode and 6 some offloading information i.e. packet classification checksums and hashes generated for Internet Protocol IP over IB IPoIB related to performance and security of the Infiniband network .

In one or more embodiments of the invention the replication request data structure is also configured to inject a copy of the multicast packet descriptor including the header and control information for each destination QP of the multicast packet into the receive pipeline for further processing. For each copy of the multicast packet descriptor that is injected the payload reference counter in the IPRM for that packet copy s payload is incremented by one 1 . In this manner the payload reference counter keeps track of how many copies of the payload must be written to the eventual destinations before the payload can be removed from the payload RAM . The payload reference counter is decremented each time a packet descriptor makes it through the pipeline. Specifically in one or more embodiments of the invention the payload RAM decrements the PRC automatically when the payload RAM observes the last byte of payload data for a particular packet being read by the DMA validation module .

Each of the multicast information data structure and the replication request data structure is associated with one or more multicast counters which prevent any one of the data structures from overrunning and generally provide flow control. In one or more embodiments of the invention these multicast counters may be controlled by the IPRM . For example the multicast information data structure may be associated with a counter which controls the number of multicast packet headers being processed at a given time. In one or more embodiments of the invention a predetermined threshold for the number of multicast packet headers being processed may be determined by parameters of the HCA. Upon reaching this threshold further multicast packet headers may be dropped from the processing pipeline. In alternate embodiments of the invention the threshold may be set to maximum in which case no packets would be dropped. This mechanism is used to ensure that the entire system does not get backed up handling multicast packets and allows unicast packets a chance to enter the normal packet processing pipeline. Similarly the replication request data structure may be associated with a counter which ensures that the replication request data structure does not overrun and provides flow control back to the EPS.

The multicast information data structure and replication request data structure may be part of the receiving pipeline in the host channel adapter . Alternatively modules and may be the points of communication between the EPS and the receiving packet processing pipeline.

After the replication request data structure injects as many copies of the multicast descriptor as needed for the number of QP destinations of the multicast packet into the receive pipeline each individual multicast descriptor is handled by the responder processing logic as if the packet is a normal unicast packet. Accordingly continuing with in one or more embodiments of the invention the IPRM includes functionality to transmit a data unit for each packet to the receive module for further processing.

Additionally or alternatively the receive module includes a queue that includes functionality to store data units waiting for one or more reference to buffer location s or waiting for transmission to a next module. Specifically when a process in a virtual machine is waiting for data associated with a queue pair the process may create receive queue entries that reference one or more buffer locations in host memory in one or more embodiments of the invention. For each data unit in the receive module hardware linked list queue the receive module includes functionality to identify the receive queue entries from a host channel adapter cache or from host memory and associate the identifiers of the receive queue entries with the data unit.

In one or more embodiments of the invention the descriptor fetch module includes functionality to obtain descriptors for processing a data unit. For example the descriptor fetch module may include functionality to obtain descriptors for a receive queue a shared receive queue a ring buffer and the completion queue.

In one or more embodiments of the invention the receive queue entry handler module includes functionality to obtain the contents of the receive queue entries. In one or more embodiments of the invention the receive queue entry handler module includes functionality to identify the location of the receive queue entry corresponding to the data unit and obtain the buffer references in the receive queue entry. In one or more embodiments of the invention the receive queue entry may be located on a cache of the host channel adapter or in host memory.

In one or more embodiments of the invention the DMA validation module includes functionality to perform DMA validation and initiate DMA between the host channel adapter and the host memory. Further in one or more embodiments of the invention the DMA validation module includes functionality to read data from the payload RAM and write the data to host memory.

In one or more embodiments of the invention multicast packet replication applies to Send Receive transactions on the HCA. In this type of transaction the remote responder node sends data and provides no information about where the data should be placed in host memory. Instead the local Receive Queue of the QP maintains a list of buffers in host memory to which the data may be delivered. This list takes the form of a series of Scatter Gather Lists SGLs . A single SGL consists of 1 N Scatter Gather Entries SGEs . A single SGE may include three basic parts an address a length and a local key L Key . The L Key is used to verify that the local QP is allowed to write to the referenced memory.

The host includes the destination virtual machines and QPs for each copy of the multicast packet. Accordingly after the replication request data structure injects the multicast descriptors into the receive pipeline the multicast descriptor makes its way through the responder processing logic modules all relevant queue descriptors are fetched and the payload is delivered directly to the QP s in the host .

Although show a certain configuration of components other configurations may be used without departing from the invention. For example rather than having the data structures and counters associated with multicast packet replication be an extension of the receive pipeline for the Infiniband network these data structures and counters values operate as part of the EPS. Alternatively in one or more embodiments of the invention the functionality of the multicast inspection engine may be implemented in hardware on chip in software on the host or in the firmware logic of the EPS . Other variations of the system may be used without departing from the invention.

Initially a multicast packet is received ST . In one or more embodiments of the invention the multicast packet is received from the Infiniband network by the responder processing logic in the HCA. More specifically the IPRM of the receive pipeline receives the multicast packet. In one or more embodiments of the invention a multicast packet is received just as any other unicast packet and thus at this stage of the process the multicast packet is received in the same manner as any other type of packet. Each multicast packet includes a multicast header and a payload data . Next the payload of the multicast packet is written to the payload RAM in the IPRM of the receive pipeline ST . Thus the header is split from the payload and the payload is written to local RAM while the header is sent on a specific multicast replication route implemented in the HCA. When the payload is written the payload reference counter in the IPRM is incremented. The multicast packet header details may also be written to a data structure in the IPRM.

In one or more embodiments of the invention the payload for unicast and other packet types is also written to the payload RAM in the IPRM. However the headers for unicast and other packet types are then sent through the receive pipeline within the responder processing logic and thus follow a different general path within the responder processing logic than multicast headers. Accordingly headers for all packet types are inspected as they leave the IPRM and headers belonging to multicast packet types are pulled out of the normal packet processing stream for unique processing and inspection. The multicast header information necessary for determining the multicast packet destinations are stored in a data structure in between the receive pipeline and the EPS.

Such multicast header information may include MC LIDs and MC GIDs. The MC LID is used by the virtualized system described in to replicate a copy of the multicast packet to all eligible virtual HCAs. In the next level of granularity for determining the eventual multicast group destinations each eligible virtual HCA uses the MC GID to determine the QPs which belong to the multicast group and corresponding to each vHCA.

Subsequently the MC LID and MC GID information from the multicast header is inspected to determine destination virtual functions and corresponding QPs which are part of the multicast group to which the multicast packet header is directed ST . In one or more embodiments of the invention the inspection and determination of destinations for the multicast packet header may be done in the EPS firmware or software. Alternatively the inspection and destination determination may be performed directly in hardware within the HCA. Upon determining the destination functions and QPs this information is written to a replication request data structure along with other information that needs to be replicated for each copy of the multicast packet ST . For example the replication request data structure may store details about the packet header itself and some control information needed by the responder processing logic to process each multicast packet in the receive pipeline. Such information may include a pointer to the payload RAM where the payload for the multicast packet is stored the size of the payload stored one or more validation keys from the Infiniband header which may be used to validate the request to transmit the multicast packet a packet opcode and other Infiniband header information used to identify the sender of the packet and to write a completion to the completion queue once the packet is successfully transmitted received.

In ST a copy of the multicast packet descriptor is injected into the packet receive pipeline for each destination that is determined for the multicast packet. In one or more embodiments of the invention for each copy that is injected the payload reference counter is incremented by one ST . Accordingly the payload reference counter tracks the number of copies of the payload that need to be written to all the destination QPs. In one or more embodiments of the invention the PRC acts as a placeholder to ensure that the payload for the multicast packet remains in the payload RAM until the reference count is zero 0 so as to not prematurely flush the payload from the payload RAM. This is because while a descriptor for each packet is copied and processed through the responder processing logic and receive pipeline of the HCA only a single payload exists for the multicast packet stored in the payload RAM in one or more embodiments of the invention. This single copy of the payload is copied to the host memory at the final stage of multicast packet replication. Thus the PRC ensures that the payload of the multicast packet remains in the payload RAM at least until the last descriptor copy is written to the host memory.

In ST a determination is made as to whether all copies of the multicast packet header for each destination has been injected into the pipeline for normal packet processing. If further copies remain to be injected the process returns to ST . When each multicast packet descriptor is processed the payload RAM directly provides writes a copy of the payload to each destination QP ST . When all copies have been injected a final dummy copy is injected into the packet processing pipeline but is not written to memory ST . In one or more embodiments of the invention this dummy copy does not increment the payload reference counter but causes a decrement to the payload reference counter when the dummy copy is processed through the packet pipeline. This counteracts the initial increment of the payload reference counter when the payload is stored in the payload RAM. Thus the payload reference counter ensures that the packet payload is held in the payload RAM until the final dummy copy of the packet descriptor is processed.

In one or more embodiments of the invention as an alterative to ST a last copy of the packet may be marked as a last packet when the descriptor is injected into the receive pipeline. In such a scenario the reference count increment for the marked last copy is skipped. Accordingly no dummy packet is necessary to offset the initial count of 1 when the payload is stored in the payload RAM. Instead the last copy of the packet descriptor serves as the final decrement of the PRC. Therefore in one or more embodiments of the invention the initial PRC count of 1 holds the packet in the payload RAM while copies are being made. Each copy of the packet descriptor that is injected into the pipeline before the last copy results in a PRC increment so it is not possible for the reference count to hit 0 prematurely due to data being sent for one of the copies prior to all copies being injected . The final injected packet descriptor copy is marked as the final copy so that the header FIFO may be popped and the reference count is not incremented when that copy is injected.

While the process of described above referred to a replication mechanism for a single multicast packet as received by the HCA the process of may be repeated for each multicast packet that is received by the responder processing logic of the HCA. More specifically for each multicast packet that is received data is populated in the respective multicast data structures shown in destination functions and QPs are determined and copies of the multicast descriptors are injected into the receive pipeline for processing. In one or more embodiments of the invention a single PRC is incremented and decremented as described above for each packet received. That is multicast packets may be processed serially. Alternatively there may be multiple PRCs stored in the IPRM for each multicast packet is that received. In this case several multicast packets may be processed in parallel. The payload RAM stores the payload for each multicast packet until the PRC decrements to zero.

Initially a multicast packet is received among other unicast packets from the Infiniband network and Infiniband port s to the receive pipeline of the Infiniband host channel adapter HCA . All payloads are stored in the payload RAM . Assuming the payload reference count is zero when a multicast payload is stored in the payload RAM the PRC is incremented to one 1 . At this stage of the packet flow multicast packet headers are split from other packet headers. While packet headers for unicast and other packet types are sent via the packet details FIFO to the normal packet processing pipeline the packet headers for multicast packets are sent to the multicast information FIFO . The multicast information FIFO stores the MC LID and MC GID information from the multicast header and then control is handed over to multicast inspection engine in the EPS. In one or more embodiments of the invention the IPRM may increment the multicast threshold counter for each MC LID MC GID pair that is stored in the multicast information FIFO . The IPRM may also periodically perform a check by comparing the multicast threshold counter to a predetermined threshold to ensure that multicast processing is not bottlenecking processing of other packet types.

While the various data structures for storing multicast packet information are shown as FIFOs any suitable data structure type may be implemented in embodiments of the invention.

Continuing with the multicast inspection engine pops off the multicast information FIFO and finds all of the destinations underlying functions and corresponding QP destinations for the packet. For each copy needed the multicast inspection engine writes a command to the Replication Request FIFO including the destination vHCA number s and the destination QP number s in that vHCA. For purposes of this example assume that the multicast packet being processed has four destination QPs to which the multicast packet is to be written to memory. As described above the Replication Request FIFO may also store other information from the IB or multicast headers that needs to be replicated for each of the four copies of the packet sent through the pipeline. Finally the replication requirement FIFO injects a copy of the multicast packet descriptor into the normal packet processing pipeline and increments the PRC for each copy injected. Accordingly the PRC count when the fourth copy of the multicast packet descriptor is injected is five 5 .

Alternatively in one or more embodiments of the invention the replication request FIFO may return control to the IPRM in which case the IPRM may send a copy of the packet up the pipeline and increment the reference count for that packet s payload. In one or more embodiments of the invention the IPRM may increment the replication credit counter for every packet descriptor injected into the pipeline by the replication request FIFO. The replication credit counter ensures that the replication request FIFO does not overrun.

At this stage the separate multicast processing for the multicast packet header ends and the packet is processed normally through the packet processing pipeline after the replication request FIFO completes its function s . The payload RAM always decrements the payload reference count when the payload for each multicast packet copy is read out. Accordingly when each of the multicast packet descriptors find each of the four QPs of the multicast group a copy of the payload is read out from the payload RAM and written to each QP in main memory of the virtualized host and the PRC is decremented. For each of the four copies of the multicast packet written to destination QPs the PRC is decremented which results in the PRC being decremented to one 1 .

When the last fourth copy of a particular packet is sent an encoded command is sent from the IPRM to the replication request FIFO indicating last packet sent . At this point the IPRM removes the packet header contents from the Packet Details FIFO . Simultaneously a dummy copy of the packet is sent up the pipeline and to the host but this copy is not written to memory . Alternatively a last copy of the packet descriptor is marked as a last copy resulting in the PRC increment to be skipped. The purpose of the dummy copy or the last marked copy is to provide the final reference count decrement to offset the initial value of when the packet first arrived and the payload was written to the payload RAM and ensures that the PRC does not hit ref count 0 prematurely. Accordingly the PRC is only decremented to zero after either the dummy copy or the last marked copy of the packet descriptor is sent up the pipeline. The payload RAM frees the space occupied by the multicast payload when the payload reference count reaches 0.

As shown by way of the flow diagram of embodiments of the invention provide a mechanism for hardware multicast replication in a host channel adapter associated with the Infiniband network. Hardware provides state for tracking copies of the packet and mechanisms for limiting the number of multicast packets stored at any time via the various counters associated with multicast packet processing. The firmware provides the additional functionality for multicast destination determination and storing of information that must be replicated for each destination. This may allow for improved multicast performance and allows multicast group QPs to be treated the same as unicast QPs resulting in general performance improvements in the entire design of the HCA to be more easily realized.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

