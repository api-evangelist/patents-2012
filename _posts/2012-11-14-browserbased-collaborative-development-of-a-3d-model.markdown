---

title: Browser-based collaborative development of a 3D model
abstract: A system for collaborative three-dimensional (3D) modeling in a browser application is stored as instructions on a computer-readable medium. The instructions include a browser interface module that executes on the one or more processors to receive user commands from the browser application for modifying a 3D model and cause a rendering of the 3D model to be displayed in a window controlled by the browser application. The instructions further include a modeling engine module that executes on the one or more processors to interpret model data corresponding to the 3D model to generate the rendering of the 3D model, and modify the model data in accordance with the received user commands. Still further, the instructions include a collaboration module that executes on the one or more processors to cause the modified 3D model to be synchronized in real time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460542&OS=09460542&RS=09460542
owner: Trimble Navigation Limited
number: 09460542
owner_city: Sunnyvale
owner_country: US
publication_date: 20121114
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 560 205 filed on Nov. 15 2011 entitled Browser Based Collaborative Development of a 3D Model the disclosure of which is hereby expressly incorporated herein by reference.

This disclosure relates to developing a three dimensional model of an object or a group of objects and in particular to collaboratively developing a model on a communication network using a web browser application.

The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors to the extent it is described in this background section as well as aspects of the description that may not otherwise qualify as prior art at the time of filing are neither expressly nor impliedly admitted as prior art against the present disclosure.

Today professional as well as non professional users in a variety of different fields such as engineering architecture automotive design graphic design advertising fashion design medicine etc. can develop three dimensional 3D models of buildings vehicles and other objects using 3D modeling software that operates on a computing device. A user typically interacts with 3D modeling software via input devices such as a keyboard mouse trackball and or stylus and the drafting document is displayed on a graphical display device such as a computer monitor or screen.

In general 3D modeling software allows a user to draw various three dimensional shapes directly or by defining two dimensional faces that make up 3D shapes apply colors and or textures to the shapes move scale rotate and skew the shapes etc. 3D modeling software typically provides the user with stock objects e.g. 3D shapes such as spheres or parallelepipeds and or two dimensional 2D shapes such as arcs circles rectangles and other known geometric shapes and or provides tools to create such objects. Further 3D modeling software typically allows users to save models as files that conform to a certain predefined format. To share models users transmit to each other files with the corresponding model data or upload the files to data servers.

Users usually develop 3D models by sequentially entering various drawing and image manipulation commands via a graphical user interface GUI . For example to model a two story building a user may first draw a four wall structure draw a door in one of the walls then draw several windows in the walls etc. The user may then paint or texture the walls the roof and other portions of the model. Accordingly it may take a significant amount of time for a single user to develop a complex and detailed model.

Further to modify an existing model a user typically uses 3D modeling software to open a file that stores model data edit the model data and save the model data to the file. In order for another user to safely edit the model he or she must make another copy of the file or wait until the user currently editing the model finishes the edits and closes the file. In other words when more than one user contributes to the development of a model 3D modeling software receives input from only one user at a time.

In an embodiment a tangible non transitory computer readable medium stores instructions for collaborative three dimensional 3D modeling in a browser application that executes on one or more processors of a first computing device. The instructions include a browser interface module that executes on the one or more processors to receive user commands from the browser application for modifying a 3D model and cause a rendering of the 3D model to be displayed in a window controlled by the browser application. The instructions further include a modeling engine module that executes on the one or more processors to interpret model data corresponding to the 3D model to generate the rendering of the 3D model and modify the model data in accordance with the received user commands. Still further the instructions include a collaboration module that executes on the one or more processors to cause the modified 3D model to be synchronized in real time between the first computing and a second computing device at which the 3D model is being concurrently developed where the first computing device and the second computing device operate independently of each other on a communication network.

In another embodiment a computing device for collaborative development of 3D models includes a network interface coupled to a communication network one or more processors a memory coupled to the one or more processors a display device coupled to the one or more processors a browser application stored in the memory that executes on the one or more processors to retrieve content from remote hosts via the communications network interface and render the retrieved content on the display device and a 3D modeling software module stored in the memory that executes on the one or more processors. The 3D modeling software module includes a browser interface module configured to receive user commands from the browser application for modifying a 3D model and cause a rendering of the 3D model to be displayed in a window controlled by the browser application a modeling engine module configured to modify model data corresponding to the 3D model in accordance with the received user commands where the model data is stored in the memory in a non image format and a collaboration module configured to generate an indication of the modified model data to be transmitted via the communication network to cause the modified 3D model to be synchronized in real time with another computing device at which the 3D model is being concurrently developed.

In still another embodiment a method for browser based collaborative development of a 3D model is implemented in a computing device operating on a communication network and having a memory and one or more processors. Model data corresponds to the 3D model is stored in a non image format in the memory and the 3D model includes a plurality of components. The method includes receiving via a user interface of a browser application a user command for modifying model data corresponding to a 3D model modifying the model data in accordance with the user command including modifying respective portions of the model data to change one or more of dimensionality positioning and color of at least one of the plurality of components automatically generating a description of the modification of the model data and automatically causing the description of the modification of the model data to be transmitted via the browser application in an electronic message to another device operating on the communication network including not receiving a user command to transmit the description of the modification from the user interface so that the 3D model is synchronized between the computing device and at least one other device at which the 3D model is being concurrently developed.

In embodiments described below a 3D modeling software module operating in a web browser application on a client device allows a user to develop models of various objects within a window controlled by the browser application in real time collaboration with one or more users operating respective client devices. The user can access modeling functionality without launching a separate application and in some implementations without installing compiled software components on the client device. The 3D modeling software module or simply the modeling software generally allows the user to create and edit 3D models of buildings vehicles items of furniture and other objects using various controls provided via the browser application for manipulating component 3D shapes and or 2D faces defining interactions between the components grouping the components into composite components etc. The modeling software also allows the user to rotate a 3D model displayed in a browser application window change the angle and the distance of the viewpoint relative to the model and otherwise control the manner in which the model is rendered on a user interface of the client device. During a collaborative development session the modeling software receives user commands via the browser application for modifying the 3D model generates a representation of the desired modifications also referred to below as mutations of the model and causes the modifications to the 3D model to be synchronized with one or more client devices. The 3D model may be stored in a memory as model data that specifies multiple simple e.g. cuboids spheres and aggregate components having groups of simple components and modifications to the 3D model may include modifications of dimensionality positioning color or texture and other properties of some or all of the components described by the model data.

More specifically to operate as a part of a web browser application the 3D modeling software module includes components to display a user interface via a window controlled by the browser application or otherwise via the browser application the networking functions of the client device on which the browser application executes the graphics functions provided by the browser application or an extension plugin of the browser application. To support real time collaborative development the modeling software includes a collaboration module that may be implemented as a compiled software module a script interpreted at runtime a combination of compiled and scripted instructions etc. The collaboration module may report the modifications to and receive indications of modifications at other client devices from a modeling server that operates in a communication network. Depending on the implementation the modeling server performs at least some of the following functions to facilitate collaborative development of a 3D model keeping track of participating client devices creating and managing a master copy of the 3D model that reflects various reported modifications at multiple client devices resolving conflicts between concurrent operations by several users or propagating the modifications to client devices for local conflict resolution etc.

Referring to techniques for browser based collaborative modeling can be implemented in a communication system for example. In an embodiment the communication system includes a client device another client device that operates independently of the client device and a communication network to which the client devices and are communicatively coupled. Although the client devices and include similar hardware software and or firmware components the components of only the client device are shown in for ease of illustration. In operation a user operating the client device develops a model of an object or a group of objects in collaboration with another user operating the client device . The communication system may also include a modeling server in which a collaboration engine facilitates interactions between the client devices and during the collaborative development process. Because the modeling server supports collaborative functionality the modeling server also may be referred to as a collaboration server. The modeling server may be coupled to the client devices and via the communication network . Further in an embodiment the communication system includes a model database to store model data corresponding to various 3D models.

The client device includes a central processing unit CPU having one or more processors to execute computer readable instructions a random access memory RAM unit to store data and instructions during operation program storage including persistent memory to store software applications shared software components such as Dynamic link Libraries DLLs and other programs executed by the CPU data storage including persistent memory to store data used by the programs stored in the program storage and a network interface to support wired and or wireless communications with the modeling server the client device and other devices operating on the network . By way of example the program storage and the data storage may be implemented on a hard disk drive HDD coupled to the CPU via a bus. Generally speaking each of the components and may be implemented in any suitable manner as a single module multiple modules or a component of another module. Further the memory components such as the RAM the program storage and the data storage may include any suitable type of tangible non transitory computer readable medium.

In the example implementation of the client device is a personal computer PC . However in general the client device may be any suitable stationary or portable computing device such as a tablet PC a smartphone etc. Although the computing device in the example of includes both storage and processing components the client device in other embodiments can be a so called thin client that depends on another computing device for certain computing and or storage functions. For example in one such embodiment the data storage and the program storage are external to the computing device and are connected to the client device via a network link. Further the client device may be coupled to an input device and an output device . The input device may include for example a pointing device such as a mouse a keyboard a touch screen a trackball device a digitizing tablet or a microphone and the output device may include an LCD display device a touch screen or another suitable output device. Using the input device and the output device a user can access a graphical user interface GUI of the client device .

With continued reference to the program storage may store a browser application for retrieving content from hosts operating on the network interpreting and rendering the content and in some cases supporting various user interactions with the retrieved content. Several examples related to browser functionality are discussed in more detail below with reference to . The program storage also may store a 3D modeling software module such as a collaborative 3D modeling client that executes in the browser application to develop 3D models of various objects independently at the client device or in collaboration with one or more client devices. In other embodiments however the modeling client is only stored in the RAM during runtime and is not stored in persistent memory at all. For example the modeling client may be downloaded from the modeling server each time a user develops a 3D model at the client device . To this end the modeling server may include tangible non transitory computer readable medium on which the instructions of the modeling client are stored.

As explained below the modeling client may include a set of compiled instructions executable directly on the CPU a set of instructions stored on a computer readable medium and interpretable by the browser application at runtime to be executed on the CPU or both. Generally speaking the modeling client provides a set of modeling controls to generate position and variously adjust three dimensional objects apply textures to the shapes or surfaces define interactions between shapes etc. The modeling client further supports collaboration between the client device and one or more other client devices according to an embodiment. The modeling client may include such functions as forwarding modifications to model data to the modeling server receiving modifications from the modeling server exchanging versions of a 3D model being developed at the client device with the modeling server the client device or both reporting and receiving modifications of a viewpoint etc.

In order for the modifications to be transmitted to the modeling server or directly to the client device the user of the client device need not complete the editing session. In other words the user need not indicate to the modeling client that a new version of the 3D model is ready to be forwarded to another device by entering an explicit user command or by exiting the edit mode exiting the modeling client saving the model data etc. Instead the modeling client may forward the modifications in real time concurrently with the user making further modifications inspecting the model or continuing to otherwise interact with the 3D model via the browser application . Similarly the modeling client may receive real time indications of modifications at other client devices during different stages of interacting with the 3D model at the client device .

Models developed using the modeling client may be stored on a computer readable medium such as the data storage as data files including model data that conforms to a certain non image format e.g. a format that specifies various parameters and attributes of a model rather than a static snapshot of the model. For example the non image format may specify a set of faces of 3D models along with the corresponding attributes such as the position and orientation of a face the texture of the face etc. The modeling client may interpret the model data to render the corresponding 3D model in an image format such as a raster format. Further the model data may include a hierarchical tree data structure with branches on two or more levels describing respective components. An example tree data structure that may be used to store model data is discussed in more detail with reference to .

According to some scenarios the 3D model corresponding to the model data is collaboratively developed at the client devices and . Each of the client devices and may maintain a respective copy of model data . In one such embodiment the client devices and exchange real time or periodic updates describing modifications to the model data at the corresponding client device so that the modeling client executing on the client device can appropriately update the local copy of the model data . In other embodiments the modeling server additionally or alternatively updates the master copy of the model data stored in the model storage according to the updates received from the client devices and .

In some scenarios the model data or similar model data is received from a web page which a user visits using the browser application . For example a web page that stores architectural models may include one or several 3D models in a non image format recognized by the modeling client . The web page may include an indication e.g. a tag that the included model data is interpretable and or editable by the modeling client . Although the model data is illustrated as residing in the data storage model data in other embodiments or scenarios may be stored only in the RAM and in some cases only while the browser application is active. Further in some embodiments the web page that includes model data interpretable and or editable by the modeling client includes a link to a host from which a copy of the modeling client may be downloaded. In this manner a user visiting a web site that offers interaction with a 3D model can easily retrieve the necessary software for at least inspecting the 3D model.

The browser application also may provide a window within which the modeling client may render 3D models and via which the modeling client may receive from the input device e.g. a mouse . For example the browser application may support HTML 5 and the modeling client or web content that includes a 3D model may generate a Canvas element within which the modeling client may generate 3D shapes using 2D graphics primitives provided by HTML 5. As another example the browser application may utilize WebGL 3D Canvas to display 3D models. Further the browser application may propagate certain events such as selection of radio buttons check boxes menu items etc. to the modeling client for further processing.

Next illustrate several examples of a computing environment in which a 3D modeling software module may operate as a modeling client in a browser application. The client device or of for example may implement the computing environment of any of or a suitable combination of these environments. Further in an embodiment the client device implements the computing environment illustrated in one of and the client device implements the computing environment illustrated in a different one of .

Referring first to a computing environment may include an operating system which may be any suitable operating system such as Android Windows Linux Mac OS iOS Android etc. In general the operating system may include functions and support drivers for scheduling and executing tasks obtaining memory resources accessing the file system as well as input devices output devices display devices and other peripheral devices exchanging messages between tasks etc. The operating system may include networking functions to support wired and or wireless communications with other network devices. For example the networking functions may include device drivers to support network cards or other network interface modules such as the network interface illustrated in for example.

In the computing environment a browser application executes on the operating to provide browser functionality which may include core browser functionality user interface features and optionally one or several additional features such as playback of certain multimedia content for example. Generally speaking core browser functionality may include messaging according to such communication protocols as Internet Protocol IP Transmission Control Protocol TCP User Datagram Protocol UDP Secure Socket Layer SSL and Hypertext Transfer Protocol HTTP parsing of content provided in a mark up language e.g. Hypertext Markup Language or HTML and scripts provided in a scripting language e.g. JavaScript authentication management of digital certificates for SSL communications caching web content and managing the cache etc. In other embodiments however at least some of the messaging functionality may be provided by the operating system e.g. by the networking functions . Further depending on the implementation the core browser functionality may include rendering images provided in a standard image format such as BMP JPEG or GIF for example as well as playing back audio files or feeds and displaying video content provided in respective audio and video formats. The user interface of the browser application may allow a user to specify target hosts and resources view the rendered content select links control interactive content etc. In at least some embodiments the browser application utilizes user interface functions provided by the operating system for generating viewing windows displaying user controls processing events related to the displayed user controls etc.

In an embodiment a modeling client is provided as a plugin that extends the functionality of the browser . In particular the modeling client may include compiled code with functions invokable by the browser . The modeling client can be installed in the computing environment only after a user of the corresponding device agrees to the terms of use of the modeling client according to an embodiment. Referring back to the modeling client may correspond to the modeling client and may be provided by the modeling server in response to a request from the client device .

As illustrated in the modeling client may include a modeling engine a browser interface module and a collaboration function module . The browser interface module in general facilitates various interactions between the browser and the modeling client to provide a user interface for the modeling client . According to an embodiment the browser interface module receives events and data from and provides content to the browser module . For example the browser interface module may receive keyboard events mouse click events touchscreen gesture events voice commands packets received from network devices via the network functions relevant events of the OS etc. On the other hand the browser interface module may provide data such as a raster image of a 3D model to the browser module route events originating in the modeling client to the browser provide collaboration messages generated by the collaboration function module to the browser for transmission to a modeling server or a peer client device etc. The browser interface module in one example implementation includes instructions in HTML 5 JavaScript and Cascading Style Sheets CSS .

With continued reference to the modeling engine interprets model data to generate a raster image of the corresponding 3D model creates new components in response to commands received via the browser interface module modifies model data to add remove resize retexture and otherwise update selected components and provides other functionality for developing 3D models. Using the user interface of the browser application to interact with the modeling engine a user can generate and position 3D shapes and in some cases 2D shapes apply colors and or textures to various shapes move scale rotate and skew the shapes groups shapes to define aggregate model components etc.

The collaboration function module may provide functionality for real time collaborative development. In particular when a 3D model is being collaboratively developed at a client device that implements the computing environment and one or more other devices the collaboration function module may support some or all of the following functions inviting and accepting collaborators generating descriptions of updates to a 3D model applied in the computing environment generating requests to lock or unlock components of the 3D model receiving and processing updates to the 3D model applies at another device receiving and processing indications that certain components have been locked for exclusive editing at another device etc. Example techniques that may be implemented in the collaboration function module are discussed in more detail below.

Each of the components may be provided as a respective set of compiled instructions within the modeling client . In another embodiment the modeling client initially may be provided with the modeling engine and browser interface module and the collaboration function may be provided in the form of additional compiled instructions in response to a separate request from the client device.

Now referring to a computing environment includes an operating system with networking functions that are generally similar to the operating system and the networking functions respectively. Further similar to the browser a browser operating on the operating system may support core browsing functionality and user interface features. A modeling client may be provided as a plugin that includes a scripting Application Programming Interface API a modeling engine and a browser interface module . Further a collaboration function may provide functionality similar to that of the collaboration function module except that the collaboration function is a script interpreted by the browser application at runtime rather than a set of compiled instructions for example .

More specifically in an embodiment the scripting API provides an interface via which certain functionality and data structures of the modeling client are made accessible to other programs so that the functionality of the modeling client can be extended to include additional features. The interface provided by the scripting API may be consistent with a scripting language supported by the browser application and the browser application may include a script interpreter to interpret at runtime and execute instructions in the scripting language to which the collaboration function also conforms. For example in an embodiment the browser application and the scripting API support Javascript instructions and the collaboration function includes Javascript instructions executable by the browser application .

Further to give users more flexibility the collaboration function may allow users to select various mechanisms for resolving or preventing conflicts between concurrent edits. Users may select the desired mechanisms programmatically for example via additional scripts compatible with the script based collaboration function . In an embodiment the collaboration function includes a locking function to lock the model or a component of the model so as to reserve the model or the component for editing. In response to a user activating the locking function the collaboration function may generate a locking notification to notify one or more client devices that the component has been locked. Alternatively or additionally the collaboration function may include a function for generating a description of the modifications applied to the component that is compatible with an operational transformation OT . Generally speaking OT techniques allow client devices to modify the same component in parallel and in real time without locking the component. Because the component may be in different states at different devices modifications of a component at a client device are described in terms of operations that are then transformed as necessary at another client device to ensure that the operations are applied to the component consistently. In an implementation to generate an OT compatible representation of a modified component the collaboration function also generates a serialized representation of the component i.e. an ordered listing of the elements included in the component that allows the API to precisely indicate to which of the elements in the component a transformation has been applied. These and other techniques for notifying other client devices of changes to the model or portions of the model are discussed in more detail below.

As another example illustrates a computing environment that includes an operating system with networking functions a browser including a script interpreter and several 3D modeling components provided as respective scripts interpretable by the script interpreter at runtime. In particular the computing environment includes a browser interface a collaboration function and a modeling engine generally similar to the components and respectively each provided in a scripting language. In an embodiment the components are provided separately so that the user need not download the collaboration function unless he or she wishes to participate in collaborative 3D modeling.

As yet another example illustrates a computing environment that includes an application that executes on an operating system and includes an embedded browser viewer a modeling engine a 3D graphics display module and a user interface component . In this implementation the application provides a framework e.g. event handling resource allocation and incorporates modeling as well as graphics rendering functionality via the components and each of which can be provided as a corresponding function library or a plugin for example.

As indicated above client devices via which users collaboratively develop 3D models may rely on a modeling or collaboration server to resolve conflicts between concurrent edits maintain master copies of 3D models being concurrently developed version 3D models etc. To illustrate an example mechanism for interaction between devices in a collaborative modeling environment a communication system including modeling clients and as well as a modeling server is illustrated in . During a typical collaborative development session a collaboration engine operating in the modeling server coordinates updates to a 3D model between the client devices and . In an embodiment the modeling server and the collaborative development engine of are implemented as the modeling server and the collaboration engine respectively. The modeling server also may be coupled to a storage which may be a database implemented on one or several servers for example.

In the communication system each of the client devices and includes a browser application a modeling client with collaborative functionality operating in the browser application and a copy of the model data . The computing environment of the client devices and may be implemented according to one of the examples illustrated in a combination thereof or in another suitable manner.

To receive real time updates related to collaborative model development the client devices and may set up persistent communication channels . For example the browser application may maintain an open UDP or TCP port P specifically for incoming messages used by the modeling client or to define a communication or browser channel. For outgoing messages the browser application may use the same port P or another port such as the port typically used for HTTP traffic e.g. 80 .

After a user makes one or several modifications of the model data at the client device the modeling client may generate a description of these modifications which also may be referred to as a mutation and provide the description to the collaboration engine as Mutation. Example content of such descriptions of modifications as well as several principles according to which these descriptions may be generated are discussed in more detail below. The collaboration engine may update a copy of the model data in accordance with Mutation when possible and add Mutationonto an event queue . In some cases the collaboration engine does not modify the model data in exact conformance with Mutation. For example Mutationmay conflict with an earlier modification at another client device in which case the collaboration engine modifies the model in view of Mutationand the earlier modification or in some cases does not apply the modification specified by Mutationat all. In either case the collaboration engine may generate a description of a modification applied at the server as Mutation add the Mutationto a server modification queue and broadcast the Mutationto all client devices participating in the development of the 3D model described by the model data in this case the client devices and . In various situations Mutationmay be the same as Mutation a description of a modification different from the one specified by Mutation or an indication that no modification was applied at the server in response to receiving Mutation.

Further the server may generate a unique version indicator for each modification applied by the collaboration engine Mutation Mutation etc. Still further the server may generate a snapshot or copy of the 3D model corresponding to each version and store the snapshot in a queue . In this manner the model data corresponds to the latest version of the 3D model as developed by the participating client devices and and the queue stores previous versions of the 3D model associated with respective version identifiers.

Next illustrates an example client side 3D modeling sub system that may be implemented in the client device or of for example or in one or both of the client devices and illustrated in . As another example the modeling client device and the browser of may be implemented similar to the 3D modeling sub system .

The 3D modeling sub system includes a browser application in which a 3D modeling engine may operate as a plugin implemented at least partially as a set of compiled instructions. The 3D modeling engine may be provided as a DLL for example. Typically the functions of the 3D modeling engine can execute at the same speed as the browser application . Moreover the 3D modeling engine may be provided as a file stored in a predefined location which the browser application always inspects upon launch to detect the presence of and automatically load files conforming to a certain format.

The 3D modeling engine may be platform specific and can be provided in different formats for different operating systems. In some embodiments the 3D modeling engine utilizes graphics functions provided as a part of the browser application or externally to the browser application . For example the 3D modeling engine may use a cross platform APIs for efficiently rendering graphics such as OpenGL . More specifically the 3D modeling engine may interpret model data which may include descriptions of various 3D and or 2D shapes that make up the corresponding 3D model stored in any suitable format including a proprietary format defined specifically for 3D model data and invoke various functions of the OpenGL API for drawing lines points and other basic primitives to efficiently generate raster images. The OpenGL API in turn may utilize the available graphics hardware such a GPU transparently to the 3D modeling engine . As an even more specific example the 3D modeling engine may use OpenGL functions to generate a raster image corresponding to a certain perspective view of a 3D model. In response to receiving a user interface event from the browser application indicating that the 3D model is to be rotated the 3D modeling engine may re interpret the model data to determine which combination of geometric primitives describes the new perspective view of the 3D model and invoke the corresponding OpenGL functions. In addition to interpreting model data the 3D modeling engine may provide functionality similar to that of the modeling engine or for example see .

The 3D modeling sub system also may include a script interface component to facilitate the interaction of the 3D modeling engine with the user interface layer of the browser application and provide a framework for efficiently adding extensions to the available 3D modeling functionality. More specifically the script interface component may include a low level engine API a browser specific component a glue layer and a script API . In some implementations the script interface component is a plugin. The browser specific component may be for example an ActiveX component configured to wrap or operate as a proxy for the functions of the 3D modeling engine so as to operate specifically in an ActiveX framework if the browser application is a Microsoft Explorer browser or a compatible application. As another example the browser specific component may be a Netscape Plugin Application Programming Interface NPAPI component . The script interface component typically includes only one of the browser specific components . . . N.

The low level engine API provides an interface between the 3D browser specific components and the 3D modeling engine so that the same 3D modeling engine can be used in multiple or all browser applications which in some cases are provided by different manufacturers. For example in an embodiment the same 3D modeling engine can be used in a Microsoft Explorer Mozilla Firefox or a Google Chrome browser application and a respective one of the browser specific components makes the 3D modeling engine compatible with the corresponding framework via the low level engine API .

The glue layer may be implemented in an Interface Description Language IDL for example to bridge browser specific components with the script API which provides access to at least some functions of the 3D modeling engine and in some cases other functions exposed by the browser application via a scripting language interpretable by the browser application at runtime. The script API may be provided in Javascript for example. Generally speaking the script API allows users to efficiently extend customize and configure the 3D modeling engine via various scripts and in some cases the user interface layer .

In an embodiment 3D modeling engine includes collaborative functionality. In another embodiment however the 3D modeling engine does not include collaborative functionality and the script API is used to add collaborative functionality to the 3D modeling sub system via one of the scripts . For example referring back to the scripting API in the computing environment may be similar to the script API and the collaboration function may be developed as discussed above so as to add collaborative functionality to the modeling engine . In yet another embodiment the 3D modeling engine provides several different mechanisms that can be used for collaborative modeling on a communication network and the script API is used by one of the scripts to select and access the desired mechanism. An example of this approach is discussed in more detail below.

Referring again to the user interface layer may define user interface functions for 3D modeling in the browser application . More specifically the user interface layer may provide functions for manipulating objects e.g. drag drop highlight within a window which the browser application allocates and controls for 3D modeling. Further the user interface layer may provide various interactive controls displayed within the window. These interactive controls may be for example icons on which a user may click to select stock objects texture or color objects rotate objects scale objects etc. The user interface layer may be implemented using a suitable Software Development Kit SDK for developing front end scripts such as Asynchronous Javascript and XML AJAX instructions that run on different types of browser application. In an embodiment the user interface layer is implemented using Google Web Toolkit GWT .

To better illustrate example techniques which some of the devices discussed above may utilize to provide collaborative functionality an example modeling scenario is considered next with reference to . It is noted that although collaborative development techniques are discussed below in relation to 3D models these or similar techniques also may be applied to 2D drawings and other types of data. For ease of explanation the scenario is discussed with reference to the client devices and the modeling server of . However it will be understood that this scenario also may apply in relevant part to client devices that implement the computing environments of or the client side 3D modeling subsystem of as well as to the devices operating in the communication system illustrated in .

According to an example scenario user Abe operating the client device begins to develop a 3D model such a model illustrated in . User Abe initially is a single developer of the model . As can be seen in the model includes a house component and a garage component . Each of the components and in turn may include several sub components. For example the house component includes a door walls including a southern wall S and an eastern wall E visible in and a roof while the garage component includes a roof a door and walls including a southern wall S and an eastern wall E visible in . As also can be seen in the model may include other components such as windows and a chimney for example the discussion of which is omitted for ease of illustration. According to one embodiment each of the components illustrated in is made up of one or more elements such as 3D geographic shapes cuboids spheres pyramids etc. In another embodiment the components of may be generated using groups of two dimensional faces squares circles triangles etc.

The modeling client may generate components of the model according to commands received from user Abe. For example to draw the roof Abe may draw multiple shapes and group the shapes using the user interface of the modeling client e.g. by selecting several shapes with a mouse and activating an icon for generating a group of selected shapes . In general a model can have nested components at multiple levels. For example Abe may group several shapes to define a window frame component then group the window frame component with several 3D shapes to define a window component create several instances of the window component and group these several instances into a larger multiple windows component etc. Further in some embodiments the modeling client may allows users such as Abe to first define components as groups including multiple 3D shapes and possibly other components and then generate multiple instances of the defined component. When a user later edits an instance of a component the changes are automatically applied to other instances of the component according to an embodiment.

In an embodiment the modeling client utilizes the data structure to represent a selected component of the model in a serialized format. Generally speaking by generating a serialized representation a component branch a device operating in a collaborative development environment permits another device such as a client device or a modeling server to properly resolve conflicts and address collisions between modifications submitted at several devices using OT techniques. A serialized representation of a branch may include a sequence of basic 3D shapes cuboids spheres etc. that make up the corresponding component in an embodiment.

As an additional example collaborative OT based development of a text document may be briefly considered and contrasted with development of a 3D model. If two users collaboratively edit version V of a string of text S such as This is modeling modifications to the string can be easily expressed in terms of text editing commands e.g. insert delete replace etc. applied at specific character positions within the string S. For example a first user may wish to insert the world collaborative following the eighth byte of the string S according to version V and a second user may replace the word is in fifth and sixth bytes of the same version of the string S with the word was. If the command from the second user is applied to the string S first the unmodified command from the second user is then applied to the wrong portion of the string S. However the commands from the first user and the second user can be easily reconciled by modifying the index at which the new word is to be inserted in this case the index can be modified to indicate the ninth byte rather than the eighth byte . In fact in the example above regardless of the order in which the two uses submit modifications to the string S the conflict between the two commands is easily resolved if the version V to which the corresponding command is applied is known. Thus modifications to documents in which data is represented linearly e.g. text documents or in terms of numbered cells e.g. spreadsheets can be concurrently performed using indexing relative to a known version of the document. It is noted that this approach is compatible with lock based as well as lock free collaborative development.

On the other hand unlike text or spreadsheet data the model is not easily described in a linear manner. The modeling client may generate the data structure to describe the model as a hierarchical tree structure and when necessary generate serialized descriptions of branches to report updates to other devices for example. The collaborative development system of may define a set of operations recognized at participating client devices such that the operations may be described with reference to the serialized descriptions of component branches. For example the set may include such operations at delete move and resize. Thus an OT based description of how a certain component branch has been modified at a client device may include an indication that a delete operation was performed on the first sub component such as a cuboid and a resize operation was performed on the fourth component such as a sphere in the serialized listing of the component to consider just one example.

With continued reference to the modeling client may generate a unique component identifier for a branch in the data structure so that when multiple users collaboratively develop the model they can unambiguously identify components within each other s copies of the data structure . In one embodiment the modeling client generates a component identifier for a component at the time when a user defines the component. For example once Abe defines the garage component the modeling client may generate a component identifier as a string of alphanumeric characters and store the generated component identifier as an attribute of the branch . In another embodiment the modeling client generates a component identifier for a component in response to receiving an indication that a user wishes to edit the component during a collaborative development session. The component identifier in some embodiments is generated randomly. For example the modeling client may generate the component identifier that conforms to a Globally Unique Identifier GUID format and as such is associated with a low probability of duplication. In an embodiment the modeling server verifies whether the component identifier generated at the client device is available. Further the client device may maintain a look up table e.g. a hash table to quickly retrieve component identifiers for various components of the model .

Referring back to Abe may then decide to invite another user Bob to edit or further develop the model in collaboration with Abe. To this end Abe may activate a control provided by the collaboration modeling client e.g. a toolbar icon or a button labeled invite to generate an invitation to Bob in the form of an electronic message transmitted over the network for example. The invitation includes Bob s email address in an embodiment. The modeling client may automatically prompt the user to supply a name for the model and verify using the modeling server whether the supplied name is unique. User Abe for example may name the model AbesModel. The modeling client also may automatically group all previously ungrouped geometry i.e. 3D geometric shapes under the root node into a single component so as to enable component by component locking during subsequent collaborative development. In some embodiments the modeling client then uploads the model data to the model storage automatically or in response to a corresponding command from Abe.

The modeling client does not directly provide user level controls for collaborative 3D modeling according to an embodiment. Instead the modeling client may provide a library of functions which various programs such as scripts interpreted at runtime by the browser application may invoke according to the desired collaboration method. For example as discussed above with reference to and modeling software may include a script API for extending the functionality of the corresponding 3D modeling engine. In an embodiment the modeling client exposes the library of collaboration functions via a collaboration API. Referring back to for example the collaboration API may be provided as a component of the scripting API . As another example the collaboration API may be a portion of the script API illustrated in .

The library of functions may include for example an invite function to generate an invitation to a specified user or specified host a group geometry function to group the 3D shapes under the root node etc. In this manner the functionality of the modeling client can be extended to support collaboration in more than a single manner. For example a script may utilize the collaboration API to provide a lock based framework a set of controls and a mechanism to notify users of modifications performed at other client stations.

In an embodiment the collaboration API provides a transform function which a script or a compiled program may invoke with a parameter list that include the identifier of an entity e.g. a component an element such as a 3D basic shape etc. an operation selected from a predefined list e.g. translate rotate scale and a user identifier. The collaboration API also provides a new component function to add a definition and or an instance of a component under the root node . The new component function may be invoked with a definition of the new component a user identifier and a component identifier. Also the collaboration API may include functions start edit edit and end edit which the corresponding script invokes when a user begins to edit a component edits the components and completes editing the component respectively. In an embodiment invoking the function start edit causes the collaboration API to automatically lock the component and invoking the function end edit causes the collaboration API to automatically unlock the component.

If desired the collaboration API also may support non edit or social operations. For example the collaboration API may provide a chat function to send a specified text string to a specified user. The collaboration API also may provide a fly function to allow a user who has changed his eye location i.e. the perspective of the model to notify other users of the change. Further the collaboration API may provide a sync function to allow a user to request the latest version of model data from the modeling server . Still further the API may provide enter and exit functions to permit a user to enter and exit a collaborative development session respectively.

In the scenario considered above the collaboration API and or the modeling client may transmit the invitation to the modeling server and not directly to the client device . The modeling server then may include a link to the model data and forward the invitation to Bob s email address. For example the invitation may be formatted as follows http modelshare AbesModel.model where .model is an extension used by the modeling client . Once Bob receives and attempts to process the invitation the copy of the modeling application executing on the client device may verify that collaboration functions e.g. the collaboration API are provided on the client device . If the collaboration API is not yet installed on the client device the modeling client may automatically prompt Bob to download and install the collaboration API. To this end the invitation or the model data may include a link to a location from which the collaboration API may be retrieved. Once the collaboration API is installed a copy of the model may be received directly from the client device or from the model storage for editing at the client device so that the copy stored at the model storage corresponds to a master copy which the modeling server maintains according to the updates received from the client devices and . However in other embodiments the modeling server does not maintain a master copy and each of the client devices and locally manages a local copy of the model data .

After Bob has accepted Abe s invitation Bob may begin to work on the 3D model using the client device at the same time as Abe. For example Abe may wish to modify the house component while Bob may wish to edit the garage component . However it is also possible that both Abe and Bob may decide to edit the same component of the model at the same time. Further Abe and Bob may wish to modify components corresponding to different branches of the data structure . For example Bob may wish to add a tool shed as a new component of the model while Abe continues to edit the house component . Bob s addition in this case may require that a new branch be added directly under the root node . Depending on the embodiment Bob would need to lock the entire model to add a new component lock only the root component while allowing modifications to be applied to the house branch or not apply a lock at all and instead rely on an OT technique or a similar methodology to apply changes to the model in a lock free manner. As briefly discussed above the collaborative development system of may provide one or several mechanisms for avoiding or resolving conflicts between modifications applied at different client devices.

According to the example scenario introduced above Abe may operate the device and user Bob may operate the device . The device may include 3D modeling software and a collaboration API similar to those discussed with reference to . Referring back to Abe may lock the branch corresponding to the house component . The collaboration API e.g. in response to a command from a script executing on the device may generate a lock message that identifies i the component using for example a component identifier generated as discussed above and ii Abe as the user requesting that the component be locked for exclusive editing by Abe. The collaboration server may verify that the component has not yet been locked and forward the lock message to the device as a message . In an embodiment the collaboration server also updates the status of the component in a table local to the collaboration server . In this manner if another user attempts to lock the component the collaboration server may determine the status of the component and reject the request to lock the component . Further in some embodiments the collaboration server generates a lock confirmation message not shown and transmits the lock confirmation message to the device in response to the lock message .

After the client device has successfully locked the component user Abe may modify the component . In particular user Abe may apply a set of modification commands to the component including for example commands to delete shapes add shapes reposition shapes resize shapes apply different colors or textures to elements etc. Abe may then notify the collaboration server of the modifications to the component by activating a corresponding control on the user interface such as an update button for example. The control causes an update message to be generated including i an indication of the component to which modifications are applied and ii a description of the modifications and or of the modified component according to an embodiment. The update message may include a version identifier to specify a version of the model or the component to which the modifications have been applied in an embodiment. Similar to the examples discussed above the 3D modeling software and or the collaboration API executing on the client device may provide functions and data structures to permit scripts to define user controls generate and transmit messages etc. In another embodiment the collaboration API generates an update message automatically after a certain number of modifications applied to the currently locked component periodically e.g. once every two minutes in response to detecting that Abe has finished her edits of the component or according to another suitable scheme.

In still another embodiment modifications of the model at the device are reported to the device in real time. For example after a user moves the house component via the user interface of the device the modification is immediately reported as a move operation to the collaboration server and thereafter forwarded to the client device . A user operating the device may then see the modification on the user interface of the client device .

In an embodiment the collaboration API of the device generates a serialized representation of the branch that describes the component to be included in the update message . For example the collaboration API generates a linear listing of the elements and or sub components of the component so that the one or several modifications of the component applied at the device can be specified relative to the specific elements included in the component . As a more specific example referring back to the elements under the house branch corresponding to the house component may be sequentially listed as Doors Roof N Wall S Wall E Wall W Wall . . . . In this embodiment the house branch may be traversed in any suitable manner but the traversal method at the device should be recognized at the device to avoid misalignment of elements.

In an embodiment the serialized representation of the component branch also may include an indication or description of modifications M M . . . Mapplied to the elements and components that make up the component branch . For example the listing may include a description of the Roof component and an indication a flag a bitmask etc. that the Roof component has been modified at the device . In another embodiment the update message may identify only the modifications applied to the component relative to a version of the component available at the device and or the collaboration server . The description of modifications conforms to an OT format according to some embodiments. Of course the update message in some cases may specify only one modification.

In another embodiment the message includes a description of a new version of the component and does not specifically indicate which elements within the component have been modified. Similar to the embodiment discussed above the message need not include a description of the entire model and may include only the description of the modified component. However according to this embodiment another client device may simply replace an older version of the component with the new version. In general the update message may describe the house component in any suitable manner.

With continued reference to the collaboration server may forward the update message to the device as a message . In an embodiment the collaboration server also modifies the master copy of the model according to the update message and generates a new version identifier for the updated version. Referring back to for example the modeling server may update the copy of the model data in the model storage . For example if the update message indicates that the modifications M M . . . Mwere applied to version V of the model the collaboration server may update the master copy of the model generate version identifier V 1 store the new version identifier V 1 along with the modified master copy of the model and include the version identifier V 1 in the forwarded message . In other embodiments the collaboration server does not update a master copy of the model and merely forwards the modification information to the device .

For ease of illustration only one instance of the update message is shown in . However client device in general may transmit any number of update messages prior to unlocking the component. When Abe completes modifications to the component the collaboration API may generate an unlock message in response to Abe activating the corresponding control on the user interface of the device which in turn may be provided by a script executing on the device for example. As illustrated in the unlock message may identify the component . The collaboration server may forward the unlock message to the client device as a message . In an embodiment the collaboration server also updates the status of the component and or of the model in the model storage .

Next several example methods that may be implemented in the communication system or a similar environment to support collaborative development are discussed with reference to . In particular flow diagrams of several methods that can be implemented in a client device participating in collaborative 3D modeling on a network are illustrated in and flow diagrams of several methods that can be implemented in a collaboration server operating on a network are illustrated in . In general the methods of may be implemented using any suitable programming language and may be stored as instructions on a computer readable medium. The instructions may execute on one or several processors and may include compiled code instructions interpreted by another software application e.g. modeling software a browser or in any other suitable manner.

At block model data corresponding to a 3D model is stored as a hierarchical data structure. For example a tree data structure discussed with reference to may be used. In general the hierarchical data structure may include any desired number of levels and branches that may be specified by a user. Next at block a selection of a component of the model is received. In an embodiment the user selects the component for editing by highlighting a visual representation of the component on a user interface or by pointing to the visual representation of the component and activating a certain control e.g. a button . In another embodiment the user modifies a component activates a control on the user interface such as a button labeled update and the modified component is automatically selected at block . In yet another embodiment the component selection is received at block in response to detecting that a user has modified the component via the user interface.

In some cases several shapes in a model may be ungrouped at the time of selection. If the user selects one of the ungrouped shapes these shapes may be automatically grouped into a component at block . Further if the user selects several components corresponding to different branches of the data structure the lowest available parent branch that includes all of the selected branches is automatically selected. For example if the user selects the wall S and the roof of the model depicted in the entire house branch branch in is selected.

Further component data that includes a serialized representation of the selected component may be automatically generated at block . For example the techniques discussed with reference to may be used. In an embodiment the serialized representation of the component identifies modifications applied to particular elements within the component so that OT techniques can be applied to resolve collisions between concurrent modifications at several client devices. In another embodiment the serialized representation of the component describes the modified component without identifying particular changes to the component.

At block a unique component identifier for the selected component may be generated as discussed above. Component data that includes the unique component identifier and in an embodiment the serialized representation of the component generated at block is then provided in an update message generated at block . In an embodiment the update message generated at block is similar to the update message of . In particular in addition to the component identifier the update message generated at block may identify the user of the device in which the method is being executed.

At block a 3D model is generated as discussed above in response to various user commands. The user may then decide to modify a component of the model and at block modifications commands may be received. The component may be modified in accordance with the received commands at block . Next at block component data including a representation of the modifications may be generated. The representation of the modifications may be compatible with OT techniques. To this end the techniques discussed above with reference to may be used. At block an update indication that includes the OT representation may be generated. The update indication generated at block also may include other component data such a component identifier that uniquely identifies the component for example.

Next illustrates a flow diagram of an example method for generating an invitation for one or more users to join collaborative development of a model. The method is implemented in a collaboration API according to an embodiment. At block model data is received from a modeling application such as the modeling client for example. At block one or more email addresses or other suitable identifiers of users being invited to participate in collaborative modeling are received. For example an appropriate dialogue box via which a user may enter an email address may be displayed on the user interface. The invitations are then generated and forwarded at block to the invited users either via a collaboration server or directly depending on the embodiment. The collaboration server also may generate a GUID for the model. Depending on the embodiment an invitation forwarded at block may include one or more of an identifier of the user who has generated the invitation the model data received at block or a link to a location where the model data is stored e.g. the model storage illustrated in and a link to a location from which a collaboration API can be downloaded e.g. a website maintained by the collaboration server.

Now referring to an example method for processing update indications from one or several client devices can be implemented in the modeling server the collaboration server or a similar device. At block an indication of one or more operations applied to a model is received from a client device. The operations e.g. delete move resize correspond to certain modifications of the model. In an embodiment the operations are reported along with an identifier of a version of the model to which the operations were applied so that other devices may correctly apply these operations to the respective local copies of the model data in accordance with OT techniques for example.

At block the received operations may be added to an operation stack. The operations may also be assigned unique identifiers such as sequential numbers so that the relative order of the operations is preserved. Using the operation stack the collaboration server and or client devices may determine which operations have been performed at the client devices. For example the stack may store operations Oand Oprior to receiving the new operations Oand Oat block . The stack accordingly may store operations Othrough Oupon executing the method steps at block . Next at block the operations Oand Omay be provided to one or several participating client devices automatically or in response to a query from a client device depending on the embodiment.

In another embodiment a client device participating in collaborative development may at some point check in with the collaboration server and indicate the last operation performed at the client device is. For example the client device may identify operation Oas the last operation performed at the client device. In response operations Othrough Omay be retrieved from the stack and provided to the client device similar to the steps performed at block .

Thus according to the technique of operations reported by a client device are not necessarily applied to a centrally maintained copy of the model. Instead in at least some of the embodiments the operations are forwarded to participating client devices as appropriate and the client devices apply these operations to respective local copies of model data.

By way of a more specific example users Abe and Bob may be editing a model of a kitchen that includes a refrigerator. When Abe moves the refrigerator in her copy of the model a corresponding operation is reported to the collaboration server e.g. the modeling server and the operation is stored in the stack and assigned a certain number e.g. 6 . Bob may observe Abe s modification and not liking it delete the refrigerator. The deletion may be added to the stack as operation . Meanwhile Chad may be on a slow connection. Unaware that the refrigerator has been deleted Chad moves the refrigerator and the operation is added to the stack as operation . In this scenario at block operation is recognized to have rendered operation moot and operation obsolete as referring to a component that no longer exists . When Chad checks in to retrieve operations for application to his copy of model data only operation is provided. In an embodiment at block a master copy of the model is also updated in accordance in view of the results of conflict resolution between operations.

Generally speaking the methods discussed with reference to can be utilized in collaborative development implemented in a browser application a separate modeling application or in any other manner. Next is a flow diagram of an example method for collaboratively developing a 3D model in a browser application. For example the method may be implemented in the browser application of the browser application or of the browser application of etc.

At block a browser channel is created. For example referring back to the browser channel created at block can be similar to the communication channel set up between a client device and a collaboration server. Depending on the scenario the method may be invoked in response to a user inviting another user to participate in the development of a 3D model or in response to a user accepting an invitation from another user to participate in the development of a 3D model for example. In another embodiment a browser channel is automatically created when a user activates a browser window within a 3D model is displayed and collaborative functionality is made available for activation. In still other embodiments one or more browser channels are created in response to other events such as an explicit command from a user a command from a collaboration server etc.

At block one or several modifications commands are received from a browser application in which a 3D software modeling may be implemented. A user may enter the modifications commands via the user interface of the browser application such as the browser application of and the modification commands may be propagated to a 3D modeling engine such as the modeling engine via one or more intermediate components e.g. the user interface layer the low level API . As discussed above these modifications also may be referred to as mutations of a 3D model.

With continued reference to the modifications may be optimistically applied at block . In other words the modifications may be applied to generate an initial modified version of the model data with expectation that the modeling server will approve the modifications in their entirety. Next at block a description of the modifications is generated and provided to a collaboration server via the browser channel at block . At block server broadcast is received to indicate how the master copy of the model was modified at the modeling server in response to the modifications provided at block and in some cases one or more other modifications submitted from other client devices. According to some scenarios the modifications reported via the server broadcast are not the same as those applied at block . The modifications applied at block in such cases may be undone and new modifications consistent with the server broadcast received at block are applied at block to generate an approved modified version of the model data.

As a more specific example of operations that may be performed at blocks the client device of may optimistically apply Mutationto the model data i.e. to the local copy of a 3D model being collaboratively developed prior to or concurrently with sending Mutationto the server but in any case before receiving the description of server modifications as Mutationin a server broadcast. In some cases Mutationwill reflect the same modifications as Mutation. In other cases Mutationand Mutationwill be different in which case Mutationwill preempt Mutation.

The following additional considerations apply to the foregoing discussion. Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

For example the network may include but is not limited to any combination of a LAN a MAN a WAN a mobile a wired or wireless network a private network or a virtual private network. Moreover while only two client devices are illustrated in to simplify and clarify the description it is understood that any number of client computers or display devices are supported and can be in communication with the server .

Additionally certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code stored on a machine readable medium or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware and software modules can provide information to and receive information from other hardware and or software modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware or software modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware or software modules. In embodiments in which multiple hardware modules or software are configured or instantiated at different times communications between such hardware or software modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware or software modules have access. For example one hardware or software module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware or software module may then at a later time access the memory device to retrieve and process the stored output. Hardware and software modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods or routines described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented hardware modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. application program interfaces APIs . 

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm or a routine is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms routines and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to such signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. For example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the description. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Still further the figures depict preferred embodiments of a map rendering system for purposes of illustration only. One of ordinary skill in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for providing a collaborative browser based development framework for 3D modeling through the disclosed principles herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

