---

title: Self-service composed web APIs
abstract: Individual datasets are accessed using an application programming interface (API). Multiple APIs may be combined into a composite API that allows a user to access multiple datasets using a single query. The composite API may be designed to provide a simpler way to consume information from multiple datasets in response to a particular scenario or problem. The composite API may comprise multiple levels of intermediate APIs that call on each other to access desired datasets. A user may select the datasets that the composite API accesses and/or the composite API may require certain specific datasets. The composite API may be offered for sale or use by other users via a website, such as a data market.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262183&OS=09262183&RS=09262183
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09262183
owner_city: Redmond
owner_country: US
publication_date: 20120423
---
An application programming interface API is a specification intended to be used as an interface by software components to communicate with each other. Currently it is very difficult to sell and distribute APIs on the Internet or on any other networks. An API creator has to develop the backend such as create and populate a database and implement function calls to other APIs in order to expose the API. Furthermore if the API creator wants to sell the API then the API has to be integrated with complicated distribution and billing systems that typically require expert knowledge to use.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The API development system disclosed herein enables both casual API creators such as information workers and entry level developers and professional software developers to take existing APIs that are exposed on the Internet or on any other network and compose them through a composition user interface. These composed APIs can then be exposed as a new API and shared with others. Furthermore with one click the new API can be commercial enabled and sold through an online platform such as cloud computing marketplace or any other commercial application.

The API development solution may also automatically suggest to the user which APIs can be combined so that the APIs can be exposed in a meaningful way. The APIs that are suggested to other users are identified using semantics by analyzing other people s usage of the APIs and by analyzing other APIs in the same domain and how they are composed.

The API creation system also provides basic transforms and is extensible to add more complicated transforms to the user. This allows the user to compose powerful APIs and to expose them for use by others. Additionally the solution does not limit the user to composing only APIs. Instead the system is flexible enough to allow users to compose APIs data stores calls to crawl websites etc. and to expose them all as one API.

Large amounts of data are continuously collected and stored as datasets by independent data managers. These datasets may be available to users either on a free or subscription basis. Many of these datasets are stored in specific formats or must be accessed by a specific applications or APIs which makes access and integration difficult for potential users. The data managers often collect and organize the datasets for a particular purpose such as a proprietary application or business use. However each dataset either on its own or in combination with other datasets may also be useful to other users for different applications. The data manager may not have the motivation to create additional applications that use the dataset and or may not have knowledge of other users needs. Instead the data manager may just be a subject matter expert for the dataset. Similarly other users may have specific problems to solve using the dataset but may not have the skills required to create and manage the necessary data.

In one embodiment users may create a composite API that provides an answer to a specific question or that combines two or more datasets in a manner that is useful in a way that is not intended by the dataset creators. As a result the datasets are accessed more easily by other users. The composite API creator may then offer the API to other users for free or for a price for example via an API or dataset marketplace.

The datasets may be a data compilation stored in a database or a web service that returns a response based on input. Data compilations may include for example telephone and address verification and validation data sports scores and statistics current and historical financial business and employment data newspaper and magazine article databases and geographic mapping and atlas information. Web service datasets include for example language translation services or location based weather forecast. The datasets may use a standardized protocol for querying data. By standardizing the queries the data may be used without requiring a subscriber to learn or adopt a specialized interface for each dataset. The standardized queries may define for example messages for calling into the dataset messages for reading or using the dataset response standardized APIs standardized data formats and the like. In one embodiment the datasets use the Open Data Protocol OData which exposes information from a variety of sources such as relational databases file systems content management systems and web sites and allows a dataset subscriber to access to the dataset via HTTP messages.

Typically the user would have to query each dataset individually to obtain the desired information i.e. query datasets and and one of datasets using the appropriate API . The user would then process the desired information after querying and receiving responses from each dataset. However using composite API the user only needs to query one API in order to access all three datasets. The composite API is constructed so that it parses the user s query and generates relevant queries to the selected datasets.

In one embodiment a user may purchase or subscribe to composite API . The user identifies the appropriate datasets to the API to use in responding to queries. For example if the user is subscribed to datasets and then he or she would identify those datasets to API . The user does not need to access APIs to query the designated datasets because API generates the relevant queries to those dataset specific APIs. API collects the responses from the dataset specific APIs and after further processing provides an output to the user.

For example a user who is knowledgeable about fishing but does not have the skill or time to create and maintain the relevant databases may generate a composite API that identifies optimal times for fishing at different locations. The user may know how to combine location weather and fish information to identify optimal fishing conditions. Instead of individually querying a location dataset a fish database and a weather dataset the user instead provides a single query to API which in turn generates the relevant queries to datasets and and returns an answer to the user based upon the data obtained from the datasets. In this example datasets may be different weather datasets. Dataset may be selected over the other choices because for example the user already has a subscription the dataset the dataset is free the other datasets are less accurate or are for the wrong location etc. In other embodiments two or more or all of datasets may be available to API which selects which dataset to query or which queries all available datasets.

Once the user has created API he or she may offer API to other users via a website an on line data market or other source either for free or for a fee. New users may then access API to identify optimal fishing conditions using any combination of datasets that are selected by the new user. For example API may always require datasets and but new users may select any dataset to use with the composite API. In one embodiment the API creator and or data market does not have to provide dataset access but simply offers the composite API to new users or purchasers.

Alternatively APIs and may accept multiple inputs. As illustrated in APIs and each receive three different input types. For example if these APIs are associated with weather datasets then the inputs may be a location a time and a date. The composite API may provide any of these input types to selected API or depending upon the input provided by the user.

In another embodiment the query format used by API may require addition processing of the data produced by API . API may be used to convert an output from API to a format required by API . Alternatively API may query dataset to get information needed to query API . API uses data from dataset to make the conversion. API and dataset may also be used to convert data from API to a format useful to API in parallel with API or instead of API .

This would give the user additional flexibility so that API can select either API or API to generate the proper query for API based upon the information provided by the user to API . For example API may require queries to include a zip code. In one scenario API may be used to generate the necessary zip code if the user inputs a city identifier to API . In another scenario API may be used to generate the latitude longitude if the user inputs latitude longitude coordinates to API . This allows API to expose the data in selected datasets in response to queries using a variety of formats.

In other embodiments APIs and or may also be composite APIs so that users can embed multiple levels of APIs and composite APIs within other composite APIs.

The data marketplace content such as datasets and APIs is provided by dataset developers and or API developers . The content may be uploaded to marketplace by dataset developers and or API developers via a public or private network such as an intranet or Internet. In one embodiment some or all of the publishers and developers are independent from and unrelated to the operator of marketplace and the subscribers. Marketplace provides a centralized location for the dataset developers and API developers to offer their content to potential subscribers.

Datasets developer collects correlates and organizes information on selected topics industries locations and or events. The data dataset developer then makes the processed information available as a dataset on data marketplace . Datasets may use a standardized protocol for querying data such as the Open Data Protocol OData . A dataset subscriber may have an interest in or need for the information available in dataset developer s dataset . Data marketplace allows a subscriber to review many datasets from a number of different data developers without having to identify and seek out each dataset developer separately. Once subscriber selects a dataset subscription and billing module allows the subscriber to enter into a contract for access to the dataset. Subscription and billing module also handles billing to the dataset subscriber and payment to dataset developer .

APIs allow subscribers to access datasets . APIs may be created by a dataset developer along with an associated dataset . Alternatively an API developer may create an API that works with someone else s dataset. The API developer may then make the API available on data marketplace . An API subscriber may have a need for the capabilities of API to access a particular dataset. Data marketplace allows the API subscriber to review APIs from different API developers without having to identify and seek out each API developer separately. Once API subscriber selects an API subscription and billing module allows the subscriber to enter into a contract for access to the API. Subscription and billing module also handles billing to the subscriber and payment to the API developer .

In one embodiment one or more datasets and APIs are designed to operate in a cloud environment in which hosted services are delivered over the Internet. APIs may be sold on a flat fee or an on demand basis. APIs may also be elastic so that the user can have as much or as little of a service as required at any given time. Additionally APIs may be fully managed by the developer so that the subscriber needs nothing but a computer and Internet access.

Some APIs may be adapted to operate on external datasets that are not available via data marketplace . A subscriber to an API that requires an external dataset must provide access to the dataset used by the API. For example an API to a mapping or geocoding dataset may require the subscriber to provide a link or access to such a dataset. Some API subscribers will have access to the relevant data such as from proprietary or other databases and therefore only need subscribe to API alone. Other subscribers however may also need to subscribe to one or more datasets to be used by API . This would allow dataset and API subscriber to use API without having to provide or maintain the required data.

Data marketplace may also offer composite APIs that include a previously associated group of APIs . Composite APIs may use datasets or external datasets. A composite API developer may identify an API and one or more datasets that can be used together. Composite API developer creates a composite API that combines the selected APIs. The composite APIs may be associated with one or more datasets .

Each dataset and API in data marketplace may be associated with a subscription fee. For example a subscriber may be required to pay a fixed monthly fee to access a selected API or dataset. Alternatively or in addition to the fixed monthly fee the subscriber may pay a subscription fee that is based upon the volume of user such as a fee based upon the number of queries to a dataset or based upon the number of records processed by the API. In one embodiment subscription and billing module determines the type of fee structure associated with a selected dataset or API and changes the subscriber accordingly. This type of billing is appropriate for subscribers who have identified specific APIs and or datasets on data marketplace that they want to access. Subscription and billing module may bill these subscribers directly or indirectly for the use of the selected APIs and datasets .

However this subscription and billing methodology may not be ideal for other subscribers such as composite API subscriber who wants to use composite API . Subscriber would desire a single subscription instead of several separate subscriptions to the underlying APIs and to the datasets that are part of composite API . For example if one API in composite API has a flat fee monthly subscription and a second API the composite API has a per query subscription then composite API would have to track different subscriptions to use one composite API .

In some embodiments subscription and billing module combines individual subscriptions for the underlying datasets and APIs that are used in composite APIs and presents subscriber with a single invoice for the package. In this way the composite API developer and composite subscriber do not have to deal with multiple subscriptions which may each have different terms and rates.

In one embodiment each dataset and API indicates whether it may be combined with other content to create a composite API . The datasets and APIs may also designate one or more acceptable subscription plans that can be used in such a combination. The composite API developer or the subscription and billing module use these designated subscription plans to generate a composite subscription for the composite API .

A dataset or API indicates that it may be combined with other content into a composite package and designates one or more pricing models to be used. For example the API may designate one or more of the following subscription plans that may be used in pricing the composite package 

It will be understood that other pricing and billing models may also be used to determine the subscription rates of the composite API .

Subscription and billing module determines the appropriate billing model to be used for a composite API and bills subscriber a single fee for the subscription. Subscription and billing module then pays publishers and developers of the underlying datasets and APIs as required under the billing model.

The datasets and APIs may each have an associated end user license agreement EULA that defines the terms of use for subscribers. Data subscriber API subscriber and dataset API subscriber accept the terms of the EULA for the individual datasets or APIs to which they subscribe. Dataset API subscriber is subscribed to multiple items and accepts the EULAs associated with each selected dataset or API. However a subscriber to composite API has not selected the underlying APIs and datasets and therefore does not expect to be presented with multiple EULAs to use the composite package .

In some embodiments EULA composing module provides a composite EULA for a composite API . In addition to designating pricing models for composite packages APIs may also designate EULA provisions that are desired or required for a composite API. When a composite API developer creates a composite API EULA composing module identifies the EULA provisions required by the underlying APIs and datasets and combines those provisions into a single composite EULA that covers the composite API . Subscribers are presented with this single composite EULA for acceptance when subscribing to the composite API .

EULA composing module may use a set of rules to combine the EULA provisions from the combined datasets and APIs. The rules may provide guidance on how to handle conflicting EULA provisions. The rules may assist the EULA composing module in determining which provisions to include in the composite EULA such as the most restrictive or least restrictive of the conflicting provisions. The composite EULA may be automatically generated by EULA composing module and provided to interested subscribers . In other embodiments API developer may review proposed composite EULAs prior to release of a composite API. The API developer may approve or propose modifications to the composite EULA prior to release to interested composite API .

Composite APIs allow subscribers to access multiple datasets at one time using a single query. A composite API subscriber may only need a composite API from marketplace if the subscriber already has access to the datasets required by the composite API . For example data marketplace may provide a list of required and or optional datasets to be used with the composite APIs. The user may configure the composite API to point to the relevant datasets before use.

The composite APIs allow developers with knowledge of certain domains datasets or scenarios to combine those that information into new uses. The composite APIs make it easier to expose the answer to a particular scenario and to consume the information available in multiple datasets. Composite APIs expose rich combined datasets that would otherwise be too difficult to use. Composite APIs allow developers to optimize the individual datasets for user by subscribers without requiring the developer or subscriber to manage the underlying dataset.

Data marketplace may be configured to recommend additional APIs and or datasets to a composite API developer. For example the marketplace may learn which APIs are related to certain datasets. When a composite API developer uses a particular type of dataset the marketplace may recommend APIs for related datasets for the composite API developer to consider.

The developer and or user may also select one or more return fields in section . These return fields are supported by the composite application. The return fields may be unique to the composite API or may correspond to return fields supported by APIs that are embedded in the composite API. Generally the composite API will return all of the selected return fields. In other embodiments the return fields may be optional and or alternative and the composite API may return any of the selected return fields that correspond to data available in selected datasets.

Section allows the developer and or user to select the datasets to be used with the composite APIs. The selected datasets also include a pointer to the location of the dataset which may be a local network folder address and or an Internet address or uniform resource locator URL for example. The datasets may be pre configured to have a developer designated identity and or address such as a specific dataset that must be used by the composite API. Alternatively one or more of the datasets may be user selected datasets. The composite API may support multiple datasets for a particular feature. The user may select one or more datasets for that feature. The user selected datasets may be on a pre approved list or may meet certain pre defined characteristics to function properly with the composite API. For example the composite API associated with a weather application may require a specific geocoding dataset but may allow the user to select a weather dataset from a list of compatible datasets. The user may already have a subscription or other access to one of the weather datasets or may select an appropriate weather dataset for the user s location.

In step datasets that are available to users are identified. The datasets may represent datasets that can be accessed using the composite API or datasets that are required by the composite API to generate a desired response. In step information that is required to access one or more of the datasets is received. The information may be for example a pointer an address a file name or a URL that identifies where the dataset may be accessed.

In step the user provides a query to the composite API. In step a response is received from the composite API. The response is generated using data collected from the one or more datasets via the intermediate APIs. In other embodiments the composite API may support multiple query parameter and the user may select one or more query parameters to be supported by the composite API. The composite API may also be capable of providing multiple response parameters and the user may select one or more response parameters to be supported by the composite API.

It will be understood that steps of the process illustrated in and steps of the process illustrated in may be executed simultaneously and or sequentially. It will be further understood that each step may be performed in any order and may be performed once or repetitiously.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing various aspects of the invention may include a general purpose computing device in the form of a computer . Components may include but are not limited to various hardware components such as processing unit data storage such as a system memory and system bus that couples various system components including the data storage to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media . Computer readable media may be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media but excludes propagated signals. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium or computer readable storage device which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above may also be included within the scope of computer readable media. Computer readable media may be embodied as a computer program product such as software stored on computer storage media.

The data storage or system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM. RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation data storage holds an operating system application programs and other program modules and program data.

Data storage may also include other removable non removable volatile nonvolatile computer storage media. By way of example only data storage may be a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The drives and their associated computer storage media described above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer .

A user may enter commands and information through a user interface or other input devices such as a tablet electronic digitizer a microphone keyboard and or pointing device commonly referred to as mouse trackball or touch pad. Other input devices may include a joystick game pad satellite dish scanner or the like. Additionally voice inputs gesture inputs using hands or fingers or other natural user interface NUI may also be used with the appropriate input devices such as a microphone camera tablet touch pad glove or other sensor. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface. The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked or cloud computing environment using logical connections to one or more remote devices such as a remote computer. The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include one or more local area networks LAN and one or more wide area networks WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a networked or cloud computing environment the computer may be connected to a public or private network through a network interface or adapter . In some embodiments a modem or other means for establishing communications over the network. The modem which may be internal or external may be connected to the system bus via the network interface or other appropriate mechanism. A wireless networking component such as comprising an interface and antenna may be coupled through a suitable device such as an access point or peer computer to a network. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It may be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

