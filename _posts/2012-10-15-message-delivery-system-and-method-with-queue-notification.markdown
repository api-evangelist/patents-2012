---

title: Message delivery system and method with queue notification
abstract: In a message delivery system, messages are published by publishers and delivered to subscribers based on subscriptions relating to message content. Activation and de-activation notifications are supplied to applications that are bound to a queue in the message delivery system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09426115&OS=09426115&RS=09426115
owner: Solace Systems, Inc.
number: 09426115
owner_city: Ottawa, ON
owner_country: CA
publication_date: 20121015
---
This invention relates to data communication networks and in particular methods of providing notifications of activation and de activation to applications binding to a queue in a message delivery system.

In the prior art many message delivery systems exist which route messages between endpoints such as between different applications or clients. The messages may be routed to destination endpoints based on topics queues characteristics of the message content or a combination of criteria such as a topic to queue mapping. In the case of a system that routes messages based on topics there are publishing or producing clients that generate messages and subscribing or consuming clients that receive messages. A given client may act as both a producer publisher and a consumer subscriber . When a publishing client creates a message it adds to it a topic. Destination endpoints are created by subscribing clients that have associated with them a series of subscriptions or interests that are used to attract messages to the subscribing client. Alternately subscriptions may be used to attract messages to a queue endpoint which one or more clients can connect to and receive messages. The topics are typically text strings that often contain sub fields also known as hierarchical levels but maybe also be numbers. Interests or subscriptions are of a similar form to the topics but may contain regular expressions also known as wild cards or if the topics are in the form of numbers the interests could be in the form of a range of numbers. If the messages are to be routed based on the message content then the subscriptions are in the form of regular expressions designed to match a portion of the content or an expression in a query language such as SQL or XPATH if the message content is in XML format . The interests are gathered by the message delivery system and are used to determine which destination endpoint s should receive a copy of a particular message received from a publishing client in a process called matching. In the topic based message delivery system the process of matching involves comparing the topics of messages received from publishing clients to the interests gathered from subscribing clients or queues. A match to an interest is generated when the topic of the incoming messages falls within the regular expression s contained in the interest. The present invention is also applicable to systems that route messages based on the content of the message as described in U.S. Pat. No. 7 627 570 and U.S. Pat. No. 7 801 857 the contents of which are herein included by reference.

In the prior art it is common to have two types of queues to hold messages for delivery to subscribing clients non exclusive queues and exclusive queues.

With a non exclusive queues multiple subscribing clients can connect to or bind to the same queue at the same time and the messages in the queue are distributed amongst the connected subscribing clients using algorithms such as round robin or any other such load sharing mechanisms. This allows a number of subscribing clients to share the workload of the queue and offers scalability to increase the workload capability and also provides resilience since there are a number of attached subscribing clients that can service the workload. If a given subscribing client fails the workload will be shared among the remaining active subscribing clients.

With an exclusive queue only one subscribing client at a time will receive messages from the queue. The first subscribing client to bind to an exclusive queue will receive all messages. In the preferred embodiment of the prior art other subscribing applications are also allowed to bind to the same queue but they will not receive any messages but simply are on standby . If the first subscribing client disconnects from the queue perhaps due to a failure of the client or the inter connecting network the next subscribing client that had previously bound to the queue will be selected and will become the exclusive recipient of messages from that queue. Such an arrangement is suitable for message flows which only allow a single subscribing client at a time to process the message flow. However there is still a form of resilience since if the current active subscribing client fails another subscribing client which is waiting will start to receive the messages in the queue.

If the message system of the prior art does not allow multiple subscribing clients to bind to an exclusive queue with one active and the others in standby then the alternative is to only allow one to bind the active one and reject the bind attempts to the queue for all other subscribing clients. Such rejected subscribing clients would have to poll in the background i.e. attempt to re bind to the queue on a timed basis. Alternatively the clients could communicate amongst themselves to determine when another subscribing client needs to take over from the current active one. Such implementations provide a much slower recovery time due to polling rather than being event driven. Moreover it greatly increases the complexity of the subscribing client application logic.

In prior art systems that offer queues and allows multiple subscribing clients to bind to the queue with subscribing clients being active or inactive for message delivery if a current active subscribing client fails the system will automatically start delivering messages to the next selected subscribing client. However in prior art systems there is no notification mechanism to the subscribing clients to tell them upon binding to the queue whether the subscribing client is active or not for message reception from the queue. Moreover the subscribing client is not informed when it becomes active. Rather it simply starts to receive message from the queue. The subscribing client has to infer it is now the active subscribing client when it receives the first message. However it may need to take action long before it receives the first message when it is the active subscribing client such as updating its state notifying other entities etc. When it becomes active there may be no messages available for delivery at that time and thus a significant amount of time may pass before the next message is available for delivery and thus informing the subscribing client that it is now active. Also if a client has been selected to be active but there is something wrong with the publisher s that are supposed to places messages into the queue the client has no way of knowing. A lack of received messages could be due to the client not being selected as active or because the publisher s are not functioning correctly and not producing messages or the queue might be improperly configured and unable to receive messages for example the queue might be listening to the wrong set of topics . There is also no mechanism to inform an application that the message delivery system has decided for some reason such as an administrative action to stop delivering messages to the current active subscribing client and has selected a different client to be active.

The invention provides a message delivery system that includes a method to a indicate to subscribing clients binding to a queue when they become an active client to receive message from the queue and b to indicate to an active subscribing client bound to a queue if it is no longer an active subscribing client. This provides the subscribing clients to a queue the information they need to more effectively participate in message reception from the queue.

According to the present invention there is provided in a message delivery system comprising a queue provisioned for the delivery of messages to a plurality of subscriber clients bound to the queue wherein a certain number of said subscriber clients can be active at any one time to receive messages from the queue a method of managing the subscriber clients bound to the queue comprising the message delivery system i determining which of the subscriber clients bound to the queue is are currently active ii sending a message to an active subscribing client for the queue indicating that it is currently active and iii sending a message to an inactive subscribing client for the queue indicating that it is currently inactive.

The queue may be an exclusive queue in which case only one subscribing client may be active at any one time although it may also be a limited queue in which only a certain number of subscribing clients greater than one may be active at any one time. The limited queue works in essentially the same way as an exclusive queue. For example if the limited queue will accept six active clients and a new subscriber client arrives the system will not be able to accept it as active unless another subscribing client of lower priority is made inactive.

Each time there is a change in active inactive status a notification message is sent to the affected subscribing clients.

According to another aspect of the invention there is provided a message delivery system comprising a queue provisioned for the delivery of messages to a plurality of subscriber clients bound to the queue wherein a certain number of said subscriber clients can be active at any one time to receive messages from the queue and a processor configured to i determine which of the subscriber clients bound to the queue is are currently active ii send a message to an active subscribing client for the queue indicating that it is currently active and iii send a message to an inactive subscribing client for the queue indicating that it is currently inactive.

In yet another aspect the invention provides a method of binding a subscriber client to a queue in a message delivery system comprising a queue provisioned for the delivery of messages to a plurality of subscriber clients bound to the queue wherein a certain number of said subscriber clients can be active at any one time to receive messages from the queue comprising on receiving a bind request from a new subscriber client binding the new client to the queue determining whether to accept the new subscriber client as an active subscriber client and sending a notification message to the new subscribing client notifying it of its active inactive status.

There are many example message delivery systems known in the art for example U.S. Pat. No. 7 716 525 Buchko herein included by reference describes a method of providing assured message delivery.

The client endpoints may produce messages publisher consume messages subscriber or produce and consume messages publisher and subscriber . In the example of the messages are transmitted from publishing client s to queue . Four subscribing clients are connected to or bound to the queue shown respectively by queue flows . A flow indicates that a given client is bound to a specified queue the client may be active or inactive for that queue at a given time and thus the flow may be currently in the active state or the inactive state. In subscribing client is active represented by the solid line on flow and subscribing clients are inactive for the queue in standby mode represented by dashed line on flows . Message on flow is an example of a message being delivered from queue to active subscribing client .

Message delivery system contains configuration information for queue to store some configuration options for the queue. Maximum active count determines the maximum simultaneous active subscribers for queue . If the maximum active count is set to 1 then queue is an exclusive queue as there can only be one active subscribing client at a time for the queue . Any other subscribers bound to the queue at the same time are inactive. If the maximum active count is set to a very large number or to a special reserved value which means infinite then the queue is a non exclusive queue and an effectively unlimited number of subscribers can be active for queue at the same time. If the maximum active count is set to a number such as 2 then only that number of subscribers can be active for the queue at the same time and any additional subscribers bound to the queue are inactive. This makes queue a non exclusive queue with a limit to the number of active subscribers. Whenever queue is said to be an exclusive queue the maximum active count is set to 1. Note that the present invention applies equally to a queue which allows only a single active subscribing client or a plurality of active subscribing clients.

Immediate flag determines whether the binding of a new subscribing client to queue has immediate effect or a delayed effect on what subscriber s are active for the queue as described later. The priority of a newly bound subscribing client may make it a candidate to be one of the allowed active subscribing clients if priority is used as the basis of selecting the active subscribing clients.

Message delivery system contains state information for queue to keep track of which subscribing clients field are bound to queue an optional priority value field for each bound subscriber where in this example a higher priority number indicates a greater or more important priority for the selection of the active subscribing client and a status value field for each bound subscriber indicating whether the subscriber is an active subscribing client or one of the inactive subscribing clients for the queue . While in this example state information contains four subscribers it can contain information for any number of subscribers. While the example state information shows a single active client there can be a plurality of active subscribing clients and a plurality of inactive subscribing clients for queue as controlled by maximum active count .

The microprocessor is shown as a single entity however there may be multiple microprocessors present in the system each of which may contain multiple processing cores. The microprocessor is responsible for receiving all stimuli from clients and generating all responses. Assured message delivery systems must be resilient to a variety of different failures such as a component failure loss of power system crash network failure client failure or other messages received from publishing clients along with delivery status of destination clients must be stored in non volatile storage so that the system can recover from failure with no loss of information. Non volatile storage may be in the form of a disk solid state disk SSD battery backed RAM capacitor backed RAM or a combination of RAM and other non volatile storage as described by Buchko. Some prior art implementations of assured message delivery systems utilize a small but very fast and more expensive transitory non volatile storage in combination with a much larger but slower and less expensive non volatile storage techniques for which are described by Buchko. In the case where a small transitory non volatile storage is used a larger non volatile storage which may be a disk internal to the message delivery system or an external storage device is required. External storage devices are accessible by standard storage area network SAN technologies such as fiber channel iSCSI FCoE SAS eSATA infiniband or other. The connection to external storage is a device that converts between the system bus and the SAN an example of such a device is known in the art as a host bus adaptor or HBA. Use of an external storage offers the advantage that it can be reachable from other systems which may be used to facilitate system level redundancy.

The connection to mate is an optional component that is used to communicate state information to a mate system for redundancy. In some implementations of an assured message delivery system the connection to mate may be combined with the non volatile storage as described by Buchko. The connection to mate is used to transfer messages along with state information about the messages and the destinations for the messages. The connection to mate could be a dedicated point to point link implemented using proprietary technology or it could be implemented using standard networking technology such as Ethernet TCP IP Infiniband or other.

The optional matching engine is a hardware engine designed to offload the microprocessor of the task of matching. In many implementations the matching is performed by the microprocessor . Message delivery systems deliver messages received from publishing clients to subscribing clients that have indicated an interest in receiving messages that match a certain criteria. In many implementations the publishing clients add a meta data topic to the message this topic is compared by the message delivery system to interests that it has collected from subscribing clients in a process called matching. For each message received from a publishing client the message delivery system will deliver a copy of the message to each subscribing client that registered a matching interest also known as a subscription . Alternately the message delivery system could use aspects of the message content itself to match published messages to interests from subscribing clients. The process of matching can be an onerous task when there are large topic sets and large numbers of interests. In these situations the application of a hardware engine designed specifically to perform the task such as the matching engine can enhance system performance. A publishing client may instead add a meta data queue name or identifier to the message this queue name or identifier is used to route the message to the correct named queue. The optional matching engine can also be used to offload microprocessor the task of determining the destination queue.

Subscribing client requests a connection to the queue via a bind request . A bind request indicates which queue to connect to and can provide other parameters for the connection such as receive window sizes and other delivery policies. The bind request could optionally provide a priority to indicate the preference of the client to be selected as the active client the priority value of . Alternatively the priority value could be an administered property of the subscribing client on message delivery system determined through the client authentication procedure not shown or through other techniques. The message delivery system returns a bind acknowledge to indicate to the subscribing client whether the bind request was successful or not. The bind acknowledgement could also optionally contain a notification of whether the subscribing client is currently active or not for the queue or a separate flow active indication or a flow inactive indication could be sent instead after the bind acknowledgement. Due to activity of other subscribing clients not shown in or administrative actions on the message delivery system a given subscribing client can later become active or inactive for queue . This is indicated to the subscribing client by the message delivery system sending a flow active indication or a flow inactive indication . The subscribing client can request to be disconnected from the queue by sending an unbind request and the message delivery system will acknowledge this with a flow unbind acknowledge . The subscribing client can also be unbound from the queue through an administrative action on the message delivery system in which case the message delivery system can send an unbind acknowledgement to the subscribing client to tell it that it has been asynchronously unbound from the queue . This would also tell the subscribing client that it is no longer active for the queue if it previously was active. Message delivery system could choose to send an explicit flow inactive indication before the unbind acknowledgement . A subscribing client can also be unbound from the queue due to a failure in the communication path that is detected by the message delivery system through use of keep alive or heartbeat handshakes or other techniques known in the art. In this case subscribing client is automatically unbound from the queue and if it had been active another subscribing client bound to queue if any will be selected and notified that it is now active via a flow active indication . Note that in this scenario when the subscribing application logic typically implemented in an Application Programming Interface used to interact with message delivery system detects that it has been disconnected from the message delivery system and thus unbound from queue it must indicate to the application logic that it is no longer an active application for queue as if it received a flow inactive indication or an asynchronous unbind acknowledgement as per above . Another scenario is another subscribing client of higher priority binds to the queue . This would cause message delivery system to indicate to the previously active subscriber that it is no longer active by sending it a flow inactive indication and the message delivery system would send a flow active indication to the higher priority new active subscribing client. In the case of maximum active count greater than 1 this scenario would occur if a newly binding subscriber becomes one of the set of active subscribers allowed for queue and a previous active subscriber is no longer one of the set of highest priority bound subscribing clients for queue and becomes an inactive subscribing client.

In the flow active indication and the flow inactive indication are shown without acknowledgements but such messages could optionally also be acknowledged that is the subscribing client could return an acknowledge back to the message delivery system after receiving the flow active indication or the flow inactive indication . This allows the message delivery system to re transmit these messages if they are not acknowledged in a timely manner.

The second stimulus to the flow chart starts at step where a subscribing client is unbound from the queue . This could occur via the subscribing client explicitly sending an unbind request or by the subscribing client disconnecting from the message delivery system or via an administrative action on the message delivery system or the message delivery system detecting that it can no longer communicate with the subscribing client or through a number of other possible stimuli. The state information is updated to remove this subscribing client from the state information for the queue. At step a check is made whether the subscribing client being unbound from the queue was an active subscribing client for the queue. If not then processing completes at step . If yes the logic proceeds to step in which if possible a flow inactive indication is sent to the unbound subscribing client to tell it that it is no longer active. This may not be possible if the client is no longer in communication with the message delivery system. However as described above the Application Programming Logic which interacts with the message delivery system should inform the application logic that it is no longer active for the queue when it detects it is no longer connected to message delivery system . If the client explicitly unbound from the queue then the flow inactive indication is optional as the subscribing client explicitly asked to be unbound. At step state information is consulted to see if another subscribing client is available to be chosen as an new active subscribing client. If there are multiple choices then priority value can be used to choose the highest priority client which is currently not active. If priority is not in use any other policy can be used such as selecting the oldest bound client selecting the newest bound client or any other policy. If a new subscribing client is selected then state information is updated to indicate that this client is now active for the queue and a flow active indication is sent to the new active subscribing client. Processing then completes at step .

In step when a new subscribing client binds to queue the immediate flag can optionally be used as part of the selection algorithm. If immediate flag is set indicating immediate then when a new higher priority subscribing client is bound to the queue it takes priority over an existing lower priority active subscriber. This makes the new bound subscriber active and a previously active lower priority subscribing client is made inactive. Thus the subscribing client priority has immediate effect. However this may not be desirable in all situations. For example if a high priority subscribing client is currently active for queue and then that application fails e.g. restarts that client will be unbound from queue and another waiting lower priority subscribing client will become active for that queue. When the failed high priority client restarts and rebinds to queue immediate flag controls whether the failed application becomes active immediately upon binding or simply waits as an inactive client and will be later chosen as the active client if a currently active client later unbinds from queue . If immediate flag is not set indicating non immediate or in other words delayed action then the binding of a new higher priority subscribing client does not over ride a currently bound and active lower priority client for queue . Instead when a currently active client unbinds from queue for any reason state information is consulted at step and the highest priority remaining inactive client is selected to be active. It is sometimes desirable to not allow priority to have immediate effect to stop activity from switching back and forth among subscribing clients if they fail and then recover.

While the above description was in reference to a single example queue it will be appreciated by persons skilled in the art that a message delivery system can simultaneously support multiple queues with each queue having its own associated state information and configuration information . A given subscribing client can connect or bind to multiple queues at the same time and can be active for multiple different queues while also being inactive or on standby for multiple different queues. In addition the same subscribing client can also be bound to multiple non exclusive queues at the same time as being bound to multiple exclusive queues. The present invention also allows message delivery system to serve as an activity election mechanism amongst applications. Queue can serve as an election mechanism. Subscribing clients bind to queue to request possible election as active. Flow active indication serves as notification that a given subscribing client has been elected as active flow inactive indication serves as notification that subscribing client is not elected including being un elected after previously being elected . Priority value allows priority to be taken into account in the election of activity Immediate flag allows control of whether upon a new subscribing client of highest priority requesting election whether such election occurs immediately or is delayed until the currently active subscribing client is no longer willing or able to be active. Maximum active count allows control of whether a single or multiple applications are allowed to be active or elected at a time. Since the message delivery system supports multiple instances of queue and associated state information and configuration information multiple independent election mechanisms are supported. It will be appreciated by persons skilled in the art that many variants of the invention are possible. For example while this invention was described with an assured message delivery system it equally can be applied to other qualities of message delivery service such as a non assured delivery system.

