---

title: Watermarking screen capture content
abstract: Information is displayed on a device by writing data to a buffer in memory, the content of the buffer describing a screen display of the device at a particular point in time. A watermarked version of the buffer content is generated by watermarking the content of the buffer with data, such as data identifying a user of the device and/or a copy of a program (e.g., an operating system) running on the device. The watermarked version of the buffer content is then made available, such as in response to a screen capture request. The data embedded in the watermarked version of the content is undetectable (or nearly undetectable) to the human eye, but can nonetheless be extracted by other computing devices or data extraction systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09123106&OS=09123106&RS=09123106
owner: Microsoft Technology Licensing, LLC
number: 09123106
owner_city: Redmond
owner_country: US
publication_date: 20121213
---
As computing technology has advanced computer programs have become increasingly complex resulting in programs that take a large amount of time to build and test. This increased complexity has resulted in programs that provide significant functionality and usability but the development of these programs is not without its problems. One such problem is that a large number of people can be involved in the development of these programs including people employed by the program developer as well as third parties. While these people are typically required to keep information about these programs confidential information about these programs can sometimes be intentionally or inadvertently released. When such information is released it is desirable to know who released the information so that appropriate remedial action can be taken e.g. in order to prevent future releases . Unfortunately when information regarding a program is released it is oftentimes difficult to determine who released the information making it difficult to take any remedial action.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In accordance with one or more aspects a content of a graphics buffer of a computing device is obtained. This content of the graphics buffer describes a screen display at a particular time. The content of the graphics buffer is watermarked with data identifying one or both of a user of the computing device and a copy of a program running on the computing device and the watermarked content of the graphics buffer is stored or otherwise made available e.g. in response to a screen capture request .

Watermarking screen capture content is discussed herein. Information is displayed on a device by writing data to a buffer in memory the content of the buffer describing a screen display of the device at a particular point in time. The content of the buffer is updated as the information to be displayed changes and the device updates the screen display based on the content of the buffer at a particular interval e.g. 30 times per second . A watermarked version of the buffer content is generated by watermarking the content of the buffer with various data such as data identifying a copy of a program e.g. an operating system running on the device and or a user of the device. The watermarked version of the buffer content is then made available such as in response to a screen capture request. The data embedded in the watermarked version of the content is undetectable or nearly undetectable to the human eye but can nonetheless be extracted by other computing devices or data extraction systems.

Computing device includes a user input module a buffer one or more programs and a screen capture watermarking system . User input module receives user inputs from a user of computing device . User inputs can be provided in a variety of different manners such as by pressing one or more keys of a keypad or keyboard of device pressing one or more keys of a controller e.g. remote control device mouse track pad etc. of device pressing a particular portion of a touchpad or touchscreen of device making a particular gesture on a touchpad or touchscreen of device and or making a particular gesture on a controller e.g. remote control device mouse track pad etc. of device . User inputs can also be provided via other physical feedback input to device such as tapping any portion of device an action that can be recognized by a motion detection or other component of device such as shaking device rotating device bending or flexing device etc. and so forth. User inputs can also be provided in other manners such as via voice or other audible inputs to a microphone via motions of hands or other body parts observed by an image capture device and so forth.

Programs are various software and or firmware programs that can be run on computing device . Each program can be any set of instructions that can be executed installed interpreted or otherwise run on computing device . Programs can include programs installed on computing device programs copied to and run on computing device without installation script programs run on computing device and so forth. Programs can include an operating system of device and or other applications run by an operating system or other application of device .

Buffer is memory the content of which describes a screen display that is to be displayed by the device e.g. on a screen of the device at a particular time. Buffer is also referred to as graphics memory or a graphics buffer and can be changed at various intervals to reflect changes in the information to be displayed. One or more programs can alter the data stored in buffer at various times to reflect the information that the one or more programs desire to have displayed to a user of computing device . The data in buffer is used by a graphics system e.g. of computing device to generate a screen display for device which is the image or information displayed by device . The graphics system can generate a screen display at various intervals e.g. 30 times per second in response to a change in the data in buffer and so forth . Computing device can include one or more components e.g. displays projectors etc. on which data is displayed by device or alternatively device can generate one or more signals that are output to other devices or components e.g. other devices including displays projectors etc. that are separate from computing device .

In one or more embodiments buffer can be a screen buffer. Programs write to the screen buffer the data describing the information that the programs desire to have displayed to a user of computing device . A graphics system which may be included at least in part in an operating system of computing device which can be a program generates information to include in a frame buffer based on the content of the screen buffer. The frame buffer identifies color values for every pixel of a display and the graphics system uses the frame buffer to generate the screen display at a particular point in time. Alternatively buffer can be other buffers in computing device . For example buffer can be a frame buffer.

Screen capture watermarking system includes a screen capture module and a watermarking module . Although screen capture watermarking system is illustrated as separate from program at least part of system can alternatively be included as part of a program e.g. be included as part of an operating system of device .

Screen capture module manages screen capture functionality of device . In response to a screen capture request screen capture module obtains the content of buffer . The obtaining the content of buffer is also referred to as a screen capture. A screen capture request is a request for an image of the current screen display typically the screen display when the request is received . Any of a variety of user inputs as discussed above can be used to input a screen capture request such as pressing a print screen key of a keyboard selecting a particular hot key sequence selecting a menu item entering a particular gesture on a touchscreen providing a voice command and so forth. The content of buffer is the data stored in buffer .

Watermarking module manages watermarking functionality of device . Watermarking as used herein refers to embedding data in an image by altering the image in a manner that is undetectable or almost undetectable visually to a user. A watermarked altered version of an original image is generated by watermarking module that is indistinguishable or almost indistinguishable from the original image to the human eye. Thus a user looking at the watermarked and original versions of the image sees very little if any difference between the two versions of the image. Although a user may not be able to discern any difference between the two versions of the image a data extraction system can analyze the watermarked version of the image and readily extract the data embedded in the watermarked version.

Programs are typically pre release or test versions of programs that are to be kept confidential. This confidential nature of programs as well as the fact that programs may be tracked is made known to users prior to obtaining and or running the programs. The programs are obtained and or run by computing device only after receiving user acknowledgment of this confidential nature of the programs and only after receiving user consent to track programs . For example the user may take an affirmative action acknowledging the confidential nature of programs and requesting that the tracking of programs be performed before programs are obtained and or run by computing device . After programs are no longer pre release or test versions of programs system ceases performing the screen capture watermarking discussed herein for programs .

Screen capture module receives or is otherwise notified of a screen capture request . Screen capture request can be received via any of a variety of user inputs as discussed above. In response to screen capture request screen capture module obtains the buffer content from buffer . Module can obtain the buffer content in various manners such as copying the content from a location known to be buffer invoking an application programming interface API or other mechanism supported by the graphics system for obtaining data from buffer and so forth. Module provides the obtained buffer content to watermarking module . The obtained buffer content provided to watermarking module is data describing an image an image of the screen display which is typically an indication of the color values for every pixel of the image. Depending on the manner in which buffer is implemented module optionally converts the data in buffer into a format that includes an indication of the color values for every pixel of the image. As buffer content includes an indication of the color values for every pixel of the image buffer content can also be referred to as an image.

Alternatively rather than obtaining buffer content from buffer module can send a request or otherwise inform buffer to provide buffer content to watermarking module or module can send a request or other information to watermarking module causing module to obtain buffer content from buffer . In such embodiments depending on the manner in which buffer is implemented watermarking module optionally converts the data in buffer into a format that includes an indication of the color values for every pixel of the image.

Regardless of how watermarking module obtains buffer content module obtains data to embed in buffer content . In one or more embodiments data includes data identifying a copy of a program running on the device implementing system e.g. a program of . Data may additionally or alternatively include information about the user of the device implementing system . Watermarking module can obtain data from a data store that can be implemented in various manners such as a registration data store e.g. an operating system registry a database or other information store a secure memory location e.g. that can be read from but not written to except by a secure or trusted processor or module and so forth. Alternatively rather than obtaining data from a data store watermarking module can retrieve data from the program can generate data e.g. based on the instructions of the program based on data returned from the program in response to a request from module and so forth can retrieve data from elsewhere e.g. another module or component of system and so forth.

Data can include various information. In one or more embodiments different copies of programs have different identifiers. A copy of a program refers to the code e.g. instructions binaries configuration data etc. of the program obtained by a particular user or other entity. For example a program may be an operating system and multiple users may download or otherwise obtain a copy of the same operating system although the operating system itself can be the same for all of the users that obtained a copy of the operating system each user obtained their own copy of the operating system. Data includes an identifier that identifies a particular copy of the program. For example when a program is obtained by the device implementing system an identifier of the obtained copy of the program is also obtained. The identifier of the copy of the program is associated with that copy of the program e.g. included in the copy of the program and is moved with the program if the program were to be moved e.g. copied or otherwise transferred to other devices. Thus the data identifies the copy of the program regardless of what computing device is running the program.

Data can alternatively or additionally include the identity of a user of the device implementing system . This user of the device can identify for example a current user of the device and or a user that obtained the copy of the program on the device. The user of the device can be an individual or other entity such as a company a division of a company another group and so forth. Data can alternatively or additionally include other information such as an identifier of the device implementing system identifiers of other programs running on the device implementing system various characteristics of the device implementing system e.g. an Internet protocol IP address a media access control MAC address etc. and so forth. The data is also discussed in more detail below.

In one or more embodiments a program e.g. program of is an operating system of the computing device that implements system and data is an identifier of a particular copy of the operating system. Other programs may be run at the same time as the operating system but data includes an identifier of the copy of the operating system rather than any of the other programs.

Alternatively one or more programs e.g. programs of can be other programs run by an operating system of the computing device that implements system and data is an identifier of particular copies of those one or more programs. The one or more programs for which identifiers are to be included in data can be determined in various manners such as being programs identified by a user of system programs identified by another component or module a currently active program a program for which a window is currently being displayed a program for which a window currently being displayed is a top level window and so forth.

Watermarking module embeds data in the obtained buffer content. The embedded data is very difficult for a user to detect visually but can be extracted by an extraction system that is aware of the technique used to embed the watermark. This technique can include various aspects such as secret keys and or methods that make it very difficult to extract the embedded data without knowledge of these aspects. Thus if a user were aware that data is embedded in the buffer content e.g. due to their consent to have the program tracked as discussed above the user is prevented from extracting the embedded data if the user does not have knowledge of these various aspects because of the difficulty such extraction would entail.

Generally watermarking module embeds data in the obtained buffer content by making alterations or changes to the obtained buffer content. These alterations or changes are also referred to as the watermark. Watermarking module can embed data in various manners such as by using statistics quantization to alter various different statistics regarding the data in the obtained screen buffer content. The embedding of data in the buffer content is discussed in more detail below.

The buffer content altered to embed data is referred to as the watermarked buffer content which is returned to screen capture module . Module makes watermarked buffer content available in response to screen capture request . Watermarked buffer content can be made available in various manners such as by storing content in a particular location where screen capture content is expected e.g. a clipboard returning content as a return value in response to request storing content in a data store e.g. a database and so forth.

It should be noted that although the user can be notified that a program is being tracked and consent to such tracking as discussed above the user need not be aware of what data is being embedded in the buffer content how the data is being embedded in the buffer content and or whether watermarked buffer content is being generated. The watermarked buffer content is visually indistinguishable or almost indistinguishable from the buffer content making it very difficult for a user to detect the presence of the watermark.

System differs from system of in that in system a screen capture request is not received by screen capture module . Rather screen capture module obtains buffer content in response to various other criteria being satisfied. This criteria can be for example an elapsed amount of time since a watermarked version of buffer content was last generated e.g. so that watermarked buffer content is generated at various intervals such as every 10 milliseconds every 100 milliseconds etc. a change in the screen display e.g. so that a watermarked version of buffer content is generated for each screen display a request from another device or module to generate a watermarked version of buffer content and so forth.

Once the criteria being used by screen capture module are satisfied buffer content is obtained and watermarked buffer content is generated as discussed above with respect to screen capture watermarking system of . Watermarked buffer content is made available by module in various manners such as by storing content in a particular location where screen capture content is expected e.g. a clipboard returning content as a return value in response to a request received by module for watermarked buffer content storing content in a data store e.g. a database storing content in buffer and so forth.

In the discussions herein data is discussed as being embedded in buffer content. The embedded data can include various information and typically includes one or both of data identifying a user of the device implementing the screen capture watermarking system and data identifying a copy of a program on the device implementing the screen capture watermarking system. Various different identifiers can be used as data identifying a copy of a program on the device. In one or more embodiments a product key associated with the program is used as the identifier of the program. Each copy of the program has an associated product key that is used to activate the program. To activate a particular copy of the program the product key associated with the copy is provided to an activation service typically over a data network such as the Internet a local area network a telephone network etc. . The activation service verifies that the provided product key is the proper product key for the copy of the program and activates the copy of the program for running on the device only if the product key is verified. The copy of the program can be restricted in various manners e.g. not allowed to run allowed to run only a particular number of times allowed to run with restricted functionality and so forth if the product key is not verified.

In other embodiments a fingerprint of the copy of the program is used as the identifier of the copy of the program. When the copy of the program is obtained by a computing device from an authorized source e.g. a server or service that distributes and that is permitted by the developer of the program to distribute the program a fingerprint is included in the copy of the program. The fingerprint can be included for example in a known e.g. predefined fingerprint location of the copy of the program. The fingerprint is generated by the authorized source and includes a user portion and or a program portion. The user portion can be generated by computing the result of a one way cryptographic function of information identifying a user e.g. a person a company or other entity that is obtaining the program. By using the one way cryptographic function the specific identity of the user cannot be derived from the fingerprint. This information identifying the user can be for example information used by the user to log on to the server or service that distributes the program.

The program portion includes information about the program. This information can be for example a program name a program version e.g. build number a timestamp when the program was created and or obtained combinations thereof and so forth. The fingerprint can optionally be signed such as using a private key of a public private key pair of the authorized source. This signature can be subsequently verified using the public key of the public private key pair and relied upon as an identifier of the program only if the signature is subsequently verified.

In the discussions here data is discussed as being embedded in the buffer content using watermarking. Although various different watermarking techniques can be used the watermarking technique used generally has the following characteristics. The watermarking technique results in watermarked buffer content that is undetectable or nearly undetectable to the human eye when an image from the watermarked buffer content is displayed to a user the image of the watermarked buffer content is indistinguishable or nearly indistinguishable from an image from the buffer content. The watermarking is thus typically not noticeable to the user.

The watermarking technique also operates quickly typically generating the watermarked buffer content in less than a threshold amount of time e.g. less than 33 milliseconds less than 20 milliseconds etc. . By generating the watermarked buffer content quickly the watermarking screen capture content techniques discussed herein do not result in noticeable delay to the user e.g. there is typically no delay resulting from the watermarking that is noticeable to the user in response to a screen capture request .

The watermarking technique also provides robustness against various compression algorithms. The watermarked buffer content may be subsequently compressed e.g. in response to a user request or as part of standard image file encoding and the watermarking technique is resistant to such compression. By being resistant to such compression the embedded data is more likely to be detectable after compression of the watermarked buffer content.

The watermarking technique is also a dynamic technique that adjusts based on the content in which the data is being embedded. The data is embedded in portions of the buffer content having higher entropy than other portions resulting in the data being embedded more quickly more robustly and with less likelihood of being visibly detectable due to the higher entropy of the portions in which the data is embedded.

In one or more embodiments the watermarking is performed based on statistics quantization. Portions e.g. rectangles triangles or other shapes optionally overlapping of the buffer content or of a transform thereof are selected. These portions can be selected in various manners such as pseudorandomly or according to other rules or criteria. A key used as a seed value for a pseudorandom number generation which is the basis for pseudorandomly selecting portions can be maintained as a secret e.g. by the watermarking module or another module that provides pseudorandom numbers to the watermarking module .

Statistics regarding the selected portions are generated. Various types of statistics can be generated such as averages of wavelet coefficients pixel intensities and so forth. The statistics for one or more of the selected portions are then adjusted or quantized to be in accordance with a particular pattern e.g. divisible by a particular number the particular pattern indicating the value of a bit e.g. a value of zero or a value of one . By adjusting or quantizing the statistics for multiple portions multiple bit values can be embedded in the buffer content and the data e.g. the different bits of the data can be embedded in the buffer content. In one or more embodiments the value of a bit is embedded in a selected portion only if the statistics indicate at least a threshold amount of entropy in the portion e.g. at least a threshold average pixel intensity value at least a threshold average wavelet coefficient value and so forth . A subset of the selected portions can also optionally be selected the subset being a number e.g. equal to the number of bits in the data to be embedded of portions of the selected portions having higher entropy than other portions e.g. the portions having greater average pixel intensities the portions having greater average wavelet coefficient values and so forth .

The watermarked buffer content generated by a screen capture watermarking system can later be analyzed and the data embedded in the watermarked buffer content extracted. Thus the copy of a program that was running when the screen capture occurred can be identified after the watermarked buffer content is generated.

Data extraction module can extract the data embedded in the watermark of the image in a variety of different manners. Data extraction module has knowledge of e.g. is programmed with or otherwise obtains how data was embedded in the image e.g. by watermarking module of or discussed above including knowledge of any keys methods and so forth used to embed the data. Given this knowledge of the manner in which data was embedded data extraction module can readily extract the data embedded in the image. For example data extraction module can use the same pseudorandom number generator and seed value to select portions of the image as were used by watermarking module and analyze generated statistics the same type of statistics as were used by watermarking module to readily identify what values if any are embedded in the selected portions.

The extracted data can then be used to identify the particular copy of the program that was running when the screen capture was made e.g. when a screen capture request was received . A record of the user e.g. a person a company or other entity associated with each copy of the program can be maintained e.g. by the developer authorized source of the program etc. allowing which user obtained the copy of the program running in the screen capture to be readily identified. By embedding data identifying the particular copy of the program no record of the device running the program need be maintained. The copy of the program could be run on any device whether known to the developer or authorized source or not and which user obtained the copy of the program running in the screen capture is still able to be readily identified.

In process buffer content is obtained act . The buffer content is content that describes a screen display that is to be displayed by a device. The buffer content can be obtained by various modules in different manners as discussed above.

The buffer content obtained in act is watermarked act . The watermarking can embed various data in the buffer content as discussed above. The watermarked buffer content is a version of the buffer content in which data is such that the data is undetectable or nearly undetectable to the human eye but can nonetheless be extracted by other computing devices or systems.

The watermarked buffer content is stored or returned act . The watermarked buffer content can be returned to a requester that provided a request in response to which the watermarked buffer content was generated can be stored in a particular location or data store and so forth as discussed above.

In process a screen capture request is received act . The screen capture request can be received as various different user inputs as discussed above.

In response to receiving the screen capture request buffer content is obtained act . The buffer content is content that describes a screen display that is to be displayed by a device. The buffer content can be obtained by various modules in different manners as discussed above.

The buffer content obtained in act is watermarked act . The watermarking can embed various data in the buffer content as discussed above. The watermarked buffer content is a version of the buffer content in which data is such that the data is undetectable or nearly undetectable to the human eye but can nonetheless be extracted by other computing devices or systems.

The watermarked buffer content is made available in response to the screen capture request act . The watermarked buffer content can be made available in various manners as discussed above. In one or more embodiments the watermarked buffer content is stored in a particular memory location where screen capture data is expected e.g. by the operating system by a user etc. and this location can vary based on the system implementing process and or the device which implements that system desires of the designer of the system implementing process and or the device which implements that system and so forth. For example the watermarked buffer content can be stored in a clipboard of an operating system running on the device that implements the system implementing process .

Various actions performed by various modules are discussed herein. A particular module discussed herein as performing an action includes that particular module itself performing the action or alternatively that particular module invoking or otherwise accessing another component or module that performs the action or performs the action in conjunction with that particular module . Thus a particular module performing an action includes that particular module itself performing the action and or another module invoked or otherwise accessed by that particular module performing the action.

Additionally although particular functionality is discussed herein with reference to particular modules it should be noted that the functionality of individual modules discussed herein can be separated into multiple modules and or at least some functionality of multiple modules can be combined into a single module.

The example computing device as illustrated includes a processing system one or more computer readable media and one or more I O Interfaces that are communicatively coupled one to another. Although not shown the computing device may further include a system bus or other data and command transfer system that couples the various components one to another. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated such as control and data lines.

The processing system is representative of functionality to perform one or more operations using hardware. Accordingly the processing system is illustrated as including hardware elements that may be configured as processors functional blocks and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions.

The computer readable media is illustrated as including memory storage . The memory storage represents memory storage capacity associated with one or more computer readable media. The memory storage may include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . The memory storage may include fixed media e.g. RAM ROM a fixed hard drive and so on as well as removable media e.g. Flash memory a removable hard drive an optical disc and so forth . The computer readable media may be configured in a variety of other ways as further described below.

Input output interface s are representative of functionality to allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices using various input output devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone e.g. for voice inputs a scanner touch functionality e.g. capacitive or other sensors that are configured to detect physical touch a camera e.g. which may employ visible or non visible wavelengths such as infrared frequencies to detect movement that does not involve touch as gestures and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card tactile response device and so forth. Thus the computing device may be configured in a variety of ways as further described below to support user interaction.

Computing device also includes a screen capture watermarking system . Screen capture watermarking system provides various functionality for watermarking buffer content for screen captures as discussed above. Screen capture watermarking system can implement for example screen capture watermarking system of screen capture watermarking system of and or screen capture watermarking system of . Alternatively rather than screen capture watermarking system computing device can include a watermark data extraction system such as watermark data extraction system of .

Various techniques may be described herein in the general context of software hardware elements or program modules. Generally such modules include routines programs objects elements components data structures and so forth that perform particular tasks or implement particular abstract data types. The terms module functionality and component as used herein generally represent software firmware hardware or a combination thereof. The features of the techniques described herein are platform independent meaning that the techniques may be implemented on a variety of computing platforms having a variety of processors.

An implementation of the described modules and techniques may be stored on or transmitted across some form of computer readable media. The computer readable media may include a variety of media that may be accessed by the computing device . By way of example and not limitation computer readable media may include computer readable storage media and computer readable signal media. 

 Computer readable storage media refers to media and or devices that enable persistent storage of information and or storage that is tangible in contrast to mere signal transmission carrier waves or signals per se. Thus computer readable storage media refers to non signal bearing media. The computer readable storage media includes hardware such as volatile and non volatile removable and non removable media and or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions data structures program modules logic elements circuits or other data. Examples of computer readable storage media may include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage hard disks magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other storage device tangible media or article of manufacture suitable to store the desired information and which may be accessed by a computer.

 Computer readable signal media refers to a signal bearing medium that is configured to transmit instructions to the hardware of the computing device such as via a network. Signal media typically may embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier waves data signals or other transport mechanism. Signal media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

As previously described hardware elements and computer readable media are representative of instructions modules programmable device logic and or fixed device logic implemented in a hardware form that may be employed in some embodiments to implement at least some aspects of the techniques described herein. Hardware elements may include components of an integrated circuit or on chip system an application specific integrated circuit ASIC a field programmable gate array FPGA a complex programmable logic device CPLD and other implementations in silicon or other hardware devices. In this context a hardware element may operate as a processing device that performs program tasks defined by instructions modules and or logic embodied by the hardware element as well as a hardware device utilized to store instructions for execution e.g. the computer readable storage media described previously.

Combinations of the foregoing may also be employed to implement various techniques and modules described herein. Accordingly software hardware or program modules and other program modules may be implemented as one or more instructions and or logic embodied on some form of computer readable storage media and or by one or more hardware elements . The computing device may be configured to implement particular instructions and or functions corresponding to the software and or hardware modules. Accordingly implementation of modules as a module that is executable by the computing device as software may be achieved at least partially in hardware e.g. through use of computer readable storage media and or hardware elements of the processing system. The instructions and or functions may be executable operable by one or more articles of manufacture for example one or more computing devices and or processing systems to implement techniques modules and examples described herein.

As further illustrated in the example system enables ubiquitous environments for a seamless user experience when running applications on a personal computer PC a television device and or a mobile device. Services and applications run substantially similar in all three environments for a common user experience when transitioning from one device to the next while utilizing an application playing a video game watching a video and so on.

In the example system multiple devices are interconnected through a central computing device. The central computing device may be local to the multiple devices or may be located remotely from the multiple devices. In one or more embodiments the central computing device may be a cloud of one or more server computers that are connected to the multiple devices through a network the Internet or other data communication link.

In one or more embodiments this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to a user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one or more embodiments a class of target devices is created and experiences are tailored to the generic class of devices. A class of devices may be defined by physical features types of usage or other common characteristics of the devices.

In various implementations the computing device may assume a variety of different configurations such as for computer mobile and television uses. Each of these configurations includes devices that may have generally different constructs and capabilities and thus the computing device may be configured according to one or more of the different device classes. For instance the computing device may be implemented as the computer class of a device that includes a personal computer desktop computer a multi screen computer laptop computer netbook and so on.

The computing device may also be implemented as the mobile class of device that includes mobile devices such as a mobile phone portable music player portable gaming device a tablet computer a multi screen computer and so on. The computing device may also be implemented as the television class of device that includes devices having or connected to generally larger screens in casual viewing environments. These devices include televisions set top boxes gaming consoles and so on.

The techniques described herein may be supported by these various configurations of the computing device and are not limited to the specific examples of the techniques described herein. This functionality may also be implemented all or in part through use of a distributed system such as over a cloud via a platform as described below.

The cloud includes and or is representative of a platform for resources . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud . The resources may include applications and or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Resources can also include services provided over the Internet and or through a subscriber network such as a cellular or Wi Fi network.

The platform may abstract resources and functions to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform . Accordingly in an interconnected device embodiment implementation of functionality described herein may be distributed throughout the system . For example the functionality may be implemented in part on the computing device as well as via the platform that abstracts the functionality of the cloud .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

