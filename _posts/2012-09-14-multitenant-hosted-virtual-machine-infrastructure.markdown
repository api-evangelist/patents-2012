---

title: Multitenant hosted virtual machine infrastructure
abstract: A multi-tenant virtual machine infrastructure (MTVMI) allows multiple tenants to independently access and use a plurality of virtual computing resources via the Internet. Within the MTVMI, different tenants may define unique configurations of virtual computing resources and unique rules to govern the use of the virtual computing resources. The MTVMI may be configured to provide valuable services for tenants and users associated with the tenants.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08635351&OS=08635351&RS=08635351
owner: Skytap
number: 08635351
owner_city: Seattle
owner_country: US
publication_date: 20120914
---
This application is a continuation application of U.S. application Ser. No. 13 276 153 which is a divisional application of U.S. application Ser. No. 12 434 620 filed May 2 2009 which is related to and incorporates by reference in their entirety U.S. application Ser. No. 12 434 619 entitled MULTITENANT HOSTED VIRTUAL MACHINE INFRASTRUCTURE filed May 2 2009 and U.S. application Ser. No. 12 434 621 entitled MULTITENANT HOSTED VIRTUAL MACHINE INFRASTRUCTURE filed May 2 2009. This application claims the benefit of each of U.S. Provisional Patent Application No. 61 050 163 filed on May 2 2008 and U.S. Provisional Patent Application No. 61 101 665 filed on Sep. 30 2008 each of which is hereby incorporated by reference in its entirety.

A virtual machine is a software construct designed to run computer programs like a real physical machine. As an example a virtual machine may comprise various software components for running executable code written for a particular computing platform. Such executable code may include among other things operating system code application programs software drivers and so on.

A virtual machine does not necessarily have a direct correspondence to a real physical machine however virtual machines are often designed to imitate the behavior of specific hardware architectures. As an example a virtual machine may be designed to imitate the behavior of an x86 processor.

Virtual machine infrastructures VMIs have been developed to coordinate user access to collections of virtual machines and to provide additional features such as virtual networking capability virtual data storage management and so forth. In general a VMI comprises a set of physical computational resources virtualization software for creating virtual machines on the physical computational resources and management software for managing the virtual machines and coordinating access to the virtual machines.

In one example a VMI comprises a set of physical computers each running multiple virtual machines. Users at separate remote access consoles access the different virtual machines over a local area network. Each console includes a virtual machine interface designed to allow a user to interact with a virtual machine in the same way that the user would interact with a local machine. For instance the virtual machine interface may present a user desktop and explorer windows similar to those found in an ordinary personal computer.

Within a VMI different virtual machines may be individually configured according to the users unique needs and preferences. For instance the different virtual machines may run different types of operating systems e.g. Windows Linux allowing the users to use different operating system specific programs within the VMI. Additionally each of the virtual machines may provide a different level of performance so that the resources of the single physical computer can be efficiently divided among users having different computational demands.

Recently large enterprises have begun employing complex VMIs to provide virtual computing resources for large groups of users. These users may work together but have different computational demands. As an example a company with hundreds of employees may set up a virtual data center comprising many physical machines each configured to run several virtual machines for use by the employees.

The virtual machines can be configured in accordance with the different computational demands and preferences of the different employees. For instance an employee whose job requires a significant amount of computing power say an engineer who runs test simulations on complex circuits may use a virtual machine configured with higher throughput and more memory compared with an employee whose job only requires the use of a few simple programs such as a word processor and an Internet browser. Similarly an employee whose job requires a relatively high level of system access say a system administrator may use a virtual machine configured with a higher level of access within the VMI compared with an employee whose job requires a relatively lower level of access.

Conventional VMIs are designed for use within a single organization i.e. a single company or group of users. In this type of VMI the operation of the virtual machines is governed by a common set of rules such as a common hierarchy of access rights usage rights quality of service guarantees and naming conventions. Additionally in this type of VMI the configuration of resources is controlled by a single administrative entity i.e. a single system administrator or group of system administrators.

A variety of embodiments will now be described. These embodiments are provided as teaching examples and should not be interpreted to limit the scope of the invention. Although specific details of the embodiments are presented these embodiments may be modified by changing supplementing or eliminating many of these details.

A shared computing infrastructure the infrastructure is described. In some embodiments a user can exploit the entire infrastructure using a standard web browser without having to install any specialized applications. The infrastructure supports the deployment of virtual data centers wherein each cluster comprises one or more virtual machines capable of transparently interfacing with computing resources located elsewhere in the Internet. As an example the infrastructure may execute a virtual machine cluster on physical machines within the infrastructure while users control the virtual machines through personal computers connected to the infrastructure via the Internet.

The shared computing infrastructure may incorporate a software environment and interface capable of facilitating the automation of specific virtualized infrastructure based services. As an example the infrastructure may incorporate a software platform that implements a portal where users can develop and exchange data that may be useful within the infrastructure. This data could include e.g. virtual network configurations and software applications that could be run within the virtual infrastructure. The data could be developed by individual users or by group collaboration within the infrastructure. Additionally the data could be exchanged with or without monetary payments.

For explanation purposes the shared computing infrastructure will be referred to as a multi tenant virtual machine infrastructure MTVMI . A MTVMI is a VMI adapted for use by multiple tenants where each tenant is an independent entity e.g. a set of users within a single company or other organization whose access to and use of the MTVMI is governed by a unique and independent set of rules. For instance each tenant in a MTVMI may have a unique and independent authentication mechanism access control model hierarchy of rights and privileges resource allocation control model resource usage control quotas service level agreements and billing.

Although the term tenant generally has a connotation related to the rental or occupation of property or space tenant in the current context should not be limited to entities having certain legal or logistical agreements or arrangements relative to the MTVMI neither should it be limited to entities who occupy a certain quantity of space or resources within a MTVMI. Rather tenant here merely refers to any entity having a certain logical relationship with the MTVMI as demonstrated by the examples and explanations presented in this written description.

Examples of multiple tenants sharing a MTVMI include different companies or groups of individual users. For instance an MTVMI could be shared by multiple large corporations each having its own cluster of virtual machines its own virtual storage management system and so on.

The left side of shows different tenants and connected to MTVMI through the Internet . Different users among tenants and may access MTVMI over corresponding secure internet connections. Typically a user accesses MTVMI by logging on to the infrastructure through an internet browser. Once the user logs on to MTVMI a user interface for MTVMI appears in the user s computer display to allow the user to access various features of MTVMI . In some embodiments the user interface appears similar to a normal computer desktop so that the user s experience is substantially the same as it would be if the user was interacting with a set of local resources. The user interface enables a user associated with a tenant to manage virtual machines such as by creating configuring starting and stopping virtual machines.

In general tenants can access MTVMI over the Internet from any Internet enabled device. As examples the MTVMI can be accessed through personal computers Internet enabled personal digital assistants PDAs and Internet enabled cell phones. In some embodiments where a user accesses the MTVMI using a portable device such as a PDA or cell phone the user does so with a web browser installed in the device much like the user would do in a personal computer.

Each tenant of MTVMI operates within its own unique virtual environment. The environment for each tenant may include for example one or more unique virtual data centers each comprising a set of virtual machines virtual storage and virtual network accessible to the tenant s users. The environment may further include methods for managing the cluster such as a hierarchy of user access rights limits on the amount of central processing unit CPU time and storage space available to the users and so on. Additionally the environment for each tenant may provide the tenant s users with access to specific software applications found in software library as well as one or more labs corresponding to instantiated virtual data centers that can be executed.

Within MTVMI virtual infrastructure comprises both a physical platform for running virtual machines virtual storage and virtual network and a software platform enabling the creation and management of the virtual machines virtual storage and virtual network. The physical platform may comprise computer hardware such as storage system and media servers comprising CPUs memory and related processing components and networking hardware such as network switches routers etc. The software platform may include e.g. a hypervisor for each server and software components for the storage system and networking components and software for managing them.

Within virtual infrastructure different functional components can be roughly partitioned into three groups including network nodes virtual machine host nodes and storage nodes. Network nodes include both hardware and software components for implementing virtual network functionality virtual machine nodes include hardware and software components for creating and hosting virtual machines and storage nodes include hardware and software components for implementing virtual data storage.

The composition and operation of example network nodes virtual machine host nodes and storage nodes is explained further below with reference to . Although the description treats these different nodes as separate features it should be recognized that the functionality of these nodes can be implemented by different hardware and software arrangements. Moreover the functionality of the different nodes will not necessarily be implemented within different physical or logical structures. In other words some components may implement functions for more than one type of node.

Software library comprises a collection of software programs data objects and or virtual data center configurations for use by different tenants of MTVMI . The software programs may include among other things specific operating systems to be run on virtual machines application programs to run within the virtual machines and any code used by tenants to maintain their own virtual resources. The data objects may include for example database files software configuration files and so forth. The virtual data center configurations may include e.g. specifications of network topologies and hardware and software specifications for individual virtual machines within virtual networks. One example configuration for a virtual machine could include 2 GHz virtual CPU and 1 GB RAM and run Windows XP.

Some of the programs and data in software library may be commercial software requiring individual or corporate user licenses. The licensing of these programs or data may be regulated in any of several different ways. As examples tenants or individual users could provide their own license keys for the programs or licenses could be provided as part of a tenant s agreement for using the MTVMI. In some embodiments MTVMI includes mechanisms for automatically negotiating the licenses with third party software providers in real time. In some embodiments licenses are purchased by the entity hosting the MTVMI so that users are not required to obtain their own licenses.

In some embodiments software library is divided into public and private libraries. A public library is a portion of software library accessible to any tenant using MTVMI . A private library on the other hand is a portion of software library accessible to only a subset of the tenants using MTVMI or to a subset of users belonging to a tenant. Public libraries may include for instance freeware software applications commercial operating systems and applications that can be provided to tenants for a charge based on usage shared data and so on. Private libraries may include for instance licensed or proprietary software for use by individual tenants specific data objects related to work performed by the tenant or the configuration of a tenant s virtual network. In some embodiments a library can contain a commercial operating system application or other program that when installed on a virtual machine will be customized with a license key owned by the installing tenant.

In addition to specific software programs and data structures software library may further include specific virtual data center configurations for use by individual tenants. A virtual data center configuration stored in the software library contains complete information for instantiating a set or cluster of virtual machines connected by a virtual network. The virtual data center configuration specifies capabilities of each virtual machine to be instantiated in the cluster including such attributes as number of processor cores amount of memory operating system for which the virtual machine is to be optimized etc. The virtual data center configuration further contains complete state for each virtual machine to be instantiated. Such state generally includes contents of a disk volume to be accessible by the virtual machine and may also include memory contents of the virtual machine and or processor status for the virtual machine including contents for registers including program counters. In some embodiments a user may upload a virtual machine image generated outside the MTVMI. This virtual machine image can be stored in the library and instantiated by the MTVMI in a lab.

Each of the labs is an instance of a virtual data center created by a tenant s user using the content in the software library. As an example one virtual data center may include several virtual machines with a particular operating system and particular applications as well as virtual storage that is together performing a batch application. The labs for a tenant may consist of any number of such configuration instances which can be in varying states including running and stopped.

Further descriptions of software libraries and labs are provided below with reference to . Various additional functions and benefits of software library will be readily apparent from the descriptions of .

MTVMI management application controls and monitors interactions between tenants and MTVMI . Additionally MTVMI management application allocates resources among different tenants and coordinates the use of MTVMI by the different tenants. Various management related tasks performed by MTVMI management application may include as examples authenticating users allocating CPU time and storage space among different tenants maintaining logical isolation between different tenants tracking each tenant s usage of MTVMI and many others. Additional examples of specific functions that can be performed by MTVMI management application are described below in relation to .

Tenant information such as virtual data center configurations and stored data within MTVMI may be generated in a variety of different ways. For instance in some embodiments the tenant information may be generated by a tenant s privileged user through manual operations on the MTVMI using its graphical interface. Alternatively virtual data center configurations and other tenant information can be generated for MTVMI by providing a machine container that describes an existing physical or virtual machine or cluster to a module within MTVMI and operating the module to generate a virtual data center configuration for use within MTVMI . Moreover virtual data storage facilities can be established and initialized within MTVMI by downloading data from an existing data storage platform into MTVMI .

Referring to in step a tenant establishes a relationship with a MTVMI host by submitting a subscription request to the host. In the subscription request the tenant may specify among other things a desired amount of resource usage within the MTVMI any desired features such as access to particular software applications and other terms for governing tenant s use of the MTVMI. A tenant s resource usage can be measured in any of several different ways including e.g. by a total amount of CPU time used by the tenant or by a total amount of time that users are logged on to the MTVMI.

Once a tenant has subscribed to use the MTVMI the tenant may establish its own virtual data center within the MTVMI. The tenant s virtual data center may include among other things a set of virtual machines a set of virtual networks and a set of data storage resources. The performance and capacity of the tenant s virtual data center may be limited by the tenant s subscription agreement however the tenant is generally free to configure the logical structure of the data center in any way desired. At a high level the tenant s process of establishing a virtual data center may be compared by analogy to the process that an organization goes through to establish a physical data center by purchasing a set of physical resources connecting the resources together and getting the resources to communicate with one another. However in contrast to a physical data center a virtual data center requires significantly less legwork on the part of the system architects and therefore tends to require much less time and expense.

As part of establishing the virtual data center in step the tenant establishes rules to govern use of the virtual data center. Examples of these rules include among others a hierarchy of access rights and software license privileges for different users constraints on network topology or evolution and limits on the amount of computational bandwidth and storage space allocated to different users. The access rights in addition to limiting use of certain resources by certain users may also limit the ability of certain users to change aspects of the virtual data center e.g. by adding additional machines and so forth. In many regards the rules governing the virtual data center can be established so they are similar to the rules that govern ordinary physical data centers in most organizations. The MTVMI provides the environment and tools for the tenant s user to establish these governance rules.

Once rules have been established for the virtual data center in step individual resources of the data center are configured. For instance certain software can be associated with certain virtual machines certain users can be assigned as the primary users for particular machines and so on. In this regard step is similar to the process of installing software and setting up user accounts in a normal non virtual data center.

Once resources have been configured for the virtual data center in step the tenant may continue to perform maintenance and monitoring on its virtual data center while the virtual data center is being used by the tenant s users. The maintenance and monitoring may include upgrading and patching various components modifying the set of users associated with the tenant measuring the resource usage by different users and so on.

Those skilled in the art will appreciate that the steps shown in and in each of the flow charts discussed below may be altered in a variety of ways. For example the order of the steps may be rearranged some steps may be performed in parallel shown steps may be omitted or other steps may be included etc.

After opening the Internet browser the user enters a URL for the MTVMI to load an MTVMI access portal website into the browser. In step the user logs onto the MTVMI through the access portal by supplying credentials such as a user name and password to the portal.

After the user logs onto the MTVMI the user has access to the software library labs and data store. The lab can have multiple configuration instances each of which can have multiple virtual machines. The display of the user s machine may be modified to show a desktop for any instantiated virtual machine in the labs. The desktop may resemble an ordinary computer desktop as is normally displayed on a personal computer. As a result the user may interact with the virtual machine in essentially the same way that the user would interact with a local machine.

Once the user is logged onto the MTVMI the user may interact with the virtual machine in much the same way that the user would interact with a non virtual local machine. In addition as will be described in greater detail with reference to a user who has logged onto the MTVMI may also perform actions such as creating a lab with multiple virtual machines and installing custom software applications on the different virtual machines for specific tasks.

Referring to in step the MTVMI receives a subscription request from a new tenant. As described above in relation to the subscription request may include among other things information specifying desired usage rights for the new tenant. In step the MTVMI generates account data for the new tenant based on the information provided with the subscription request. The account data may include e.g. information for regulating MTVMI access and usage by the tenant such as a data storage quota authorized users associated with the tenant a CPU quota network bandwidth quota and user authentication information.

After the account data is generated in step the MTVMI allocates tenant resources such as data storage space CPU time and so forth in some embodiments these resources are allocated on an on demand basis. In other words resources such as storage space and CPU time are only allotted to a tenant when the tenant performs an operation requiring the resources. In other embodiments however resources may be reserved for use by individual tenants regardless of whether the tenants currently need resources.

Referring to in step the MTVMI receives user login and or authentication information. Based on this information the MTVMI determines whether to allow the user to access the MTVMI. Upon granting the user access to the MTVMI in step the MTVMI allows the user to configure a lab and any related software. In step the MTVMI allows the user to perform authentication of any licenses for selected software. Alternatively the MTVMI selects a predefined virtual machine configuration for the user. Upon determining virtual resources and any configuration to be used by the user in step the MTVMI binds the selected predetermined virtual machine configuration to a virtual host by communicating with the hyperviser for the virtual host. In step the MTVMI begins executing the resources. During the execution of virtual machines within MTVMI the MTVMI may run a console application to generate information on the user s display. In particular the user can view and interact with the desktop console of the virtual machine in a display such as that shown in .

In the example of virtual infrastructure comprises a plurality of network nodes a plurality of virtual machine host nodes and a plurality of storage nodes each of which can be implemented using either general purpose commodity server hardware or server hardware more specialized to the roles of network processing virtual machine execution and high volume reliable storage respectively.

Each of the network nodes comprises one or more physical machines that establish a virtual LAN for each virtual network specified by one of the labs . A virtual network connects together the virtual machines of a network and enables them to access their corresponding virtual data stores on the storage nodes. In particular to implement a virtual LAN the network nodes establish an independent set of network services for each virtual LAN. These network services include such network services as virtual private network firewall network address translation dynamic DNS dynamic host configuration protocol service and traffic shaping. In some embodiments one or more of these services can be disabled for a particular virtual network. In some embodiments the separate sets of network services are used to meter the usage of network bandwidth and or network services individually for each virtual network. In some embodiments the user may configure a virtual data center to specify whether for each of these network services a standard version is executed in the network node or a specialized version is executed in the virtual machine. In a similar manner the user can configure other networking aspects of the virtual LAN such as by setting their own static IP addresses which are private only or public connecting individual VPNs from each virtual machine to their own corporate data center collectively connecting all the virtual machines in a configuration to their own corporate data center setting their own domain name running their own domain name server etc. In some embodiments one or more of these network nodes work cooperatively as a load balancing cluster or a failover cluster.

Each of virtual machine host nodes comprises one or more physical machines capable of executing one or more virtual machines. Each physical machine has a corresponding hypervisor and the one or more virtual machines runs on top of the hypervisor.

Each of storage nodes comprises one or more physical data storage media. These storage media may provide virtual storage for virtual machines and virtual data clusters running within the MTVMI. In some embodiments the MTVMI uses load balancing techniques to select for each virtual machine the storage node that is assigned to provide virtual storage to the virtual machine. In some embodiments the MTVMI further provides intelligent data placement dynamic data replication and or dynamic data migration. Intelligent data placement involves strategically selecting one or more storage nodes in which to store particular data. For example an image for a popular operating system may be placed on multiple storage nodes in order to provide for high expected demand for the operating system among virtual machines. Dynamic data replication involves creating additional copies of particular data on different nodes in order to provide better performance for accessing the data. Dynamic data migration involves moving data to a different storage node such as to relieve a bottleneck. Typically these mechanisms are implemented by monitoring and collecting data about the behavior of host nodes and or storage nodes and associated workload levels such as which objects are more used than others and policy intelligence for making determinations based upon this input. In some embodiments the storage nodes provide virtual network attached storage devices for use by virtual machines running within the MTVMI.

In some embodiments the MTVMI uses copy on write techniques that represent a child image stored at a later time for particular virtual machine as a set of changes made to a parent image stored for that virtual machine at an earlier time. In such embodiments a dependency exists in the child image on the parent image. Where the parent image is to be moved to a different storage node the MTVMI may migrate the child image with the parent image or it may break the dependency of the child image on the parent image by transforming the representation of the child image into a complete copy of the child image.

Additionally storage nodes may provide long and or short term data storage for tenant information such as virtual data center configurations and data archives. In various alternative embodiments storage nodes may be populated by users or tenants directly interacting with MTVMI or through automatic processes such as automatically downloading content stored in another data storage system.

The Storage Manager component of the VLAB is responsible for all storage related operations. The Storage Manager defines a distinct layer on top of the underlying storage products. The purpose of this layer is to present a unified view across these mechanisms both to centralize storage knowledge within the application and to insulate the rest of the application from the numerous details of the actual storage implementation.

Overall the client processes that embed the client library determine how to allocate responsibilities to individual storage nodes. For example the client processes determine for particular data that is to be stored on what storage node s to store it when to move particular data from one storage node to another when to replicate data on one storage node to another and in response to a retrieval request for particular data that is stored on each of multiple storage nodes which node to retrieve the data from. In making such determinations the client processes consider content capacity usage performance load health and affinity information that the Storage Manager collects and maintains for each of the storage nodes. In many cases determinations made by client processes involve determining a subset of feasible nodes then selecting a node from among the feasible nodes.

If new content must be stored that has a dependency on pre existing content e.g. creating a copy or snapshot of existing content then the nodes that have that pre existing content are the subset of feasible nodes. If content must be retrieved then the subset of nodes that have that specific content is the feasible subset. In selecting one node from among the set of feasible nodes the client processes seek to avoid nodes that are less healthy e.g. their disks are in a degraded state and to prefer nodes that have lower usage and load. Other choices are possible. In particular tenants of the service can be assigned an affinity to a specific subset of nodes and vice versa where a node is assigned affinity to a subset of tenants such that requests on behalf of that tenant will target this subset of affinity nodes.

Logic to determine which content should be replicated or migrated and to which node is also based on the same attributes as above. The logic additionally schedules these operations during a window when there is less performance impact. In addition system administrators can manually trigger replication migration of specific data to specific nodes.

Software library comprises software programs for use by tenants and associated users who interact with MTVMI . As examples software library may include a library of commercial and or private software applications available to a tenant and a set of software configurations created by the tenant or accessible to the tenant. In some embodiments software library may be connected to a licensing module to negotiate on demand licensing of proprietary software to tenants or management of a limited number of existing licenses among multiple users.

Management application comprises components for managing and monitoring user access to MTVMI . As shown in for instance management application may comprise an account management component for managing a tenant s account data a remote console component for displaying a graphical user interface in a user s local display a monitoring and metering component for tracking resource usage by different tenants and users a backup component for maintaining backup copies of the data stored by storage nodes an audit logs component for maintaining audit logs documenting all the actions performed by each tenant s users a network manager component for allowing a tenant to connect its own physical data center resources to MTVMI a VM host manager component for controlling the creation and functioning of virtual machines within MTVMI and a storage manager component for coordinating tenant and user access to storage nodes .

In addition to these components in some embodiments management application further includes a billing system component for monitoring a tenant s use of resources within MTVMI and producing an invoice. The monitoring may occur for example by tracking the amount of CPU time or data storage consumed by the users associated with each tenant.

In some embodiments management application further comprises a resource allocation module for facilitating inclusion of external i.e. non local or other third party resources into MTVMI . In this way MTVMI can be used to provide potentially brokered access to computing storage and network resources regardless of where the resources are physically located. Such access can be provided according to policies for achieving any number of tenant or user objectives such as e.g. cost reliability security availability and performance.

In some embodiments management application further includes a module for specifying a grid configuration of a virtual network based on input from a tenant. A grid configuration is a specification of the topology of a set of virtual machines and related networks and storage systems. The grid configuration module could generate the grid configuration by receiving a tenant s description of an existing physical or virtual network in the form of a tenant created file or data structure and then modifying the description into a form usable by MTVMI . The grid configuration can subsequently be imaged onto MTVMI for use by particular tenant or user.

Management application may further comprise a security component for allowing tenants to restrict the rights of users to specific physical or virtual resources configurations and other software resources within MTVMI . For instance when establishing an account for MTVMI a tenant could specify a set of users with access to a particular software suite within MTVMI and a set of users without access to the software suite. The security component could then monitor access to the suite based on the tenant s specification. Additionally the security component could issue alters or perform other actions in response to attempts at illicit access etc.

In some embodiments management application further comprises policy component allowing tenants to modify resource quotas among individual users associated with the tenant or among all users associated with the tenant. More generally the policy component could allow tenants to modify any aspect of the tenant s subscription agreement with MTVMI .

In some embodiments management application further comprises maintenance components such as patching and virus protection software for updating different the configurations of tenants different virtual networks backup or replication software for storing redundant copies of virtual machines application packages installation and testing tools and services etc. In general these maintenance components may operate with or without input from tenants or users with or without oversight by the entity hosting MTVMI and in a fully automated partially automated or non automated manner.

In components allowing tenant or user interactions with MTVMI such interactions may take place through a variety of different interfaces such as graphical interfaces command line interfaces programming interfaces and so on.

Management application may further include custom monitoring and management components created by tenants or users. To implement these custom features a user could create scripts or application programs using a scripting program or an application programming interface API compatible with MTVMI . To facilitate the creation of such programs management application may additionally include a software development platform for MTVMI . By allowing tenants and users to create custom software components MTVMI may provide flexibility and unique capabilities useful to a variety of users having a variety of needs.

In addition to the above described components and features management application may further comprise software applications for providing specific virtualization based services to tenants and users within MTVMI . Examples of such services will be described below with reference to . A more specific example of the service of will then be described with reference to .

In step MTVMI provides a brokering portal. In one example the brokering portal comprises a software application that presents a graphical user interface within a user s display. The graphical interface may include a mechanism for presenting available software and or data that can be downloaded by the user. The graphical user interface may further include a mechanism for allowing the user to upload software to the portal. In some embodiments the MTVMI grants access to the tenant to software that is already available within the MTVMI. The portal may require the user to provide a form of payment to download certain software or data. Alternatively the software or data may be provided free of charge.

In step MTVMI receives data from the user through the portal and stores the data in a common access area. For explanation purposes a user who uploads data to the portal is referred to as a seller in even though the portal does not necessarily require users to exchange payment for sharing data. Similarly a user who downloads software from the portal will be referred to as a buyer.

In step MTVMI presents data to potential buyers within the portal. In step where money transactions are involved in the transfer of data MTVMI facilitates those transactions e.g. by allowing users to debit or credit bank accounts deposit accounts within MTVMI or by adding incurred expenses to a tenant s MTVMI account.

In various embodiments the MTVMI and the portal together support a variety of uses including application development and testing online education pre sales software demonstration consulting platform and IP prototyping and operations.

Referring to in step a user accesses a virtual lab application within MTVMI . The virtual lab application may generate a graphical user interface on the user s display such as the interface illustrated in . Upon accessing the virtual lab application in step the user creates or accesses one or more projects. A project is a data structure or description that specifies a set of virtual resources and a set of users that can access the resources specified by the project. In some embodiments resource usage is separately measured and quota compliance is separately enforced for each project. By specifying both users and virtual resources the project allows specific lab instances to be developed through a collaborative process among the users. Example projects will be described in further detail below with reference to . In some embodiments a tenant s administrative user can specify resource permissions at a variety of different levels of scope including private scope in which permissions are established for a single user or tenant wide scope in which permissions are established for all users for a particular tenant. Resource permissions can also be specified at all tenant scope in which permissions are established for users of all tenants. Such permissions may relate to items from the software library the labs or asset lists established by or for tenants.

After establishing the project in step the user creates a lab by selecting and configuring particular resources within the project. As an example the user may select a set of virtual machines from the project specify particular operating systems for the virtual machines and identify software applications to be run on the virtual machines. Examples labs will be described in further detail below with reference to FIGS. and .

Once the project and lab have been created in step the user runs the lab to perform a particular computational task in this case a software test. An example of a software test performed in a virtual lab will be presented below with reference to .

The operation of the virtual lab service will be explained below using a concrete example involving an engineer uses a MTVMI to test an e commerce website on behalf of a tenant having users located in different parts of the world. The engineer may share components of the virtual lab with the other users associated with the tenant.

Dashboard includes information related to current projects and recently used items within the engineer s scope of user privileges. In particular dashboard includes a set of projects software libraries and labs associated with the engineer. The projects libraries and labs of may be created within the illustrated application or they may have been created previously.

In the current example we will assume that the engineer will deploy a lab that was previously created. To do this the engineer may simply select the lab from the list shown under the heading My Lab . As an example to select the lab illustrated in the engineer may select a lab entitled Company A Build . Similarly to select the lab illustrated in the engineer may select a lab entitled Company A Build . By selecting one of these labs the user can bring up the screen shown in or which will be described in further detail below.

In testing the e commerce site the engineer verifies the site s scalability and performance on virtual machines defined in the selected lab. A realistic test of a e commerce site typically requires a large number of machines. However the test generally only requires the use of the machines for a short period of time say a few days or weeks at most. Accordingly by performing the test in this virtual lab the engineer avoids the need to requisition actual hardware and the corresponding large expense as would generally be required to test the site in a non virtual environment.

In addition to eliminating the need to requisition physical hardware the virtual lab service also enables the engineer to quickly configure and launch a test environment. In contrast tests using actual machines often require hours of setup time for connecting machines installing software booting up the machines and so on. In selected embodiments of the virtual lab service virtual machines can be requisitioned and launched without requesting use of the virtual machines in advance. This is typically possible in a MTVMI where the amount of available computing power is large in relation to the instantaneous user demand.

In the examples of the status of each virtual machine e.g. running booting resuming can be indicated by both a textual indicator and a background color around the corresponding virtual machine icon. The virtual lab service may allow users to modify virtual network settings such as domains subnet attributes and IP addresses of virtual machines within a particular lab.

In some embodiments the virtual lab service enables the user to generate a snapshot of one or more running virtual machines such as a single virtual machine all of the virtual machines in a virtual network or all of the machines in a configuration. For example the user may select a visual control associated with the machine network or configuration in order to generate a snapshot. When a snapshot is generated complete state for each of the virtual machines including the snapshot is stored in the library. After the snapshot is generated this item may be selected from the library in order to instantiate any number of new instances of the set of virtual machines that were the subject of the snapshot. This is useful for example to establish a large number of initially identical instances of a particular configuration. Also in a testing project it can be useful for a tester who has just produced an error in a configuration being tested to establish a snapshot of the configuration that can be reviewed later by a developer to determine the conditions under which the error occurred.

In some embodiments the virtual lab service allows the user to generate for a particular virtual machine a URL that can be used in the absence of any other identifying information to access the console display for that virtual machine. This URL can be distributed to users that are not authorized under the tenant s account to provide access to this particular virtual machine to those users. Such access may permit only observing the console display of the virtual machine or it may permit user interface interactions with the virtual machine. In some embodiments the user can click on a CD icon displayed by the MTVMI in connection with a virtual machine not shown in order to upload to the asset list and or the library a virtual machine image or a software installation file such as an ISO file from the user client machine.

Configurations shown in have all been installed in the lab of . These and other configurations such as those illustrated in can be installed in labs or added to currently running configurations by actuating buttons within the interfaces shown in . Although the engineer may create labs from predefined configurations the engineer could alternatively assemble and configure new machine configurations from scratch by specifying a new combination of virtual hardware operating system and so on. The engineer could then add the new configuration to an existing lab or create a new lab through the virtual lab service. In general any new configurations created by a user be associated with that user or shared among other users within the MTVMI.

Where a single user or tenant runs multiple instances of a single network within the virtual lab service the different instances are generally fenced off from each other. Fencing is typically accomplished by using a virtual private network to establish a separate virtual LAN for each network instance. In some embodiments the virtual machines in each of the instances of the network are assigned the same set of IP addresses. Accordingly to provide independent access to the Internet for the virtual machines of each of the instances of the network the network nodes and or the firewall proxy requests from these virtual machines to the internet enabling the proxy to route the reply from the Internet to the correct one of the virtual machines having the source IP address associated with the original request. In various embodiments this proxying is performed in a variety of ways such as mapping each virtual machine instance to a different public IP address URL or combination or URL and port number.

Returning to to test the e commerce web site the engineer runs the web site on the virtual machine designated as web server . While running the web site web server stores and retrieves data from a virtual machine designated as a database server . Three virtual machines having a variety of configurations are designated as test clients for generating traffic for the web site. Finally a virtual machine designated as a test controller controls test clients to perform the test.

In some embodiments a tenant may specify specific levels of service to be provided by the MTVMI. For example the tenant may specify that its labs run in a dedicated virtual machine host node and or access a dedicated storage node specify that physical processor utilization be no greater than a level such as 75 on the virtual machine host nodes on which its labs execute or specify a maximum level of resources of one or more types that the tenant can consume in a particular period of time. In some embodiments where quotas are specified for a tenant either by the tenant or the operator of the MTVMI the MTVMI displays usage relative to the quota to one or more of the users for the tenant.

The MTVMI is unique in delivering virtual datacenter Labs as a service over the Web based on a multi tenant shared infrastructure. It provides key capabilities valued by customers in the initial target markets QA Staging Training and Pre sales PoC including 

Software based mechanisms to automatically configure isolated network services for each virtual data center including DHCP and DNS VPN services and file share services. Ready connectivity from a virtual data center configuration back to internal data centers.

In view of the foregoing it should be appreciated that while selected embodiments have been described herein for illustration purposes various modifications may be made without deviating from the scope of the invention. Accordingly the invention is not limited except as by the appended claims and the elements explicitly recited therein.

