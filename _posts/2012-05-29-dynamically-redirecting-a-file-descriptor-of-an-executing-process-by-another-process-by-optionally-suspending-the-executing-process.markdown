---

title: Dynamically redirecting a file descriptor of an executing process by another process by optionally suspending the executing process
abstract: An apparatus for dynamically redirecting a file descriptor includes an identification module, a disassociation module, and an association module. The identification module identifies a first executing process using a second executing process. The first executing process may include a file descriptor and the first executing process may be independent of the second executing process. The disassociation module disassociates the file descriptor from a first data stream using the second executing process without involvement of the first executing process. The association module associates the file descriptor with a second data stream using the second executing process without involvement of the first executing process in response to the disassociation module disassociating the file descriptor from the first data stream.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08701114&OS=08701114&RS=08701114
owner: International Business Machines Corporation
number: 08701114
owner_city: Armonk
owner_country: US
publication_date: 20120529
---
This is a continuation application of and claims priority to U.S. patent application Ser. No. 13 245 507 entitled DYNAMICALLY REDIRECTING A FILE DESCRIPTOR and filed on Sep. 26 2011 for Sukadev Bhattiprolu et al. which is incorporated herein by reference.

This invention was made with Government support under HR0011 07 9 0002 awarded by Defense Advanced Research Projects Agency DARPA . The Government has certain rights to this invention.

The subject matter disclosed herein relates to file descriptors and more particularly relates to dynamically redirecting a file descriptor.

Processes typically use file descriptors to access data streams such as files pipes sockets and the like. A process may write to or read from a data stream using a file descriptor referencing that data stream. The association between the file descriptor and the data stream is often persistent across the lifetime of the process. A process may also often have one or more aliases dups of a data stream.

Once a process is executing an administrator typically has no control over the file descriptors including the dups of the process. Specifically the administrator often has no way of directing the data written to one of the dups to go to a different file without shutting down the process and restarting it with the desired file descriptor pointing to a different data stream and as a result losing any state data that the process has acquired especially if the process has been executing for a long period of time.

A method for dynamically redirecting a file descriptor is presented. In one embodiment the method includes identifying a first executing process using a second executing process. The first executing process includes a file descriptor and the first executing process is typically independent of the second executing process. In another embodiment the method includes disassociating the file descriptor from a first data stream using the second executing process without involvement of the first executing process. In another embodiment the method includes associating the file descriptor with a second data stream using the second executing process without involvement of the first executing process in response to disassociating the file descriptor from the first data stream.

An apparatus for dynamically redirecting a file descriptor is provided with a plurality of modules configured to functionally execute the steps described above with regard to the presented method. These modules in the described embodiments include an identification module an disassociation module and an association module.

In one embodiment the identification module identifies a first executing process in response to a second executing process. The first executing process includes a first file descriptor. The first executing process is typically independent of the second executing process. In another embodiment the disassociation module disassociates the file descriptor from a first data stream in response to the second executing process without involvement of the first executing process. In another embodiment the association module associates the file descriptor with a second data stream in response to the second executing process without involvement of the first executing process in response to the disassociation module disassociating the first executing process from the first file descriptor.

A system for dynamically redirecting a file descriptor is also presented. The system may be embodied by an operating system a processor and a memory storing modules for execution by the processor. The modules include an identification module an disassociation module and an association module. In one embodiment the identification module identifies a first executing process using a second executing process. The first executing process includes a first file descriptor. The first executing process is typically independent of the second executing process. In another embodiment the disassociation module disassociates the file descriptor from a first data stream using the second executing process without involvement of the first executing process. In another embodiment the association module associates the file descriptor with a second data stream using the second executing process without involvement of the first executing process in response to the disassociation module disassociating the first executing process from the first file descriptor.

A computer program product comprising a computer readable storage medium having computer readable program code for dynamically redirecting a file descriptor is also presented. In one embodiment the computer program product includes identifying a first executing process using a second executing process. The first executing process includes a file descriptor and the first executing process is independent of the second executing process. In another embodiment the computer program product includes disassociating the file descriptor from a first data stream using the second executing process without involvement of the first executing process. In yet another embodiment the computer program product includes associating the file descriptor with a second data stream using the second executing process without involvement of the first executing process in response to disassociating the file descriptor from the first data stream.

Another method is presented. The method in the disclosed embodiments includes integrating a file descriptor redirection apparatus with an operating system. The file descriptor redirection apparatus module in certain embodiments is capable of performing the steps of the method described above.

References throughout this specification to features advantages or similar language do not imply that all of the features and advantages may be realized in any single embodiment. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic is included in at least one embodiment. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the embodiments may be combined in any suitable manner. One skilled in the relevant art will recognize that the embodiments may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of computer readable program code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of computer readable program code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network. Where a module or portions of a module are implemented in software the computer readable program code may be stored and or propagated on in one or more computer readable medium s .

The computer readable medium may be a tangible computer readable storage medium storing the computer readable program code. The computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared holographic micromechanical or semiconductor system apparatus or device or any suitable combination of the foregoing.

More specific examples of the computer readable medium may include but are not limited to a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM a digital versatile disc DVD an optical storage device a magnetic storage device a holographic storage medium a micromechanical storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain and or store computer readable program code for use by and or in connection with an instruction execution system apparatus or device.

The computer readable medium may also be a computer readable signal medium. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electrical electro magnetic magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport computer readable program code for use by or in connection with an instruction execution system apparatus or device. Computer readable program code embodied on a computer readable signal medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable Radio Frequency RF or the like or any suitable combination of the foregoing.

In one embodiment the computer readable medium may comprise a combination of one or more computer readable storage mediums and one or more computer readable signal mediums. For example computer readable program code may be both propagated as an electro magnetic signal through a fiber optic cable for execution by a processor and stored on RAM storage device for execution by the processor.

Computer readable program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment but mean one or more but not all embodiments unless expressly specified otherwise. The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise. An enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise. The terms a an and the also refer to one or more unless expressly specified otherwise.

Furthermore the described features structures or characteristics of the embodiments may be combined in any suitable manner. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that embodiments may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of an embodiment.

Aspects of the embodiments are described below with reference to schematic flowchart diagrams and or schematic block diagrams of methods apparatuses systems and computer program products according to embodiments of the invention. It will be understood that each block of the schematic flowchart diagrams and or schematic block diagrams and combinations of blocks in the schematic flowchart diagrams and or schematic block diagrams can be implemented by computer readable program code. These computer readable program code may be provided to a processor of a general purpose computer special purpose computer sequencer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the schematic flowchart diagrams and or schematic block diagrams block or blocks.

The computer readable program code may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the schematic flowchart diagrams and or schematic block diagrams block or blocks.

The computer readable program code may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the program code which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The schematic flowchart diagrams and or schematic block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of apparatuses systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the schematic flowchart diagrams and or schematic block diagrams may represent a module segment or portion of code which comprises one or more executable instructions of the program code for implementing the specified logical function s .

It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the Figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more blocks or portions thereof of the illustrated Figures.

Although various arrow types and line types may be employed in the flowchart and or block diagrams they are understood not to limit the scope of the corresponding embodiments. Indeed some arrows or other connectors may be used to indicate only the logical flow of the depicted embodiment. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted embodiment. It will also be noted that each block of the block diagrams and or flowchart diagrams and combinations of blocks in the block diagrams and or flowchart diagrams can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer readable program code.

The memory stores computer readable programs. The memory may be embodied by volatile memory such as dynamic random access memory DRAM static random access memory SRAM or other suitable volatile memory. The processor executes the computer readable programs as is well known to those skilled in the art. The computer readable programs may be tangibly stored in storage . The storage may include a Solid State Drive SSD a hard disk drive HDD an optical storage device a holographic storage device a micromechanical storage device or other non volatile data storage device. The computing system may be embodied by a server computer a desktop computer a laptop computer a tablet computer a mobile device a set top box or another device that includes a processor and a memory. The computer readable programs may include an operating system to execute on the computing system and to manage software and hardware resources of the computing system . The operating system may comprise a Linux operating system a Unix operating system an operating system according to Portable Operating System Interface for Unix POSIX or any other suitable operating system.

The network may comprise a communications network such as the Internet a Local Area Network LAN a Wireless LAN WLAN multiple LANs communicating over the Internet or any other similar communications network. Each client may communicate with the computing system through the network . In one embodiment a client may be embodied as a desktop computer a portable computer a server a mainframe computer a handheld computing device a touch device a PDA a tablet computer an e Book reader a mobile phone a Smartphone and the like. In one embodiment the client may also include and or is embodied as a software application.

The application software includes applications utilities and or processes that operate in user space . As is known in the art software code in the user space is typically non kernel code in which applications and utilities operate with controlled access to computer system resources. Processes running in user space typically cannot access the virtual memory of other processes directly. A process is a run time instance of a computer readable program executing on the operating system of the computing system . Each process may include its own resources such as executable computer code virtual memory and operating system resources described below. The application software includes a first process and a second process . The first process and the second process may be currently executing and may be independent of one another e.g. the second process is not a child or parent of the first process . In one embodiment the first process and or the second process is a system utility integrated with and or associated with the operating system. Furthermore the first process and or the second process may be associated with a command e.g. an operating system utility such as an ln command and or user space application.

As is known in the art the kernel is typically the primary component of the operating system providing communication between processes and the hardware of the computing system . Software code executing in kernel space has full access to system resources and runs the operating system kernel and certain device drivers. Kernel space memory is typically protected from applications running in user space . In the depicted embodiment the kernel includes a system call interface and a proc file system .

In the depicted embodiment the system call interface provides a library and or application programming interface API to processes in user space to allow them to request services from the kernel through the use of a system call. The proc file system typically presents information about processes in a file like structure. As stated above the kernel provides each process with kernel resources including file descriptors and a file descriptor table a kernel resident data structure for each process . A file descriptor is an index to an entry in the file descriptor table. The file descriptor specifies one or more data streams associated with a process .

Each data stream may be a source for the process to receive input or a destination for the process to direct output. Data streams may include files directories sockets pipes keyboard input monitor output and the like. A particular file descriptor may reference a particular data stream and the file descriptor table translates the index number of the particular file descriptor to the particular data stream e.g. an open file . In one embodiment each entry in the file descriptor table has a pointer or link to a file object that includes information the kernel uses to access the data stream associated with the file object open mode file offset and the like . In one embodiment each entry in the file descriptor table has a pointer or link to an entry in a system file table that includes entries for available data streams e.g. open files .

In one embodiment a file descriptor is an integer. Furthermore certain operating systems include three standard file descriptors for each process 0 for standard input stdin 1 for standard output stdout and 2 for standard error stderr . For example the first process may have stdout referencing file example1 and stderr referencing file example2. 

In conventional operating systems the association between the file descriptor and the data stream is often persistent across the lifetime of the process . Once a process is executing an administrator typically has no control over the file descriptors of the process . Specifically in conventional operating systems the administrator often has no way of directing the data for a data stream of a particular file descriptor to go to a different data stream without shutting down the process and restarting it with the desired file descriptor pointing to the different data stream.

Therefore in one embodiment of the invention described herein the operating system includes a file descriptor redirection apparatus that dynamically redirects a file descriptor of a first process without involvement of the first process and without shutting down the first process . Specifically the file descriptor redirection apparatus uses is activated by acts in behalf of and or acts in response to a second process independent from the first process . The file descriptor redirection apparatus may identify the first process and may disassociate a file descriptor of the first process from a first data stream and associate the file descriptor with a second data stream.

In one embodiment the second process is a conventional user space utility such as an ln command utility for managing file links which calls a conventional system call associated with the utility. The file descriptor redirection apparatus may detect that the user intends to redirect a file descriptor by for example detecting a predetermined parameter and or a file descriptor indicator instead of a file indicator passed with the ln command and redirect the file descriptor in response to detecting the predetermined parameter file descriptor indicator. By using a conventional user space utility but performing redirection if the user space utility specifies certain parameters the file descriptor redirection apparatus may provide users with a familiar interface and reduce modifications to user space code.

In one embodiment the file descriptor redirection apparatus provides a specialized system call to redirect a file descriptor. In this embodiment the second process may include a user space utility that makes the system call passing in identifiers for the desired process the file descriptor to redirect of the desired process and the new data stream to which the file descriptor is to be redirected.

For example once a first process is executing the user may encounter a particular error condition and wish to redirect stderr to a separate file. Using the file descriptor redirection apparatus the user may redirect stderr without shutting down the first process and losing valuable state data and possibly losing the ability to replicate the error condition.

In the depicted embodiment the file descriptor redirection apparatus executes in kernel space . The file descriptor redirection apparatus may be in communication with integrated with and or associated with the operating system and or the operating system kernel . In another embodiment a portion of the file descriptor redirection apparatus may also execute in user space as for example a utility e.g. the second process .

The identification module in one embodiment identifies a first executing process in which a user application or utility selects for file descriptor redirection. The identification module may identify the first executing process using a second executing process . For example the user application or utility may pass in parameters through the second executing process specifying which process for redirection. The identification module using the second executing process may also include the identification module acting in response to the second executing process e.g. the second executing process made a system call activating the identification module the identification module acting by way of the second executing process the identification module acting in behalf of the second executing process and or the like. In one embodiment the identification module comprises kernel code executing for the second executing process . The first executing process includes at least one file descriptor. Furthermore the first executing process may be independent of the second executing process .

The identification module may identify the first executing process by referencing a process identifier from the second executing process . For example a user application or utility may include a process identifier as a command line parameter when running the second process . The identification module may then pass the process identifier to the disassociation module and or reference applicable kernel data structures associated with the first executing process .

In one embodiment as mentioned above the second executing process is a user space utility for managing file links. In a further embodiment the second executing process comprises an ln utility. In one embodiment the identification module acts in response to the second executing process calling an ln command system call e.g. a system call typically invoked by the ln command but specifying a file descriptor identifier instead of a file as described below.

The disassociation module in one embodiment disassociates the file descriptor from a first data stream using the second executing process . The disassociation module using the second executing process may include the disassociation module disassociating the file descriptor in response to by way of and or in behalf of the second executing process . In one embodiment the first executing process continues to execute during the disassociation module disassociating the file descriptor from the first data stream and associating the file descriptor with the second data stream. Furthermore in some embodiments the disassociation module disassociates the file descriptor from the first data stream without involvement of the first executing process . In a further embodiment the first executing process does not execute an instruction or causing kernel code to execute an instruction that results in disassociating the file descriptor from the first data stream while the disassociation module disassociates the file descriptor.

In some embodiments the disassociation module disassociates the file descriptor from the first data stream by removing a link from the file descriptor to the first data stream. depicts an embodiment of a file descriptor table of the first process . The file descriptor table includes a plurality of file descriptors with an associated file pointer for each file descriptor . Each file pointer creates a link to a data stream e.g. a file entry in a systems file table . Referring to the disassociation module may remove the link e.g. change the pointer between a particular file pointer and a particular data stream

Referring back to in one embodiment the disassociation module receives a system call from the second executing process to disassociate the file descriptor from the first data stream and associate the file descriptor with the second data stream. The system call in certain embodiments is a specialized system call configured to cause the disassociation module to disassociate the file descriptor from the first data stream in response to the system call as described below.

In one embodiment the first data stream is associated with a first output terminal and the second data stream is associated with a second output terminal. The disassociation module may discontinue output of the first executing process from the first output terminal in response to disassociating the file descriptor from the first data stream.

The association module in one embodiment associates the file descriptor with a second data stream using the second executing process . Similar to the disassociation module the association module using the second executing process may include the association module associating the file descriptor in response to by way of and or in behalf of the second executing process . The association module may associate the file descriptor with the second data stream in response to and or subsequent to the disassociation module disassociating the first executing process from the first file descriptor.

In one embodiment the association module associates the file descriptor with the second data stream without involvement of the first executing process . In a further embodiment the first executing process does not execute an instruction that results in associating the file descriptor with the second data stream. The first executing process may continue executing during the association module associating the file descriptor with the second data stream.

In one embodiment associating the file descriptor with the second data stream includes adding a link from the file descriptor to the second data stream. Referring also to the association module may create a link from the file pointer for the file descriptor to the second data stream . In one embodiment the association module may associate the file descriptor with a file path. In one embodiment the association module may associate the file descriptor with a data stream referenced by a file descriptor of the second executing process .

In one embodiment as stated above the first data stream is associated with a first output terminal and the second data stream is associated with a second output terminal. The association module may begin output of the first executing process to the second output terminal in response to associating the file descriptor with the second data stream.

In one embodiment the disassociation module disassociates the file descriptor from the first data stream and or the association module associates the file descriptor with the second data stream using the proc file system . As known in the art the proc file system presents information about processes in a file like structure including providing references to file descriptors of particular processes. For example if an application with process id 75 has file descriptor 1 pointing to file tmp foo.log in Linux this information may be retrieved by entering 

The process module in one embodiment executes a user space process. The user space process may be the second executing process described herein. The process module one embodiment includes is integrated with and or is embodied as is a user space utility such as the ln utility for managing file links.

In one embodiment the process module may request file descriptor redirection by referring to a file descriptor as a parameter for the ln command. Conventional kernel code executed for the ln command would return an error in response to a user or application specifying a file descriptor e.g. putting a file descriptor indicator as a parameter for the ln command instead of a file. However in one embodiment the disassociation module and or the association module include at least a portion of kernel code called by the ln command and or associated with the proc file system that will determine that the process module has specified a file descriptor e.g. a user or application has initiated the ln command using a file descriptor as a parameter and redirect the link of the file descriptor as referenced in a file form with the proc file system to the new data stream. A non limiting example of a possible ln command e.g. embodied by the process module usable by the disassociation module and association module may be 

where new target file is the data stream to which the file descriptor is to be redirected process identifier identifies the first executing process for redirection and fd to retarget is the file descriptor for which redirection is desired. For example a user may wish to redirect a file descriptor for a particular file. The user may use the familiar interface of the conventional ln command instead substituting the file descriptor that the user wants to redirect from as a parameter instead of a file.

In one embodiment instead of or in addition to using the conventional ln utility to allow a user or application to initiate file descriptor redirection initiates a specialized system call instead of the system call typically associated with the ln command through the second executing process to disassociate the file descriptor from the first data stream and associate the file descriptor with the second data stream. The system call may include parameters specifying a process identifier a file descriptor identifier and a data stream identifier or a second file descriptor identifier the association module may associate the process with the data stream of the second file descriptor identifier. A non limiting example of C code for the system call is 

In certain embodiments or with certain processes the first executing process may be put into a suspension mode prior to file descriptor redirection. For example the first executing process may be put into a suspension mode to avoid certain race conditions. The suspension mode module in one embodiment puts the first executing process into a suspension mode prior to the disassociation module disassociating the file descriptor from the first data stream. The suspension mode module may put the first executing process into a suspension mode using in behalf of and or in response to the second executing process . The suspension mode module may put the first executing process into the suspension mode in response to a parameter passed from the second executing process a default setting or the like. For example the user may wish to first suspend the first executing process prior to redirection and notify the suspension mode module with a parameter input into the process module . The suspension mode module in one embodiment further takes the first executing process out of the suspension mode using the second executing process subsequent to the association module associating the file descriptor with the second data stream. The suspension mode may be a quiesced state in which the first executing process maintains its state data its run time variables and the like but does not execute any further operations while in the suspension mode. Conversely a process that is shut down would lose state data and run time variables forcing the user to possibly have to re run the process for days or weeks to obtain the same state. Thus an embodiment where the first executing process is merely put in a suspension mode may be advantageous over the prior art method of shutting down the process.

The receiving module in one embodiment receives and or references parameters that specify a process to redirect a particular file descriptor to redirect and or a data stream to redirect the particular file descriptor to. These parameters may include a process identifier a file descriptor identifier and a data stream identifier. In one embodiment these identifiers may include parameters and arguments input by a user or application into the process module and or the second process . The process identifier identifies the first executing process e.g. a string identifier in file notation according to the proc file system . The file descriptor identifier identifies the file descriptor e.g. also a string identifier in file notation according to the proc file system . The data stream identifier identifies the second data stream e.g. a file path designating the new data stream to redirect the file descriptor to . The receiving module may receive and or reference the identifiers from parameters of the second executing process and or variables in a system call. The receiving module may also receive any other parameters such as a suspension mode parameter specifying whether to put the first executing process into the suspension mode.

The detection module allows the file descriptor redirection apparatus to perform file descriptor redirection in response to receiving a command with an existing utility such as the ln utility instead of the operating system returning an error when the user or application uses a file descriptor as a parameter in the utility. Specifically the detection module detects the utility e.g. the second executing process embodied by the process module specifying a file descriptor instead of a file in its parameters. Instead of the operating system returning an error as in conventional operating systems the detection module detects the file descriptor parameter and signals the disassociation module . In one embodiment the disassociation module disassociating the file descriptor from the first data stream and the association module associating the file descriptor with a second data stream occur in response to the detection module detecting the second executing process specify the file descriptor instead of the file. As stated above the use may use a pre existing utility the ln command specifying a file descriptor instead of a file.

The triggering module automatically triggers file descriptor redirection. Specifically in one embodiment the triggering module triggers disassociating the file descriptor from the first data stream and associating the file descriptor with a second data stream in response to predetermined criteria. The predetermined criteria may include storage space reaching a threshold and or an error condition. For example a user may wish to have error messages directed to a first file unless the amount of error messages reaches a predetermined threshold in which case the user may wish to redirect the error messages to a second file. The user may also wish to redirect output from the first executing process from a disk nearing its capacity to another disk. In one embodiment the triggering module is a user space utility that initiates file descriptor redirection. In a further embodiment the triggering module comprises at least a portion of the second process and or initiates the process module in response to detecting the predetermined criteria.

Next the disassociation module disassociates the file descriptor from a first data stream. Then the association module associates the file descriptor with a second data stream. If the first process is not in the suspension mode the method ends. Alternatively the suspension mode module takes the first process out of suspension mode. Then the method ends. In some embodiments the first data stream is associated with a first output terminal and the second data stream is associated with a second output terminal. In this embodiment disassociating the file descriptor from the first data stream and associating the file descriptor with the second data stream switches output of the first executing process from the first output terminal to the second output terminal.

Next the disassociation module disassociates the file descriptor from a first data stream. Then the association module associates the file descriptor with a second data stream. If the first process is not in the suspension mode the method ends. Alternatively the suspension mode module takes the first process out of suspension mode. Then the method ends.

A service provider a network administrator a user or the like may identify any software on the clients and servers including the network operating system where the process software will be deployed that are required by the process software or that work in conjunction with the process software. This may include the network operating system that is software that enhances a basic operating system by adding networking features.

Next the software applications and version numbers may be identified and compared to the list of software applications and version numbers that have been tested to work with the process software. Those software applications that are missing or that do not match the correct version may be upgraded with the correct version numbers. Program instructions that pass parameters from the process software to the software applications may be checked to ensure the parameter lists match the parameter lists required by the process software. Conversely parameters passed by the software applications to the process software may be checked to ensure the parameters match the parameters required by the process software. The client and server operating systems including the network operating systems will be identified and compared to the list of operating systems version numbers and network software that have been tested to work with the process software. Those operating systems version numbers and network software that do not match the list of tested operating systems and version numbers may be upgraded on the clients and servers to the required level. After ensuring that the software where the process software is to be deployed is at the correct version level that has been tested to work with the process software the integration is completed by installing the process software on the clients and servers.

The method begins with determining if there are any of the process software programs that will execute on a server or servers. If this is not the case then integration proceeds to . If this is the case then the server addresses are identified . The servers are checked to see if they contain software that includes the operating system OS applications and network operating systems NOS together with their version numbers that have been tested with the process software. The servers may also be checked to determine if there is any missing software that is required by the process software.

A determination is made if the version numbers match the version numbers of OS applications and NOS that have been tested with the process software. If all of the versions match and there is no missing required software the integration continues in . If one or more of the version numbers do not match then the unmatched versions are updated on the server or servers with the correct versions. Additionally if there is missing required software then it is updated on the server or servers. The server integration is completed by installing the process software. Step which follows or determines if there are any programs of the process software that will execute on the clients. If no process software programs execute on the clients the method ends. If this not the case then the client addresses are identified .

The clients are checked to see if they contain software that includes the operating system OS applications and network operating systems NOS together with their version numbers that have been tested with the process software. The clients may also be checked to determine if there is any missing software that is required by the process software.

Referring to a determination is made whether the version numbers match the version numbers of OS applications and NOS that have been tested with the process software. If all of the versions match and there is no missing required software then referring back to the method ends.

Alternatively if one or more of the version numbers do not match then the unmatched versions are updated on the clients with the correct versions. In addition if there is missing required software then it is updated on the clients. The client integration is completed by installing the process software on the clients then referring back to the method ends.

The embodiments may be practiced in other specific forms. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

