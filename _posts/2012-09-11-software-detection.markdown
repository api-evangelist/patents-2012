---

title: Software detection
abstract: A method, system and computer program product for software discovery in a computer system comprising a server and a client. Data defining at least one file category is received at the client from the server. File information pertaining to files belonging to the respective file category is established at the client for each of the at least one file category. The file information for each of the at least one file category is communicated from the client to the server. For each of the at least one file category, a checksum is calculated from the file information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519648&OS=09519648&RS=09519648
owner: International Business Machines Corporation
number: 09519648
owner_city: Armonk
owner_country: US
publication_date: 20120911
---
This application claims priority under 35 U.S.C. 119 a from European Patent Application No. 11182917.2 filed on Sep. 27 2011 the contents of which are incorporated herein by reference.

The present invention relates generally to detecting software and more particularly to discovering software in a computer system comprising a server and a client.

Software detection may be carried out for various reasons. For example software detection may be carried out for the sake of discovering software that is outdated that requires an update or needs to be removed from the system. Software detection may also be carried out for the sake of confirming proper licensing of the software installed in a computer system.

A software catalog may be used for properly identifying the various software products found during a scan of the computer system s file systems in the course of software detection. For example the software catalog may specify file characteristics e.g. file name and size that uniquely identify the various software products listed in the software catalog.

In a computer system comprising a server and a client the server may instruct the client to carry out some of the tasks involved in discovering software located on volumes local to the client. In this respect there may be a communication of data between the server and the client.

In one embodiment of the present invention a method for software discovery in a computer system computer system comprising a server and a client comprises receiving at the client from the server data defining at least one file category. The method further comprises establishing at the client for each of the at least one file category file information pertaining to files belonging to the respective file category. Additionally the method comprises communicating the file information for each of the at least one file category from the client to the server. In addition the method comprises calculating by a processor for each of the at least one file category a checksum from the file information.

In another embodiment of the present invention a method for software discovery in a computer system computer system comprising a server and a client comprises receiving at the client from the server data defining at least one file category. The method further comprises establishing at the client for each of the at least one file category file information pertaining to files belonging to the respective file category. Additionally the method comprises calculating for each of the at least one file category a checksum from the file information. In addition the method comprises establishing by a processor from among each of the at least one file category a set of file categories for which the checksum mismatches each of a set of checksums stored in at least one of the server and the client.

Other forms of the embodiment of the method described above are in a system and in a computer program product.

The foregoing has outlined rather generally the features and technical advantages of one or more embodiments of the present invention in order that the detailed description of the present invention that follows may be better understood. Additional features and advantages of the present invention will be described hereinafter which may form the subject of the claims of the present invention.

Loosely speaking the present disclosure teaches techniques for detecting software in a computer system comprising a server and a client. The client scans for files that fulfill given requirements e.g. for files in a given folder for files of a given type for files having a creation modification time falling within a given range etc. In other words the client establishes a list of files for each of one or more categories the individual categories being defined by respective requirements. The scanning may be limited to volumes located physically within the client or to volumes accessible solely via the client. A checksum is then calculated from one or more parameters of each of the files belonging to a respective list of files e.g. from the file size the creation modification time etc. The calculated checksum may be stored at the client and or sent to the server for later use. The calculated checksum can be understood as a fingerprint of the list of files i.e. allows differences in changes to the list of files to be easily recognized with a high degree of certainty.

In what may be considered an independent aspect of the present disclosure the client may again scan for files of the same categories and calculate a checksum. By comparing the checksum calculated from a list of files obtained by this scan with a checksum calculated by the same client at an earlier point in time or calculated by a different client it is possible to ascertain the state of a category of files relative to a state of that category of files on the same client at an earlier point in time and or on a different client. In particular differences in changes to that category of files can be readily ascertained. If the client reports file information pertaining to the files of a respective category to the server the report can thus be limited to those categories of files that have changed since an earlier report and or to file states that have not been reported by a different client. This can significantly reduce communication between the client and the server.

In one aspect as touched upon supra the present disclosure relates to a method for software discovery in a computer system. The computer system may comprise a server and a client.

In the context of the present disclosure the term software discovery may be understood as carrying out an inventory of files located software installed hereinafter simply files on a computer system as a whole or within a limited realm of the computer system e.g. files on volumes located on a given branch of a network belonging to the computer system for example files on volumes accessible solely via a given client computer. The scope of the inventory may be limited to one or more categories of files each of the categories being defined by given requirements as will be described in further detail infra. The inventory may be carried out by any computing entity that has access to the realms of the computer system for which the inventory is to be carried out. Results of the inventory may be communicated to another computing entity. For example the inventory may be carried out by a client that then sends results of the inventory to a server.

In the context of the present disclosure the expression computing entity occasionally just entity for the sake of better readability may be understood as a software and or hardware entity of the computer system that is capable of executing a computer program. As such a computing entity may be a personal computer a virtual machine a rack or mainframe computer etc.

In the context of the present disclosure the term server may be understood as a computing entity within a computer network that provides computing services to a program running on another computing entity within the computer network. In the context of the present disclosure such another computing entity may be understood as a client. The designations server and client need not be absolute. In other words what may be termed a server from one perspective may be termed a client from another perspective.

The method may comprise receiving data defining at least one file category. The data may be entered by a user e.g. an administrator of the computer system. Similarly the data may be predetermined data stored within the computing system e.g. by a server of the computing system. The method may comprise receiving the data at a computing entity that will perform the aforementioned inventory. The method may comprise receiving the data at a client from a server.

Each file category may be defined by one or more file attributes e.g. by file location file extension file permissions file creation modification time and or file type. The file location may be specified in terms a mounting point a path an enclosing folder etc.

The method may comprise establishing for each of the one or more of the file categories e.g. for each of the file categories file information pertaining to files belonging to the respective file category. This establishing of file information may be understood as constituting the aforementioned inventory. The file information may include a file name path size version and or modification creation time of the respective files. The method may comprise establishing the same type of file information for each file belonging to the respective file category. The method may comprise establishing the same type of file information for each file for which file information is established. In other words the method may comprise establishing the same type of file information for each file regardless of the file category of the respective file. Similarly the type of file information established for each file may very depending on the respective file category. In other words the type of file information established for each file of one file category may differ from the type of file information established for each file of another file category.

As touched upon above the establishing may comprise scanning a file system for files belonging to the respective file category e.g. searching the file system for all files having the file attributes defining the respective file category. The scanned file system may be a networked file system comprising a plurality of volumes. Similarly the scanned file system may be a single volume physically located within a hardware entity carrying out the scan or one or more volumes accessible solely via a computing entity carrying out the scan for example volumes connected to a Universal Serial Bus USB Serial AT Attachment SATA Small Computer System Interface SCSI Peripheral Component Interconnect PCI or IEEE 1394 interface of a computer carrying out the scan. The establishing may furthermore comprise gathering the aforementioned file information for each of the files determined during the scanning to belong to the respective file category.

The method may comprise communicating the established file information for one or more or each of the file categories for which file information was established from a computing entity that carried out the establishing to another computing entity of the computer system. The computing entity and the other computing entity may have a client server relationship where the other computing entity acts as a server for the computing entity.

The method may comprise calculating at least one checksum from the established file information for one or more or each of the file categories for which file information was established. The checksums may be calculated in any manner known in the art. For example the checksums may be calculated by adding the digits of numeric file information or by adding the binary representations of alphanumeric file information. In cases where more than one checksum is calculated per file category the respective checksums may be calculated from any set of file information selected from the file information established for the respective file category. The sets of file information may be but need not be non overlapping. For example a first checksum may be calculated from each of the file names and paths for the respective file category a second checksum may be calculated from each of the file sizes and creation times for the respective file category and a third checksum may be calculated from each of the file names and version numbers for the respective file category. The method may comprise calculating the at least one checksum based on the same type of file information for each file category i.e. regardless of the file category. For example the checksum could always be calculated solely from the files sizes for the respective file category. Similarly the method may comprise calculating the at least one checksum based on different types of file information for each file category. For example a first checksum may be calculated from the files sizes of all the files belonging to the category of files associated with a particular mounting point e.g. the mounting point var in a UNIX system and a second checksum may be calculated from the version number of all the files belonging to the category of files of a particular file type in a particular folder e.g. all the file type .exe in a folder IBM Applications. The calculating of the at least one checksum can be carried out by any computing entity having access to the established file information. The calculating of the at least one checksum may be carried out by the computing entity that established the file information.

The method may comprise communicating one or more or all of the calculated checksums directly or indirectly from the computing entity that calculated the respective checksum to at least one other computing entity e.g. to a server of the computer system.

The method may comprise storing one or more or all of the calculated checksums for one or more or each of the file categories in a database e.g. in a database of a server of the computer system. The calculated checksums may be stored using the checksum as a key. This allows swift determination of whether a given checksum is known i.e. stored.

The method may comprise establishing from among one or more or each of the at least one file category at least one set of file categories for which a calculated checksum for the respective category mismatches each of a set of checksums for the respective category.

The set of checksums may consist of one or more or all corresponding checksums for the respective category. In this disclosure a corresponding checksum may be understood as a checksum that has been calculated from the same type of file information as the checksum to which it is being compared. The set of checksums may comprise consist of one or more checksums stored in a client and or server of the computer system as described above. The set of checksums may be limited to checksums that fulfill given selection criteria e.g. were calculated within a given timeframe were calculated based on file information obtained with regard to a given realm of the file system of the computer system etc. Naturally the set of checksums excludes the checksum to which the set of checksums is to be compared for the respective category.

The set of checksums may consist of a single checksum. Thus this establishing may comprise establishing at least one set of file categories for which a calculated checksum for the respective category mismatches a corresponding stored checksum for the respective file category. For example a checksum calculated for a given file category for a given realm of the file system of the computer system could be compared with a stored checksum previously calculated for the given file category for the given realm of the file system of the computer system. A checksum mismatch would then be indicative of a change within the given file category for the given realm of the file system.

Similarly the set of checksums may comprise a plurality of checksums. Thus this establishing may comprise establishing at least one set of file categories for which a calculated checksum for the respective category mismatches each of a plurality of corresponding stored checksums for the respective file category. For example a checksum calculated for a given file category for a given realm of the file system of the computer system could be compared with each of a plurality of stored checksums each having been previously calculated for the given file category for a respective realm of the file system of the computer system. A lack of matching checksums would then indicate that the file configuration in the given realm of the file system does not match the file configuration in the other realms of the file system at least as regards the given file category.

The compared checksums may have been calculated based on file information obtained with regard to the same realm of the file system of the computer system or with regard to differing realms of the file system. For example two different client computers may establish file information as described above for a given file category with respect to their respective local volumes. Checksums calculated from this file information may be exchanged e.g. via a server. In this manner each of the two clients and or the server can establish mismatch between corresponding checksums obtained by the other of the two clients. The establishing of a set of file categories with checksum mismatch can be carried out by any computing entity having access to the underlying checksums.

The method may comprise selecting based on one or more or each of the aforementioned sets of file categories file data to be communicated from one computing entity to another computing entity. In other words the file data may be selected as a function of one or more or each of the aforementioned sets of file categories e.g. as a function of the respective file categories per se and or as a function of one or more file attributes defining the respective file categories. The file data may be selected from the file information of one or more or all of the sets of file categories. The method may comprise communicating the file data from one computing entity to at least one other computing entity e.g. from a client to a server. The selecting may comprise selecting file data from an intersection of file information of a first file category of the sets of file categories and file information of a second file category of the sets of file categories.

The selection of file data based on sets of file categories for which a checksum mismatch has been ascertained i.e. for file categories where a difference and or change in the associated files has been detected allows such file data to be focused on such differences changes and for a correspondingly focused response to such differences changes. For example if it is ascertained that of the file categories specifying file location solely the checksum for files from the folder IBM Applications has changed does not match known checksums and that of the file categories specifying file type solely the checksum for files of type .exe has changed does not match known checksums then it could suffice to select and send as the aforementioned file data just file information relating to files of type .exe in folder IBM Applications the file information relating to files of other types and at other locations being known from other scans.

The selection of file data may be carried out by a computing entity that differs from the computing entity that communicates the file data. For example a server may after having established a set of file categories exhibiting checksum mismatch instruct a client to send file data relating to files of a file category where the most recent checksum mismatches earlier checksums of the same file category. The earlier checksum may be from the same client or another client. In the above example for instance the server may instruct the client to send just file information relating to files of type .exe in folder IBM Applications to the server. In this manner the server can update its inventory information for that client without undue communication of file information across the network connecting the server and the client.

Any receiving establishing communicating calculating and or selecting as discussed hereinabove may be carried out automatically e.g. without user interaction or with limited user interaction.

While the teachings of the present disclosure have been discussed hereinabove in the form of a method the teachings may be embodied mutatis mutandis in the form of a system i.e. a software discovery system or a computer program product as will be appreciated by the person skilled in the art.

The software discovery system may comprise a file category information system that communicates data defining at least one file category as discussed hereinabove.

The software discovery system may comprise a file information establishing system that establishes file information pertaining to files belonging to a respective file category as discussed hereinabove.

The software discovery system may comprise a file information communication system that communicates file information as discussed hereinabove.

The software discovery system may comprise a checksum calculation system that calculates at least one checksum as discussed hereinabove.

The software discovery system may comprise a checksum comparator that establishes a set of file categories for which a checksum mismatches each of a set of checksums as described above.

The software discovery system may comprise a file data selection system that selects file data to be communicated as described above.

The software discovery system may comprise a file data communication system that communicates file data as described above.

The software discovery system may comprise a checksum communication system that communicates a calculated checksum as described above.

Each of the file category information system the file information establishing system the file information communication system the checksum calculation system the checksum comparator the file data selection system the file data communication system and the checksum communication system or any group thereof may be embodied in the form of a single unit comprising hardware and or software or in the form of a system comprising multiple hardware software units.

Referring now to the Figures shows an embodiment of a computer system for use with a software discovery system in accordance with an embodiment of the present invention.

In the illustrated embodiment computer system comprises a server as well as three clients . The server is in network communication with each of clients via a network connection . Server comprises a storage device . Client comprises a storage device in the form of an internal hard disk. Client comprises a storage device in the form of an internal hard disk. Client is moreover in communication with a storage device in the form of an external hard disk via a network connection e.g. via an IEEE 1394 interface. Client comprises a storage device in the form of an internal hard disk. Client is moreover in communication with a storage device in the form of an external hard disk via a network connection e.g. via a USB interface.

Storage device comprises a plurality of folders . Client is able to read and write to folders via a network connection shown as a dashed line network connection being established by network connection client and network connection . Client is able to read and write to folders via network connection .

In the illustrated embodiment software discovery system comprises a file category information system comprising a first file category information system portion A and a second file category information system portion B a file information establishing system a checksum calculation system and a file information communication system comprising a first file information communication system portion A and a second file information communication system portion B. As symbolized by arrows in the individual elements of software discovery system are configured to communicate information.

First file category information system portion A and second file information communication system portion B may be elements of a server e.g. server of . Second file category information system portion B file information establishing system checksum calculation system and first file information communication system portion A may be elements of a client e.g. client of .

In the illustrated embodiment software discovery system comprises a file category information system comprising a first file category information system portion A and a second file category information system portion B a file information establishing system a checksum calculation system a checksum communication system comprising a first checksum communication system portion A and a second checksum communication system portion B a checksum comparator a file data selection system comprising a first file data selection system portion A and a second file data selection system portion B and a file data communication system comprising a first file data communication system portion A and a second file data communication system portion B. As symbolized by arrows in the individual elements of software discovery system are configured to communicate information.

First file category information system portion A second checksum communication system portion B checksum comparator first file data selection system portion A and second file data communication system portion B may be elements of a server e.g. server of . Second file category information system portion B file information establishing system checksum calculation system first checksum communication system portion A second file data selection system portion B and first file data communication system portion A may be elements of a client e.g. client of .

Referring to in conjunction with in step a client receives data defining at least one file category from a server. For example first file category information system portion A located in client may receive data defining at least one file category from second file category information system portion B located in server . In this respect second file category information system portion B may obtain a corresponding user input for defining the at least one file category. For example the user input may specify that clients only scan for executable files all internal drives being scanned in full and all external drives only being scanned with respect to folders for which the client machine has write permission.

In step file information pertaining to files belonging to the respective file category is established at the client for each of the at least one file category. For example the data received by first file category information system portion A may be communicated to file information establishing system located in client and file information establishing system may establish file information accordingly. For example continuing with the aforementioned example file information establishing system may establish a list containing the file name and file size of all executable files located on storage device i.e. belonging to the category executable files on an internal drive. Presuming that client only has read permission for folder but has write permission for folder file information establishing system may moreover establish a list containing the file name and file size for all executable files located in folder i.e. belonging to the category executable files on an external drive in a folder for which the client machine has write permission.

In step a checksum is calculated from the file information for each of the at least one file category. For example checksum calculation system located in client may receive the aforementioned file information i.e. lists from file information establishing system and calculate a checksum from the respective file size of each of the files belonging to the internal drive category as well as a checksum from the respective file size of each of the files belonging to the external drive category.

In step the file information for each of the at least one file category is communicated from the client to the server. For example first file information communication system portion A may receive the aforementioned file information i.e. lists from file information establishing system and communicate this file information to second file information communication system portion B located in server . First file information communication system portion A may also receive the calculated checksums from checksum calculation system and communicate these calculated checksums e.g. together with the corresponding file information to second file information communication system portion B.

In optional step the calculated checksums communicated to second file information communication system portion B are stored in a database of the server e.g. in a database on storage device of server . Step may include storing the corresponding file information communicated to second file information communication system portion B in the database of the server.

Referring to in conjunction with in step a client receives data defining at least one file category from a server such as described above with respect to step supra.

In step file information pertaining to files belonging to the respective file category is established at the client for each of the at least one file category such as described with respect to step supra.

In step a checksum is calculated from the file information for each of the at least one file category such as described with respect to step supra. The calculated checksum may be stored.

In step a set of file categories is established for which the checksum calculated at step mismatches each of a set of checksums for the respective category. For example checksum comparator may obtain a calculated checksum for each of a plurality of file categories from checksum calculation system via checksum communication system . Checksum comparator may then compare the calculated checksum for each of the plurality of file categories with one or more or all previously calculated checksums for the respective file category stored in storage device and create i.e. establish a set of file categories containing only those file categories for which the aforementioned comparison yielded no match. Such mismatch is indicative of a change to difference in the files belonging to that category.

In optional step file data to be communicated from a client to a server is selected based on the aforementioned set of file categories. The file data is selected from the file information of the set of file categories i.e. from file information as established in step pertaining to at least one file belonging to at least one of the file categories in the set of file categories. For example if it is ascertained that of the file categories specifying file location solely the checksum for files from the folder IBM Applications on storage device has changed does not match known checksums and that of the file categories specifying file type solely the checksum for files of type .exe has changed does not match known checksums then it could suffice to select and send as the aforementioned file data just file information relating to files of type .exe in folder IBM Applications from client to the server . To this respect first file data selection system portion A located in server may perform the aforementioned selection of file data and communicate to second file data selection system portion B located in client that file information relating to files of type .exe in folder IBM Applications on storage device is to be communicated to server e.g. via first file data communication system portion A and second file data communication system portion B.

The aforementioned features of the present disclosure can also be embodied as described hereinbelow with reference to . schematically shows an embodiment of a software discovery system in accordance with an embodiment of the present invention. In particular schematically depicts the mount points of a software discovery system configured with the four clients. schematically shows an embodiment of the present invention of a workflow of the software discovery system shown in .

One idea of the present disclosure is to reuse information from software scans that have already been done and are available on the server side. This way a CPU usage of a server and the network utilization will be reduced. A customer will get the inventory results and the software reports faster. The idea is to reuse data not only from one machine but from many or all machines that already provided data to a server. It is often that end user systems are similar. For example multiple users may use the same software and the same versions thereof e.g. the same office programs same browsers same specialized software same tools etc. .

Such reuse of information can be achieved by introducing checksums in the scan results. Checksums can be grouped into different categories. The following exemplary types categories of checksums are proposed 

Every agent located on a client machine may calculate checksums for any category specified by a server. The actual checksum is generated for data that may have the form of a list containing for example a file name path size version optional on windows modification creation time.

The teachings of the present disclosure yield particularly good results in the following exemplary client machine configurations 

The following discusses how the aforementioned teachings can be applied by combining two categories of checksums. The environment configuration is 

Assuming that a software configuration changed on the Windows client No. 1 it performs the scan again the local agent compares checksums with the previous values for each category it discovers that checksums changed but only for EXE extension and for PROGRAM FILES Microsoft custom path. Having this knowledge it combines both categories and decides to send the partial data only to a server which will be only the list of EXE files from PROGRAM FILES Microsoft path. When the data is received by a server it updates only a list of software products represented by EXE extension and located inside PROGRAM FILES Microsoft directory. A server knows that the rest of the software configuration did not change.

Referring again to read only memory ROM may be coupled to system bus and include a basic input output system BIOS that controls certain basic functions of computer system . Random access memory RAM and disk adapter may also be coupled to system bus . It should be noted that software components including operating system and application may be loaded into RAM which may be computer system s main memory for execution. Disk adapter may be an integrated drive electronics IDE adapter that communicates with a disk unit e.g. disk drive.

Computer system may further include a communications adapter coupled to bus . Communications adapter may interconnect bus with an outside network thereby allowing computer system to communicate with other similar devices.

I O devices may also be connected to computer system via a user interface adapter and a display adapter . Keyboard mouse and speaker may all be interconnected to bus through user interface adapter . A display monitor may be connected to system bus by display adapter . In this manner a user is capable of inputting to computer system through keyboard or mouse and receiving output from computer system via display or speaker .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the present invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the function acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the function acts specified in the flowchart and or block diagram block or blocks.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

