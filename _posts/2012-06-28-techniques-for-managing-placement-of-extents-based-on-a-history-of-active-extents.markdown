---

title: Techniques for managing placement of extents based on a history of active extents
abstract: A technique of managing data placement involves constructing an active extent list which identifies active extents stored in a storage pool based on a history of extent activity. The technique further involves based on the active extent list, generating preferred extent-tier pairings for extents of a particular LUN slice that are initially stored on a first tier of the pool, the preferred extent-tier pairings matching (i) a first extent of that LUN slice to the first tier and (ii) a second extent of that LUN slice to a second tier of the pool. The technique further involves, based on the preferred extent-tier pairings, maintaining the first extent on the first tier and relocating the second extent from the first tier to the second tier to distribute the first and second extents of that LUN slice across multiple tiers of the pool in accordance with the extent activity history.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782324&OS=08782324&RS=08782324
owner: EMC Corporation
number: 08782324
owner_city: Hopkinton
owner_country: US
publication_date: 20120628
---
In general data storage systems perform host IO input output operations on behalf host devices. Along these lines such data storage systems typically store host data within logical units LUNs .

Some data storage systems include storage tiers which provide different data access speeds. Such a data storage system may then manage data placement among the storage tiers.

For example suppose that a data storage system includes a tier of flash storage devices followed by a lower tier of SAS Serial Attached Small Computer System Interface devices follow by yet a lower tier of near line SAS devices. One conventional approach to placing host data among the storage tiers involves counting the number of host IO operations that are made to each LUN slice i.e. 1 Gigabyte GB LUN sections and migrating the LUN slices among the storage tiers based on the counted number of host IO operations for each LUN slice. That is the data storage system counts the number of host IO operations performed on each LUN slice during a set period of time such as a day to determine which LUN slices are the most frequently accessed. The data storage system then moves the LUN slices which are accessed most often to the highest tier while pushing other less frequently accessed LUN slices down to the lower tiers as needed.

Unfortunately there are deficiencies to the above described conventional approach to moving LUN slices i.e. 1 GB LUN sections among storage tiers based on the counted number of host IO operations for each LUN slice. For example due to the coarse 1 GB granularity of a LUN slice the conventional approach cannot distinguish between i one LUN slice which is accessed in an evenly distributed manner and ii another LUN slice having a few data blocks which are very active and large areas which are very inactive. Rather both LUN slices would be treated in the same manner by the conventional approach even though it might be preferable to promote one of the LUN slices to a higher storage tier.

One might consider simply changing the level of granularity from a LUN slice to a data block e.g. 8 KB 4 KB 512 bytes etc. . Unfortunately individually counting host IO operations at the data block level would be extremely costly in terms of overhead. That is the processing time and the amount of memory required to track the number of host IO operations to each data block makes this alternative prohibitively expensive. Additionally this may cause fragmentation since each data block would be counted individually without considering spatial locality of reference.

In contrast the above described conventional approach to moving LUN slices among storage tiers based on the counted number of host IO operations for each LUN slice an improved technique involves managing data placement of extents based on a history of extent activity. Such a history is capable of being gathered by and then obtained from a lock history database which records IO hot spots based on ranges of extents which are locked by host IO operations. In accordance with the improved technique a first extent of a particular LUN slice may be stored on a first tier of storage e.g. slow storage devices and a second extent of the particular LUN slice may be stored on a second tier of storage e.g. fast storage devices thus providing data placement at the sub slice level. Moreover the improved technique may involve finding free space on a partially consumed slice of memory in the second tier and relocating the second extent to a free area of that partially consumed slice in the second tier in order to optimize space utilization.

One embodiment is directed to a method of managing placement of extents which is performed in a data storage apparatus having i processing circuitry and ii a pool of non volatile storage which stores the extents. The method includes constructing by the processing circuitry an active extent list which identifies active extents stored in the pool based on a history of extent activity. The method further includes based on the active extent list generating a set of preferred extent tier pairings for extents of a particular logical unit LUN slice that are initially stored on a first tier of the pool the set of preferred extent tier pairings matching i a first extent of the particular LUN slice to the first tier of the pool and ii a second extent of the particular LUN slice to a second tier of the pool. The method further includes based on the set of preferred extent tier pairings maintaining storage of the first extent of the particular LUN slice on the first tier of the pool and relocating storage of the second extent of the particular LUN slice from the first tier of the pool to the second tier of the pool to distribute storage of the first and second extents of the particular LUN slice across multiple tiers of the pool in accordance with the history of extent activity.

In some arrangements the second tier includes a LUN slice sized memory area having a filled portion which currently stores host data and an empty portion which is currently free to store host data. In these arrangements relocating storage of the second extent from the first tier to the second tier includes repositioning the second extent from the first tier to the empty portion of the LUN slice sized memory area of the second tier. Such operation enables host data of multiple LUN slices to occupy a single LUN slice sized area of memory

In some arrangements the active extent list includes a ranking of extents according to the history of extent activity. In these arrangements generating the set of preferred extent tier pairings includes based on the ranking of extents of the active extent list selecting i certain extents to move from the first tier to the second tier and ii other extents to continue to store in the first tier. Here the second extent of the particular LUN slice is among the certain extents selected to be moved from the first tier to the second tier.

In some arrangements selecting certain extents to move from the first tier to the second tier and other extents to continue to store in the first tier includes prior to copying the second extent from the first tier to the empty portion of the LUN slice sized memory area of the second tier identifying LUN slice sized memory areas of the second tier which have empty portions which are currently free to store host data. That is the data storage apparatus is routinely able to find LUN slice sized areas of memory having free space to store additional host data extents.

In some arrangements the method further includes prior to copying the second extent from the first tier to the empty portion of the LUN slice sized memory area of the second tier evacuating LUN slices of host data from the second tier to the first tier to increase available storage space in the second tier. In these arrangements the data storage apparatus may evacuate cold LUN slices i.e. LUN slices which are relatively inactive from the second tier to the first tier.

Other embodiments are directed to systems apparatus processing circuits computer program products and so on. Some embodiments are directed to various methods devices electronic components and circuitry which are involved in managing data placement of extents based on a history of extent activity.

Improved techniques involve managing data placement of extents based on extent activity history. Such a history is capable of being gathered by and then obtained from a lock history database which records IO hot spots i.e. active extents based on ranges of extents which are locked by host IO operations. In accordance with the improved techniques a first extent of a particular LUN slice may be stored on a first tier of storage e.g. slow storage devices and a second extent of the particular LUN slice may be stored on a second tier of storage e.g. fast storage devices thus providing data placement granularity at the sub slice level. Moreover the improved technique may involve finding free space on a partially consumed slice of memory in the second tier and relocating the second extent to a free area of that partially consumed slice in the second tier in order to optimize space utilization.

The host devices are constructed and arranged to store host data into and load host data from the data storage system . Along these lines each host device provides host IOs e.g. read commands to read host data write commands to write host data etc. to the data storage system for processing.

The data storage system is constructed and arranged to process the host IOs from the host devices by performing host TO operations e.g. read IOs write IOs etc. in response to the host IOs on a set of LUNs . Each LUN is partitioned into 1 GB slices and each 1 GB slice is partitioned into extents e.g. 8 KB data blocks . Such extents are addressable e.g. via logical block addressing or LBAs and are mappable e.g. to file system block numbers or FSBNs .

Additionally the data storage system is constructed and arranged to manage data placement operations based on a list of active extents . Such data placement operations include among others things polling for extent activity information ranking extents based on activity e.g. hot or cold temperature generating preferred extent tier pairings for the extents finding potential partially consumed slice locations among tiers of storage relocating extents among the storage tiers and evacuating extents from higher storage tiers to lower storage tiers. As will be explained in further detail below the data storage system is able to construct the active extent list from range lock information stored in a lock history database and manage the data placement operations based on such range lock information .

The communications medium connects the various components of the data storage environment together to enable these components to exchange electronic signals e.g. see the double arrow . At least a portion of the communications medium is illustrated as a cloud to indicate that the communications medium is capable of having a variety of different topologies including backbone hub and spoke loop irregular combinations thereof and so on. Along these lines the communications medium may include copper based data communications devices and cabling fiber optic devices and cabling wireless devices combinations thereof etc. Furthermore the communications medium is capable of supporting LAN based communications SAN based communications or combinations thereof.

During operation the data storage system receives host IOs from the host devices . In order to maintain data consistency the data storage system imposes locks on the extents when processing the host IOs . For example the data storage system applies read or shared locks on ranges of extents when the host devices read host data from these ranges of extents . Furthermore the data storage system applies write or exclusive locks on ranges of extents when the host devices write host data to these ranges of extents .

As the data storage system imposes range locks on the ranges of extents the data storage system updates the range lock information in the lock history database based on these range locks. Accordingly the data storage system is then able to discern which extents are more active than others based on the range lock information . In particular the data storage system constructs a list of active extents and then efficiently manages data placement operations based on the list . For example based on the list the data storage system relocates more active extents to higher storage tiers i.e. faster storage . Additionally based on the list the data storage system evacuates less active extents to lower storage tiers i.e. slower storage as needed. Further details will now be provided with reference to .

The host interface is constructed and arranged to connect the data storage system to the communications medium . Accordingly the host interface enables the data storage system to communicate with the other components of the data storage environment such as the host devices .

The memory is intended to represent both volatile memory e.g. DRAM SRAM etc. and non volatile memory e.g. flash storage units magnetic disk drives etc. . The data storage applications represent the operating system drivers utilities and tools user level applications GUIs and so on. The pool of tiered non volatile storage represents persistent memory which contains the host data. The other memory constructs include additional memory based items such as a buffer cache to temporarily cache copies of host data accessed by the host devices metadata for locks metadata for the data placement operations e.g. the active extent list the preferred extent tier pairings for the extents etc. and so on.

In some arrangements the pool of tiered non volatile storage is tiered into several levels based on access speed. For example the pool of tiered non volatile storage may include a first tier of flash memory a second tier of SAS memory and a third tier of near line SAS memory. In these arrangements the buffer cache of the data storage system also see the other memory in is constructed and arranged to temporarily cache on behalf of the host devices copies of the extents which are persistently stored and synchronized in the respective storage tiers of the pool of tiered non volatile storage .

The processing circuitry is constructed and arranged to perform load and store operations i.e. to process host IOs on behalf of the host devices . Additionally the processing circuitry is constructed and arranged to control updating of the lock history database generate a list of active extents based on the lock history database and manage data placement operations based on the list also see .

It should be understood that the processing circuitry can be implemented in a variety of ways including via one or more processors running specialized software application specific ICs ASICs field programmable gate arrays FPGAs and associated programs discrete components analog circuits other hardware circuitry combinations thereof and so on. In the context of one or more processors running specialized software a computer program product is capable of delivering all or portions of the software to the data storage system . The computer program product has a non transitory or non volatile computer readable medium which stores a set of instructions which controls one or more operations of the data storage system . Examples of suitable computer readable storage media include tangible articles of manufacture and apparatus which store instructions in a non volatile manner such as CD ROM flash memory disk memory tape memory and the like.

During operation the data storage system performs host IO operations in response to the host IOs received from the host devices . As the data storage system imposes locks on ranges of extents prior to accessing the ranges of extents the data storage system updates range lock information in the lock history database based on the ranges of extents which were locked by the host IO operations .

With the range lock information of the lock history database now available for analysis the contents of the lock history database are able to identify particular extents which are active and inactive. As a result the data storage system is able to effectively manage the data placement process based on levels of activity recorded at the sub slice level i.e. based on extent activity. Further details will now be provided with reference to .

The range lock module is constructed and arranged to impose range locks on ranges of extents as the data storage system performs the host IO operations and thus preserve data coherency and consistency. By way of example the range lock module is shown as responding to a host IO to read host data from extents A . . . B by providing as part of that host IO operation a read lock i.e. a shared lock on extents A . . . B . Additionally the range lock module is shown as responding to another host IO to write host data to extents X . . . Y by providing as part of that host IO operation a write lock i.e. an exclusive lock on extents X . . . Y .

The lock history module is constructed and arranged to manage the lock history database holding the range lock information also see . In particular the lock history module receives IO event messages from the range lock module which informs the lock history module of the range locks imposed by the range lock module . For example when the range lock module imposes the read lock on extents A . . . B the range lock module provides an IO event message informing the range lock module that a read lock was imposed on the range of extents A . . . B and the lock history module responds by adding an appropriate entry into the lock history database . Likewise when the range lock module imposes the write lock on extents X . . . Y the range lock module provides an IO event message informing the range lock module that a write lock was imposed on the range of extents X . . . Y and the lock history module responds by adding another appropriate entry into the lock history database .

As further shown by the data placement module is able to communicate with the lock history module . In particular the data placement module sends a request signal to the lock history module to obtain the contents of the lock history database . In response to the request signal the lock history module provides a response signal containing the contents of the lock history database thus enabling the data placement module to poll the contents and operate based on the contents.

Once the range lock information is obtained by the data placement module the data placement module is able to construct the list of active extents . In some arrangements the data placement module applies a policy to compute a temperature for each extent that was accessed since the last extent relocation event and places that information on the list . For example the policy may consider any extent which has not been accessed since the last extent relocation event or within a predefined amount of time such as the last 24 hours to be cold and either not include that extent on the list at all or indicate on the list that the extent is cold. Additionally the policy may consider any extent which has been accessed since the last extent relocation event or within the predefined amount of time but accessed less than a predefined number of times such as six times eight times etc. since the last extent relocation event to be moderate in temperature. Furthermore the policy may consider any extent which has been accessed over the predefined number of times since the last extent relocation event or within the predefined amount of time to be hot . Other policies are suitable for use as well.

In some arrangements the range lock module and the data placement module communicate with the lock history module through an application programming interface API . That is each module is able to call a predefined routine or issue a predefined instruction to the lock history module . Similarly the lock history module is able to call a predefined routine or issue a predefined instruction to the other modules . Further details will now be provided with reference to .

With attention directed to the list of active extents identifies extents which recently received range locks as imposed by the range lock module and tracked by the lock history module . Such a list is capable of being constructed by filtering and tabulating the range lock information obtained from the lock history module .

By way of example list includes entries which correspond to respective extents . Each entry includes a logical extent identifier field a time stamp field an access count field an access level field and other fields . The logical extent identifier field is constructed and arranged to hold the logical extent identifier of a particular extent e.g. a logical block address . The time stamp field is constructed and arranged to hold the time stamp of the most recent write to the particular extent . The access count field is constructed and arranged to hold the number of times the particular extent has been accessed i.e. read or written since the last time the data placement module constructed the list or within a predefined amount of time . The access level field is constructed and arranged to hold a classification e.g. temperature of the particular extent based on access activity e.g. hot moderate etc. . The other fields are constructed and arranged to hold additional data such as the file identifier or owner of the particular extent the physical location of the particular extent etc.

In some arrangements the list includes cold extents as well. In some arrangements the number of different classes in the list is different than three e.g. two classes four classes etc. . In some arrangements extents are ranked or ordered based on the amount of access activity. Other list arrangements are suitable for use as well.

As mentioned earlier the criteria for classifying each entry in the list is capable of being set by a policy . Over time a user of the data storage system is able to make adjustments e.g. tune to the operation of the data placement module by changing the policy e.g. modifying policy settings adding enhancements to the policy etc. .

With attention directed to the set of preferred extent tier pairings which is generated by the data placement module as part of the data placement process. By way of example each preferred extent tier pairing includes a logical extent identifier field a storage tier identifier field and other data fields .

The logical extent identifier field is constructed and arranged to hold a logical identifier of a particular extent e.g. a logical block address . The storage tier identifier field is constructed and arranged to hold a storage tier identifier of a particular storage tier of the pool of non volatile storage also see . The other data fields are constructed and arranged to hold other data such as a file or LUN identifier to which the extent belongs and so on.

With attention directed to the data placement module also see performs a procedure of evaluating extents of a particular 1 GB LUN slice of host data for possible relocation. In particular rather than simply relocate or maintain the entire 1 GB LUN slice the data placement module is able to relocate individual extents and thus optimize data placement with improved precision. In some arrangements such operation occurs during a scheduled relocation time window i.e. during a detected extended period of inactivity nightly etc. .

In step the data placement module constructs an active extent list which identifies active extents stored in the pool of non volatile storage based on a history of extent activity. In particular the data placement module periodically polls the lock history module for such information e.g. every five minutes every hour etc. .

In step the data placement module generates based on the active extent list a set of preferred extent tier pairings for extents of the particular LUN slice that are initially stored on a first tier of the pool of non volatile storage . In particular the set of preferred extent tier pairings matches i a first extent of the particular LUN slice to the first tier of the pool of non volatile storage and ii a second extent of the particular LUN slice to a second tier of the pool of non volatile storage .

In step the data placement module based on the set of preferred extent tier pairings maintains storage of the first extent of the particular LUN slice on the first tier of the pool of non volatile storage and relocates storage of the second extent of the particular LUN slice from the first tier of the pool of non volatile storage to the second tier of the pool of non volatile storage . Accordingly the data placement module is able to distribute storage of the first and second extents of the particular LUN slice across multiple tiers of the pool of non volatile storage in accordance with the history of extent activity.

The left side of shows initial positions of two extents which occupy a particular LUN slice . As further shown on the left side of another LUN slice is partially filled with host data but also include a free portion illustrated by the dashed lines .

During relocation analysis the data placement module evaluates the extents and constructs the list also see and step in . Then the data placement module generates new extent tier pairings based on the list also see and step in . Finally based on the extent tier pairings the data placement module moves certain extents see extent in to another tier.

By way of example and as shown on the right side of the extent is relocated to the available space of the LUN slice . Accordingly the extent no longer resides in the LUN slice . As a result the LUN slice now has available space perhaps to hold another extent .

It should be understood that similar relocation operations may occur from tier to tier . Moreover there is no requirement that relocation must occur between adjacent tiers. Rather it is possible for an extent to be relocated from tier to tier etc.

In some arrangements the data placement module evacuates entire LUN slices from higher tiers to lower tiers as space is needed. In other arrangements the data placement module evacuates entire LUN slices as soon as the data placement module reclassifies the LUN slices to a different storage tier and space on the storage tiers is available. Further details will now be provided with reference to .

As shown in the lock history database includes a set of range lock entries . Each time the lock history module receives an event message informing the lock history module of a new lock imposed on a range of extents from the range lock module the lock history module adds a new range lock entry in the lock history database to record that lock also see .

Each range lock entry includes a lock type field a logical unit identifier or file ID field a time stamp field and a set of range fields . The fields of each range lock entry hold range lock information corresponding to a range lock imposed by the range lock module during a particular host IO operation thus recording the details of that range lock . In particular the lock type field holds a value indicating the type of lock e.g. a read lock or a write lock for that range lock . The logical unit identifier field holds a logical unit identifier to identify a logical unit for that range lock i.e. a particular logical unit among multiple logical units maintained for reading and writing by the data storage system . The time stamp field holds a time stamp indicating a particular time in which a particular host IO operation locked the range of extents . The set of range fields holds range data identifying the particular range of extents which was locked by the particular host IO operation .

In some arrangements the set of range fields includes a starting offset field and a range length field . The starting offset field of a range lock entry holds a starting offset of a particular range lock and the range length field holds the length of that particular range lock .

In other arrangements the set of range fields define range locks differently. For example in some arrangements the set of range fields simply includes a start offset field and an end offset field to hold the starting and ending offsets of a particular range lock .

Once a set of range lock entries has been processed to produce aggregated lock data the aggregated lock data indicates the extents that had been identified by the set of range locks . Accordingly the aggregated lock data identifies extents which have been recently accessed and which are thus considered active or hot . Once the aggregated lock data has been formed future processing of a new set of range lock entries i.e. range lock entries which have been added to the lock history database since the last consolidation process involves adjusting or updating the existing aggregated lock data based on the new set of range lock entries .

In some arrangements when the lock history module receives a request signal for the contents of the lock history database the lock history module performs the consolidation process on any existing range lock entries to update the aggregated lock data . The lock history module then provides as a response signal only the aggregated lock data . For example the response signal may include a file or a pointer to a file containing just the aggregated lock data or a copy of the aggregated lock data .

In some arrangements the aggregated lock data persists until it is cleared e.g. in response to a user command to reset the values of the lock history database . In some arrangements the lock history database resides in non volatile storage so that the lock history database persists even during a reboot of the data storage system .

In some arrangements the aggregated lock data includes a mapping table which maps tallied access counts to each extent . In other arrangements the aggregated lock data includes nodes corresponding to time intervals e.g. one hour ago two hours ago etc. where each node identifies ranges of extents which have been accessed within a particular time interval. Accordingly the particular structure for the range lock information in the aggregated lock data may take a variety of forms e.g. trees linked lists counters combinations thereof and so on.

One will appreciate that a variety of criteria may be used as a determining factor as to whether each extent is active or inactive. In some arrangements if the lock history database indicates that an extent was accessed within a predefined amount of time e.g. an hour six hours etc. the extent is considered active. In other arrangements if the lock history database indicates that an extent was accessed at least a certain predefined amount of times within a particular amount of time e.g. at least 3 times within the last 24 hours etc. the extent is considered active. Similarly an extent may be considered inactive if the extent fails to satisfy the active criteria. Further details will now be provided with reference to .

In step the lock history module receives a lock history request. For example the data placement module or another service module may provide a request signal to the lock history module requesting the contents of the lock history database .

In step the lock history module providing the contents of the lock history database to identify as the IO hot spots extents which were locked by the host IO operations . In particular the lock history module outputs a response signal back to the requesting data placement module .

As described above an improved technique involves managing data placement of extents based on a history of extent activity. Such a history is capable of being gathered by and then obtained from a lock history database which records IO hot spots based on ranges of extents which are locked by host IO operations . In accordance with the improved technique a first extent of a particular LUN slice may be stored on a first tier of storage e.g. slow storage devices and a second extent of the particular LUN slice may be stored on a second tier of storage e.g. fast storage devices thus providing data placement at the sub slice level. Moreover the improved technique may involve finding free space on a partially consumed slice of memory in the second tier and relocating the second extent to a free area of that partially consumed slice in the second tier in order to optimize space utilization.

While various embodiments of the present disclosure have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present disclosure as defined by the appended claims.

For example it should be understood that the above described technique for evacuating slices from a higher storage tier to a lower storage tier are able to base the evacuation decisions on the range lock information of the lock history database as well. Alternatively such evacuation decisions may be based on separately collected access counts of the slices themselves based on combinations of data collected from different sources etc.

Based on the above one will appreciate that hard disk drives can be categorized to different storage tiers based on their performance characteristics and that given IO workload skews commonly existing in real world applications it may be preferable to place hot data to higher tier storage to improve overall system performance. However prior to the improved techniques a challenge existed in how to effectively identified hot data is moved data to optimal locations. Advantageously the improved techniques are able to utilize range lock stats from CBFS generating IO hot spot trend information and thus move hot data to higher storage tiers to improve IO performance based on these stats.

One will appreciate that the various extent activity statistics can be used for advanced techniques of data placement as well. For example utilizing range lock stats could also help track application IO access patterns and reduce eliminate impact of back ground IO activity such as backup events or online data verification.

Additionally the data placement module is capable of differentiating between different IO types such as read vs. write random vs. sequential small vs. big IO and is thus able to relocate data to different storage tiers based on such differentiation. For example such techniques may be used to place data prone to write operations on single cell flash drives and data prone to read operations on multiple cell flash drives to optimize access times. Such modifications and enhancements are intended to belong to various embodiments of the disclosure.

