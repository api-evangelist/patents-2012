---

title: Thin client for mapping system
abstract: A method of operating a thin client in a mapping system includes receiving, by the thin client, a map adapter from a map server; loading the map adapter in the thin client, wherein the loaded map adapter comprises a map engine; receiving, by the thin client, map data from the map server; and displaying, by the thin client, the map data in the map engine in the map adapter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745174&OS=08745174&RS=08745174
owner: Raytheon Company
number: 08745174
owner_city: Waltham
owner_country: US
publication_date: 20120703
---
The present disclosure relates generally to mapping systems and more particularly to a mapping system including a thin client.

Map data is used in a wide variety of applications including military applications cartography remote sending land surveying public utility management natural resource management geography urban planning emergency management navigation and localized searched engines. Different applications may require that the map data may be displayed in a format that is tailored for the particular application and the interactions between the user and the map data may also vary based on the application. There are large variations of mapping requirements between different applications. Various map engines may be developed for displaying of map data for differing mapping applications. However adding replacing and updating a map engine in a mapping system may be difficult and cost prohibitive as relatively complex map engine specific code may be required on the client side for each map engine.

In an exemplary embodiment a method of operating a thin client in a mapping system includes receiving by the thin client a map adapter from a map server loading the map adapter in the thin client wherein the loaded map adapter includes a map engine receiving by the thin client map data from the map server and displaying by the thin client the map data in the map engine in the map adapter.

In another embodiment a computer program product comprising a computer readable storage medium containing computer code that when executed by a computer implements a method for operating a thin client in a mapping system wherein the method includes receiving by the thin client a map adapter from a map server loading the map adapter in the thin client wherein the loaded map adapter includes a map engine receiving by the thin client map data from the map server and displaying by the thin client the map data in the map engine in the map adapter.

In yet another embodiment a mapping system includes a thin client configured to receive a map adapter from a map server load the map adapter wherein the loaded map adapter includes a map engine receive map data from the map server and display the map data in the map engine in the map adapter.

Embodiments of a mapping system including a thin client and methods of using a mapping system including a thin client are provided with exemplary embodiments being discussed in detail. A thin client is a computer or a computer program which depends on another computer i.e. a server such as a map server to fulfill its computational roles. This stands in contrast to a thick client that comprises a computer and computer program designed to perform these roles by itself. The thin client supports display of multiple web based maps through a common interface such as a web browser. The thin client interacts with a map sever that hosts a plurality of map adapters each of the plurality of map adapters corresponding to a different mapping engine. A particular map adapter may be provided to the thin client by the map server via for example a uniform resource locator URL . A user of the thin client may load a desired map adapter in the thin client via the URL and then load map data from the map server into a map engine in the loaded map adapter. Changes and additions to the various map adapters in the map server may be made on the map server such that neither the map server or the thin client require restarting in order to add a new map adapter or change an existing map adapter. The thin client therefore provides runtime plug and play map engines giving improved performance and increased development speed with decreased maintenance time for the mapping system. The thin client supports multiple technologies for map adapters for example Adobe Flex or JavaScript and multiple symbology i.e. map decoration data sets for map display and also provides common interface for user interactions with various maps such as drawing on the map and measurement tools. Advanced field artillery tactical data system AFATDS general map interface GMI alignment and reuse are supported the common set of objects in AFATDS allows control of the heterogeneous mapping engines by the thin client.

The map server comprises a web server that hosts multiple map adapters that may be loaded in the thin client. The map adapters may be accessible by for example respective URLs. The various map adapters may comprise any appropriate type of map engine such as 2 dimensional and or 3 dimensional map engines in various embodiments. The thin client which may be located on a remote computer initially requests one or more map adapters based on for example preferences privileges and or capabilities of a user of the thin client. The map server returns the requested map adapter URL s which the thin client then uses to select retrieve and load a particular map adapter in the thin client as the client map adapter. A thin client for a mapping system may be implemented using Adobe Flex and Flash or Javascript in various embodiments with cross browser support. ActionScript or JavaScript may be used for data types and interfaces in some embodiments. The map adapter is responsible for only one instance of a specific map engine at a time and is the sole location of map engine API usage. Java classes on the map server may be associated with ActionScript class bindings for communication between the map server and the thin client BlazeDS ActionScript Message Format AMF may be used in some embodiments. In addition new map adapters may be loaded on the map server and made available to the thin client without the need to restart either the map server or the thin client.

Interactions between map server and the thin client are described with respect to which shows a flowchart of a method of loading a map adapter from a map server into a thin client. First in block of the thin client sends a request to the map server for a map adapter. The request that is sent in block of may include user credentials of a user that is using the thin client . The request may be sent at any point during operation of the thin client including but not limited to startup. Flow of method then proceeds to block in which the map service determines a list of one or more URLs corresponding to one or more of map adapters A N and sends the one or more URLs to the common map controller in the thin client . The one or more URLs may be determined by the map service based on the user credentials that were included in the request in some embodiments. Flow of method then proceeds to block in which the user selects a particular map adapter from the one or more URLs and the common map controller sends a map adapter request comprising the URL corresponding to the selected map adapter to the map file server . In some embodiments the thin client may present the user with a list of available map adapters corresponding to the one or more URLs such that the user may select particular desired map adapter from the list. Method then proceeds to block in which the map file server sends the selected map adapter which comprises one of map adapters A N corresponding to the URL sent in the map adapter request to the common map controller . Lastly the selected map adapter is then loaded in the common map controller as client map adapter in block of method of . During the flow of method of neither the map server nor the thin client need to be restarted.

The client map adapter may load and display map data to the user in a map engine in the client map adapter and allow the user to interact with the map data via the map engine. However different mapping applications may require different symbology to be applied to map data for display of the map data. shows an embodiment of a mapping system corresponding to mapping system that was shown in including map server and thin client with additional symbology functionality. In addition to the various components and that were shown in map server includes translator domain data model map data model symbology service and custom styling and decoration service and thin client includes non map related code module custom map data and map engine . The domain data model in the map server contains objects that relate to business logic for the various map adapters. Translators are registered with the map server the translators are responsible for translating domain objects in to map items. These map items are placed in map data model which comprises a shared cache of map items such as icons lines shapes and or colors. The map data model is based on AFATDS GMI and is therefore map adapter independent and may be used in conjunction any type of map adapter such as 2 and 3 dimensional map adapters. Data that is not related to mapping is sent by the domain data model to the a non map related code module in the thin client which retrieves the needed map items from the map data model and passes the map items into the client map adapter . The client map adapter stores the map items in custom map data which comprises a local cache of map items. Before display of the map items in map engine some map items may be sent back to the map server by the client map adapter for decoration based on user preferences user privileges tactical or military specifications and map adapter capabilities. For example a line on a map may appear in various different ways depending on the tactical purpose or military meaning of the map. The client map adapter stores the custom map data and makes calls into the application programming interface API of the map engine to display the map to a user and to allow the user to interact with the map.

Decoration of map data that is displayed in the client map adapter in the thin client is discussed in further detail with respect to which shows a flowchart of a method for decorating map data in the mapping system . First in block the domain data model sends business logic to the non map related code module in the thin client and also sends map items to the map data model in the map service in the map server . Flow then proceeds to block of method in which the map data model sends map items to the common map controller in the thin client . Next in block of method the common map controller sends undecorated map data in client map adapter the undecorated map data comprises the map items . The undecorated map data is stored in custom map data . Flow then proceeds to block of method in which the custom styling and decoration service in symbology service provides symbology data to client map adapter for some or all of the undecorated map data that is stored in custom map data . The symbology data is decorated map data that replaces some or all of the undecorated map data in custom map data . The symbology for a particular map is determined by symbology service in conjunction with custom styling and decoration service as appropriate. Map decoration and symbology such as is performed by symbology service in conjunction with custom styling and decoration service may be performed as is described in U.S. patent application Ser. No. 12 784 048 Bryan et al. Providing a Symbol filed on May 20 2010 which is herein incorporated by reference in its entirety. Lastly in block of the map engine loads the custom map data resulting in a decorated map that is displayed to the user via map engine . The user may then interact with the decorated map in any appropriate manner via the map engine . The map engine may display the map to the user via a web browser in some embodiments.

Next a layer is then added to the map via commands . The map server sends a create overlay request with the map identifier and an overlay identifier to the common map controller . The common map controller then sends a create overlay request to the client map adapter with the overlay identifier and the client map adapter sends create layer request to the map engine to create a map layer in the map based on the overlay identifier. A plurality of layers may be created in the map by repeating commands with different overlay identifiers in some embodiments.

Next map items are provided to the client map adapter via commands . First the map server sends a request to add a map item with the map identifier and the map item to the common map controller which sends the map item to the client map adapter . A plurality of map items may be provided from the map server to the client map adapter by repeating commands and with different map items in some embodiments.

The map item s in the client map adapter are then added to the layer s of the map in the map engine via commands . The map server sends request to the common map controller to add a map item to a particular layer in the map with the map identifier the map item identifier and the overlay identifier. The common map controller then sends request to add the specified map item to the specified map layer to the client map adapter . Commands and may be repeated as often as necessary a single map item may be added to multiple layers in a single map and a single layer in the map may have any appropriate number of map items added to it. At this point the client map adapter has undecorated map data comprising the location of the various map items in the map.

The client map adapter then sends a decoration request to the map server and receives response from the map server this may be required for some types of map items in the map and decoration request and response may be repeated as often as needed for the various map items. The client map adapter then generates the map specific graphics for display of the map via command command may be repeated for each instance of each map item in the map. These graphics are then provided to the map engine for display of the map via display command .

The computer includes but is not limited to PCs workstations laptops PDAs palm devices servers storages and the like. Generally in terms of hardware architecture the computer may include one or more processors memory and one or more input and or output I O devices that are communicatively coupled via a local interface not shown . The local interface can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface may have additional elements such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software that can be stored in the memory . The processor can be virtually any custom made or commercially available processor a central processing unit CPU a digital signal processor DSP or an auxiliary processor among several processors associated with the computer and the processor may be a semiconductor based microprocessor in the form of a microchip or a macroprocessor.

The memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as dynamic random access memory DRAM static random access memory SRAM etc. and nonvolatile memory elements e.g. ROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM programmable read only memory PROM tape compact disc read only memory CD ROM disk diskette cartridge cassette or the like etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

The software in the memory may include one or more separate programs each of which comprises an ordered listing of executable instructions for implementing logical functions. The software in the memory includes a suitable operating system O S compiler source code and one or more applications in accordance with exemplary embodiments. As illustrated the application comprises numerous functional components for implementing the features and operations of the exemplary embodiments. The application of the computer may represent various applications computational units logic functional units processes operations virtual entities and or modules in accordance with exemplary embodiments but the application is not meant to be a limitation.

The operating system controls the execution of other computer programs and provides scheduling input output control file and data management memory management and communication control and related services. It is contemplated by the inventors that the application for implementing exemplary embodiments may be applicable on all commercially available operating systems.

Application may be a source program executable program object code script or any other entity comprising a set of instructions to be performed. When a source program then the program is usually translated via a compiler such as the compiler assembler interpreter or the like which may or may not be included within the memory so as to operate properly in connection with the O S . Furthermore the application can be written as an object oriented programming language which has classes of data and methods or a procedure programming language which has routines subroutines and or functions for example but not limited to C C C Pascal BASIC API calls HTML XHTML XML ASP scripts FORTRAN COBOL Perl Java ADA .NET and the like.

The I O devices may include input devices such as for example but not limited to a mouse keyboard scanner microphone camera etc. Furthermore the I O devices may also include output devices for example but not limited to a printer display etc. Finally the I O devices may further include devices that communicate both inputs and outputs for instance but not limited to a NIC or modulator demodulator for accessing remote devices other files devices systems or a network a radio frequency RF or other transceiver a telephonic interface a bridge a router etc. The I O devices also include components for communicating over various networks such as the Internet or intranet.

If the computer is a PC workstation intelligent device or the like the software in the memory may further include a basic input output system BIOS omitted for simplicity . The BIOS is a set of essential software routines that initialize and test hardware at startup start the O S and support the transfer of data among the hardware devices. The BIOS is stored in some type of read only memory such as ROM PROM EPROM EEPROM or the like so that the BIOS can be executed when the computer is activated.

When the computer is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the computer pursuant to the software. The application and the O S are read in whole or in part by the processor perhaps buffered within the processor and then executed.

When the application is implemented in software it should be noted that the application can be stored on virtually any computer readable medium for use by or in connection with any computer related system or method. In the context of this document a computer readable medium may be an electronic magnetic optical or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method.

The application can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a computer readable medium can be any means that can store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium.

More specific examples a nonexhaustive list of the computer readable medium may include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic or optical a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic an optical fiber optical and a portable compact disc memory CDROM CD R W optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed or punched as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In exemplary embodiments where the application is implemented in hardware the application can be implemented with any one or a combination of the following technologies which are well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

The technical effects and benefits of exemplary embodiments include a mapping system including a thin client for viewing of and interaction with map data the mapping system having the ability to add or modify map adapters in a map server that is associated with the thin client without disruption to the client.

While the disclosure has been described with reference to a preferred embodiment or embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the disclosure. In addition many modifications may be made to adapt a particular situation or material to the teachings of the disclosure without departing from the essential scope thereof. Therefore it is intended that the disclosure not be limited to the particular embodiment disclosed as the best mode contemplated for carrying out this disclosure but that the disclosure will include all embodiments falling within the scope of the appended claims.

