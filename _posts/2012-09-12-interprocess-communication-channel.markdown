---

title: Inter-process communication channel
abstract: Techniques are described herein that are capable of constructing an inter-process communication channel, for example, between a requesting component and a targeted process. The communication channel may have one or more links, such that each link is defined by a respective node pair in a plurality of nodes. The plurality of nodes includes the requesting component, the targeted process, and optionally one or more intermediate nodes. An attachment request is received via a user interface. The requesting component is attached to the targeted process. For instance, the links may be traversed to discover the targeted process. The communication channel is established. For instance, in each node of a subset of the plurality of nodes, node information may be retained to indicate a next consecutive node of the plurality of nodes to which messages from the requesting component to the targeted process are to be delivered.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507653&OS=09507653&RS=09507653
owner: Microsoft Technology Licensing, LLC
number: 09507653
owner_city: Redmond
owner_country: US
publication_date: 20120912
---
Historically tooling functionality for web applications e.g. msn.com google.com yahoo.com facebook.com etc. is tightly coupled with the web applications. For instance tools for a web browser e.g. F12 tools for Internet Explorer or Chrome tools for Google Chrome typically are integrated into the browser. Increasingly however applications that are external to web applications are providing tooling functionality for such web applications. Applications that are capable of performing tooling operations with respect to a web application are often referred to as requesting applications or tooling applications. The web applications on which tooling operations are performed are commonly referred to as targeted applications.

Performing tooling operations on web applications by requesting applications that are external to the web applications provides some challenges because information that is historically provided within web application tools e.g. hypertext markup language HTML views console windows etc. may not easily be provided to the requesting applications. Furthermore web application code is often most easily inspected modified etc. in context of a dynamic language such as JavaScript HTML. However it can be challenging to augment a callable application programming interface API within a targeted application and or to provide a sufficient level of isolation from dynamic language code of a web application to ensure its integrity. Moreover conventional approaches for diagnosing web applications may encounter difficulty with respect to new web devices e.g. tablet computers and or platforms e.g. ARM in which limited resources or the newness of the architecture may inhibit utilization of existing integrated development environment IDE and or integrated web application e.g. web browser techniques.

Various approaches are described herein for among other things constructing an inter process communication channel. For instance the inter process communication channel may be constructed between a requesting component and a specified targeted process. Examples of a requesting component include but are not limited to a process e.g. an application or a service a hosted component e.g. a dynamic language execution engine a component object model COM object a dynamically loaded dynamic link library DLL etc. A dynamic language execution engine is a component e.g. software hardware firmware or any combination thereof that is capable of compiling executing and or interpreting dynamic language code. The dynamic language execution engine may be capable of performing other operations with respect to the dynamic language code including but not limited to accepting parsing etc. A dynamically loaded DLL is a component that is not directly compiled into a process rather the DLL is dynamically loaded into a process after start up.

An example method of constructing a communication channel between a requesting component and a specified targeted process is described. In accordance with this method an attachment request is received via a user interface. For instance the attachment request may indicate that the requesting component is to be attached to the specified targeted process. The attachment request includes a node indicator that specifies an order of a plurality of nodes with respect to which the communication channel is to be constructed. The requesting component may be an originating node of the plurality of nodes. The specified targeted process may be a destination node of the plurality of nodes. The requesting component is external to the specified targeted process. An availability query is provided to the requesting component. The availability query causes the requesting component to determine available nodes based on receipt of availability indicators from the respective available nodes. Each of the availability indicators specifies that the respective available node is capable of communicating with the requesting component. The specified targeted process is selected from available nodes based on the node indicator. The requesting component attaches to the specified targeted process to establish the communication channel therebetween. A reference to the specified targeted process is stored. The reference indicates that messages from the requesting component are to be sent to the specified targeted process via the communication channel while the requesting component is attached to the specified targeted process.

An example method of constructing a communication channel having links between a requesting component and a specified targeted process is described. In accordance with this method an attachment request is received via a user interface. For instance the attachment request may indicate that the requesting component is to be attached to the specified targeted process. The requesting component is external to the specified targeted process. The requesting component is attached to the specified targeted process. Attaching the requesting component to the specified targeted process includes traversing the links to discover the specified targeted process. Each of the links is defined by a respective pair of nodes in a plurality of nodes. The requesting component may be an originating node of the plurality of nodes. The specified targeted process may be a destination node of the plurality of nodes. The plurality of nodes includes intermediate node s between the requesting component and the specified targeted process. The communication channel is established. Establishing the communication channel includes in each node of a subset of the plurality of nodes retaining node information regarding a next consecutive node of the plurality of nodes to which messages from the requesting component to the specified targeted process are to be delivered. The subset includes the requesting components and the intermediate node s .

An example system to construct a communication channel between a requesting component and a specified targeted process is described. The system includes query logic selection logic attachment logic and storage logic. The query logic is configured to provide an availability query to the requesting component in response to receipt of an attachment request via a user interface. For instance the attachment request may indicate that the requesting component is to be attached to the specified targeted process. The attachment request includes a node indicator that specifies an order of a plurality of nodes with respect to which the communication channel is to be constructed. The requesting component may be an originating node of the plurality of nodes. The specified targeted process may be a destination node of the plurality of nodes. The requesting component is external to the specified targeted process. The availability query causes the requesting component to determine available nodes based on receipt of availability indicators from the respective available nodes. Each of the availability indicators specifies that the respective available node is capable of communicating with the requesting component. The selection logic is configured to select the specified targeted process from the available nodes based on the node indicator. The attachment logic is configured to attach the requesting component to the specified targeted process to establish the communication channel therebetween. The storage logic is configured to store a reference to the specified targeted process. The reference indicates that messages from the requesting component are to be sent to the specified targeted process via the communication channel while the requesting component is attached to the specified targeted process.

An example system to construct a communication channel having links between a requesting component and a specified targeted process is described. The system includes attachment logic and establishment logic. The attachment logic is configured to attach the requesting component to the specified targeted process in response to receipt of an attachment request via a user interface. For instance the attachment request may indicate that the requesting component is to be attached to the specified targeted process. The requesting component is external to the specified targeted process. The attachment logic includes traversal logic. The traversal logic is configured to traverse the links to discover the specified targeted process. Each of the links is defined by a respective pair of nodes in a plurality of nodes. The requesting component may be an originating node of the plurality of nodes. The specified targeted process may be a destination node of the plurality of nodes. The plurality of nodes includes intermediate node s between the requesting component and the specified targeted process. The establishment logic is configured to establish the communication channel. The establishment logic includes retaining logic. The retaining logic is configured to retain node information in each node of a subset of the plurality of nodes regarding a next consecutive node of the plurality of nodes to which messages from the requesting component to the specified targeted process are to be delivered. The subset includes the requesting components and the intermediate node s .

A computer program product is described that includes a computer readable medium having computer program logic recorded thereon for enabling a processor based system to construct a communication channel between a requesting component and a specified targeted process. The computer program product includes a first program logic module a second program logic module a third program logic module and a fourth program logic module. The first program logic module is for enabling the processor based system to provide an availability query to the requesting component in response to receipt of an attachment request via a user interface. For instance the attachment request may indicate that the requesting component is to be attached to the specified targeted process. The attachment request includes a node indicator that specifies an order of a plurality of nodes with respect to which the communication channel is to be constructed. The requesting component may be an originating node of the plurality of nodes. The specified targeted process may be a destination node of the plurality of nodes. The requesting component is external to the specified targeted process. The availability query causes the requesting component to determine available nodes based on receipt of availability indicators from the respective available nodes. Each of the availability indicators specifies that the respective available node is capable of communicating with the requesting component. The second program logic module is for enabling the processor based system to select the specified targeted process from the available nodes based on the node indicator. The third program logic module is for enabling the processor based system to attach the requesting component to the specified targeted process to establish the communication channel therebetween. The fourth program logic module is for enabling the processor based system to store a reference to the specified targeted process. The reference indicates that messages from the requesting component are to be sent to the specified targeted process via the communication channel while the requesting component is attached to the specified targeted process.

A computer program product is described that includes a computer readable medium having computer program logic recorded thereon for enabling a processor based system to construct a communication channel having links between a requesting component and a specified targeted process. The computer program product includes a first program logic module and a second program logic module. The first program logic module is for enabling the processor based system to attach the requesting component to the specified targeted process in response to receipt of an attachment request via a user interface. For instance the attachment request may indicate that the requesting component is to be attached to the specified targeted process. The requesting component is external to the specified targeted process. The first program logic module includes logic for enabling the processor based system to traverse the links to discover the specified targeted process. Each of the links is defined by a respective pair of nodes in a plurality of nodes. The requesting component may be an originating node of the plurality of nodes. The specified targeted process may be a destination node of the plurality of nodes. The plurality of nodes includes intermediate node s between the requesting component and the specified targeted process. The second program logic module is for enabling the processor based system to establish the communication channel. The second program logic module includes logic for enabling the processor based system to retain node information in each node of a subset of the plurality of nodes regarding a next consecutive node of the plurality of nodes to which messages from the requesting component to the specified targeted process are to be delivered. The subset includes the requesting components and the intermediate node s .

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Moreover it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However the scope of the present invention is not limited to these embodiments but is instead defined by the appended claims. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present invention.

References in the specification to one embodiment an embodiment an example embodiment or the like indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the relevant art s to implement such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Example embodiments described herein are capable of constructing an inter process communication channel. For instance the inter process communication channel may be constructed between a requesting component and a specified targeted process. Examples of a requesting component include but are not limited to a process e.g. an application or a service a hosted component e.g. a dynamic language execution engine a component object model COM object a dynamically loaded dynamic link library DLL etc. A dynamic language execution engine is a component e.g. software hardware firmware or any combination thereof that is capable of compiling executing and or interpreting dynamic language code. The dynamic language execution engine may be capable of performing other operations with respect to the dynamic language code including but not limited to accepting parsing etc. A dynamically loaded DLL is a component that is not directly compiled into a process rather the DLL is dynamically loaded into a process after start up.

Example techniques described herein have a variety of benefits as compared to conventional techniques for constructing communication channels. For instance the example techniques may be capable of connecting a requesting component e.g. a tool window such as a JavaScript HTML based tool window with a targeted process that includes a web application. For instance the targeted process may be running on a same machine or a different machine as the requesting component. The example embodiments may enable communication across the inter process communication channel such that the requesting component the specified targeted process and any intermediate node s therebetween is agnostic to the actual communication medium s involved on the route between the requesting component and the specified targeted process.

The example embodiments may enable a JavaScript HTML window to be integrated into a classic desktop client application e.g. an integrated development environment IDE and or to work across process machine and or platform boundaries. For instance the example techniques may permit remote communication with attached or networked machines. The example techniques may provide a general messaging architecture that can be utilized in arbitrary ways. For instance the communication channel may be configured to support construction of arbitrary protocols and or message standards. Each requesting component e.g. tool window may specify a respective messaging protocol which is broken into tool side and page side components e.g. script code .

The example embodiments may provide a relatively high amount of isolation from targeted processes and or permit more efficient use of machine resources as compared to conventional techniques. The example embodiments may provide greater performance and or flexibility over conventional remote communication channels such as distributed component object model DCOM . In a DCOM implementation where tool code consumes a reference to a remote COM object in the target environment marshaling costs particularly for scenarios such as querying document object model DOM may be prohibitively expensive. Also such conventional channels typically entail substantial setup and or configuration costs on a per tool application programming interface API basis.

The example embodiments may facilitate dynamic activation of tool components within running processes. The example embodiments may substantially reduce the debuggee side costs associated with tooling web applications. Some example embodiments are capable of implementing the communication channel as native operating system OS code as distinct from current hypertext transfer protocol based HTTP based solutions .

The example embodiments may support the ability to construct components that enable a remote client client server architecture across web code hosts e.g. browser families versions etc. hardware architectures etc. For instance some example embodiments may support attachment to web pages hosted in existing browsers e.g. Internet Explorer and to pages hosted in the Windows JavaScript HTML application hosting environment. Some example embodiments may not require registration of a browser plug in e.g. a browser helper object BHO in order to function.

The example embodiments may provide a potential facility for coalescing communications for an indeterminate number of remote targets distributed across an arbitrary number of remote environments. For instance tool windows may be swapped as required in order to provide a view into a currently selected targeted process and or to launch multiple windows of each tool window kind. Some example embodiments may be capable of showing all windows of a particular kind for multiple targets in order to for example compare and contrast data of the same kind for multiple targets.

The example embodiments may provide a generally secure execution environment that combines with the flexibility of authoring JavaScript HTML in a requesting component and or a specified targeted process. For instance JavaScript HTML may be authored safely and arbitrarily based on the security guarantees provided by the example embodiments. The example embodiments may give developers the flexibility of authoring script e.g. JavaScript and HTML for a tool UI a core communication protocol etc. In accordance with the example embodiments code anonymity may be preserved to mask JavaScript HTML from users which may inhibit or prevent the users from modifying the JavaScript HTML . Accordingly an inter process communication channel as described herein which may be native may provide security isolation reliability guarantees etc.

Machine s are shown to include requesting component a plurality of intermediate nodes A N and specified targeted process . Each of the intermediate nodes A N and requesting component may be a machine or code that is executed by a machine. Such code may be a process e.g. an application or a service a hosted component e.g. a dynamic language execution engine a component object model COM object a dynamically loaded dynamic link library DLL etc.

One example type of a requesting component is referred to as a tooling component. A tooling component is a requesting component that is capable of being used to perform diagnostic operations e.g. identifying source of problem debugging profiling controlling etc. with respect to a targeted process. Examples of a tooling component include but are not limited to a web development program e.g. Windows Azure Platform Amazon Web Services Google App Engine VMWare Force.com etc. and an integrated development environment e.g. Microsoft Visual Studio JDeveloper NetBeans Eclipse Platform etc. . Accordingly it will be recognized that the requesting component may be an integrated development environment. Requesting component is occasionally referred to herein as a tool window an integrated development environment a tool window within an IDE etc. to illustrate various example implementations of the disclosed technology. Such references are not intended to limit the scope of the example embodiments.

One example type of a targeted process is referred to as a web application. A web application is an application that is coded in a browser supported language and that is reliant on a common web browser to render the application executable. JavaScript is one example type of a browser supported language. JavaScript may be combined with other types of languages including but not limited to a browser rendered markup language e.g. hypertext markup language HTML a style sheet language e.g. cascading style sheets CSS which describes presentation semantics e.g. look formatting etc. of a document written in a markup language etc. Examples of a web browser include but are not limited to Internet Explorer Firefox Google Chrome Safari etc.

Requesting component includes first execution engine and external code . First execution engine may be wrapped in a wrapper object that is hosted in requesting component though the scope of the example embodiments is not limited in this respect. First execution engine is configured to provide messages e.g. instructions information etc. for constructing the inter process communication channel between requesting component and specified targeted process . For instance such messages may include instructions for attaching requesting component to specified targeted process generating ports A F or a subset thereof storing reference s to any one or more of the intermediate nodes A N requesting component and or specified targeted process etc. First execution engine is implemented in native operating system OS code. External code is non native OS code that collaborates with first execution engine to facilitate construction of the inter process communication channel .

Specified targeted process includes second execution engine . Second execution engine may be wrapped in a wrapper object that is hosted in specified targeted process though the scope of the example embodiments is not limited in this respect. Second execution engine is configured to respond to messages that are received from first execution engine and to initiate its own messages for facilitating construction of the communication channel . For example second execution engine may provide information that is requested by first execution engine . In another example second execution engine may provide instructions for generating ports A F or a subset thereof storing reference s to any one or more of the intermediate nodes A N requesting component and or specified targeted process etc.

Inter process communication channel includes a plurality of ports A F. Each of ports A C and E is configured to forward messages from first execution engine toward second execution engine . Each of ports B D and F is configured to forward messages from second execution engine toward first execution engine . Inter process communication channel is shown to include six ports A F for illustrative purposes and is not intended to be limiting. It will be recognized that inter process communication channel may include any suitable number of ports

Inter process communication channel is shown to include a plurality of links A M for illustrative purposes. It will be recognized that inter process communication channel may include any suitable number of links e.g. one two etc. . Each of the links A M is configured between a respective pair of the ports A F. For instance link A is configured between ports A and B link B is configured between ports C and D and link C is configured between ports E and F. Link A includes a sending communication path A which is configured to transfer messages that are generated by first execution engine from port A to port B. Link A further includes a receiving communication path A which is configured to transfer messages that are generated by second execution engine from port B to port A. Link BA includes a sending communication path B which is configured to transfer messages that are generated by first execution engine from port C to port D. Link B further includes a receiving communication path B which is configured to transfer messages that are generated by second execution engine from port D to port C. Link M includes a sending communication path M which is configured to transfer messages that are generated by first execution engine from port E to port F. Link M further includes a receiving communication path M which is configured to transfer messages that are generated by second execution engine from port F to port E. Each of the sending communication paths A M and the receiving communication paths A M may be an anonymous pipe though the scope of the example embodiments is not limited in this respect. For instance such anonymous pipes may be provided by a local machine operating system for inter process communications and or Transmission Control Protocol and Internet Protocol TCP IP network traffic.

Each of ports A C and E is configured to serialize messages that are generated by first execution engine for transfer to a next consecutive node along the inter process communication channel toward second execution engine . Each of ports B D and F is configured to de serialize such messages upon receipt. For instance port A is configured to serialize messages that are generated by first execution engine for transfer to first intermediate node A via sending communication path A and port B is configured to de serialize such message upon receipt at first intermediate node A. Port C is configured to serialize such messages for transfer from first intermediate node A to Nth intermediate node N via sending communication path C and port D is configured to de serialize such messages upon receipt at Nth intermediate node N. Port E is configured to serialize such messages for transfer from Nth intermediate node N to specified targeted process via sending communication path M and port F is configured to de serialize such messages upon receipt at specified targeted process .

Each of ports B D and F is further configured to serialize messages that are generated by second execution engine for transfer to a next consecutive node along the inter process communication channel toward first execution engine . Each of ports A C and E is further configured to de serialize such messages upon receipt. For instance port F is configured to serialize messages that are generated by second execution engine for transfer to Nth intermediate node N via receiving communication path M and port E is configured to de serialize such message upon receipt at Nth intermediate node N. Port D is configured to serialize such messages for transfer from Nth intermediate node N to first intermediate node A via receiving communication path B and port C is configured to de serialize such messages upon receipt at first intermediate node A. Port B is configured to serialize such messages for transfer from first intermediate node A to requesting component via receiving communication path A and port A is configured to de serialize such messages upon receipt at requesting component .

Messages that are generated by first execution engine or second execution engine may include JavaScript objects for example. Each JavaScript object may include one or more sub elements such as JavaScript strings. Processing of JavaScript objects by ports A F will be discussed with respect to a one way communication from port A to port B for illustrative purposes and is not intended to be limiting. For instance port A may call a function into first execution engine that serializes JavaScript objects into a low level format such as bytes. Port A may transfer the bytes to port B via sending communication path A. Port B includes information that indicates a manner in which the JavaScript objects were constructed before being serialized by port A. Port B may use an event that calls into first execution engine with an indicator e.g. a string . The indicator may specify an appropriate event handler to be invoked for port B.

Each of first execution engine and second execution engine may be a dynamic language execution engine e.g. a JavaScript engine though the scope of the example embodiments is not limited in this respect. The intermediate nodes A N are shown in for illustrative purposes and are not intended to be limiting. It will be recognized that channel construction system may include any number of intermediate nodes. For instance channel construction system may include a single intermediate node or no intermediate nodes at all.

In one example implementation requesting component and specified targeted process are executed by a common single machine. In another example implementation requesting component is executed by a first machine and specified targeted process is executed by a second machine that is different from the first machine. In accordance with this example implementation the first and second machines are separated by a machine boundary. In further accordance with this example implementation communication between the first and second machines may be carried out over a network using well known network communication protocols. For instance the network may be a wide area network e.g. the Internet a local area network LAN another type of network or a combination thereof.

Once the inter process communication channel is constructed requesting component may perform operations with respect to specified targeted process . For example these operations may include diagnostic operations such as identifying source of problem debugging profiling controlling etc. Accordingly first execution engine may provide requests to second execution engine for accessing e.g. tooling specified targeted process . Such requests may specify information to be retrieved regarding specified targeted process actions to be performed with regard to specified targeted process etc.

Second execution engine may have an execution context that is different from an execution context of specified targeted process . For instance having different execution contexts for second execution engine and specified targeted process may hinder or prevent execution of second execution engine from interfering with execution of specified targeted process . Second execution engine may use privileged interfaces e.g. privileged APIs to interact with specified targeted process e.g. to inspect and or modify a state of specified targeted process . Second execution engine may use such interfaces to access underlying windows APIs for networking file access user data etc. Accordingly tooling functionality which otherwise may be implemented using merely lower level system APIs may be constructed in a dynamic language e.g. JavaScript .

As shown in the method of flowchart begins at step . In step an attachment request is received via a user interface. The attachment request indicates that the requesting component is to be attached to the specified targeted process. The attachment request includes a node indicator that specifies an order of a plurality of nodes with respect to which the communication channel is to be constructed. The requesting component is an originating node of the plurality of nodes. An originating node is a first successive node in the order of the plurality of nodes. The specified targeted process is a destination node of the plurality of nodes. A destination node is a last successive node in the order of the plurality of nodes. The requesting component is external to the specified targeted process. In one example embodiment the requesting component is an integrated development environment and the specified targeted process is a running web application that a user wishes to inspect and manipulate for diagnostic purposes. In an example implementation query logic receives an attachment request via user interface . The attachment request indicates that requesting component is to be attached to specified targeted process . The attachment request includes a node indicator that specifies an order of nodes .

At step an availability query is provided to the requesting component. The availability query causes the requesting component to determine available nodes based on receipt of availability indicators from the respective available nodes. Each of the availability indicators specifies that the respective available node is capable of communicating with the requesting component. In an example implementation query logic provides an availability query to requesting component . The availability query causes requesting component to determine the available nodes. Requesting component generates an available nodes indicator which specifies the available nodes.

At step the specified targeted process is selected from the available nodes based on the node indicator. In an example implementation selection logic selects specified targeted process from the available nodes based on node indicator . In accordance with this implementation selection logic may generate a selection indicator to specify that specified targeted process is selected.

At step the requesting component is attached to the specified targeted process to establish the communication channel therebetween. In an example implementation attachment logic attaches requesting component to specified targeted process to establish the communication channel therebetween. In accordance with this implementation attachment logic may attach requesting component to specified targeted process based on selection indicator specifying that specified targeted process is selected.

In an example embodiment step includes automatically generating a first port object that is associated with the requesting component. The first port object is configured to serialize messages that are provided from the requesting component to the specified targeted process. In accordance with this embodiment step further includes automatically generating a second port object that is associated with the specified targeted process. The second port object is configured to de serialize messages that are received at the specified targeted process from the requesting component. In further accordance with this embodiment the first port object may be further configured to de serialize messages that are received at the requesting component from the specified targeted process and the second port object may be further configured to serialize messages that are provided from the specified targeted process to the requesting component. In an example implementation attachment logic automatically generates port objects which include the first port object associated with requesting component and the second port object associated with specified targeted process .

In an aspect of this embodiment a second reference to the requesting component may be stored. The second reference indicates that messages from the specified targeted process are to be sent to the requesting component while the requesting component is attached to the specified targeted process. In an example implementation storage logic stores a second reference in store . The second reference indicates that messages from specified targeted process are to be sent to requesting component while requesting component is attached to specified targeted process .

In another aspect of this embodiment a determination is made that a designated port object is disabled. The designated port object is the first port object or the second port object. In accordance with this aspect the first port object or the second port object that is not the designated port object is caused to be disabled in response to the determination that the designated port object is disabled. In an example implementation determination logic determines that the designated port object is disabled. For example determination logic may receive monitoring information from nodes . In accordance with this example monitoring information may indicate that one or more of the port objects are disabled. In further accordance with this example determination logic may determine that the designated port object is disabled based on the monitoring information indicating that the designated port object is disabled. In accordance with this implementation determination logic may generate an instruction which instructs causation logic to cause the first port object or the second port object that is not the designated port object to be disabled. In accordance with this implementation causation logic causes the first port object or the second port object that is not the designated port object to be disabled. For instance causation logic may cause the first port object or the second port object that is not the designated port object to be disabled in response to e.g. based on receipt of the instruction .

In yet another aspect of this embodiment a determination may be made that an error occurs with regard to the communication channel. In accordance with this aspect attempts to cause communication between the first port object and the second port object via the communication channel are halted in response to the determination that the error occurs with regard to the communication channel. In further accordance with this aspect an error indicator is provided via the user interface to indicate that the error occurs with regard to the communication channel.

In an example implementation determination logic determines that the error occurs with regard to the communication channel. For example determination logic may receive monitoring information from nodes . In accordance with this example monitoring information may indicate that the error occurs with regard to the communication channel. In further accordance with this example determination logic may determine that the error occurs based on the monitoring information indicating that the error occurs. Determination logic may generate an instruction which instructs causation logic to halt attempts to cause communication between the first port object and the second port object via the communication channel. In accordance with this implementation causation logic halts attempts to cause communication between the first port object and the second port object via the communication channel. For instance causation logic may halt attempts to cause communication between the first port object and the second port object via the communication channel in response to e.g. based on receipt of the instruction . Determination logic may generate a notification to specify that the error occurs with regard to the communication channel. In accordance with this implementation error logic provides an error indicator via user interface to indicate that the error occurs with regard to the communication channel. For instance error logic may provide the error indicator in response to receipt of the notification .

At step a reference to the specified targeted process is stored. The reference indicates that messages from the requesting component are to be sent to the specified targeted process via the communication channel while the requesting component is attached to the specified targeted process. In an example implementation storage logic stores a first reference in store . The first reference indicates that messages from requesting component are to be sent to specified targeted process while requesting component is attached to specified targeted process . For instance storage logic may store the first reference based on selection indicator specifying that specified targeted process is selected.

In some example embodiments the available nodes that are described above with respect to step include one or more processes executing on a first machine on which the requesting component executes e.g. on a developer machine and further include one or more other machines that are accessible to the first machine. It will be recognized that any of these one or more processes any of the other machine s and or any process es executing on any of the other machine s may be selected before the specified targeted process is selected at step .

For example if a second machine is selected from the available nodes the requesting component may determine second available nodes based on receipt of second availability indicators from the respective second available nodes. In accordance with this example each of the second availability indicators specifies that the respective second available node is capable of communicating with the requesting component. In further accordance with this example the second available nodes include one or more second processes executing on the second machine and further include one or more other machines that are accessible to the second machine. It will be recognized that any of the second process es any of the other machine s and or any process es executing on any of the other machine s may be selected before the specified targeted process is selected at step .

In accordance with the example above if a third machine is selected from the second available nodes the requesting component may determine third available nodes based on receipt of third availability indicators from the respective third available nodes. In accordance with this example each of the third availability indicators specifies that the respective third available node is capable of communicating with the requesting component. In further accordance with this example the third available nodes include one or more third processes executing on the third machine and further include one or more other machines that are accessible to the third machine. It will be recognized that any of the third process es any of the other machine s and or any process es executing on any of the other machine s may be selected before the specified targeted process is selected at step .

Accordingly it can be seen that any number of hops can be performed before the specified targeted process is reached. Such hops may be between processes on a specified machine between machines between a process and a machine etc. Moreover each hop may be performed in response to a respective instruction that is received via the user interface. For example the user interface may display identifiers associated with nodes that are available to a first machine of a user to indicate that the first machine which executes the requesting component is capable of accessing designated processes that run on the first machine and to further indicate that the first machine is capable of accessing second third and fourth machines via a computer network. In accordance with this example the user interface may receive a first selection instruction from the user that selects the second machine from the available nodes. The user interface may then display identifiers associated with nodes that are available to the first machine to indicate that the second machine is capable of accessing second designated processes that run on the second machine and to further indicate that the second machine is capable of accessing the first third and fourth machines via the computer network. In further accordance with this example the user interface may receive a second selection instruction from the user that selects the specified targeted process from the second designated processes. It will be recognized that these examples are provided for illustrative purposes and are not intended to be limiting. Further example embodiments are described below.

In an example embodiment the requesting component executes on a first machine and the specified targeted process executes on a second machine that is different from the first machine. In accordance with this embodiment an accessibility query is provided to the requesting component. The accessibility query causes the requesting component to determine one or more accessible machines in a networked computer system that are accessible to the first machine in accordance with a computer networking protocol. The one or more accessible machines include the second machine. In further accordance with this embodiment the second machine is selected from the one or more accessible machines based on a selection instruction that is received in response to a determination of the one or more accessible machines. In further accordance with this embodiment step includes causing an agent to execute on the second machine. For instance the agent may be included in the plurality of nodes. The agent is configured to facilitate the construction of the communication channel between the requesting component and the specified targeted process.

In an example implementation requesting component executes on the first machine and specified targeted process executes on the second machine. In accordance with this implementation the first machine and the second machine are included in machine s . In further accordance with this implementation query logic provides an accessibility query to requesting component . The accessibility query causes requesting component to determine the one or more accessible machines that are accessible to the first machine in accordance with the computer networking protocol. The one or more accessible machines include the second machine. Requesting component may generate an accessible machines indicator which specifies the one or more accessible machines. In further accordance with this implementation selection logic selects the second machine from the one or more accessible machines based on the accessible machines indicator and the node indicator . For instance the selection instruction may include the accessible machines indicator and the node indicator . In further accordance with this implementation attachment logic causes agent to execute on the second machine. Agent is configured to facilitate the construction of the communication channel between requesting component and specified targeted process .

In accordance with this embodiment step may include automatically generating a first port object that is associated with the requesting component a second port object that is associated with the agent a third port object that is associated with the agent and a fourth port object that is associated with the specified targeted process. The first port object is configured to serialize messages that are provided from the requesting component toward the agent. The second port object is configured to de serialize messages that are received at the agent from the requesting component. The third port object is configured to serialize messages that are provided from the agent toward the specified targeted process. The fourth port object is configured to de serialize messages that are received at the specified targeted process from the agent. In an example implementation attachment logic automatically generates the first port object associated with requesting component the second port object associated with agent the third port object associated with agent and the fourth port object associated with specified targeted process .

In an aspect of this embodiment the first port object may be further configured to de serialize messages that are received at the requesting component from the agent. The second port object may be further configured to serialize messages that are provided from the agent toward the requesting component. The third port object may be further configured to de serialize messages that are received at the agent from the specified targeted process. The fourth port object may be further configured to serialize messages that are provided form the specified targeted process toward the agent. In accordance with this aspect a second reference to the requesting component may be stored. The second reference indicates that messages from the specified targeted process are to be sent to the requesting component while the requesting component is attached to the specified targeted process.

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed. For instance in an example embodiment flowchart includes receiving information regarding the specified targeted process asynchronously at the requesting component via the communication channel. In accordance with this embodiment flowchart further includes synchronizing a state of a tooling window of the requesting component with a state of the specified targeted process based on the information. In further accordance with this embodiment the tooling window is configured to enable diagnostic operations to be performed with respect to the specified targeted process.

In an example implementation requesting component receives information regarding the specified targeted process asynchronously. In accordance with this implementation synchronization logic synchronizes a state of a tooling window of requesting component with a state of specified targeted process based on the information . For instance requesting component may provide the information to synchronization logic . In further accordance with this implementation the tooling window of requesting component is configured to enable diagnostic operations to be performed with respect to specified targeted process .

In another example embodiment flowchart includes causing a dynamic language execution engine in a wrapper object which is hosted in the specified targeted process to be activated in response to attaching the requesting component to the specified targeted process. In an example implementation causation logic causes a dynamic language execution engine in a wrapper object hosted in specified targeted process to be activated in response requesting component being attached to specified targeted process .

In yet another example embodiment flowchart includes the steps of flowchart shown in . As shown in the method of flowchart begins at step . In step a determination is made that the available nodes include stub s of code that are not activated. In an example implementation determination logic determines that the available nodes include the stub s of code that are not activated. In accordance with this implementation determination logic may generate instruction to specify that the available nodes include the stub s of code that are not activated.

At step the requesting component is caused to provide at least one activation request to at least one respective available node that includes at least one respective non activated stub of code. For example each available node that includes a respective non activated stub of code may not include running code that is capable of responding to the respective activation request though each non activated stub of code may be capable of instantiating objects that are received from the requesting component. Each of the at least one activation request is configured to cause the respective non activated stub of code to load object s to provide respective activated code. In an example implementation causation logic causes requesting component to provide the at least one activation request to the at least one respective available node that includes the at least one respective non activated stub of code. For instance causation logic may cause requesting component to provide the at least one activation request in response to e.g. based on receipt of the instruction .

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed.

It will be recognized that channel construction system may not include one or more of nodes requesting component specified targeted process user interface store communication channel constructor agent query logic selection logic attachment logic storage logic determination logic causation logic error logic and or synchronization logic . Furthermore channel construction system may include components in addition to or in lieu of nodes requesting component specified targeted process user interface store communication channel constructor agent query logic selection logic attachment logic storage logic determination logic causation logic error logic and or synchronization logic .

As shown in the method of flowchart begins at step . In step an attachment request is received via a user interface. The attachment request indicates that the requesting component is to be attached to the specified targeted process. The requesting component is external to the specified targeted process. In an example implementation attachment logic receives an attachment request via user interface .

At step the requesting component is attached to the specified targeted process. Attaching the requesting component to the specified targeted process includes traversing the links to discover the specified targeted process. Each of the links is defined by a respective pair of nodes in a plurality of nodes. The requesting component is an originating node of the plurality of nodes. The specified targeted process is a destination node of the plurality of nodes. The plurality of nodes includes one or more intermediate nodes between the requesting component and the specified targeted process. In an example implementation attachment logic attaches the requesting component to the specified targeted process. In accordance with this implementation traversal logic which is included in attachment logic traverses the links to discover the specified targeted process. In further accordance with this implementation attachment logic may generate an attachment indicator which specifies that the requesting component is attached to the specified targeted process. In further accordance with this implementation attachment logic may generate a link indicator which specifies the links. For instance the link indicator may specify the pairs of nodes that define the respective links.

In an example embodiment each of the one or more intermediate nodes is an arbitrary node that is configured to discover processes at the respective arbitrary node and processes at others of the plurality of nodes that are accessible from the respective arbitrary node.

At step the communication channel is established. Establishing the communication channel includes retaining node information regarding a next consecutive node of the plurality of nodes to which messages from the requesting component to the specified targeted process are to be delivered in each node of a subset of the plurality of nodes. The subset includes the requesting components and the one or more intermediate nodes. In an example implementation establishment logic establishes the communication channel. Retaining logic which is included in establishment logic retains node information regarding a next consecutive node of the plurality of nodes to which messages from the requesting component to the specified targeted process are to be delivered in each node of the subset.

In an example embodiment establishing the communication channel further includes in each node of a second subset of the plurality of nodes retaining second node information regarding a next consecutive node of the plurality of nodes to which messages from the specified targeted process to the requesting component are to be delivered. The second subset includes the specified targeted process and the one or more intermediate nodes. In an example implementation retaining logic retains in each node of the second subset second node information regarding a next consecutive node of the plurality of nodes to which messages from the specified targeted process to the requesting component are to be delivered.

In another example embodiment establishing the communication channel further includes automatically generating a first pair of communication ports for each of the links. Each first pair of communication ports includes a respective send port and a respective receive port. Each respective send port is configured to send messages that are from the requesting component toward the specified targeted process. Each respective receive port is configured to receive message from the send port in the respective first pair. In an example implementation port logic which is included in establishment logic automatically generates port pairs which include send ports and receive ports . Port pairs include the first pair of communication ports for each of the links. For instance each first pair may include a respective one of the second ports and a respective one of the receive ports . In accordance with this implementation port logic may automatically generate the port pairs in response to e.g. based on receipt of link indicator .

In an aspect of this embodiment establishing the communication channel further includes automatically generating a second pair of communication ports for each of the links. Each second pair of communication ports includes a respective send port and a respective receive port. Each respective send port is configured to send messages that are from the specified targeted process toward the requesting component. Each respective receive port is configured to receive message from the send port in the respective second pair. In an example implementation the port pairs which are automatically generated by port logic include the second pair of communication ports for each of the links. For instance each second pair may include a respective one of the second ports and a respective one of the receive ports .

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed. For instance in an example embodiment flowchart includes for at least one node of the subset e.g. for each node of the subset specifying the respective next consecutive node of the plurality of nodes to which messages from the requesting component to the specified targeted process are to be delivered based on an instruction received via the user interface. In an example implementation for at least one node of the subset retaining logic specifies the respective next consecutive node of the plurality of nodes to which messages from the requesting component to the specified targeted process are to be delivered based on an instruction received via user interface .

In another example embodiment flowchart includes receiving process information regarding the specified targeted process asynchronously at the requesting component via the communication channel. In accordance with this embodiment flowchart further includes synchronizing a state of a tooling window of the requesting component with a state of the specified targeted process based on the process information. In further accordance with this embodiment the tooling window is configured to enable diagnostic operations to be performed with respect to the specified targeted process. In an example implementation synchronization logic synchronizes a state of a tooling window of the requesting component with a state of the specified targeted process based on process information regarding the specified targeted process. For instance the requesting component may forward the processing information to synchronization logic in response to receiving the processing information asynchronously via the communication channel.

In yet another example embodiment flowchart includes causing a dynamic language execution engine in a wrapper object which is hosted in the specified targeted process to be activated in response to attaching the requesting component to the specified targeted process at step . In an example implementation causation logic causes the dynamic language execution engine in the wrapper object to be activated in response to the requesting component being attached to the specified targeted process. For instance causation logic may cause the dynamic language execution engine in the wrapper object to be activated in response to e.g. based on receipt of attachment indicator .

It will be recognized that machine s may not include one or more of user interface communication channel constructor attachment logic causation logic establishment logic synchronization logic traversal logic port logic and or retaining logic . Furthermore machine s may include components in addition to or in lieu of user interface communication channel constructor attachment logic causation logic establishment logic synchronization logic traversal logic port logic and or retaining logic .

Any one or more of machine s requesting component any one or more of intermediate nodes A N specified targeted process first execution engine second execution engine any one or more of machine s requesting component specified targeted process user interface communication channel constructor agent query logic selection logic attachment logic storage logic determination logic causation logic error logic synchronization logic nodes user interface communication channel constructor attachment logic causation logic establishment logic synchronization logic traversal logic port logic retaining logic flowchart flowchart and or flowchart may be implemented in hardware software firmware or any combination thereof.

For example any one or more of machine s requesting component any one or more of intermediate nodes A N specified targeted process first execution engine second execution engine any one or more of machine s requesting component specified targeted process user interface communication channel constructor agent query logic selection logic attachment logic storage logic determination logic causation logic error logic synchronization logic nodes user interface communication channel constructor attachment logic causation logic establishment logic synchronization logic traversal logic port logic retaining logic flowchart flowchart and or flowchart may be implemented as computer program code configured to be executed in one or more processors.

In another example any one or more of machine s requesting component any one or more of intermediate nodes A N specified targeted process first execution engine second execution engine any one or more of machine s requesting component specified targeted process user interface communication channel constructor agent query logic selection logic attachment logic storage logic determination logic causation logic error logic synchronization logic nodes user interface communication channel constructor attachment logic causation logic establishment logic synchronization logic traversal logic port logic retaining logic flowchart flowchart and or flowchart may be implemented as hardware logic electrical circuitry.

For instance in an embodiment one or more of machine s requesting component one or more of intermediate nodes A N specified targeted process first execution engine second execution engine one or more of machine s requesting component specified targeted process user interface communication channel constructor agent query logic selection logic attachment logic storage logic determination logic causation logic error logic synchronization logic nodes user interface communication channel constructor attachment logic causation logic establishment logic synchronization logic traversal logic port logic retaining logic flowchart flowchart and or flowchart may be implemented in a system on chip SoC . The SoC may include an integrated circuit chip that includes one or more of a processor e.g. a microcontroller microprocessor digital signal processor DSP etc. memory one or more communication interfaces and or further circuits and or embedded firmware to perform its functions.

Example embodiments are capable of utilizing a messaging interface for sending and or receiving messages in accordance with the techniques described herein. For instance the messaging interface may include a variety of methods for sending and receiving messages. Following is a code snippet that illustrates an example implementation of the messaging interface 

This example implementation of the messaging interface is shown to include four methods OnConnect OnMessage OnDetach and ExecuteScript. These methods are capable of supporting a JavaScript application programming interface API similar to the HTML post message API for consumption by the requesting component the specified targeted process and any intermediate node s therebetween.

Example embodiments are capable of utilizing a discovery and selection interface for enumerating available next hops from a node i.e. available nodes that are capable of communicating with the node and selecting a target for further communications in accordance with the techniques described herein. Following is a snippet of pseudo code that illustrates an example implementation of the discovery and selection interface 

For instance any of ports A F shown in port objects shown in port pairs including sending ports and receiving ports may serialize outgoing calls to IMessageReceiver and ISelectionAndDiscovery onto a communications medium e.g. a respective link A M shown in and de serialize incoming calls and results coming in from the medium. Referring back to a single port is attached to the node on each of the requesting component and the specified targeted process at respective ends of the inter process communication channel because requesting component and specified targeted process handle messages themselves allowing for two way communications. Two ports are attached to each of the intermediate nodes A N to allow incoming calls to pass through from one of the ports to the other.

Following are some example embodiments that utilize the messaging interface and the discovery and selection interface described above in sections III. and IV. respectively. These example embodiments are provided for illustrative purposes and are not intended to be limiting. For instance the requesting component is referred to below as an integrated development environment IDE and the specified targeted process is referred to below as a targeted web application for illustrative purposes merely to illustrate example use case scenarios.

One way to initiate a connection between a user s IDE and a targeted web application to enable the user to engage in diagnostics with regard to the specified targeted process will now be discussed. The IDE is the starting endpoint and the targeted web application is the ending point. In the simplest case this is a one hop attachment on the user s machine. The following discussion describes one example implementation of this simplest case. In accordance with this implementation the user uses a user interface UI to select which process on her local machine she would like to target and communications are established with that process. This may be implemented in accordance with the following steps 

It will be recognized that the implementation details of how the messages are de serialized and serialized and how the communications are established may vary. Regardless each node is capable of enumerating targets and then storing an indicator that specifies to which target future messages are to be sent. Each node is capable of listening for incoming connections and storing another indicator that specifies to which node return trip messages are to go.

Implementations for initiating a connection between a user s IDE that is running on a first machine and a targeted web application that is running on a second machine are similar to the example implementation described above. However these implementations bridge two communications mediums. For instance messages from the IDE to the targeted web application first pass from the first machine to the second machine and then pass into the targeted web application. This may be achieved by running an agent on the second machine responsible for the process enumeration and selection side of the steps described above establishing a connection from the agent into the targeted web application via anonymous pipes as described above once a connection from the IDE to the agent has been made across the network. For instance the remote agent may be referred to as an intermediate node. Initiating the connection across a machine boundary may be implemented in accordance with the following steps 

As shown in computer includes a processing unit a system memory and a bus that couples various system components including system memory to processing unit . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. System memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in ROM .

Computer also has one or more of the following drives a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD ROM or other optical media. Hard disk drive magnetic disk drive and optical disk drive are connected to bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable storage media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer. Although a hard disk a removable magnetic disk and a removable optical disk are described other types of computer readable storage media can be used to store data such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. These programs include an operating system one or more application programs other program modules and program data . Application programs or program modules may include for example computer program logic for implementing any one or more of any one or more of machine s requesting component any one or more of intermediate nodes A N specified targeted process first execution engine second execution engine any one or more of machine s requesting component specified targeted process user interface communication channel constructor agent query logic selection logic attachment logic storage logic determination logic causation logic error logic synchronization logic nodes user interface communication channel constructor attachment logic causation logic establishment logic synchronization logic traversal logic port logic retaining logic flowchart including any step of flowchart flowchart including any step of flowchart and or flowchart including any step of flowchart as described herein.

A user may enter commands and information into the computer through input devices such as keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner touch screen camera accelerometer gyroscope or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB .

A display device e.g. a monitor is also connected to bus via an interface such as a video adapter . In addition to display device computer may include other peripheral output devices not shown such as speakers and printers.

Computer is connected to a network e.g. the Internet through a network interface or adapter a modem or other means for establishing communications over the network. Modem which may be internal or external is connected to bus via serial port interface .

As used herein the terms computer program medium and computer readable medium are used to generally refer to non transitory media such as the hard disk associated with hard disk drive removable magnetic disk removable optical disk as well as other non transitory media such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like. Such computer readable storage media are distinguished from and non overlapping with communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wireless media such as acoustic RF infrared and other wireless media. Example embodiments are also directed to such communication media.

As noted above computer programs and modules including application programs and other program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. Such computer programs may also be received via network interface or serial port interface . Such computer programs when executed or loaded by an application enable computer to implement features of embodiments discussed herein. Accordingly such computer programs represent controllers of the computer .

Example embodiments are also directed to computer program products comprising software e.g. computer readable instructions stored on any computer useable medium. Such software when executed in one or more data processing devices causes a data processing device s to operate as described herein. Embodiments may employ any computer useable or computer readable medium known now or in the future. Examples of computer readable mediums include but are not limited to storage devices such as RAM hard drives floppy disks CD ROMs DVD ROMs zip disks tapes magnetic storage devices optical storage devices MEMS based storage devices nanotechnology based storage devices and the like.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described example embodiments but should be defined only in accordance with the following claims and their equivalents.

