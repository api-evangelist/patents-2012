---

title: Processor cooling management
abstract: Illustrative embodiments provide a computer implemented method, a data processing system, and a computer program product for adjusting cooling settings. The computer implemented method comprises analyzing a set of instructions of an application to determine a number of degrees by which a set of instructions will raise a temperature of at least one processor core. The computer implemented method further calculates a cooling setting for at least one cooling system for the at least one processor core. The computer implemented method adjusts the at least one cooling system based on the cooling setting. The step of analyzing the set of instructions is performed before the set of instructions is executed on the at least one processor core. The step of adjusting the at least one cooling system is performed before the set of instructions is executed on the at least one processor core.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08831791&OS=08831791&RS=08831791
owner: International Business Machines Corporation
number: 08831791
owner_city: Armonk
owner_country: US
publication_date: 20120621
---
This application is a continuation application of U.S. patent application Ser. No. 12 432 611 filed Apr. 29 2009 status pending.

The present invention relates generally to processor cooling management and more specifically to adjusting processor cooling settings prior to the processor temperatures changing based on required energy for a set of instructions.

Providing multiple processors in the same chassis and cooling by the same cooling systems enhances thermal energy and cost efficiency. However some of the gains of consolidated cooling can be partially offset by inefficiencies of mismatched cooling. In other words one processor may demand high intensity cooling due to its workload while other modules demand low intensity cooling.

One way to increase efficiency for cooling is making uniform use of cooling across all processors. Each processor has an even temperature. Increasing the efficiency can also be done by assigning the tasks with the highest heat emissions to the processors whose temperatures are the lowest.

Illustrative embodiments provide a computer implemented method a data processing system and a computer program product for adjusting cooling settings. The computer implemented method comprises analyzing a set of instructions of an application to determine a number of degrees by which a set of instructions will raise a temperature of at least one processor core. The computer implemented method further calculates a cooling setting for at least one cooling system for the at least one processor core. The computer implemented method adjusts the at least one cooling system based on the cooling setting. The step of analyzing the set of instructions is performed before the set of instructions is executed on the at least one processor core. The step of adjusting the at least one cooling system is performed before the set of instructions is executed on the at least one processor core.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Turning now to a diagram of a data processing system is depicted in accordance with an illustrative embodiment. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display . As used herein the term processor may be used interchangeably with processor core and processor unit .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

In an illustrative embodiment of the invention processor unit may be cooled by a cooling system such as cooling system as shown in . The type of cooling and amount of cooling provided to processor unit may be determined by the amount of energy a set of instructions to be executed by processor unit will require.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information such as for example without limitation data program code in functional form and or other suitable information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communication links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard a mouse and or some other suitable input device. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system applications and or programs may be located in storage devices which are in communication with processor unit through communications fabric . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory .

These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer readable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communication links or wireless transmissions containing the program code.

In some illustrative embodiments program code may be downloaded over a network to persistent storage from another device or data processing system for use within data processing system . For instance program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of executing program code. As one example the data processing system may include organic components integrated with inorganic components and or may be comprised entirely of organic components excluding a human being. For example a storage device may be comprised of an organic semiconductor.

As another example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

With reference to a block diagram of components of cooling management system in accordance with illustrative embodiments is shown. Cooling management system relies on components of data processing system of in operation but these components will not be addressed. In this illustrative embodiment components of cooling management system comprise application cooling management program repository operating system and data processing system . Data processing system further comprises cooling system and processors . Each processor and may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further each processor and may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example each processor and may be a symmetric multi processor system containing multiple processors of the same type.

Cooling system further comprises at least one of liquid cooling air cooling thermo electric cooling and or some other suitable cooling device. As used herein the phrase at least one of when used with a list of items means that different combinations of one or more of the listed items may be used and only one of each item in the list may be needed. For example at least one of item A item B and item C may include for example without limitation item A or item A and item B. This example also may include item A item B and item C. This example may also include just item B and item C.

Application may be any type of application running on a computer system. Application is in the form of program code in a functional form that may be executed by a processor unit such as processor unit and or processors . Application may contain a source code or an executable machine code. Normally application communicates with operating system during the normal course of operation of application . For example application may communicate with operating system through an application programming interface API .

In this illustrative embodiment cooling management program may identify the set of instructions which are being executed next such as set of instructions . Set of instructions may comprise a loop or any other set of instructions as small as a single instruction and as large as an entire application. A set as used herein with reference to an item means one or more items. For example set of instructions may be one or more instructions. Cooling management program may analyze set of instructions to determine a number of degrees by which set of instructions will raise a temperature of at least one processor core.

Cooling management program may retrieve information about set of instructions from repository . For example if set of instructions is performing a certain calculation the repository may contain information on how much energy the calculation will consume when executed. Cooling management program determines the amount of energy set of instructions will consume and combines this with the thermal inertia of the processor to determine an amount and or rate of change for the processor. Repository may be any form of storage such as persistent storage as shown in . Also repository may be included on the same device computer or cooling management system such as cooling management program but may also be located in a remote location and or on a server.

Cooling management program uses the information from the processor and in the repository in a constraint equation to determine an updated cooling setting for data processing system . Cooling management program may also determine which cooling system or in what combination to use the cooling systems. Cooling management program sends the updated cooling setting to operating system . Operating system may change cooling setting of cooling system in accordance with the updated cooling setting received from cooling management program .

The energy consumed will cause a processor such as processors to increase in temperature. A feature provided by this illustrative embodiment is that the future change in temperature for processors and is known prior to the actual change in temperature. This is helpful in increasing the life of a processor. Additionally since the change in temperature is known prior to the change occurring operating system is more efficiently able to adjust cooling setting of the at least one cooling systems.

Cooling setting may be adjusted to increase the efficiency of cooling systems based on a constraint equation. The constraint equation may have many constraints such as a maximum temperature for a processor or a range in which the temperature must remain. A desired temperature profile indicates cooling setting for each processor in a processor unit. The temperature profile is the collective settings on each cooling system and each processor in a processor unit.

The constraint equation maximizes the efficiency based on minimizing energy costs and or monetary costs. For example it may be determined that processor will be receiving a block of instructions which require a high amount of energy. In this example cooling management program determines based on a constraint equation that the cooling on processor needs to be turned up to the maximum cooling while turning down the cooling on processors and may be turned down to the minimum cooling. The cooling is increased before set of instructions hits processor . Some sets of instructions require more energy than others. The amount of energy set of instructions requires may be found in the repository.

Additionally if the set of instructions is a wait loop cooling management program may determine that the cooling may be turned down on at least one processor or due to the absence of set of instructions . A loop may also contain an incremental counter which allows cooling management program to determine the energy cost of the entire set of iterations of the loop. Cooling management program may take into account the number and or percentage of times application takes a branch instruction. The number and or percentage of times application executes a branch instruction that may be used in the calculation of the cooling settings. For example if branch instruction A is executed 99 of the time cooling management program may adjust the cooling settings to take into account the energy requirements of branch instruction A before branch instruction A is executed because of the high probability of branch instruction A being executed. Cooling management program may also use compiler hints on a section of application to determine if a set of instructions may run in parallel on multiple processors. For example a compiler hint may indicate that a loop and or set of instructions contains a procedure call. If a loop contains a procedure call then it will likely not be run in parallel since the parallel loops would interfere with any variables local to that function. Alternatively if a loop can run in parallel cooling management program will take into account the parallel multithread processing when updating the cooling settings.

The repository may be pre loaded with the information or updated dynamically. For example the repository may be updated every time a new set of instructions is executed. The information may be taken from how much the new set of instructions raised the temperature of a processor. The energy needed by set of instructions may be represented in British Thermal Units BTU . Additionally the repository may contain the thermal inertia for each processor and . The thermal inertia is used by cooling management program to determine the amount and rate of change of temperature for each of processors and .

The illustration of cooling management system in is not meant to imply physical or architectural limitations on the manner in which different advantageous embodiments may be implemented. Other components in addition to and or in place of the ones illustrated may be used. Some components may be unnecessary in some advantageous embodiments. Also the blocks are presented to illustrate some functional components. One or more of these blocks may be combined and or divided into different blocks when implemented in different advantageous embodiments. For example cooling management program may be applied to more than one application. Also cooling management program may directly change the cooling settings in cooling systems . Additionally cooling system may be implemented as microcode in data processing system processor and or cooling systems .

With reference to a flowchart of a process using cooling management system of in accordance with illustrative embodiments is shown. The process may be implemented by cooling management program of .

The process starts and analyzes a set of instructions of an application to determine a number of degrees by which a set of instructions will raise a temperature of at least one processor step . The set of instructions are analyzed prior to execution of the set of instructions on a processor. A calculation of a cooling setting is made for at least one cooling system for the at least one processor step . The calculation of a cooling setting may be based on the constraint equation. The constraint equation may use the temperature of each processor energy costs monetary costs the thermal inertia of each processor and or any other feature related to a processor. Then an adjustment is made on the at least one cooling system based on the cooling setting step . Adjusting the cooling system comprises turning off turning on increasing the intensity and or decreasing the intensity of at least one cooling system or any combination thereof. Thereafter the process terminates.

With reference to a flowchart of a process using cooling management system of in accordance with illustrative embodiments is shown. The process may be implemented by cooling management program of .

The process starts and analyzes a set of instructions of an application to determine a number of degrees by which a set of instructions will raise a temperature of at least one processor prior to the set of instructions being executed on the processor step . A calculation of a cooling setting is made for at least one cooling system for the at least one processor step . An adjustment is made on the at least one cooling system based on the cooling setting prior to the set of instructions being executed on the processor step . Thereafter the process terminates.

With reference to a flowchart of a process using cooling management system of in accordance with illustrative embodiments is shown. The process may be implemented by cooling management program of .

The process starts and analyzes a set of instructions of an application to determine a number of degrees by which a set of instructions will raise a temperature of at least one processor core prior to the set of instructions being executed on the processor core step . A temperature of the at least one processor core is identified step . Information on the set of instructions is retrieved from a repository step . The repository comprises information on a plurality of sets of instructions. The information comprises energy consumption data for each of the plurality of the sets of instructions. The information comprises thermal inertia data for each of the at least one processor core. A calculation of a cooling setting is made for at least one cooling system for the at least one processor core step . An adjustment is made on the at least one cooling system based on the cooling setting prior to the set of instructions being executed on the processor core step . Thereafter the process terminates.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

One or more illustrative embodiments may provide a more efficient cooling technique compared to currently available cooling techniques. The illustrative embodiments may provide look ahead cooling. Look ahead cooling allows changing the cooling on a processor before or just as the processor begins to change in temperature. Look ahead cooling determines the change in temperature of a processor before the change occurs by calculating the energy requirements of a set of instructions being sent to the processor.

One or more illustrative embodiments may provide utilizing a constraint equation to determine a desired maximum temperature or a desired temperature range for a processor and or set of processors. Using a constraint equation provides maximizing the efficiency of the processors cooling system energy costs and or monetary costs.

In one or more illustrative embodiments the cooling management system may identify a temperature change for a number of processors in a processor unit that will occur from executing a set of instructions. Next the cooling management system may identify a change to a cooling system associated with the number of processors to maintain a desired temperature profile for the processor unit to form an identified change. Then the cooling management system and or the operating system may adjust the cooling system using the identified change. Additionally a constraint equation may be used to identify the change. The change may be an updated cooling setting for the cooling system.

In one or more illustrative embodiments the cooling management system may identify a temperature change for a number of processors in a processor unit that will occur from executing a set of instructions. Next the cooling management system may identify a change to workload associated with the number of processors to maintain a desired temperature profile for the processor unit to form an identified change. The workload is the amount and type of instruction being sent to a certain processor. Then the cooling management system and or the operating system may adjust the workload using the identified change. For example the operating system may send more energy intensive instructions to a processor which has a low temperature and a high maximum temperature. A constraint equation may be used to determine the maximum efficiency of the distribution of the workload. A constraint equation may be used to identify the change.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

