---

title: Systems and methods for providing an indicator of detection of input related to an element of a user interface
abstract: Systems and methods are provided for detecting an action providing input associated with an element of a user interface (UI) and/or graphical model, and providing an indicator to indicate the action has been detected. The UI and graphical model may provide elements that may be editable or otherwise changeable. The action may provide input that may change a value of the editable element of the UI or alter an element of the graphical model. Upon detection of the action, an indicator is provided in the UI or the graphical model in a manner associated with the detected changed element. The indicator may be a visual indicator or any other sensory indicator, such as a sound, force, or tactile indicator. The indicator provides a prompt to a user that one or more elements of the UI or graphical model may need to be saved, applied, or any changes canceled.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08661344&OS=08661344&RS=08661344
owner: The MathWorks, Inc.
number: 08661344
owner_city: Natick
owner_country: US
publication_date: 20120117
---
This Application is continuation of U.S. patent application Ser. No. 11 067 536 which was filed on Feb. 25 2005. The above identified application is hereby incorporated by reference in its entirety as though fully set forth herein.

The present invention generally relates to technical computing and more particularly to providing an indicator that an element of a user interface or a graphical model or a parameter of a graphical modeling environment may have been changed but not applied canceled or saved.

User interfaces such as graphical user interfaces present information and functionality to a user for interaction with software. A user interface can interact with a user through a myriad of user interface elements or widgets. Many of these user interface elements receive input from a user through an input mechanism such as a mouse or keyboard. Furthermore these user interface elements can include a graphical element with a collection of input elements. For example a tree widget may provide a hierarchy of widgets where each widget has its own window dialog or form for interacting with the application. In another example a set of property sheets may have multiple tabs with each tab handling a portion of user input for the user interface.

Users may interact with user interface elements to modify multiple input elements across multiple forms or screens. For example a user may change a value of an input element in a first screen and then the user may navigate to one or more other screens before saving any changes in the first screen. The user may also change input values of input elements in the other screens. In some cases the user may attempt to change a value of an input element but may not actually apply the change of the value. In other cases the user may apply the change in value to determine the effect on the functionality of the user interface but not permanently save the change. As such the user may perform one or more actions to change the values of input elements before saving applying or canceling the changes.

Prior to saving applying or canceling any changes to values of input elements in the user interface the user may need to review such changes to determine if the user desires to save apply or cancel the changes. With more and more input elements on the user interface it is increasingly challenging for a user to determine the input elements that have changed values or that the user may have tried to change. Also it is further challenging for the user to determine the input related activity of multiple input elements across multiple forms or screens before saving applying or canceling any changes made by such activity.

The present invention provides systems and methods for detecting an action providing input associated with an element of a user interface and or graphical model and providing an indicator to indicate the action has been detected. The user interface and graphical model may provide one or more elements that may be editable or otherwise changeable by a user or by other means such as programmatically via executable instructions. In the user interface one or more editable elements may have a current value such as an initial value or a previously saved value. The graphical model may include one or more elements that may be graphically changed or altered in a graphical modeling environment.

Any actions providing input that may possibly change the value of an editable element of the user interface may be detected. For example a user via an input device may enter a character into the editable element or may select a value from one or more values provided by the editable element. In another example a program may via an application programming interface API change the value of the editable element. Upon detection of the action the present invention provides an indicator in the user interface that is associated with the editable element. The indicator identifies that an action to change the value of the editable element has been detected and that the value of the element may have changed or has changed from its previous value. The indicator may be a visual indicator or may be any other sensory type of indicator such as an auditory force or tactile feedback indicator. As such the indicator provides a prompt to a user that one or more elements of the user interface may need to be saved applied or any changes canceled.

Additionally any action providing input that may alter an element of the graphical model may be detected. The present invention provides an indicator associated with the graphical model to indicate that the action has been detected. For example an action may be taken to add modify or delete an element of the graphical model and the indicator indicates that the element may have been added modified or deleted or has been added modified or deleted. For example a block in a block diagram model may be added and an indicator visually or otherwise indicates that the block was added. As such the indicator provides a prompt to a user that the graphical model or one or more elements of the graphical model may need to be saved or any changes canceled.

In one aspect the present invention is related to a method for providing an indicator to indicate detection of an action providing input associated with an element of a user interface. The user interface may be graphical or text based. The input may be associated with a possible change to the value of the element. The method includes the step of providing a user interface with one or more editable elements detecting an action proving input associated with an editable element and providing an indicator representing the detection of the action. The indicator is associated with the editable element. Also the indicator indicates that the detected action has either changed and or possibly changed the value of the editable element.

In another aspect the present invention provides an indicator having a font color font type a font style and or a background color distinguishable from a font color font type font style and or background color of the editable element. Also the indicator may include but is not limited to one or more of the following 1 a highlight 2 an animation 3 a symbol 4 an alphanumeric character 5 a sound 6 a force feedback and 7 a tactile feedback. Additionally the indicator may comprise a change to a property of the editable element such as a change to a font color font type font style and or color of the editable element.

In another aspect of the present invention the action providing input to the editable element is performed programmatically via executable instruction and or by a user via an input device. Also one or more of the editable elements may be 1 a text field 2 edit box 3 choose list 4 combo box 5 check list or 6 a radio button. In a further aspect the step of detecting includes detecting an event associated with an input device such as a mouse click or mouse down event. The step of detecting may also include detecting the entering of a character into the editable element and or selecting a value from one or more values provided by the editable element.

In another aspect the present invention relates to a device readable medium having device readable instructions to execute the steps of the method as described above related to a method for providing an indicator to indicate detection of an action providing input associated with possibly changing an element of a user interface.

In a further aspect the present invention relates to transmitting via a transmission medium computer data signals representing device readable instructions to execute the steps of the method as described above related to a method for providing an indicator to indicate detection of an action providing input associated with possibly changing an element of a user interface.

In one aspect the present invention relates to a method for providing a visual indicator for a first element in a graphical user interface to indicate a detection of an action providing input to one or more elements associated with the first element. The method includes the step of providing a graphical user interface having one or more elements associated with a first element. The one or more elements of the graphical user interface are configured to receive input. The method includes detecting an action providing input to at least one element of the one or more elements and providing a visual marker associated with the first element to indicate the detection of the action to the at least one element of the one or more elements associated with the first element. Also the visual marker indicates that the detected action has changed and or possibly changed the value of the at least one element.

In another aspect of the present invention the action providing input to the least one element is performed programmatically by executable instruction and or by a user via an input device. The first element may be 1 a tree widget 2 a frame widget 3 a grid widget 4 a tab widget and 5 a collection object. The at least one element may be 1 a text field 2 edit box 3 choose list 4 combo box 5 check list 6 a radio button and 7 an editable widget.

In one aspect of the present invention the one or more elements associated with the first element may represent one or more portions of a graphical model. In another aspect the step of detecting may include detecting a click event from the at least one element and or an input focus on the at least one element. In one embodiment the step of detecting includes detecting a mouse down event from the at least one element.

In another aspect the visual marker of the present invention includes any one or more of the following 1 a highlight 2 an animation 3 a symbol 4 an alphanumeric character 5 a font and 6 a color distinguishable from the first element. Furthermore a sound a force feedback and or a tactile feedback may be associated with the visual marker.

In another aspect the present invention relates to a device readable medium having device readable instructions to execute the steps of the method as described above related to a method for providing a visual indicator for a first element in a graphical user interface to indicate a detection of an action providing input to one or more elements associated with the first element.

In a further aspect the present invention relates to transmitting via a transmission medium computer data signals representing device readable instructions to execute the steps of the method as described above related to a method for providing a visual indicator for a first element in a graphical user interface to indicate a detection of an action providing input to on one or more elements associated with the first element.

In another aspect the present invention relates to a method for providing a visual indicator in a graphical modeling environment to indicate a detection of an action providing input to a graphical model. The input may possibly alter the graphical model. The method includes the steps of providing in a graphical modeling environment a graphical model that may be altered detecting an action providing input to the graphical model and providing a visual indicator in the graphical model to indicate that the action has been detected. Also the visual indicator indicates that a portion of the graphical model may have been added modified or deleted.

In one aspect of the present invention the action may alter the graphical model and includes adding modifying and or deleting an element of the graphical model. Additionally the action may be performed programmatically by executable instruction and or a user via an input device. In another aspect the visual indicator of the present invention identifies a portion of the graphical model that may have been altered. Additionally a sound a force feedback and or a tactile feedback may be associated with the visual indicator.

In another aspect the present invention relates to a device readable medium having device readable instructions to execute the steps of the method as described above related to a method for providing a visual indicator in a graphical modeling environment to indicate a detection of an action providing input to a graphical model.

In a further aspect the present invention relates to transmitting via a transmission medium computer data signals representing device readable instructions to execute the steps of the method as described above related to a method for providing a visual audible force and or tactile indicator in a graphical modeling environment to indicate a detection of an action providing input to a graphical model.

In a further aspect the present invention relates to a system for providing an indicator to indicate a detection of an action providing input associated with an element of a user interface. The system includes a user interface having one or more elements and a detector to detect an action providing input associated with at least one element of the one or more elements. The system provides an indicator associated with the user interface representing the detection by the detector of the action providing input to the at least one element. In one aspect any portion of the user interface and or the detector may execute on a first computing device and or a second computing device.

In another aspect of the system of the present invention the action providing input to the at least one element is performed by an executable instruction and or a user via an input device. Also the indicator of the present invention indicates that the detected action has changed and or possibly changed the at least one element. The least one element may be any of the following 1 a text field 2 edit box 3 choose list 4 combo box 5 check list and 6 a radio button. Also the indicator may be associated with a first element that is associated with the one or more elements.

In a further aspect the graphical user interface of the present invention may represent a graphical model and the one or more elements represent one or more portions of the graphical model. In one aspect the detector detects an action to alter the graphical model and in another aspect the detector detects an action to change a value of an editable portion of the least one element.

In yet another aspect the system of the present invention provides the indicator having a font a color a highlight an animation a symbol and or an alphanumeric character distinguishable from the at least one element. Also the indicator may include a sound a force feedback and or a tactile feedback.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

Certain embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not expressly made herein without departing from the spirit and scope of the invention.

The illustrative embodiment of the present invention provides systems and methods for detecting an action providing input to an element of a user interface and or graphical model and providing an indicator to indicate the action has been detected. A user interface such as a graphical user interface may provide one or more elements that may be editable by a user or by other means such as programmatically via executable instructions. One or more editable elements may have a current value such as an initial or default value or no value. In other cases the editable element may have a value from a persistent storage holding the current value for the editable element.

In an illustrative embodiment the present invention detects any actions to provide input associated with an editable element of the user interface including any actions that change or may change a value of the editable element. For example a user via an input device may enter a character into the editable element or may select a value from one or more values provided by the editable element. In another example a program via an application programming interface API may perform an action to change the value of the editable element. Upon detection of the action the present invention provides an indicator in the user interface that is associated with the editable element. The indicator identifies that an action providing input associated with the editable element has been detected and that the value of the element may have changed or has changed from its previous value. The indicator may be a visual indicator or may be any other type of sensory indicator such as an indicator that provides audio force or tactile feedback.

The indicator may also be referred to as a dirty indicator. In this aspect the dirty indicator indicates that the modifiable or editable element may have changed or has changed since it was last saved. That is the indicator indicates that there is not any assurance that the value of the modifiable editable element has remained static from the value provided for the element when the user interface was presented or from the previously saved applied or otherwise previously used value for the element. As such the dirty indicator provides a prompt to the attention of a user to determine whether the element should be saved applied or canceled such as before closing exiting or otherwise leaving the user interface.

The system and methods of the present invention can also be applied to graphical user interfaces with a user interface element that contains a group or set of other elements. For example a container widget such as a tree or tab type widget may group together a set of one or more editable elements. The present invention detects an action providing input associated with an element of the container widget such as an action to change a value of the element and provides an indicator associated with the container widget to indicate the action has been detected on one or more elements of the container widget. As such the indicator provides a prompt to a user that one or more elements of the container widget may need to be saved applied or the changes canceled.

Furthermore the system and methods of the present invention can also be applied to a graphical model. For example a graphical model such as a block diagram model can be provided in a graphical modeling environment. The graphical model may have been previously saved to memory and or storage. The present invention detects an action to provide input to the graphical model such an action that may alter an element of the graphical model and provides an indicator associated with the graphical model to indicate that the action has been detected. An action may be performed to add modify or delete the element of the graphical model and the indicator indicates that the element has or may have been added modified or deleted. For example a block in a block diagram model may be added and an indicator visually or otherwise indicates that the block was added. As such the indicator provides a prompt to a user that the graphical model or one or more elements of the graphical model may need to be saved applied or any changes canceled.

Additionally the systems and methods of the present invention can be applied to formatted text such as variables or parameters for example the workspace variables of an illustrative embodiment of the graphical modeling environment. Actions may be detected via a user interface and or graphical model that changes one or more variables associated with a workspace of the graphical modeling environment. In accordance with the present invention an indicator associated with the variable may be provided to indicate that the variable or any attributes or properties of the variables has changed or may have changed.

The illustrative embodiment will be described solely for illustrative purposes relative to a user interface graphical model and modeling environment provided by the software products from The MathWorks Inc. of Natick Mass. Although the illustrative embodiment will be described relative to a MATLAB and or Simulink based application one of ordinary skill in the art will appreciate that the present invention may be applied to other user interfaces graphical models and modeling environments including state based and flow diagram environments data flow diagram environments electronic design automation EDA environments and Unified Modeling Language UML environments such as any environments using software products of LabVIEW or MATRIXx from National Instruments Inc. MSC.Adams from MSC.Software Corporation of Santa Ana Calif. Virtuoso from Cadence of San Jose Calif. Dymola from Dynasim AB of Lund Sweden Rational Rose from IBM of White Plains N.Y. Mathematica from Wolfram Research Inc. of Champaign Ill. Mathcad from Mathsoft Engineering Education Inc. or Maple from Maplesoft a division of Waterloo Maple Inc.

The computing device may include other I O devices such a keyboard and a pointing device for example a mouse for receiving input from a user. Optionally the keyboard and the pointing device may be connected to the visual display device . Additionally the computing device may include any type of input device for receiving user input such as a joystick. In other embodiments the computing device may include any type of haptic device such as a vibration generating mouse or force feedback joystick. Also the computing device may include any type of sound producing I O device such as any suitable sound card. The computing device may include other suitable conventional I O peripherals.

For installing software programs the computing device may support any suitable device readable medium such as a CD ROM DVD ROM floppy disks tape device USB device hard drive or any other suitable device. The computing device may further comprise a storage device such as a hard drive or CD ROM for storing an operating system and other related software. The present invention of a graphical modeling environment may comprise software that is installed via a device readable medium and stored in the storage device . Additionally the operating system and graphical modeling environment can be run from a bootable CD such as for example KNOPPIX a bootable CD for GNU Linux.

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM cluster interconnection Myrinet peripheral component interconnections PCI PCI X wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop notebook handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In one aspect the present invention is related to a graphical modeling environment as illustrated in the system of . In brief overview the system includes an illustrative graphical modeling environment having an environment for providing a user interface and or graphical model . The graphical modeling environment also includes a detector which is a mechanism for detecting actions to change any portion of the user interface and or graphical model and for providing a dirty indicator upon detecting of such actions. The user interface and or graphical model may be associated with a persistent storage of data associated with elements of the user interface and or graphical model .

In an exemplary embodiment the graphical modeling environment such as a graphical modeling environment like Simulink from The MathWorks Inc. of Natick Mass. provides a graphical and interactive environment by which users can create modify and save user interfaces such as graphical user interfaces and graphical models such as block diagram models. The graphical modeling environment and any portion thereof can comprise an application module service computer program software component library or any other type of executable instruction which is designed to and capable of executing the functionality of the graphical modeling environment as described herein. Additionally the graphical modeling environment may be configured to and capable of running any of the modules libraries or software components of the MATLAB and or Simulink product family. As such the graphical modeling environment may have all or a portion of the software components of MATLAB and or Simulink installed on the computing device or alternatively accessible from another computing device on a network.

The user interface of the present invention may be any type of user interface such as text based user interface or a graphical user interface. In some embodiments the user interface may comprise a command line interface or a command line user environment as known by those ordinarily skilled in the art. In another embodiment the user interface may be a command line shell for the graphical modeling environment such as the MATLAB command line user environment for a MATLAB technical computing environment . In other embodiments the user interface may be any type of text editor such as text type editors for word processing script writing and or programming.

The user interface of the present invention may comprise any type and or form of graphical user interface. In some embodiments the user interface may be included in any type of client program in a client server or distributed system. In other embodiments the user interface may comprise any type of web page or Internet based application such as a user interface implemented with a Hypertext Markup Language HTML or any other markup language. Additionally the user interface may comprise any elements widgets or components to receive input from a user or otherwise to receive input programmatically from other sources. For example the user interface may comprise widgets such as a text field edit box choose list combo box check list and a radio button.

Furthermore the user interface may comprise any type of container widgets holding grouping organizing or otherwise associating one or more widgets with the container widget as one ordinarily skilled in the art will appreciate. In some embodiments a container widget may comprise a tree widget a frame widget a grid widget a tab widget a collection object or any custom widget or object. The container widget may group or otherwise associate one or more other elements such as a text field edit box choose list combo box check list and a radio button. One ordinarily skilled in the art will recognize and appreciate the multitude of types and forms of graphical user interfaces and the elements for receiving input thereof.

Additionally the user interface of the present invention may have at least one element of the user interface that is editable or otherwise changeable. The editable element of the user interface may be changed via any type and or form of input. In one embodiment a user may via any type of input device take an action to change the value of the editable element. In another embodiment the user interface may be changed programmatically from any type and or form of executable instructions. For example a set of program instructions may be executed that execute an application programming interface API to set or change the value of the editable element of the user interface . One ordinarily skilled in the art will recognize and appreciate the myriads of elements of user interfaces such as editable elements and the ways these elements may be manipulated to set or change a value associated with the element.

In one user interface is illustrated with the graphical modeling environment and another user interface is provided stand alone on the computing device . The graphical modeling environment may provide means and mechanisms to design develop and or execute the user interface . As such in some embodiments the user interface may be presented displayed or otherwise shown to users in the context of the graphical modeling environment . In other embodiments the user interface may be a form of executable instructions that can be executed called or otherwise initiated in the environment provided by the computing device . Although the user interface of the present invention may generally be discussed in relation to the graphical modeling environment one ordinarily skilled in the art will recognize and appreciate that the user interface may be executed and displayed by any suitable means and or mechanisms in a multitude of different environments.

The graphical model of the present invention as depicted in can comprise any type and or form of graphical model . The graphical modeling environment may provide any type of tools libraries and configuration mechanisms to graphically create and or edit a graphical model . In an exemplary embodiment the graphical model may comprise a block diagram model provided by the Simulink environment of The MathWorks Inc. For example the block diagram model may comprise a series of different type of blocks arranged in a desired manner and connected via connection lines to represent signal values traversing the blocks. The graphical model may comprise any type of element to form a graphical model such as connectors blocks or any other graphical form and representation of functionality supported by the graphical modeling environment . One ordinarily skilled in the art will recognize and appreciate the various forms of graphical models and the elements and content thereof.

For the illustrated user interface and graphical model of the present invention persistent data storage may hold any values associated with any elements of the user interface or graphical model . In one embodiment the data storage may hold the last entered value or last selected value of an editable element of the user interface . For example the data storage may comprise the last value saved by the user such as a string entered in a text edit box. In another embodiment the data storage may store the last saved version or copy of the graphical model saved by the user or the graphical modeling environment .

The data storage may comprise any suitable means and or mechanism for storing data. In some embodiments the data storage may comprise any type of database file system file s or any other type and form of storage location capable of storing data. In other embodiments the data storage may comprise data in any form held in memory. For example the data storage may comprise a variable object and or data structure holding a value associated with the editable element of the user interface and or graphical model . One ordinarily skilled in the art will recognize and appreciate the many forms of the data storage for storing a value for an editable element of a user interface or a copy or version of the graphical model .

In one embodiment the data storage may only store data in a manner persistent with the execution and or active use of a user interface or graphical model . For example the user interface may use a variable data structure or object as data storage that is initialized upon execution of the user interface such as upon loading a form of a graphical user interface. In this case the data storage may hold a value for an editable element such as a last saved or previously saved value only during the execution of the form of the graphical user interface . In other embodiments the data storage holds a value for the user interface persistently after the execution of the user interface . For example the last saved value of an editable element of a user interface may be stored in a database such as a relational SQL database. The user interface upon initialization or execution may retrieve the last stored value from the database to populate the value of the editable element of the user interface. One ordinarily skilled in the art will recognize and appreciate the various ways that data associated with the user interface and or graphical model may be persistently stored either temporary with or in between uses of the user interface and or graphical model .

The detector of the present invention may be included in the graphical modeling environment or separately as part of the user interface . With respect to a user interface the detector comprises a mechanism for detecting any type of action to manipulate alter enter select or otherwise change an editable element of the user interface . The detector may use any events associated with the keyboard and or pointing device of the computing device to determine that an action has been attempted or an action has been taken to change the editable element. In some embodiments the detector may use any keyboard or mouse event such as any mouse click related events or key press related events available by the operating system of the computing device the graphical modeling environment or the user interface . In other embodiments the detector may use any application programming interfaces API of the operating system and API hooks into the operating system to get notice of any input related events and or to intercept any input related events.

Additionally the detector may use any events associated with the editable element of the user interface to determine that an action has been attempted or an action has been taken to change the editable element. In some embodiments the detector may use any events provided by the control or object used to implement the editable element of the user interface . For example the detector may use a mouse over event an update event a change event or any other event provided by a widget control such as a text box combo box or radio button widget that may indicate an action associated with changing or the possibility of changing the editable element. In some embodiments the editable element of the user interface may be grayed out locked disabled or otherwise configured to prevent the element from being changed or otherwise manipulated. Nevertheless in some embodiments the detector may detect any action to attempt to change to such a configured element.

With respect to a graphical model the detector comprises a mechanism for detecting any type of action to manipulate add modify change delete or otherwise alter a graphical model or any portion thereof. The detector may use any pointing device events such as mouse events and or keyboard events provided by the graphical modeling environment when a graphical model is manipulated or altered. In the graphical modeling environment a graphical model may be created and edited by dragging and dropping elements of the graphical model . As such in some embodiments the detector may detect any drag and drop events related to altering the graphical model . For example a user may add a new block to a block diagram model by dragging and dropping a block from a library of blocks. In another example a user may select drag and drop a block in a block diagram model to move or position the block to another location.

In the exemplary embodiment of Simulink as the graphical modeling environment the graphical model comprises a block diagram model. The Simulink graphical modeling environment provides various mouse and keyboard actions known by one ordinarily skilled in the art to manipulate a block diagram model such as for manipulating blocks lines signal labels and annotations. For example a user may select a block or a line of a block diagram model by clicking the left mouse button. A block may be disconnected by pressing the shift key and dragging the block. A block or a line may be selected by clicking the left mouse button over the block or the line. A signal label may be created by double clicking on the signal line and an annotation by double clicking in the block diagram model . As such the detector can detect any of the pointing device and or keyboard actions related to graphical modeling to determine if an action has been taken to alter the graphical model .

Furthermore the graphical modeling environment may provide an application programming interface API command line interface or any other type of interface to programmatically alter the graphical model . In the exemplary embodiment of Simulink the graphical modeling environment provides a set of model construction commands that may be executed in a MATLAB program. For example the model construction commands of Simulink provide commands to add and delete blocks lines signals and parameters and to set parameters of a block diagram model . One ordinarily skilled in the art will recognize and appreciate that the graphical modeling environment may provide a variety of instructions via any type of interface to programmatically alter a graphical model .

In one aspect of the present invention a dirty indicator is provided in the user interface upon detection by the detector of an action to change an element such as an editable element of the user interface . The dirty indicator indicates that the action has been detected. The dirty indicator also can indicate that the value of the editable element may have changed or has changed from the value of the element presented when the user interface was initially presented or from the last saved value for the editable element. As such the dirty indicator provides a prompt to the attention of a user to determine whether the element should be saved such as before closing exiting or otherwise leaving the user interface .

Likewise a dirty indicator is provided in the graphical model upon detection by the detector of an action to alter a portion of the graphical model . The dirty indicator indicates that the action has been detected and can also indicate that the graphical model may have changed or has changed from the version presented when the graphical model was initially presented or from the last saved version of the graphical model . The dirty indicator is associated with the element of the graphical model that has been altered to indicate to the user the detected altered portion of the graphical model . As such the dirty indicator provides a prompt to the attention of a user to determine whether the graphical model should be saved such as before closing exiting or otherwise leaving the graphical model or the graphical modeling environment or before leaving any specific user interface modal or form in the graphical modeling environment to effectively cancel the changes.

The dirty indicator of the present invention may be any type and form of visual auditory force or tactile indicator. In some embodiments the dirty indicator may comprise a visual indicator that is visually distinguishable from the editable element. An editable element of the user interface may have a certain font type style etc. along with a certain color such as a foreground background and or text color. In one embodiment the dirty indicator may comprise a visual indicator having a font or a color different than the font and color of the editable element. In other embodiments the dirty indicator may comprise a visual indicator having a symbol and or any set of alphanumeric characters. In yet other embodiments the dirty indicator may comprise any type or form of highlights animation and or text effects such as the highlight or shimmering of text associated with the editable element for example the text label of a radio button. In further embodiments the dirty indicator may comprise any form of graphical element such as a rectangular box displayed around or otherwise bounding the editable element. One ordinarily skilled in the art will recognize and appreciate the wide variety and combinations of visual indicators that may be used in practicing the present invention as described herein.

The dirty indicator may also comprise any auditory force and or tactile feedback either with or without a visual indicator. In some embodiments any type of sound may be used as the dirty indicator . For example a bell or ringing sound may be used as the dirty indicator . In another example any type of musical related notes tunes or portions of music such as the ring tones associated with a cellular phone may be used. In a further example a computer generated or a human recorded voice may be used to provide the dirty indicator . Additionally the dirty indicator may comprise any touch sensory output from any type of haptic device such as a vibration generating mouse joystick or other input device. In other embodiments the dirty indicator may be any type of output produced by any accessibility feature such as those for users with any type of impairment or disability of the operating system graphical modeling environment user interface or any other software and or hardware of the computing device . One ordinarily skilled in the art will appreciate the various types and forms of sensory feedback that may be used in practicing the present invention as described herein. Additionally one ordinarily skilled in the art will further appreciate that any combination of visual auditory force and tactile indicators may also be used for the dirty indicator .

In some embodiments the graphical modeling environment and or user interface are configurable to indicate the type of indicator desired such as a visual auditory force or tactile indicator. In some embodiments for each type of indicator configured the form of the indicator may also be configurable. For example a user may be able to select the desired visual indicator such as a symbol graphic highlight font box etc. In another example the user may able to specify the sound to be used for an auditory type indicator . In other embodiments the user may be able to further configure the type and form of indicator on an element by element basis for either a user interface and or graphical model . One ordinarily skilled in the art will recognize and appreciate the various ways the types and forms of dirty indicators may be configured or otherwise specified in practicing the operations of the present invention described herein.

In another aspect the dirty indicator is provided in a manner associated with the portion of the user interface or graphical model that the detector has detected an action to change or alter. In the embodiments of a user interface the dirty indicator may be provided adjacent near or proximate to the editable element from which an action to change was detected. For example a visual indicator such as a highlighted box may be displayed around the editable element. In another embodiment a visual indicator of a symbol such as an may be placed next to any text associated with the editable element of the user interface . In another embodiment a visual indicator in a graphical model such as a block diagram model may be placed next to an altered block or line of the graphical model . For example an added line or block of a block diagram model may be highlighted with a box surrounding the added line or block.

In other embodiments auditory force and tactile type dirty indicators may be associated with the changed portion of the user interface or graphical model . In some embodiments the auditory force and tactile indicator may be provided each time there is an event with respect to navigating the user interface or graphical model by the user. For example each time there is a mouse over event from a changed element of a user interface or graphical model the auditory force and or tactile indicator may be provided. In another example the auditory and or tactile indicator may be provided each time the user interface or graphical model has input focus such as navigating to the user interface via a menu or tab selection or restoring a minimized screen or when input focus occurs on the changed element. Furthermore the frequency of the auditory and tactile feedback as a dirty indicator may be configurable. In some embodiments an auditory and or tactile indicator may continually be executed with or without pauses or breaks until an action is taken to remove the indicator . In other embodiments the auditory force and or tactile indicator may be provided only once. One ordinarily skilled in the art will recognize and appreciate the various ways an auditory and or tactile type of the dirty indicator of the present invention may be associated to the changed portion of the user interface or graphical model .

The computing devices can connect to the network through a variety of connections including standard telephone lines LAN or WAN links e.g. T1 T3 56 kb X.25 SNA DECNET broadband connections ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET cluster interconnections Myrinet peripheral component interconnections PCI PCI X and wireless connections or some combination of any or all of the above. Connections can be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g and direct asynchronous connections .

The network and network connections may include any transmission medium between any of the computing devices such as electrical wiring or cabling fiber optics electromagnetic radiation or via any other form of transmission medium capable of supporting the operations of the present invention described herein. The methods and systems of the present invention may also be embodied in the form of computer data signals program code or any other type of transmission that is transmitted over the transmission medium or via any other form of transmission which may be received loaded into and executed or otherwise processed and used by a computing device to practice the present invention as described herein.

Each of the computing devices may be configured to and capable of running the graphical modeling environment and or the user interface . The graphical modeling environment and or the user interface can be capable of and configured to operate on the operating system that may be running on any of the computing devices . Each computing device can be running the same or different operating systems. Additionally the graphical modeling environment and user interfaces can be capable of and configured to operate on and take advantage of different processors of any of the computing devices . One ordinarily skilled in the art will recognize the various combinations of operating systems and processors that can be running on any of the computing devices. In summary the graphical modeling environment and user interfaces may be deployed across a wide range of different computing devices different operating systems and different processors in various network topologies and configurations.

As depicted in the detector of the present invention may be deployed as part of the graphical modeling environment or the user interface . Additionally the detector may be deployed separately from the graphical modeling environment or the user interface . In one embodiment the detector may be used by more than one user interface such as multiple web pages. In other embodiments the detector may communicate over the network to the graphical modeling environment or to other software on the computing device to practice the operations of the present invention described herein. For example the user interface on computing device may be a thin client type user interface such as one provided by a remote display protocol for example the Remote Desktop Protocol manufactured by Microsoft Corporation of Redmond Wash. or any other similar thin client software. As such keyboard and mouse actions may be transmitted or exchanged between computing devices and over the network .

In some embodiments the detector may communicate with any software on computing device such as the data storage for the user interface to practice the operations of the present invention. In one embodiment the user interface on computing device may present a web page provided by any web related application software running on computing device . For example a graphical model of the graphical modeling environment may be displayed on computing device such as in user interface for editing altering or manipulation by a user of computing device . One ordinarily skilled in the art will recognize and appreciate the various ways a user interface and graphical model may be deployed and distributed and how the detector may be used in such deployments to practice the operations of the present invention described herein.

At step of illustrative method of the present invention a user interface is provided such as the graphical user interface of . In brief overview the illustrative graphical user interface of comprises a multiple form and multiple element user interface. The tree widget on the left side of the graphical user interface comprises a mechanism for navigating multiple forms displayed on the right side of the user interface . In the illustrated example of the solver element labeled Solver is selected from the tree widget and the Solver related user interface elements are presented on the right side of the user interface . By way of example the user interface has a text field element for entering the stop time for simulation and is set to an initial or previously saved value of 20 . Additionally the user interface has a solver type combo box element and a solver name combo box element for selecting the type and name of the solver. The solver type combo box may be set to an initial or last saved value of variable step and the solver name combo box value ode45 Dormand Prince . As such elements and are editable user interface elements that may be changed either programmatically or by a user. Although illustrated with a tree widget and text and combo box elements one ordinarily skilled in the art will recognize that any type of user interface elements and or container type widgets may be used.

At step of the illustrative method an action to change an element of the user interface is detected. In an exemplary embodiment a detector associated with the user interface detects an action to change any of the editable elements of the user interface such as elements and or . For example a user may have placed the pointer over the stop time text field element clicked the mouse to place input focus on the field and entered via the keyboard one or more characters such as numbers into the field . In the illustrative example depicted in the value of the stop time text field was changed from 20 to 1000 . The detector may have detected one or more of the user activities to determine that an action was taken to change the text field . In some embodiments one or more executable instructions such as a program may have been executed to take an action to change the value of the text field . In one embodiment the executable instructions may simulate the same activity from the user in changing the text field . In another embodiment the detector may detect the actions by the executable instructions to change the value of the text field .

In another embodiment the illustrative step may detect the action to change the value of the editable element even if the value is not changed or is changed to the same value. For example the text field of illustrative graphical user interface of has a value of 20 . The user may place the pointer of a pointing device such as a mouse over the element or may click on the element or may otherwise tab to the element to cause it to have input focus. These activities may not change the value but nevertheless the detector may detect such actions and a dirty indicator is provided in accordance with the present invention. In another example the user via the pointing device and keyboard may enter the value of 20 in the text field replacing the previous value of 20 with a new value of 20 . Although the user may not be able to detect the text field value was replaced with the same value the detector in one embodiment detects this action in order to provide a dirty indicator as described herein.

In one embodiment the detector detects if the action to change the value of the editable element and does change the value of the editable element. In some embodiments the detector compares the value of the editable element with the initial value presented or the previously saved value which in one embodiment is stored in the persistent data storage .

In a similar manner as the illustrative text field a user may place a pointer of a pointing device on or over either of the combo boxes and put input focus on the combo box via the pointing device and select a selection provided by the combo box such an item in a list of a pop up form. Additionally a user may place input focus via the pointing device on the selection field associated with the combo box and enter in via the keyboard one or more alphanumeric characters such as a string to provide a value for the combo box . In other embodiments actions to change the value of the combo box may occur programmatically via executable instructions. The detector can detect actions by the user or by executable instructions to change the value of the combo box .

At illustrative step of the present invention once the action to change the editable element and is detected the element is tracked as dirty . Any suitable mechanism or means known to one ordinarily skilled in the art may be used to track the dirty status of an element detected by the detector . For example any type of variable data structure or object may be used to associate an element of the user interface with a dirty status. In one embodiment the dirty status of an element may be stored and tracked in the persistent data storage of the present invention.

Upon detection of the action to change the editable element at step the illustrative method of the present invention provides an indicator in the user interface that the element is dirty . As depicted in the illustrative graphical user interface of indicators and are provided for the text field combo box and combo box respectively. The indicators and may comprise a visual indicator. For example as illustrated in the indicators and may comprise any type of color such as a background color distinguishable from the editable element and associated with the indicator. Additionally the indicators and may comprise any type of graphical pattern such as a background color pattern as also illustrated in . In other embodiments any of the indicators and may comprise an auditory force and or tactile indicator. As discussed in conjunction with the indicators and may comprise any type and combination of visual auditory force or tactile type indicator.

Furthermore each indicator and is provided so that it is associated with the respective editable element and . That is for example indicator is placed in the user interface near or proximate to element . In this manner the indicator provides a cue or prompt to the user that the element is dirty e.g. an action has been taken to change the value and that the user may desire to either undo or save the change. In embodiments using an auditory force and or tactile type indicator the indicator may be associated with the element and in such a manner as to provide an audible and or touch related cue or prompt to the user.

At step of the illustrative method of the present invention the value of the editable element and may be applied saved or otherwise committed as a change or canceled. For example upon prompt of the indicators and the user may review the values of the elements and and save the changed values by selecting an Ok or Apply command button such as those illustrated in and known by those ordinarily skilled in the art. In one embodiment the value of the editable elements and are saved to the persistent data storage . In another example the user may decide to cancel the values of the editable elements and associated with the visual indicators and . In one embodiment the user may apply the changed values of the editable elements and without saving the changes to a persistent data storage . For example the user may apply the new value of the editable element to determine the effect on another portion of the user interface such as a graph a calculation or a value of another element dependent on the changed element. Instead of saving the new value of the editable element the user may cancel the changes by selecting the cancel button or by otherwise exiting from the graphical user interface . One ordinarily skilled in the art will recognize and appreciate the various ways that a value for an element of a user interface may be canceled applied saved or committed to a persistent data storage .

Upon either saving applying or canceling the value of an editable element having a dirty indicator from step the illustrative method of the present invention tracks the element as not dirty at step and removes the indicator associated with the element at step . As discussed above with respect to step any suitable mechanism or means known to one ordinarily skilled in the art may be used to track the status of an element of the user interface as not dirty and in one embodiment the persistent data storage may be used for such purposes. In some embodiments upon saving or canceling the value of an editable element having a dirty indicator the illustrative method of the present inventions tracks the element as not dirty at step and then closes quits or otherwise stops displaying the user interface . In these cases step of illustrative method is not performed as the user interface and the editable element having a dirty indicator is no longer viewable by the user.

In some embodiments the dirty indicator comprises a visual indicator and at step an action is taken on the visual indicator so that it is no longer visible in the user interface in association with the element e.g. or . In one embodiment the visual indicator may be removed from the user interface entirely. In another embodiment the visual indicator may be modified to be placed in the background of the user interface effectively hiding it from view of the user. In a further embodiment the visual indicator may be modified to change its color font or other visual attributes to effectively mask the visual indicator from being seen by the user.

In the case where the dirty indicator comprises an auditory force and or tactile type of indicator the present invention at illustrative step stops providing the sensory output of such an indicator. In one embodiment the sound from an auditory type indicator is either no longer played or produced or the volume set to a level that is no longer audible. In another embodiment the sensory feedback from a tactile or force type indicator is either no longer generated or provided or the level of such feedback is set that it is no longer sensed. One ordinarily skilled in the art will recognize and appreciate the various ways that any of the visual auditory force or tactile type dirty indicators may be removed from association with an element of the user interface .

In some embodiments the dirty indicator may be provided at step of illustrative method and removed or changed at any of the steps and based on different scenarios of interaction with the user interface . In one embodiment the dirty indicator is removed when the user selects an apply command button or any other similar user interface function that effects the value of the element to the functionality or behavior of the user interface . For example in response to the prompt of the dirty indicator the user may apply the changed value of the element to determine the effect on the operation and behavior of the functionality implemented by the user interface . In some cases the apply command only applies the value to the user interface functionality without saving it to a persistent data storage such as to a file or a database. In other cases the apply command applies the value to the user interface functionality and saves the value to the persistent data storage . In these cases the dirt indicator provides a prompt that the value of the element may have changed from its initially presented value in the user interface or from the last applied value for the element which may be different than the value of the element stored in the persistent data storage . Once the value of the element is applied and even though not saved the dirty indicator may be removed and the element tracked as not dirty. .

In other embodiments even though the value of the element may have been applied to the functionality of the user interface the dirty indicator may only be removed after the value of the element has been saved to a persistent data storage . For example in response to the prompt of the dirty indicator the user may apply the changed value of the element to see the effect on the functionality of the user interface . After applying the changed value of the element the dirty indicator remains and the element is still tracked as dirty. After the user confirms the effects of the changed value on the user interface are as desired the user may save the changed value to a persistent data storage such as by selecting an Ok or save command button as known by those ordinarily skilled in the art. At applying and saving the changed value the dirty indicator may be removed and the element tracked as not dirty. 

In another embodiment the user may confirm the effects of applying the changed value on the user interface are not as desired and therefore cancel or undo the change to the value of the element. For example the user may select a cancel or undo command button as known to those ordinarily skilled in the art. The cancel command may exit from the form or user interface and not save the changed value to persistent data storage . An undo command may change the value of the element to a previous value before it was changed. The user may also effectively cancel the changed value by exiting from the user interface via an exit button or any other quit or exit functionality provided by the user interface . In the cases where the dirty indicator remains after applying or effecting the changed value to the user interface the dirty indicator provides a prompt that the value of the element may have changed from its persistent value stored in the persistent data storage . The element is tracked as dirty and the dirty indicator is provided until the value of the element is either saved or canceled.

In another embodiment instead of removing the dirty indicator after applying the changed value to the user interface the dirty indicator is changed to indicate that the dirty element was applied but not saved or canceled. For example a first dirty indicator may be provided upon detection of action to change a value of the element of the user interface . The first dirty indicator may be of a certain color. Upon prompt of the first dirty indicator the user may apply the change to the user interface without saving it. The element may be still tracked as dirty but also tracked as applied and not saved or canceled. Additionally the first dirty indicator may be changed modified replaced or substituted to effectively provide a second dirty indicator . The second dirty indicator may be a different color than the first dirty indictor or otherwise is distinguishable from the first dirty indicator . The second dirty indicator provides an indication that the element is still dirty but has been applied but not saved or canceled. Upon either saving or canceling the change to the element the second dirty indicator may be removed and the element tracked as not dirty. The first dirty indicator provides a prompt that the value of the element may have changed but has not yet been applied and the second dirty indicator provides a prompt that the value of the element has been applied but not saved or canceled.

Furthermore the second dirty indicator may be provided in such a manner so that in comparison to the first dirty indicator the second dirty indicator indicates the dirty element is less dirty. e.g. applied but not saved . In one embodiment the second dirty indicator may be grayed out dimmed or otherwise a lighter color than the first dirty indicator . For example the first dirty indicator may be a gray color and after applying the value of the element the second dirty indicator may be a lighter shade of gray. Likewise with any auditory force or tactile type dirty indicator the second dirty indicator may be of a lesser volume force and or touch as compared to the first dirty indicator . One ordinarily skilled in the art will recognize and appreciate the various ways a dirty indicator may be changed modified or replaced to indicate the dirtiness of an element to a lesser or a higher degree in any desired granularity.

As the user may navigate through one or more selections e.g. of the tree widget actions may be detected to change the value of an editable element and provide a dirty indicator for the editable elements as described in conjunction with illustrative method of . For example the user may change the editable elements and associated with the Solver selection and dirty indicators and provided as illustrated in . Although the dirty indicators and are provided to prompt the user about the dirty status of the elements and the user may navigate to another selection such as the Comments section depicted in the illustrative graphical user interface of . The techniques of the present invention will provide a dirty indicator for the Solver selection of the tree widget to indicate that there are one or more elements associated with the Solver selection having a dirty status. As illustrated in the Solver selection comprises a dirty indicator . In the case of a visual dirty indicator the dirty indicator may be provided such that the dirty indicator is visible when the Solver selection for example is selected or multi selected with another selection of the illustrative tree widget .

At step of the illustrative method the present invention determines if the dirty element is associated with a container element such as the tree widget illustrated in . In one embodiment step is performed with or at either step or step of illustrative method . Any suitable mechanism or means may be used as known by those ordinarily skilled in the art to determine if a dirty element is contained in or otherwise associated with another element of the user interface. In one embodiment the present invention uses application programming interface API calls related to the element and or the container widget to determine an association.

At illustrative step of the present invention if the dirty element is associated with a container element such as the tree widget the container element is indicated and tracked as having a dirty status. As with tracking the dirty status of an element as discussed above any suitable mechanism or means may be used. By way of example of the Solver selection is tracked as dirty since the editable elements and associated with the Solver selection are dirty .

At step of the illustrative method a dirty indicator is provided in a manner associated with the container element having the dirty elements. In one embodiment as illustrated in the dirty indicator comprises a visual indicator that is visually distinguishable from the element of the container widget . For example as illustrated in the dirty indicator for the Solver selection may comprise a background color and or pattern distinguishable from the visual attributes of the Solver selection itself. As discussed above the dirty indicator for an element of the container widget may comprise any type and form of visual auditory or tactile type indicator. Further although generally illustrated with a tree container widget those ordinarily skilled in the art will recognize and appreciate that any type of container widget may be used or any graphical element associating a group of other elements may be used in practicing the operations of the present invention described herein.

At steps and of illustrative method of the present invention the dirty status of a container element is tracked until the container element does not have any associated elements associated having a dirty status. The dirty indicator associated with the container element will be removed once all elements associated with the container element have their respective dirty indicators removed. At step the illustrative method checks if the container element has one or more dirty elements associated with it. In one embodiment step may performed with or at any of the steps and of illustrative method .

If the container element is determined to not have any dirty elements associated with it at step the container element is tracked as not having a dirty status and at step the dirty indicator associated with the container element is removed. Otherwise if the container element still has dirty elements associated with it the container element remains tracked with a dirty status and the dirty indicator associated with the container element is not removed.

In some embodiments the dirty indicator associated with the container element may change or otherwise be different based on whether all none or a portion of the elements associated with the container element are dirty . That is the dirty indicator not only indicates that an element associated with the container element is dirty but may also indicate the quantity and or type of dirty elements. For example if all the elements associated with the container element are dirty then a first type of dirty indicator may be provided. In another example if only one element associated with the container element is dirty then a second type of dirty indicator different than the first type of dirty indicator may be used. In other cases a dirty indicator may be provided that indicates the number and or type of dirty elements associated with the container element. For example the dirty indicator may comprise a number indicating the number of dirty elements. Additionally the dirty indicator may provide a pop up form or by other suitable means and or mechanisms a list of the dirty elements by name type and or other attributes. One ordinarily skilled in the art will recognize and appreciate the variety of ways that the dirty indicator may also provide information or an indication of the portion and or type of the elements of the container element that are dirty. 

In another aspect the techniques of the present invention can also be applied to graphical models such as a graphical model provided by the graphical modeling environment . In an exemplary embodiment the techniques of the present invention are used for a block diagram model provided by the graphical modeling environment of Simulink . depicts an illustrative method of practicing the techniques of the present invention in conjunction with a graphical model as illustrated in .

At step of illustrative method of the present invention a graphical model is provided such as the graphical model of . In brief overview the illustrative graphical model of comprises a block diagram model such as a block diagram model generated with or otherwise provided by Simulink in an exemplary embodiment. The block diagram model of the present invention provides a graphical representation for illustration purposes of the van der Pol Equation which is known by those ordinarily skilled in the art and is used herein simply as an example algorithm for graphical modeling.

The block diagram model of comprises a series of various functional blocks connected by one or more lines representing signals. Any of the blocks lines and other elements of the block diagram model may be selected for example clicked by a pointing device to present a user interface such as any user interface of the present invention to further configure modify change or otherwise alter the graphical model . In other embodiments any elements of the block diagram model such as a block or line may be selected and repositioned moved relocated or deleted. Additionally new elements such as blocks or lines may be added to the graphical model as may be provided by any graphical modeling environment such as via any sequence of pointing device and or keyboard input. Furthermore the graphical modeling environment may provide any means or mechanisms to programmatically change or alter the graphical model . For example an application programming interface API may be called to add a block to the block diagram model .

At step of the illustrative method an action to change an element or portion of the graphical model is detected. In an exemplary embodiment a detector associated with the graphical model and or the graphical modeling environment detects an action to change any of the elements of the graphical model or otherwise alter graphical model . For example a user may have placed the pointer over any element such as line or block clicked the pointer of the pointing device to place input focus on the element and entered via the keyboard one or more characters such as a sequence of key stroke commands recognized by the graphical modeling environment . In another example the user may select an element of the graphical model such as a line or block and may attempt to move or actually move the element to another location in the graphical model . In one embodiment the user may select an element of the graphical model and move the element but put the element back in the same location.

In the illustrative example depicted in a new block and a new connecting line is added to the graphical model . The detector may have detected one or more of the user activities to determine that an action was taken to add the block and or line . In some embodiments one or more executable instructions such as a program may have been executed to take an action to alter the graphical model to add elements and . In one embodiment the executable instructions may simulate the same activity from the user in adding these elements and . In these cases the detector may detect the actions by the executable instructions to perform the actions of adding these elements and .

In another embodiment the illustrative step may detect the action to alter the graphical model even if the graphical model is not altered by the action. For example the user may delete a line or block of the block diagram model of and add the same line or block to the block diagram model so that the block diagram model has not effectively changed. The detector may detect an alteration of a graphical model upon selecting or having input focus on any element or portion of the graphical model . For example the user may place the pointer of a pointing device such as a mouse over an element of the graphical model or may click on the element or may otherwise tab to the element to cause the element to have input focus. These activities may not alter the graphical model but nevertheless the detector may detect such actions and a dirty indicator provided in accordance with the present invention. Although the user may not be able to detect an action was taken to alter the graphical model the detector in one embodiment detects this action in order to provide a dirty indicator as described herein. In one embodiment the detector detects if the action to alter the graphical model does alter the graphical model. In some embodiments the detector compares the graphical model to the initially presented graphical model at step or to a previously saved or last saved version of the graphical model which in one embodiment is stored in the persistent data storage .

In other embodiments a dirty indicator may be provided based on criteria other than graphical changes to the graphical model . In one embodiment a checksum of the graphical model may be compared to determine whether to provide a dirty indicator . As one ordinarily skilled in the art will appreciate a checksum provides a computed value that depends on the contents of a set of data such as the data of the graphical model and is used to determine if the data has been altered. A checksum value can be compared with a known or previously saved checksum value to determine if there was a change related to the contents of the set of data. In some embodiments the present invention may use one or more of the following types of checksums for detecting an action to alter a graphical model or for otherwise determining a change to the graphical model a structural checksum a parameter checksum a graphical checksum a configuration checksum and or a dependency checksum.

A structural checksum may be used to detect any type or form of topological change to the graphical model such as a new element added to the graphical model . A parameter checksum may be used to detect changes to any parameter values associated with the graphical model such as a parameter used in the function or operation of a block in a block diagram model. A graphical checksum may be used to detect changes in the graphical appearance of the graphical model such as a change to the arrangement of blocks in a block diagram model. A configuration checksum may be used to detect a change in configuration information related to the graphical model such as determining the mode of execution of the graphical model or configuration information related to code generation and compilation output. A dependency checksum may be used to detect any changes to any dependencies between the relationships of elements of the graphical model .

In one embodiment if a block of the graphical model is moved without changing the structure and or operation of the graphical model then a structural checksum may indicate that no changes occurred to the graphical model and as a result a dirty indicator is not provided. However if a graphical checksum is used then the change may be detected and a dirty indicator provided. One ordinarily skilled in the art will recognize and appreciate the various forms and types of checksums that may be used to detect changes to a graphical model in some embodiments of the present invention described herein.

In another embodiment the dirty indicator is provided in accordance with configurable rules such as user preferences configured set or otherwise provided to the graphical modeling environment . For example a user preference may indicate that even if the user moved a block and a structural checksum indicates no structural changes to the graphical model a dirty indicator should be provided to indicate the moving of the block. In another example a configured rule of the graphical modeling environment may indicate to either provide or not provide a dirty indicator when a signal or connecting line in the graphical model is re routed or otherwise moved or re arranged. One ordinarily skilled in the art will recognize and appreciate how the graphical modeling environment may be configured to set preferences or rules when a dirty indicator should or should not be provided.

At illustrative step of the present invention once the action to change or otherwise alter an element or portion of the graphical model is detected the element or portion is tracked as dirty . Any suitable mechanism or means known to one ordinarily skilled in the art may be used to track the dirty status of an element of the graphical model detected by the detector . For example any type of variable data structure or object may be used to associate an element of the user interface with a dirty status. In one embodiment the dirty status of an element of the graphical model may be stored and tracked in the persistent data storage of the present invention. For example the graphical model may be stored in a model file in a format accessible and readable by the graphical modeling environment .

Upon detection of the action to change or alter the graphical model the illustrative method of the present invention provides a dirty indicator in the graphical model to indicate the detected element is dirty . As depicted in the illustrative graphical model of indicators are provided for the block and line respectively. The dirty indicators and may comprise a visual indicator. For example as illustrated in the indicators and may comprise any type of color such as a background color distinguishable from the element and associated with the indicator. Additionally the dirty indicators and may comprise any type of graphical representation such as a background pattern or a bounding box as also illustrated in . In other embodiments any of the indicators and may comprise an auditory and or tactile indicator. As discussed in conjunction with the indicators and may comprise any type and combination of visual auditory or tactile type dirty indicator .

Furthermore each dirty indicator and is provided so that it is associated with the respective element and . That is for example indicator is placed in the graphical model near or proximate to element . In this manner the dirty indicator provides a cue or prompt to the user that the element is dirty e.g. an action has been taken to alter the graphical model via this element and that the user may desire to either undo the alteration or save the graphical model . In embodiments using an auditory or tactile type indicator the dirty indicator may be associated with the element and in such a manner as to provide an audible and or touch related cue or prompt to the user.

At step of the illustrative method of the present invention the graphical model or any portion thereof may be saved or otherwise committed to persistent data storage . For example upon prompt of the dirty indicators and in the user may review the associated elements and save the graphical model by any suitable mechanism or means provides by the graphical modeling environment . In one embodiment the graphical model is saved to the persistent data storage such as in an exemplary embodiment of Simulink a file having contents representing the graphical model . In another example the user may decide to cancel any possible alterations to the graphical model to leave the graphical model intact as provided at step . The user may cancel undo or otherwise revert back to the graphical model provided at step prior to any actions to alter the graphical model being detected by the detector . One ordinarily skilled in the art will recognize and appreciate the various ways that a graphical model and any portions thereof may be applied saved or committed to a persistent data storage or the altered portion canceled.

Upon either saving or canceling the possible or actual alterations to the graphical model the illustrative method of the present invention tracks the element or portion of the graphical model as not dirty at step and removes the dirty indicator associated with the element at step . As discussed above with respect to step any suitable mechanism or means known to those ordinarily skilled in the art may be used to track the status of an element or portion of the graphical model as not dirty and in one embodiment the persistent data storage may be used for such purposes. As illustrated by the dirty indicators are removed upon saving the graphical model . For example the user may review the dirty indicators associated with elements and determine the changes should be saved and then save the changes. As such the elements and are no longer dirty and their status is tracked as not dirty and the dirty indicators such as visual auditory and or tactile indicators are removed. One ordinarily skilled in the art will recognize and appreciate the various ways that any of the visual auditory or tactile type dirty indicators may be removed from association with an element or portion of the graphical model .

Although the discussions above generally describe providing dirty indicators for elements added to a graphical model the techniques of the present invention provide dirty indicators for any elements that may be removed or altered in some way. In one embodiment if element was removed from the graphical model of a dirty indicator may be provided in the location of the element . In one case the dirty indicator may be a phantom or shadow representation of element or otherwise a representation to indicate what type of element was previously located in the location of the graphical model but since has been removed. In another embodiment if element was saved at step and then an action was taken to modify or alter element a dirty indicator as illustrated in would be provided. One ordinarily skilled in the art will recognize and appreciate how the techniques of the present invention are applied to removed and altered elements of the graphical model .

Furthermore the illustrative method may be applied to a graphical model having an element such as block of a block diagram model which incorporates includes points to or otherwise references another graphical model . For example in the illustrative graphical model of the element may instead be a block that references a second graphical model . In these cases the techniques of the present invention such as those illustrated by method can be used to provide a dirty indicator associated with element that indicates the second graphical model has one or more elements or portions of it that are detected as being dirty. One ordinarily skilled in the art will recognize and appreciate how the illustrative methods of the present invention may be applied to an element of a graphical model that references or incorporates another set of elements forming a graphical model or any portion thereof in a similar manner as the container element of illustrative method .

In another aspect of the present invention a graphical model such as those illustrated in may also be represented in the form of a user interface . illustrate a portion of the graphical models of represented by elements in a user interface . depicts a user interface element representing the block labeled Out in the block diagram model of . In accordance with the techniques of the present invention such as illustrative method upon detection of an action to change the value of the user interface element a dirty indicator may be provided as illustrated in . As such the techniques of the present invention can be applied to graphical models diagrammatically provided by the graphical modeling environment and or in the form of a user interface . In some embodiments the techniques of providing a dirty indicator for a container element as described above in conjunction with may be used for graphical models diagrammatically provided by the graphical modeling environment and or in the form of a user interface . In one example a dirty indicator may be used to indicate a container element in the user interface representation of the graphical model may have one or more associated elements i.e. graphical model elements that are dirty. In another example a block of a graphical model may have a dirty indicator to indicate that one or more subsystems or referenced graphical models in a hierarchical graphical model may be dirty or comprise one or more dirty elements.

In an additional aspect the techniques of the present invention can be applied to formatted text such as variable or parameter names and associated properties and or values. In the exemplary embodiment of Simulink as the graphical modeling environment the variables or parameters may be provided by the MATLAB workspace. As known to those ordinarily skilled in the art a MATLAB workspace comprises a set of variables such as named arrays that are established and built up during a MATLAB session and stored in memory. The MATLAB workspace is interfaced with and is used or otherwise accessible by Simulink to perform variable related operations in MATLAB . depict illustrative user interfaces providing a listing of variables from a workspace. In brief overview illustrates a graphical user interface comprising a workspace browser to view the name value and class of each of the workspace variables . illustrates a command line user interface such as a MATLAB command line environment to view the name value and class of each of the workspace variables . Any command function or other executable instruction such as the who and whos functions of MATLAB illustrated in may be executed to provide a listing of workspace variables with any associated variable properties. As depicted in the illustrative workspace comprises four variables each with corresponding values and class types . For example variable named A is of class type double with a value of 15 16 17 18 . 

Using the techniques described herein the present invention in some embodiments detects and tracks any changes to the name value or class or any other property of any of the workspace variables and provides a dirty indicator to indicate the detection. For example the present invention may detect an action to change the name the value and or the class of variable A and provide a dirty indicator associated with the variable as illustrated in the user interfaces of . In this example the dirty indicator may comprise a change to the font type style effects size or any other font attribute of the variable name . For example as illustrated in the dirty indicator may include changing the text of the variable name A to be bold italicized and or underlined. The dirty indicator may be of a font that is different visually or otherwise in contrast and comparison to the font of the other variables 

In some embodiments the dirty indicator may indicate that an action to change any attribute and or of the variable may have been detected. In another embodiment the dirty indicator may indicate that the name of the variable has changed. In further embodiments the dirty indicator may be associated with one or more of the attributes and that an action to change has been detected. In one embodiment if the name value and class of the variable A has changed a dirty indicator may be provided and associated with each of the name value and class . For example if the value of variable A has changed then the changed value in the listing of the user interface may be indicated with a dirty indicator . The dirty indicator may provide a change of the font of all or a portion of the text or characters comprising the value . Likewise if the class of the variable has changed then a dirty indicator may be provided in association with the class and may include a change in the font of all or a portion of the text or characters identifying the class type.

Although generally described above as providing a dirty indicator for text via a change to the text such as font type the dirty indicator may be an additional element such as a graphic symbol character or other type of dirty indicator separate from but associated with the text. For example an asterisk or some other character may be placed in front of or after the text in addition to or instead of the change in font of the text. Additionally the dirty indicator may be any type of indicator as described herein including any combination of sensory type of indicator such as an auditory force or tactile feedback. Furthermore although applying the techniques of the present invention to formatted text are illustrated above via variables in a workspace of MATLAB one ordinarily skilled in the art will recognize and appreciate that the techniques of the present invention can be applied to any type and form of text in any suitable environment.

In another aspect the dirty indicator of the present invention may also provide a list of one or more values of the element related to a dirty element of a user interface or a graphical model . The list of one or more values may provide the previous value of the element and in one embodiment may also provide the current value of the element. In one embodiment the dirty indicator may provide a list of values that have been applied for the element but not saved. In another embodiment the dirty indicator may provide a historical list of values showing changes to the values of the element and which values have been applied saved or canceled. In one embodiment the dirty indicator may be a selectable or clickable element that can provide a pop up drop down list. For example the dirty indicator may be a graphical element component or widget that has its own methods properties and or events. If a user selects the dirty indicator the dirty indicator may be configured to provide a list of values associated with the changes to the values of the dirty element. Although discussed as the dirty indicator providing the list of values related to the history of the dirty element the user interface graphical model and or the graphical modeling environment may be configured to provide such values. One ordinarily skilled in the art will recognize and appreciate how a list of values related to changes to the dirty element either current or historically may be provided by a variety of suitable means and or mechanisms.

In view of the structure functions and operations of the systems and methods as described herein the present invention provides techniques for detecting actions to change or alter elements of a user interface and graphical model and provide an indicator that identifies the detection. The indicator provides a visual auditory and or tactile cue or prompt to the user that an element of the user interface and or graphical model may have been changed or at least action was taken to attempt to change it. In this manner users can efficiently view what elements of multiple element user interfaces and graphical models may have been changed and may need attention to save or cancel the changes.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

