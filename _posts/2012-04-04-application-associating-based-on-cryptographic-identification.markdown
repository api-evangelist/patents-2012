---

title: Application associating based on cryptographic identification
abstract: As each application is loaded for use by an operating system, a message handling application within the operating system associates the applications with relativity metrics for later use in handling interprocess messages. A cryptographic identifier associated with each application is verified and, based on the verifying, each application is associated with a relativity metric. The message handling application receives a message from an origin process. The message handling application then determines a destination process for the message, a relativity metric for the origin process, and a relativity metric for the destination process. Based on an analysis of the relativity metrics of the origin process and the destination process, the message handling application determines whether to forward the message to the destination process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561083&OS=08561083&RS=08561083
owner: Blackberry Limited
number: 08561083
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20120404
---
This application is a continuation of U.S. patent application Ser. No. 11 865 373 filed Oct. 1 2007 and issued to patent as U.S. Pat. No. 8 166 487. The entire contents of U.S. patent application Ser. No. 11 865 373 is hereby incorporated by reference.

The present application relates generally to applications executed on a processor and more specifically to associating applications with relativity metrics based on cryptographic identification.

 Message passing generally refers to a form of communication used in concurrent computing parallel computing object oriented programming and interprocess communication. Communication is accomplished by the sending of messages to recipients. Forms of messages include function invocations signals and data packets. Message passing model based programming languages typically define messaging as the usually asynchronous sending usually by copy of a data item to a communication endpoint actor process thread socket etc. . Messages are also commonly used in the same sense as a means of interprocess communication the other common technique of interprocess communication being streams or pipes in which data are sent as a sequence of elementary data items instead.

In consideration of message passing for interprocess communication a message from an origin process to a destination process typically passes first to the operating system supporting the execution of the origin process and the destination process. The operating system then handles the passing of the message to the destination process. In some instances execution of the origin process and the destination process is supported by a virtual machine where execution of the virtual machine is supported by the operating system. An example virtual machine is the well known Java virtual machine i.e. the Java Runtime Environment. Where a virtual machine is interposed between the processes and the operating system a message from the origin process is first received by the virtual machine and passed by the virtual machine to the operating system. The operating system then handles the passing of the message to the destination process via the virtual machine.

Modern operating systems handle the passing of messages from one process to one or more other processes. The message can take the form of a targeted message which has a single destination process or can take the form of a global message which has multiple destination processes e.g. all processes .

In an example scheme a manufacturer of a computing product that is a mobile communication and computing device provides an operating system to facilitate operation of the product. The manufacturer includes in the product proprietary applications that are designed to be executed on the operating system. Furthermore the manufacturer makes available details about the workings of the operating system thereby allowing third parties to develop applications that are also designed to executed on the operating system. Such workings of the operating system may include for instance Application Programming Interfaces APIs .

To facilitate third party application development the manufacturer can arrange the product so that the operating system executes a known virtual machine. Consequently third parties develop applications that are executed by the virtual machine.

When both the proprietary applications and the third party applications are executed on the same operating system on the same device the operating system handles the passing of messages from processes based on the third party applications to processes based on the proprietary applications. Additionally the operating system handles the passing of messages from processes based on the proprietary applications to processes based on the third party applications. This message exchange availability opens numerous attack vectors for a nefarious third party application. For example a nefarious third party application can send messages to proprietary applications which messages may modify system state.

Where the operating system has defined application groupings each process may be associated with a grouping and each grouping may be associated with a relativity metric. A message handling function of the operating system will forward a message from an origin process associated with a grouping x to a destination process associated with a grouping y so long as the message handling function has previously been determined that based on the relativity metric of grouping x and the relativity metric of grouping y messages from processes from grouping x are to be forwarded to processes from grouping y.

According to one aspect described herein there is provided a method of associating applications with relativity metrics for later use in handling interprocess messages. The method includes receiving a first executable file for a first application the first executable file including a first cryptographic identifier verifying the first cryptographic identifier and associating based on the verifying the first application with a first relativity metric. In other aspects of the present application an apparatus is provided for carrying out this method and a computer readable medium is provided for adapting a processor to carry out this method.

According to another aspect described herein there is provided a method of associating applications with relativity metrics and handling interprocess messages. The method includes receiving a first executable file for a first application the first executable file including a first cryptographic identifier verifying the first cryptographic identifier where the verifying involves use of a first public cryptographic key where the first public cryptographic key is associated with a first relativity metric and associating based on the verifying the first application with the first relativity metric. The method further includes receiving a second executable file for a second application the second executable file including a second cryptographic identifier verifying the second cryptographic identifier where the verifying the second cryptographic identifier involves use of a second public cryptographic key where the second public cryptographic key is associated with a second relativity metric and associating based on the verifying the second cryptographic identifier the second application with the second relativity metric. The method also includes receiving a message from an origin process the origin process associated with the first application determining a destination process for the message the destination process associated with the second application determining that the first relativity metric is associated with the origin process and determining that the second relativity metric is associated with the destination process. The method also includes analyzing whether based on the first relativity metric and the second relativity metric messages from the origin process are allowed to be passed to the destination process and passing the message to the destination process only if allowed based on the analyzing. In another aspect of the present application an apparatus is provided for carrying out this method.

Other aspects and features of the present invention will become apparent to those of ordinary skill in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.

The housing may be elongated vertically or may take on other sizes and shapes including clamshell housing structures . Where the keyboard includes keys that are associated with at least one alphabetic character and at least one numeric character the keyboard may include a mode selection key or other hardware or software for switching between alphabetic entry and numeric entry.

In addition to the microprocessor other parts of the mobile communication device are shown schematically in . These include a communications subsystem a short range communications subsystem the keyboard and the display along with other input output devices including a set of auxiliary I O devices a serial port a speaker and a microphone as well as memory devices including a flash memory and a Random Access Memory RAM and various other device subsystems . The mobile communication device may be a two way radio frequency RF communication device having voice and data communication capabilities. In addition the mobile communication device may have the capability to communicate with other computer systems via the Internet.

Operating system software executed by the microprocessor may be stored in a computer readable medium such as the flash memory but may be stored in other types of memory devices such as a read only memory ROM or similar storage element. In addition system software specific device applications or parts thereof may be temporarily loaded into a volatile store such as the RAM . Communication signals received by the mobile device may also be stored to the RAM .

The microprocessor in addition to its operating system functions enables execution of software applications on the mobile communication device . A predetermined set of software applications that control basic device operations such as a voice communications module A and a data communications module B may be installed on the mobile communication device during manufacture. A message handling module C may also be installed on the mobile communication device during manufacture to implement aspects of the present application. As well additional software modules illustrated as an other software module N which may be for instance a PIM application may be installed during manufacture. The PIM application may be capable of organizing and managing data items such as e mail messages calendar events voice mail messages appointments and task items. The PIM application may also be capable of sending and receiving data items via a wireless carrier network represented by a radio tower. The data items managed by the PIM application may be seamlessly integrated synchronized and updated via the wireless carrier network with the device user s corresponding data items stored or associated with a host computer system.

Communication functions including data and voice communications are performed through the communication subsystem and possibly through the short range communications subsystem . The communication subsystem includes a receiver a transmitter and one or more antennas illustrated as a receive antenna and a transmit antenna . In addition the communication subsystem also includes a processing module such as a digital signal processor DSP and local oscillators LOs . The specific design and implementation of the communication subsystem is dependent upon the communication network in which the mobile communication device is intended to operate. For example the communication subsystem of the mobile communication device may be designed to operate with the Mobitex DataTAC or General Packet Radio Service GPRS mobile data communication networks and also designed to operate with any of a variety of voice communication networks such as Advanced Mobile Phone Service AMPS Time Division Multiple Access TDMA Code Division Multiple Access CDMA Personal Communications Service PCS Global System for Mobile Communications GSM Enhanced Data rates for GSM Evolution EDGE Universal Mobile Telecommunications System UMTS Wideband Code Division Multiple Access W CDMA etc. Other types of data and voice networks both separate and integrated may also be utilized with the mobile communication device .

Network access requirements vary depending upon the type of communication system. Typically an identifier is associated with each mobile device that uniquely identifies the mobile device or subscriber to which the mobile device has been assigned. The identifier is unique within a specific network or network technology. For example in Mobitex networks mobile devices are registered on the network using a Mobitex Access Number MAN associated with each device and in DataTAC networks mobile devices are registered on the network using a Logical Link Identifier LLI associated with each device. In GPRS networks however network access is associated with a subscriber or user of a device. A GPRS device therefore requires a subscriber identity module commonly referred to as a Subscriber Identity Module SIM card in order to operate on a GPRS network. Despite identifying a subscriber by SIM mobile devices within GSM GPRS networks are uniquely identified using an International Mobile Equipment Identity IMEI number.

When required network registration or activation procedures have been completed the mobile communication device may send and receive communication signals over the wireless carrier network . Signals received from the wireless carrier network by the receive antenna are routed to the receiver which provides for signal amplification frequency down conversion filtering channel selection etc. and may also provide analog to digital conversion. Analog to digital conversion of the received signal allows the DSP to perform more complex communication functions such as demodulation and decoding. In a similar manner signals to be transmitted to the wireless carrier network are processed e.g. modulated and encoded by the DSP and are then provided to the transmitter for digital to analog conversion frequency up conversion filtering amplification and transmission to the wireless carrier network or networks via the transmit antenna .

In addition to processing communication signals the DSP provides for control of the receiver and the transmitter . For example gains applied to communication signals in the receiver and the transmitter may be adaptively controlled through automatic gain control algorithms implemented in the DSP .

In a data communication mode a received signal such as a text message or web page download is processed by the communication subsystem and is input to the microprocessor . The received signal is then further processed by the microprocessor for output to the display or alternatively to some auxiliary I O devices . A device user may also compose data items such as e mail messages using the keyboard and or some other auxiliary I O device such as a touchpad a rocker switch a thumb wheel a trackball a touchscreen or some other type of input device. The composed data items may then be transmitted over the wireless carrier network via the communication subsystem .

In a voice communication mode overall operation of the device is substantially similar to the data communication mode except that received signals are output to a speaker and signals for transmission are generated by a microphone . Alternative voice or audio I O subsystems such as a voice message recording subsystem may also be implemented on the mobile communication device . In addition the display may also be utilized in voice communication mode for example to display the identity of a calling party the duration of a voice call or other voice call related information.

The short range communications subsystem enables communication between the mobile communication device and other proximate systems or devices which need not necessarily be similar devices. For example the short range communications subsystem may include an infrared device and associated circuits and components or a Bluetooth communication module to provide for communication with similarly enabled systems and devices.

In overview as each application is loaded for use by an operating system a message handling application within the operating system associates the applications with relativity metrics for later use in handling interprocess messages. A cryptographic identifier associated with each application is verified and based on the verifying each application is associated with a relativity metric. A message handling application of an operating system analyses relativity metrics associated with origin and destination processes for a given message and determines based on the analysis whether to pass the given message to the destination process.

In view of an operating system more particularly a message handler has access to predefined application groupings. As the operating system loads a given application file into a memory such as the flash memory or the RAM for execution by the microprocessor that executes the operating system the operating system associates the given application in a relativity metric correlation record accessible by the message handler with one of the predefined application groupings. Consequently upon execution of a process associated with the given application the process is also associated with the predefined application grouping.

Each predefined application grouping may be associated with a relativity metric. In one embodiment the relativity metrics may be defined as tiers which may be said to be representative of privilege . A process may be considered to have a higher privilege when associated with a comparatively lower valued tier than a tier with which another process is associated. For example a process A A in is associated with a Tier 2 while a process B B is associated with a Tier 1 . Accordingly the process B B has a higher privilege than the process A A.

The message handler of the operating system may be configured to only forward messages to destination processes with equal or higher tier values i.e. equal or lower privilege. The message handler will forward a message from an origin process associated with a grouping x to a destination process associated with a grouping y so long as it has previously been determined that based on the relativity metric of grouping x and the relativity metric of grouping y messages from processes from grouping x are to be forwarded to processes from grouping y.

In the example of the process A A has transmitted a message with the process B B as the destination process. The message handler may execute a message handling method example steps of which are illustrated in . Initially the message handler receives step the message from the origin process the process A A . The message handler then determines step that the process B B is the destination process for the message. The message handler determines step a relativity metric of the process A A. That is the message handler determines step that the process A A is associated with a tier with a value of 2 . The message handler determines step a relativity metric of the process B B. That is the message handler determines step that the process B B is associated with a tier with a value of 1 . The message handler analyzes step whether based on the tier value 2 of the process A A and the tier value 1 of the process B B messages from the process A A are to be forwarded to the process B B. Since the tier value of the process A A is lower than the tier value of the process B B the message handler does not forward the message to the process B B and the method is complete.

Notably in the case wherein the process B B has transmitted a message with the process A A as the destination process when the message handler analyzes step the relativity metrics the message handler determines that the tier value of the process B B the origin process is higher than the tier value of the process A A. Accordingly the message handler forwards the message to the process A A and the method is complete.

So that the message handler may determine the relativity metric of a given process steps a relativity metric correlation record may be maintained with a correlation between processes and relativity metrics. Accordingly determining the relativity metric of a given process steps may involve the message handler performing a table lookup in the relativity metric correlation record with a process identification as a key.

Alternatively the relativity metric correlation record may merely maintain a correlation between applications and relativity metrics. It is anticipated that the application with which a given process is associated will be known by the message handler . In this case determining the relativity metric of a given process steps may involve the message handler determining the application with which the given process is associated and then performing a table lookup in the relativity metric correlation record with an application identification as a key.

Population of the relativity metric correlation record may be accomplished by the message handler as each application is loaded. It is known that loading an application can involve providing a computer readable file e.g. an .exe file or in the Java context a .jar file. In other contexts a computer readable file containing an executable application is referred to as a .cod file. It is also known that such files typically include both compiled executable code and variable declarations.

It is known that executable files for applications can be cryptographically signed so that the applications may not be executed unless the processor that is to execute the application has access to a specific key. For proprietary applications a manufacturer may provide the message handler with a public cryptographic key and maintain a private cryptographic key as a trade secret. Subsequently the manufacturer can sign all proprietary applications with the private key. By selecting the correct public key the message handler may verify the cryptographic identifier on a given proprietary application and associate the given proprietary application with a privileged relativity metric.

For third parties the manufacturer may provide a second public key to the message handler and a second private key to the third party application developers. Subsequently the third party application developers can sign all third party applications with the second private key. By selecting the second public key the product may verify the cryptographic identifier on a given third party application and associate the given third party application with a relativity metric less privileged than the relativity metric associated with the proprietary applications.

Cryptographically signing an application may involve first providing the application code as input to a hash function to obtain a digital signature. Subsequently the digital signature may be encoded using the private key provided by the manufacturer. The encoded digital signature which may be called a cryptographic signature or identifier ID may then be appended to the application file.

Loading and sorting applications may be considered in view of and . Steps of an example method of loading and sorting applications are illustrated in as beginning with the message handler receiving step an application file for example an application file A A is illustrated in . More particularly the application file A A is illustrated as including a cryptographic ID A A. The message handler then acts to verify step the cryptographic ID A A associated with the application file A A.

To verify the cryptographic ID A A the message handler may provide the application code as input to the same hash function used by the third party. As a result of providing the application code to the hash function the message handler obtains a local digital signature. The message handler also decodes the cryptographic ID A A using a locally stored public key e.g. a public key X X to obtain a test digital signature. In an example case the public key X X is associated with a Tier 2 .

The message handler then determines step whether the verification has been successful. In particular if the message handler determines that the local digital signature and the test digital signature are equivalent then the cryptographic ID A A associated with the application file A A is considered to have been verified. However if the message handler determines that the local digital signature and the test digital signature are not equivalent then the verification is considered to have been unsuccessful.

Where the verification is considered to have been successful the message handler associates step the application with a relativity metric. As illustrated in the application A whose executable code is in the application file A A is associated in a relativity metric correlation record with Tier 2 . As mentioned above the public key X X is associated with Tier and since the cryptographic ID A A was successfully verified using the public key X X then the application A associated with the application file A A is associated with Tier 2 .

Subsequently as an application file B B is loaded the message handler may execute the method of . If a cryptographic ID B B which is associated with the application file B B is successfully verified using the public key X X then the message handler may associate an application B whose executable code is in the application file B B in the relativity metric correlation record with Tier 2 .

Similarly as an application file C C is loaded the message handler may execute the method of . Assume that a cryptographic ID C C which is associated with the application file C C is successfully verified using a public key Y Y. Assume also that the public key Y Y is associated with a Tier 1 . Accordingly the message handler may associate an application C whose executable code is in the application file C C in the relativity metric correlation record with Tier 1 .

Similarly as an application file D D is loaded the message handler may execute the method of . Assume that the application file D D is not associated with a cryptographic ID. It may be that a lack of a cryptographic ID is associated with a Tier 3 . Accordingly the message handler may associate an application D whose executable code is in the application file D D in the relativity metric correlation record with Tier 3 .

Where cryptographic signing of application files has been used in the past the cryptographic signature has been used to identify those applications that are to be allowed to access certain APIs in the operating system . As proposed herein various processes associated with signed applications may continue to access certain APIs such as those associated with message passing but as discussed herein a given message may not be passed to the intended destination based on determinations made by the message handler .

In consideration of the tier process B B as a destination the message handler determines step that the origin and destination processes are in the same tier and forwards the message to the tier process B B.

In consideration of the tier process C C as a destination the message handler determines step that the destination process has a higher privilege than the origin process and completes the method without forwarding the message to the tier process C C.

In consideration of the tier process D D as a destination the message handler determines step that the origin process has a higher privilege than the destination process and forwards the message to the tier process D D.

Notably the relativity metrics need not distinguish processes in a hierarchical manner. Instead the relativity metrics may distinguish processes by way of sets. Such sets may defined such that a message handler passes messages from processes of a first set to processes of a second set but not to processes of a third set the message handler passes messages from processes of the second set to processes of the third set but not to processes of the first set and the message handler passes messages from processes of the third set to processes of the first set but not to processes of the second set.

Conveniently aspects of the present application allow for binding permissions to applications automatically and at the time that the applications are loaded where the permissions are based on cryptographic identifiers associated with the applications. In contrast some known systems bind permissions to a given application manually by an administrator and handle message passing from the given application to another application based on disparity between permission levels associated with the account associated with the given application and the account associated with the other application.

Furthermore aspects of the present application establish a scheme though which proprietary processes execution of which is supported on an operating system may be relieved from receiving messages from process related to lesser privileged applications that are also executing on the same operating system.

The above described embodiments of the present application are intended to be examples only. Alterations modifications and variations may be effected to the particular embodiments by those skilled in the art without departing from the scope of the application which is defined by the claims appended hereto.

