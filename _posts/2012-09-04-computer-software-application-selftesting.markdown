---

title: Computer software application self-testing
abstract: Testing a computer software application by detecting an arrival of input data provided as input to a computer software application from a source external to the computer software application, modifying the detected input data to include test data configured to test the computer software application in accordance with a predefined test, thereby creating a modified version of the detected input data, and processing the modified version of the detected input data, thereby performing the predefined test on the computer software application using the test data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09256511&OS=09256511&RS=09256511
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09256511
owner_city: Armonk
owner_country: US
publication_date: 20120904
---
Dynamic analysis tools are often used by computer software developers to test computer software applications typically by first exploring an application to discover its interfaces including those by which data may be provided to the application and then by interacting with the application s interfaces and monitoring the application s responses to such interactions. In one type of dynamic analysis an application is tested for security vulnerabilities by providing data with known malicious properties to the application. For example dynamic analysis may be used to test a web application that is accessed over a computer network such as the Internet by employing a black box tester running on one computer that sends HTTP requests via a network to the web application that is hosted by another computer. The HTTP requests are configured with malicious payloads designed to test for security vulnerabilities such as SQL injection cross site scripting and command injection. Unfortunately such testing often produces hundreds of thousands of requests and responses resulting in a great deal of traffic between the black box tester and the application being tested which may negatively affect overall testing performance and duration.

In one aspect of the invention a method is provided for testing a computer software application the method including detecting an arrival of input data provided as input to a computer software application from a source external to the computer software application modifying the detected input data to include test data configured to test the computer software application in accordance with a predefined test thereby creating a modified version of the detected input data and processing the modified version of the detected input data thereby performing the predefined test on the computer software application using the test data.

In another aspect of the invention a method is provided for testing a computer software application the method including instrumenting a computer software application to detect an arrival of input data provided as input to a computer software application from a source external to the computer software application modify the detected input data to include test data configured to test the computer software application in accordance with a predefined test thereby creating a modified version of the detected input data and process the modified version of the detected input data thereby performing the predefined test on the computer software application using the test data and analyzing results of the predefined test responsive to the computer software application performing the predefined test using the test data.

In other aspects of the invention systems and computer program products embodying the invention are provided.

The invention is now described within the context of one or more embodiments although the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that while not specifically shown herein are nevertheless within the true spirit and scope of the invention.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical data storage device a magnetic data storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Reference is now made to which is a simplified conceptual illustration of a system for testing a computer software application constructed and operative in accordance with an embodiment of the invention. In the system of a computer software application such as may be hosted by a computer is preferably instrumented to include an input detector and a mutator . Computer software application may for example be a web application including Hypertext Markup Language HTML encoded web pages with computer acting as a web application server. Input detector is preferably configured to detect the arrival of input data such as in the form of Hypertext Transport Protocol HTTP requests provided as input to computer software application from a source external to computer software application such as from a computer that is configured to communicate with computer software application at computer via a computer network such as the Internet. Mutator is preferably configured to modify the detected input data to include test data configured to test computer software application in accordance with a predefined test thereby creating a modified version of the detected input data. The predefined test may for example be designed to test for a known type of security vulnerability such as SQL injection where the test data includes a malicious payload designed to exploit the security vulnerability. Mutator then provides the modified version of the detected input data for processing by computer software application . Computer software application processes the modified version of the detected input data thereby performing the predefined test using the test data included in the modified version of the detected input data.

In accordance with an embodiment of the invention mutator is configured to modify a given instance of detected input data multiple times to create multiple modified versions of the detected input data where each version includes different test data. For example shows detected input data in the form of an HTTP request from which four modified versions of the detected input data are created as shown in where each version of the detected input data is modified to include different test data as represented by TEST PAYLOAD1 TEST PAYLOAD2 TEST PAYLOAD3 and TEST PAYLOAD4. Mutator may be configured to create any number of modified versions of a given instance of detected input data for a given predefined test and may do so for any number of different predefined tests. Mutator then provides each of the modified versions of the detected input data for processing by computer software application .

The system of also preferably includes an instrumentor configured to instrument computer software application to include input detector and mutator such as between identified sources and sinks where sources are application programming interfaces API that introduce untrusted input such as user input into an application and sinks are security sensitive operations such as where the application modifies a database.

The system of also preferably includes a dynamic analyzer configured to analyze results of predefined tests performed by computer software application as described hereinabove. Dynamic analyzer may for example be a black box testing tool hosted by computer where dynamic analyzer is configured to crawl computer software application to discover its application interfaces send input data such as the detected input data described hereinabove to computer software application via the discovered application interfaces and analyze results of the predefined tests performed using the modified version s of the detected input data as described hereinabove. Dynamic analyzer may additionally or alternatively be a glass box testing tool hosted by computer that monitors the operation of computer software application to detect when a predefined test is performed. Dynamic analyzer preferably reports the results of its analysis using conventional techniques.

Any of the elements shown in are preferably implemented by one or more computers such as computers and in computer hardware and or in computer software embodied in a non transitory computer readable medium in accordance with conventional techniques.

Reference is now made to which is a simplified flowchart illustration of an exemplary method of operation of the system of operative in accordance with an embodiment of the invention. In the method of a computer software application is instrumented step to detect an arrival of input data provided as input to the computer software application from a source external to the computer software application step and modify the detected input data to create one or more modified versions of the detected input data in accordance with a predefined test or for each of multiple different predefined tests where each modified version includes different test data step . The computer software application processes the modified version s of the detected input data thereby performing the predefined test s on the computer software application using the test data step . Results of the performed test s are analyzed and the results of the analysis are reported step .

Referring now to block diagram illustrates an exemplary hardware implementation of a computing system in accordance with which one or more components methodologies of the invention e.g. components methodologies described in the context of may be implemented according to an embodiment of the invention.

As shown the techniques for controlling access to at least one resource may be implemented in accordance with a processor a memory I O devices and a network interface coupled via a computer bus or alternate connection arrangement.

It is to be appreciated that the term processor as used herein is intended to include any processing device such as for example one that includes a CPU central processing unit and or other processing circuitry. It is also to be understood that the term processor may refer to more than one processing device and that various elements associated with a processing device may be shared by other processing devices.

The term memory as used herein is intended to include memory associated with a processor or CPU such as for example RAM ROM a fixed memory device e.g. hard drive a removable memory device e.g. diskette flash memory etc. Such memory may be considered a computer readable storage medium.

In addition the phrase input output devices or I O devices as used herein is intended to include for example one or more input devices e.g. keyboard mouse scanner etc. for entering data to the processing unit and or one or more output devices e.g. speaker display printer etc. for presenting results associated with the processing unit.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It will be appreciated that any of the elements described hereinabove may be implemented as a computer program product embodied in a computer readable medium such as in the form of computer program instructions stored on magnetic or optical storage media or embedded within computer hardware and may be executed by or otherwise accessible to a computer not shown .

While the methods and apparatus herein may or may not have been described with reference to specific computer hardware or software it is appreciated that the methods and apparatus described herein may be readily implemented in computer hardware or software using conventional techniques.

While the invention has been described with reference to one or more specific embodiments the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that while not specifically shown herein are nevertheless within the true spirit and scope of the invention.

