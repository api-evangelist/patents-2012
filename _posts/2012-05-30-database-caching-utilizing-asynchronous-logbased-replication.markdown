---

title: Database caching utilizing asynchronous log-based replication
abstract: A database table within a database to persist within a cache as a cached table can be identified. The database can be a relational database management system (RDBMS) or an object oriented database management system (OODBMS). The cache can be a database cache. Database transactions within can be logged within a log table and the cached table within the cache can be flagged as not cached during runtime. An asynchronous replication of the database table to the cached table can be performed. The replication can execute the database transactions within the log table upon the cached table. The cached table can be flagged as cached when the replication is completed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08548945&OS=08548945&RS=08548945
owner: International Business Machines Corporation
number: 08548945
owner_city: Armonk
owner_country: US
publication_date: 20120530
---
This application is a continuation of U.S. patent application Ser. No. 13 242 509 filed Sep. 23 2011 pending which is incorporated herein in its entirety.

Many applications today are being developed and deployed on multi tier environments that often involve browser based clients web application servers and backend databases. These applications frequently need to generate dynamic Web pages on demand retrieving necessary content from backend databases. In order to achieve high scalability and performance database caching is often utilized. In fact database caching functions as an effective approach to scale down content having to be retrieved from remote databases thus also scaling down bandwidth utilization and overall user wait times for content.

Traditionally to facilitate effective cache utilization by applications the cache is kept synchronized to the target database s utilizing synchronous replication. To perform synchronous replication within real world scenarios approaches commonly vary the locking period and the underlying architecture used to perform the data replication. For instance some approaches use granular locking. Granular locking however imposes severe usability restrictions which often impede application functionality and or data availability.

One aspect of the present invention can include a system an apparatus a computer program product and a method for improving database caching utilizing asynchronous log based replication. A database table within a database can be identified to persist within a cache as a cached table. The database can be a relational database management system RDBMS or an object oriented database management system OODBMS . The cache can be a database cache. Database transactions can be logged within a log table. Additionally the cached table within the cache can be flagged as not cached during runtime. An asynchronous replication of the database table to the cached table can be performed. The replication can execute the database transactions within the log table upon the cached table. The cached table can be flagged as cached when the replication is completed.

Another aspect of the present invention can include a method an apparatus a computer program product and a system for improving database caching utilizing asynchronous log based replication. A query router within a database can be configured to route a database request to a database or a cache. The database can be a relational database management system RDBMS or an object oriented database management system OODBMS . The cache can be a database cache. A caching handler can be able to manage the synchronization state of tables replicated within the cache. A replication manager can be configured to asynchronously replicate a database table to a cache via metadata logging.

The present disclosure is a solution for improving database caching utilizing asynchronous log based replication. In the solution database and or cache directed queries can be appropriately routed based on cache synchronicity. That is when a table within the cache is not synchronized to the database the solution can route a query to the database and when a table is synchronized the solution can route the query to the cache. Metadata can be utilized to orchestrate the routing and caching functionality of the disclosure. In one instance a transparency layer can permit seamless routing and or caching utilizing asynchronous log based replication techniques. In this embodiment checkpoints can be established to control and or manipulate routing and caching.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Cached tables state can be tracked using metadata stored within tables . Caching of tables and routing of query can be facilitated by caching engine . Engine can also provide functionality that makes up transparency layer elements. Transparency layer elements e.g. checkpointing thread can perform necessary operations to maintain cache concurrency and facilitate routing actions. For example layer can enable asynchronous replication of tables from database to cache e.g. tables . It should be appreciated that the disclosure can enable the avoidance of locking scenarios during synchronization of database and cache.

As used herein metadata can be logging information used to track the state of cached tables and or tables . Metadata can include database table entries database directives e.g. directives database logs error logs and the like. Directives can be one or more database compliant commands able to perform a database operation. Directives can include commands able to begin table caching complete table caching and the like. For example directives can be a start table caching and transaction completed directive.

Tables can be a database compliant data set storing metadata utilized in asynchronous replication. Tables can include object tables relational tables and the like. Tables can include but is not limited to a pending statements table a cache metadata table a replication list table a checkpoint table and a cache status table. Pending statements table can include a list of cached tables and or transactions which have affected tables . Cache metadata table can be a table including a list of user requests to initiate or end caching of table s . In one instance cache metadata table can be populated by cache configuration tools. Replication list table can include a list of tables undergoing a continuous copy i.e. asynchronous replication from database to cache . Checkpoint table can include data utilized in synchronizing database contents with cache . The checkpoint table can exist in both the cache and database and can undergo a continuous copy i.e. asynchronous replication .

Based on metadata within tables caching engine can intelligently route query to cache or alternatively database . Engine can convey query to cache as cache request when cached tables are synchronized. For example when a query references a table which is marked as clean within cache the request can be conveyed to cache . Cache request can be processed fulfilled and an appropriate response not shown can be conveyed. Engine can convey query to database as database request when cached tables are not synchronized. For instance when a query references a table which is marked as dirty within cache the request can be conveyed to database . Database request can be processed fulfilled and an appropriate result not shown can be conveyed.

Transparency layer can be an abstraction layer able to perform routing and or asynchronous log based replication. Layer can include but is not limited to a checkpoint thread a cache status thread a connection handler thread and the like. Layer can include one or more elements of engine cache and or database . Checkpoint thread can be used to discover user specified tables to be cached have been synchronized with the backend e.g. these can be tables undergoing asynchronous replication from database to cache . This approach can avoid costly blocking. Checkpoint thread can scan the checkpoints table in the cache and can affect pending statements table e.g. tables and the cache status table. Cache enablement thread can poll cache metadata table to determine which tables are selected for caching. Cache enablement thread can affect cache metadata table replication list table and or cache status table. Connection handler thread can permit management of transactions associated with database and or cache . Connection handler thread can affect pending statements table e.g. tables and or checkpoints table e.g. tables .

In one instance caching engine can include a database driver component. In the instance database driver can be a software program permitting dynamic routing of queries between cache and or database . For example database driver can be a Java Database Connectivity JDBC driver able to dynamically route query request.

In another instance caching engine can permit write through to be performed. In the instance when a write is performed within cache the change can be replicated to the database . For example a synchronous write can include the translation of structured query language SQL statement.

In one embodiment caching engine can be an element of a middleware software. For example engine can be a component of a proxy load balancer and the like.

Computing device can be a hardware software entity permitting the execution of application . Computing device can include but is not limited to a desktop computer a laptop computer a tablet computing device a personal digital assistant PDA a mobile phone and the like. Device can be communicatively linked to cache and or database . Application can be a software program able to generate and or process query . Application can communicate with database driver utilizing caching engine via one or more traditional and or proprietary mechanisms.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. System can be an abstract representation of the functionality of the disclosure. It should be appreciated that components can be distributed across a number of locations geographically distributed across one or more networks and the like.

New entries in the cache metadata table can result in tables which are cache requested to undergo asynchronous replication i.e. are added to the replication list table . Additionally the disclosure can write data to the checkpoints table in the database. As this table can simultaneously undergo asynchronous replication the checkpoints thread e.g. can detect when the cache has received updates to the database by examining the checkpoints replica in the cache. Consequently the system can detect when cache and database are synchronized. The connection handler thread can manage the routing of database requests e.g. JDBC ODBC etc . The handler thread can perform routing management by accessing the cache status table to discover the readiness of a cached replica of a table.

Furthermore the disclosure can detect if cache enablement has not occurred within a defined time period number of attempts. When this state is detected a number of corrective actions can be enacted e.g. . Upon initial startup the disclosure can behave as described in the following paragraphs.

When a database request is received e.g. as per method the cache status for referenced tables can be determined e.g. step . This information can be maintained in the cache status table which can be initialized as empty on start up and can be populated only when a user requests that a table is to be cached as per .

Consequently the system can determine whether the database request can be routed to the cache e.g. cache status cached as per method whether it must be routed to the database as the cache is not ready e.g. cache status initialized clean or cache status initialized dirty as per methods or whether the request refers to a non cache requested table e.g. no cache status entry as per method . By default tables can be initialized as non cache requested.

Where the request is for a non cache requested table the disclosure can determine the query type which can include a read a write a commit or rollback.

When the request for a non cache requested table is a read statement the request can be directed to the database and no further action can be necessary e.g. step .

When the request for a non cache requested table triggers a write to the database information pertaining to the write can be recorded to the pending statements table e.g. step . Information can include a transaction identifier and the table s referenced for update. The write request can be routed to the database in step .

When the request for a non cache requested table is a commit a transaction completed checkpoint can be inserted into the checkpoints table in the database. As this table can undergo asynchronous replication the information e.g. transaction identifier can be used to synchronize database changes with the cache at a transaction level. The commit can be routed to the database in step .

When the request for a non cache requested table is a rollback all entries associated with the transaction can be removed from the pending statements table e.g. step . That is the request is no longer pending. The request is routed to the database in step .

When the database request is for a table that is cache requested and cache ready e.g. a cache status of cached the request can be routed directly to the cache e.g. method . When a request is a write a write through mechanism can be used to ensure the write is performed on both frontend e.g. cache and backend e.g. database thus maintaining database synchronicity.

When the database request is for a table that is cache requested and cache unready i.e. table has a cache status value of either initialized clean or initialized dirty the request can be routed to the database using the routing logic described in . Specifically in the database request can be determined to be a read a write a commit or rollback.

When the database request is for a cache requested cache unready table and the request e.g. statement is a read the request can be directed to the database and no further action can be necessary e.g. step .

When the database request is for a cache requested cache unready table and the request triggers a write to the database e.g. step information pertaining to the write can be recorded to the pending statements table e.g. step . The information can include a transaction identifier and the table s referenced for an update. The write request can be routed to the database e.g. step and the table state in the cache status table can be updated to initialized dirty e.g. step .

When the database request is for a cache requested cache unready table and the request is a commit e.g. step a transaction completed checkpoint can be inserted into the checkpoints table in the database. As the checkpoints table undergoes asynchronous replication the information can be used to synchronize database changes with the cache at a transaction level. The commit can be routed to the database e.g. step .

When the database request is for a cache requested cache unready table and the request is a rollback e.g. step all entries associated with the transaction can be removed from the pending statements table i.e. they are no longer pending . When the removal of transaction occurs and the transaction is no longer referenced in the pending statements table the associated table entry in the cache status table can be updated to initialized clean e.g. step and the request can be routed to the database e.g. step .

Method shown in can involve the continual polling of the cache metadata table. This can allow the disclosure to detect when a user requests that a table should be cached or removed from the cache. Table identification method can be manually and or automatically performed.

In step an entry associated with the selected table can be inserted into the checkpoints table in the database replica. The entry can include a table name and a start table caching directive. The checkpoints table can be pre configured by the system to undergo asynchronous replication from database to cache and can be used to detect when the cached version of the table is up to date with the database. When the table is concurrent the disclosure can start servicing table requests in the cache.

In step the table identified for caching can be added to replication list causing the table to undergo asynchronous replication from database to cache. Finally in step the disclosure can update the cache status table to indicate that the table is cache requested i.e. initialized clean . The method can be continuously performed during runtime.

Method shown in can include the continual polling of the checkpoints table in the cache replica. As the table is undergoing asynchronous replication from database to cache entries within the table can allow the disclosure to detect requests to cache data and can also convey synchronization information.

In step the cache replica of the checkpoints table can be polled. In step it can be determined whether a start table caching directive was received or a transaction completed directive was received. When the former is detected method can continue to step the latter can cause the method to proceed to step . When a start table caching directive is received e.g. step the disclosure can check the pending statements table e.g. step to determine if the disclosure e.g. caching engine is ready to service requests in the cache. The determination can be performed by checking if the table name referenced in the start caching directive has any outstanding writes which have not been synchronized e.g. entries in the pending statements table .

If no such entries are detected step can trigger updates to the cache status entry for the table with a value of cached . The update can allow the caching engine e.g. to route future table requests to the cache. If however one or more entries are detected step can trigger updates to the cache status entry for the table with a value of initialized dirty . The caching engine e.g. can continue to direct table requests to the database. Further transaction completed directives can be required to synchronize cache and database.

Alternatively and in one embodiment when a transaction completed directive is received e.g. step the disclosure can scan the pending statements table. That is the entries are no longer pending and they have been synchronized with the cache. All such entries can be removed from the pending statements table e.g. step . Furthermore when the removal of an entry causes a table to no longer be referenced by the pending statements table the table can be deemed ready for caching. This can be accomplished via step as described above. Changes to the cache status table resulting from method e.g. can affect the request routing routing is described in .

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated that processes can represent one embodiment for performing asynchronous log based caching.

System can be a database management system permitting query to be processed by database or cache based on tables state. System can include but is not limited to caching engine metadata database cache interface and the like. System can be a component of a distributed computing environment networked computing environment and the like. It should be appreciated that system can utilize cache to minimize resource intensive database access. System can be a component of a database management system DBMS .

Caching engine can be a hardware software element capable of asynchronous log based replication of tables to cache e.g. resulting in cached tables . Engine can include but is not limited to query router caching handler replication manager settings and the like. Engine can respond to table state in real time and or near real time. In one instance engine can be a component of an application programming interface API . In one embodiment engine can be a component of a transparency layer of an IBM SOLIDDB database. Engine functionality can include but is not limited to cache coherence resolution encryption capabilities and the like.

Query router can be a hardware software entity configured to receive a database query and appropriately route the query to cache or database . For example using metadata router can direct query to cache when tables are determined to be concurrent. Router can be utilized to identify one or more tables associated with the query. Router can communicate with handler to determine table state. Table state can be evaluated and router can process the query based on one or more settings .

Caching handler can be a hardware software component able to determine table state and generate metadata utilized in performing asynchronous log based replication. In one instance handler can flag tables with one or more values indicating the current state of table . In the instance handler can flag tables as dirty clean in an error state and the like. In one embodiment handler can register available caches which can be utilized to service queries e.g. query . For example localized and or remote caches can be identified permitting rapid query response when a localized cache is in synchronicity.

Replication manager can be a hardware software element for performing asynchronous replication utilizing metadata . Manager functionality can include database access operations e.g. administrative authentication cache access functionality asynchronous replication synchronous replication and the like. In one instance manager can be utilized to replicate tables to one or more caches. In one instance manager can permit tables changes to triggered replication.

Settings can be one or more configuration options for determining the behavior of system and or system . Settings can include but is not limited to query router settings caching handler options replication manager parameters metadata options and the like. In one instance settings can be configured through administrative tooling .

Metadata can be a data set utilized by caching engine to track table states. Metadata can be stored within database system caching engine data store cache and the like. Metadata can be continually updated during system operation. Metadata can include transaction identifiers table identifiers state values and the like.

Cache can be a hardware software component configured to store cached tables . Cache can include cached tables configuration settings metadata and the like. In one instance cache can include multiple caches which can be local and or remotely linked to system . Cache can include multiple cache granularity including but not limited to database level table level and result set caching.

Cached tables can be a replicated version of data store maintained tables that can be stored within cache . Tables can be associated with a table identifier table name state value and the like. Cached tables can be associated with candidate keys constraints triggers and the like. Cached tables can be continually updated in response to changes within tables .

Tables can be an organized data set stored within data store . Tables can include data metadata and the like. Tables can conform to traditional and or proprietary data models including but not limited to relational model entity relationship model object model and the like. Tables can be associated with candidate keys constraints triggers views and the like.

Database can be a hardware software data repository able to store tables . Database can include but is not limited to data store database settings and the like. Database can include administrative interfaces management tooling and the like. Database can be communicatively linked to engine via one or more conventional and or proprietary mechanisms. Database can include but is not limited to a distributed database real time database data warehouse database cluster and the like. Database can be associated with one or more languages including but not limited to structured query language SQL object query language OQL and the like.

Data store can be a hardware software component able to store tables . Data store can be a Storage Area Network SAN Network Attached Storage NAS and the like. Data store can conform to a relational database management system RDBMS object oriented database management system OODBMS and the like. Data store can be communicatively linked to database and or system in one or more traditional and or proprietary mechanisms.

Network can be an electrical and or computer network connecting one or more system components. Network can include but is not limited to twisted pair cabling optical fiber coaxial cable and the like. Network can include any combination of wired and or wireless components. Network topologies can include but is not limited to bus star mesh and the like. Network types can include but is not limited to Local Area Network LAN Wide Area Network WAN Virtual Private Network VPN and the like.

Interface can be a user interactive component permitting interaction administrative tooling. Interface capabilities can include a graphical user interface GUI voice user interface VUI mixed mode interface and the like. Interface can be communicatively linked to system in one or more traditional and or proprietary fashions. In one instance interface can be a Web browser presenting administrative tooling . In another instance interface can be a desktop interface communicatively linked via a terminal client.

Administrative tooling can be a hardware software element for managing caching engine cache and or database . In one instance tooling can be utilized to address replication failures. In the instance tooling can present notifications when replication of a table does not succeed. In another instance tooling can be used to manually synchronize tables which can be associated with replication errors. For example a user can request a table to be cached immediately using the blocking technique described in step 

Application server can be a hardware software component configured to execute application . Application server can include but is not limited to application application settings server settings and the like. For example application server can be an IBM WEBSPHERE SERVER.

Query can be a database query generated from application . Query can include but is not limited to a structured query language SQL query XQuery query and the like. Query can be associated with compression technologies encryption processes and the like. Query can include but is not limited to a directive a transaction multiple transactions distributed transactions and the like. A transaction can be a unit of work performed within a database management system. Transaction can include but is not limited to a commit a rollback and the like.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. System can be a component of a distributed computing system networked computing system cloud based computing system and the like. In one instance system can be a component of a service oriented architecture SOA . It should be appreciated that database system can conform to Atomicity Consistency Isolation Durability ACID rules. System can utilize proprietary and or traditional security mechanisms to ensure replication is performed securely.

In step the cache status table can be polled. The cache table can be augmented with a column indicating the first last incident that synchronization was attempted or frequency that synchronization was attempted e.g. checkpoint directives received . The information within the cache table can be used to describe a corrective threshold. In step the disclosure can detect whether the corrective threshold was exceeded. For example the cache engine can attempt to enable a table for caching for a specified time interval e.g. 5 minutes .

In cases where caching does not start within the specified criteria threshold a number of different options can be carried out depending on user requirements. In step an error can be logged or an alert can be generated when a database request attempts to access table associated with a caching failure. In step the disclosure can remove the entry from the cache metadata table and cache status table effectively marking it as uncached . In one instance an associated warning can be logged. In step the disclosure can allow running transactions to complete while blocking new transactions. A synchronous replication can be performed from backend to cache for the table requested for caching. Upon completion the cache status table entry can be set to cached and the database request handler can start servicing new transactions again.

The flowchart and block diagrams in the illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

