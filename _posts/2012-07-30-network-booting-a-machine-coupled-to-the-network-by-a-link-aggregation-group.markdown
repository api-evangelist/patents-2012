---

title: Network booting a machine coupled to the network by a link aggregation group
abstract: A technique includes network booting a physical machine coupled to a network by a link aggregation group. The technique includes selectively disabling ports of the physical machine associated with the link aggregation group in connection with the network booting until a driver of an operating system to group the ports together is installed on the physical machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782185&OS=08782185&RS=08782185
owner: Hewlett-Packard Development Company, L.P.
number: 08782185
owner_city: Houston
owner_country: US
publication_date: 20120730
---
Link aggregation may be employed for purposes of increasing the communication bandwidth between network devices. With link aggregation multiple physical links network cables for example between the network devices form a single logical link or link aggregation group LAG which has a larger available bandwidth than any of the individual physical links. Moreover link aggregation provides for failover in that should one of the physical links of the LAG fail communications continue using the remaining physical links.

A LAG may be used for communications between a server and a network switch between network switches between a network switch and a router and so forth. A computer s operating system may include teaming or bonding drivers that bundle the ports associated with the LAG together for purposes of presenting the bundled ports as a single logical port to the computers applications and network stack.

Referring to a network includes a physical machine a server a client a desktop computer a portable computer a smart cellular telephone a tablet computer and so forth which boots up within the network using a network boot agent . In this manner in accordance with implementations the network boot agent undergoes a series of actions that result in an operating system OS image being retrieved from an OS image server and installed on the physical machine . Therefore the boot up of the physical machine is independent of any local data storage devices of the physical machine and does not rely on a pre existing operation system image installation on the machine .

As a simple example the network boot agent may be a Preboot Execution Environment PXE agent that operates in a PXE environment although other network boot agents such as an internet Small Computer System Interface iSCSI boot agent or a Fibre Channel over Ethernet FCoE boot agent may be used in accordance with further implementations. Assuming for purposes of example that the network boot agent is a PXE agent the agent may generally operate to network boot the physical machine as follows. First the network boot agent from one of the network interface cards NICs of the physical machine communicates over network fabric Internet based fabric local area network LAN connections routers switches including a switch discussed herein and so forth with a dynamic host configuration protocol DHCP server to acquire an Internet Protocol IP address for the physical machine .

Next in accordance with some implementations the network boot agent may communicate with a PXE redirection service such as a service provided by a proxy DHCP server not shown for example to locate a Trivial File Transfer Protocol TFTP server which is a boot server that provides the file path of an operating system bootstrap program or boot loader. The network boot agent then downloads the boot loader program which when executed on the physical machine causes the physical machine to download an operating system image from the OS image server . The physical machine then boots up from the downloaded operating system image.

Techniques and systems are described herein to address challenges that may otherwise arise during the above described network boot up due to the physical machine being coupled to the other devices of the network through links that are aggregated or grouped together to form a link aggregation group LAG . In this manner as further described herein after being installed a teaming bonding driver of an operating system couples two or more NIC ports on the physical machine to the LAG and to the network switch which is part of the network fabric .

In general the LAG is formed from multiple physical links where each physical link includes for example a NIC port of a NIC in physical machine a network cable and a physical network port of the switch . After the operating system of the physical machine is installed one or multiple teaming bonding driver s of the physical machine s operating system bundles the network ports associated with the LAG together into one logical port for use by the machine s applications and network stack. However this bundling is not available in the pre operating system environment and as such not available for the network boot agent . Moreover all of the server NIC ports may be initially enabled by default and as such the NIC ports may show by default enabled links when connected to a switch such as the switch .

The network boot agent may in general be constructed to drive and monitor a single physical NIC port for purposes of network booting the physical machine . However because multiple network ports via the LAG may be used to couple the physical machine to the network without the measures that are disclosed herein frames of data frames pertaining to IP addresses the operating system image the boot loader and so forth may potentially be lost thereby resulting in failure of the network boot up of the physical machine . Thus a primary challenge in getting the network boot agent to work on two or more server links connected to a switch LAG is that the switch may choose to communicate on a different port than the port on which the network boot agent is active.

Even if the network boot agent is fortunate to receive a response from the DHCP server over the active PXE NIC port the network boot agent may also need information received from other entities such as the boot loader from the TFTP server the operating system image from the operating system image server and so forth which may be on different servers with different IP addresses. Therefore if load balancing is statically configured for the switch s LAG the next server traffic may go to an unmonitored server port. More specifically even if all of this information were on the same server with the same IP address the network switch may use a load balancing hash algorithm that is based on a user datagram protocol UDP port number or based on a transfer control protocol TCP port number and therefore direct replies to a port of the physical machine which the network boot agent will not receive. In this manner the network switch may act on a hash of the destination media access control MAC and IP addresses for outbound traffic address to load balance traffic among the ports but may also use the TCP UDP port numbers as well.

As disclosed herein for purposes of preventing frames from being lost during the boot up procedure due to unmonitored NIC ports of the physical machine the network boot agent selectively regulates the enabling and disabling of these NIC ports .

As a more specific example in accordance with example implementations a technique that is generally depicted in may be employed for purposes of network booting a physical machine. Referring to in conjunction with in accordance with example implementations the technique includes network booting block a physical machine coupled to a network by a LAG. Pursuant to the technique in connection with the network bootup network ports associated with the LAG are selectively disabled block for purposes of regulating which ports receive frames until a teaming bonding driver of the operating system is installed to group the ports together.

Thus referring to in accordance with example implementations a controller may perform a network bootup of a machine. In this network bootup the controller selectively disables ports of a multi port network interface that is coupled to a network by a link aggregation group until a driver of an operating system is installed on the machine.

Referring back to when the network boot agent disables a given physical NIC port the network switch uses its load balancing failover LBFO capability to mark the associated physical link as being disabled and thereafter until the link port is re enabled remove the link from the LAG. Therefore data is not communicated to a disabled physical port but is instead redistributed to the remaining enabled port s . Thus for example the network boot agent controls which port of the physical machine receives the frames of data and which ports of the physical machine do not receive frames of data during the boot up as further described below.

Referring back to in accordance with example implementations the physical machine is an actual machine made up of hardware and machine executable instructions . In this regard the hardware of the physical machine may include for example central processing units CPUs to execute machine executable instructions associated with as examples the network boot agent the downloaded boot loader the operating system applications the teaming bonding drivers and so forth.

The machine executable instructions may be at least temporarily stored in storage such as the storage provided by a volatile system memory dynamic random access memory DRAM for example and a non volatile memory NVM . In this regard the NVM may store for example machine executable instructions associated with firmware such as the network boot agent for example. As a more specific example in accordance with some implementations the NVM includes a Peripheral Component Interconnect PCI option read only memory ROM which is discoverable by the basic input output operating system BIOS of the physical machine . In this regard the network boot agent is executed as part of a boot order sequence or preference of the physical machine .

In general the memories and are non transitory memories that may be formed from one or more of the following as examples semiconductor storage devices magnetic storage memory optical storage devices phase change memory devices removable media storage and so forth.

As also depicted in in accordance with example implementations the hardware of the physical machine may include network interface cards NICs . As an example a given NIC may be a multiple port device containing a plurality of physical network ports for the physical machine so that a set of ports of the NIC may be associated with i.e. are used to form the LAG . In further implementations network ports of multiple NICs may be associated with a single LAG . Thus many variations are contemplated and are within the scope of the appended claims.

As depicted in a given NIC generally includes one or multiple embedded processors . These processor s in turn may serve as a bootup controller to execute instructions to monitor the network boot agent and disable and enable the NIC ports in accordance with some implementations. However in accordance with further implementations the instructions to form the bootup controller and thus form the network boot agent may be executed by one or multiple CPUs . Thus many variations are contemplated and are within the scope of the appended claims.

It is noted that the hardware may contain various other devices that are not depicted in such as displays magnetic storage devices optical storage devices input devices a mouse and a keyboard for example memory controllers bus bridges graphics processors and so forth. Thus many variations are contemplated which are within the scope of the appended claims.

The operating system and network boot agent are examples of entities formed from machine executable instructions of the physical machine . It is noted that the physical machine may include various different and or other agents or modules formed by the machine executable instructions such as applications drivers application programming interfaces APIs and so forth.

The network boot agent in accordance with example implementations is constructed to access read from and write to for example hardware registers of the NIC or an embedded processor of the NIC for purposes of selectively enabling and disabling the ports and thus selectively enabling and disabling physical ports associated with the LAG . In accordance with some implementations the NIC ports associated with the LAG are part of the same multiport NIC . In further implementations the NIC ports associated with the LAG may be contained in multiple NICs where all NICs are made by the same hardware vendor for example . Thus many variations are contemplated which are within the scope of the appended claims.

As described above pursuant to the technique the network boot agent selectively disables unused ports associated with the LAG during the network bootup process until the operating system has loaded the teaming bonding driver s . One way to accomplish this is depicted by an example technique of .

Referring to in conjunction with pursuant to the technique the network boot agent enables block one port associated with the LAG disables the other port s of the LAG then acquires the IP address from the DHCP server pursuant to block using the enabled port. Using the enabled port the network boot agent acquires block the boot loader from the network and uses block the boot loader to load the operating system image onto the physical machine. After the boot loader executes to load the operating system image and thus the teaming bonding driver s become active the network boot agent enables block the disabled port s of the LAG.

Alternatively the network boot agent may use a technique that is depicted in . Referring to in conjunction with pursuant to the technique the network boot agent initially enables block all of the ports associated with the LAG. Next the network boot agent begins an iterative process to identify a port that receives a reply from the DHCP server. In this regard pursuant to the technique the network boot agent selects block the next port of the group of ports and attempts to receive a reply from the DHCP server. If a reply is not received decision block then the network boot agent selects the next port pursuant to block . If a reply is received over a given port however the network boot agent disables block the other port s . Using the enabled port the network boot agent acquires block the boot loader from the network and uses block the boot loader to load the operating system image. After the operating system image is loaded the network boot agent enables block the disabled port s .

Alternatively in other implementations the network boot agent uses a technique that is depicted in . Referring to in conjunction with pursuant to the technique the network boot agent selectively enables one port at a time for purposes of determining which port receives a reply from the DHCP server. In this regard pursuant to the technique the network boot agent enables block the next port associated with the LAG and attempts block to receive a reply from the DHCP server from the enabled port. If the network boot agent determines decision block that a reply is not successfully received then the network boot agent enables the next port and control returns to block . Otherwise if a reply was successfully received decision block then the currently enabled port is used to acquire block the boot loader from the network so that the boot loader may be used block to load the operating system image. After the operating system image is loaded the network boot agent enables block the other port s .

While a limited number of examples have been disclosed herein those skilled in the art having the benefit of this disclosure will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations.

