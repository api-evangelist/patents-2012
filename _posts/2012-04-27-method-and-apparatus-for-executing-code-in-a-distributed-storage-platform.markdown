---

title: Method and apparatus for executing code in a distributed storage platform
abstract: An approach is provided for creating a framework for executing code in nodes of a distributed storage platform. An in-node code framework receives at least one job for execution over a distributed computing platform. The in-node code framework determines at least one distributed storage platform containing at least a portion of the data for executing the at least one job. The in-node then processes and/or facilitates a processing of the at least one job to determine code for executing at one or more storage nodes of the at least one distributed storage platform, wherein the code supports the at least one job.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122532&OS=09122532&RS=09122532
owner: NOKIA TECHNOLOGIES OY
number: 09122532
owner_city: Espoo
owner_country: FI
publication_date: 20120427
---
This application claims the benefit of the earlier filing date under 35 U.S.C. 119 a of Indian Patent Application No. 1479 CHE 2011 filed Apr. 29 2011 entitled Method and Apparatus for Executing Code in a Distributed Storage Platform the entirety of which is incorporated herein by reference.

Service providers and device manufacturers e.g. wireless cellular etc. are continually challenged to deliver value and convenience to consumers by for example providing compelling network services. Important differentiators in the industry are application and network services as well as capabilities to support and scale these services. In particular these applications and services can include accessing and managing data utilized for example by social services media services employment services etc. These services may be implemented via one or more servers or nodes and or clusters of servers or nodes that provide for instance distributed computing and or data storage to support the services. Traditionally the functions of computing nodes and storage nodes have been segregated. As a result service providers and device manufacturers face significant technical challenges to managing and or integrating the functions e.g. computing functions storage functions etc. of these servers or nodes.

Therefore there is a need for executing code in a distributed storage platform to for instance more efficiently use the resources e.g. processing capabilities of storage nodes that might otherwise remain idle.

According to one embodiment a method comprises determining at least one job for execution over a distributed computing platform. The method also comprises determining at least one distributed storage platform containing at least a portion of the data for executing the at least one job. The method further comprises processing and or facilitating a processing of the at least one job to determine code for executing at one or more storage nodes of the at least one distributed storage platform wherein the code supports the at least one job.

According to another embodiment an apparatus comprises at least one processor and at least one memory including computer program code for one or more computer programs the at least one memory and the computer program code configured to with the at least one processor cause at least in part the apparatus to determine at least one job for execution over a distributed computing platform. The apparatus is also caused to determine at least one distributed storage platform containing at least a portion of the data for executing the at least one job. The apparatus further is further caused to process and or facilitate a processing of the at least one job to determine code for executing at one or more storage nodes of the at least one distributed storage platform wherein the code supports the at least one job.

According to another embodiment a computer readable storage medium carries one or more sequences of one or more instructions which when executed by one or more processors cause at least in part an apparatus to determine at least one job for execution over a distributed computing platform. The apparatus is also caused to determine at least one distributed storage platform containing at least a portion of the data for executing the at least one job. The apparatus further is further caused to process and or facilitate a processing of the at least one job to determine code for executing at one or more storage nodes of the at least one distributed storage platform wherein the code supports the at least one job.

According to another embodiment an apparatus comprises means for determining at least one job for execution over a distributed computing platform. The apparatus also comprises means for determining at least one distributed storage platform containing at least a portion of the data for executing the at least one job. The apparatus further comprises means for processing and or facilitating a processing of the at least one job to determine code for executing at one or more storage nodes of the at least one distributed storage platform wherein the code supports the at least one job.

In addition for various example embodiments of the invention the following is applicable a method comprising facilitating a processing of and or processing 1 data and or 2 information and or 3 at least one signal the 1 data and or 2 information and or 3 at least one signal based at least in part on including derived at least in part from any one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention.

For various example embodiments of the invention the following is also applicable a method comprising facilitating access to at least one interface configured to allow access to at least one service the at least one service configured to perform any one or any combination of network or service provider methods or processes disclosed in this application.

For various example embodiments of the invention the following is also applicable a method comprising facilitating creating and or facilitating modifying 1 at least one device user interface element and or 2 at least one device user interface functionality the 1 at least one device user interface element and or 2 at least one device user interface functionality based at least in part on data and or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention and or at least one signal resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention.

For various example embodiments of the invention the following is also applicable a method comprising creating and or modifying 1 at least one device user interface element and or 2 at least one device user interface functionality the 1 at least one device user interface element and or 2 at least one device user interface functionality based at least in part on data and or information resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention and or at least one signal resulting from one or any combination of methods or processes disclosed in this application as relevant to any embodiment of the invention.

In various example embodiments the methods or processes can be accomplished on the service provider side or on the mobile device side or in any shared way between service provider and mobile device with actions being performed on both sides.

For various example embodiments the following is applicable An apparatus comprising means for performing the method of any of originally filed claims .

Still other aspects features and advantages of the invention are readily apparent from the following detailed description simply by illustrating a number of particular embodiments and implementations including the best mode contemplated for carrying out the invention. The invention is also capable of other and different embodiments and its several details can be modified in various obvious respects all without departing from the spirit and scope of the invention. Accordingly the drawings and description are to be regarded as illustrative in nature and not as restrictive.

Examples of a method apparatus and computer program for providing a framework for executing code in a distributed storage platform are disclosed. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It is apparent however to one skilled in the art that the embodiments of the invention may be practiced without these specific details or with an equivalent arrangement. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the embodiments of the invention.

At the same time service providers have developed corresponding computing platforms capable of efficiently processing the potentially vast quantities of data stored within such distributed storage platforms. In some embodiments these computing platforms can provide for parallel or distributed computing across multiple computing nodes. By way of example the distributed computing platform may operate using a parallel processing framework e.g. an Apache Hadoop framework as described at http hadoop.apache.org What Is Hadoop 3F last accessed Apr. 27 2011 which is incorporated herein in its entirety that supports execution of distributed applications for processing large databases via potentially thousands of computing nodes. Such a framework can be based on for instance a Map Reduce paradigm e.g. as described at http hadoop.apache.org mapreduce last accessed Apr. 27 2011 which is incorporated herein in its entirety for parallel processing whereby a master node partitions a job or task among multiple subordinate computing nodes and the aggregates the results from the subordinate computing nodes to arrive at a reduced result. For example the subordinate computing nodes can then perform a map function on their respective portions of the jobs to process an input and generate a result or output.

Within a context a combined system whereby a distributed computing or processing platform interacts with a distributed storage platform to process large amounts of data it is often the case that large amounts of data are transferred from the storage platform for processing at the distributed computing platform. Because the processing is performed at the computing platform the storage platform is often requested to transfer more data than is needed to process a corresponding job at the computing platform thereby resulting in potentially unnecessary network bandwidth usage. As the volumes of data increase the amount of wasted bandwidth can also increase. For example when the job is building a social graph for a person the computing platform or other requesting client may only need the user identifier of the person and a list of identifiers of the person s friends but the storage platform may provide complete profile data of the person and the person s friends. Other example use cases are providing generic rules for data transformation. For example the computing platform or client may need only a person s age for processing but the storage platform stores only the person s birth date. In this case the storage platform may transfer the birth date expressed as month date and year which requires for data to transmit than an age represented in numerical form. Accordingly service providers face significant challenges to reducing the resource burden associated with data intensive applications implemented in distributed computing platforms and distributed storage platforms.

To address these problems a system of introduces the capability to support executing arbitrary code in a distributed storage platform or in storage nodes also collectively referred to as storage nodes of the distributed storage platform . In this way the storage nodes can process data or information requested by a distributed computing platform computing nodes also collectively referred to as computing nodes user equipment UEs also collectively referred to as UEs client applications also collectively referred to as client applications of the UEs or a combination thereof.

In various embodiments the distributed storage platform is key value store including one or clusters of the storage nodes . In certain embodiments a distributed key value store allows for the storage of values by key. The value itself can be a corpus or body of information that need not be structured. An index of keys can be generated to search for keys that may be useful to users. The key can then be retrieved and sent to a client system. Although various embodiments are described with respect to the key value store it is contemplated that the approach described herein may be used with other databases e.g. a distributed database under the control of a database management system where the storage devices are not all attached to a common processor or a non distributed database . Key based storage can additionally be useful for social services e.g. where the key is tied to a user profile user sessions shopping carts e.g. where the key is for a shopping selection for an account of the user or the like. In some embodiments the database can include one or more shards and or horizontal partitioning systems. In certain embodiments horizontal partitioning is a database where rows of a database table are separated instead of separating by columns. Each partition separation can constitute a shard. The shards can further be partitioned by one or more rows.

In one embodiment the storage nodes may include an in node code framework for executing the code at the storage nodes . Although depicts the in node code framework as a component of the storage nodes it is contemplated that in addition or alternatively the in node code framework or one or more functions of the in node code framework can be resident in the distributed storage platform the distributed computing platform the computing nodes or other component of the system . In one embodiment the in node code framework includes one or more application programming interfaces APIs to represent code in a map reduce form which can be parallelized among the storage nodes .

In one embodiment the in node code framework receives a job specifying or otherwise indicating code for execution at the distributed storage platform and or the storage nodes . By way of example the job may be received from the distributed computing platform the client application and or one or more services of the services platform . The services platform may for instance support any service e.g. social networking service music service video service mapping service navigation service etc. available over a communication network . Moreover a user may provide logic or code in the form of for instance a script along with the key to be fetched from the distributed storage platform . The in node code framework of the respective storage nodes then fetches the key requested for the job and executes the code e.g. the script on the value and returns the result.

By way of example when operated in conjunction with the a map reduce embodiment of the distributed computing platform the map phase of the map reduce job is executed at the distributed storage platform and or the storage nodes thus leveraging the otherwise potentially idle processing power of the storage nodes . This in turn saves network bandwidth and reduces the complexity of the performing the job at the client side e.g. the originator of the job such as the distributed computing platform and or the client applications .

In some embodiments the in node code framework can throttle or otherwise adjust resources e.g. processing resources devoted to executing the code by the one or more storage nodes to avoid degradation of service capabilities for the storage nodes s primary functions e.g. live data serving . In other embodiments the in node code framework provides a lightweight execution environment e.g. a JavaScript based environment so that code e.g. map reduce code can be run in the distributed storage platform and or the storage nodes in lieu of transferring data and the processing of the data to the distributed computing platform .

In one sample use case the distributed computing platform provides for analytics processing of the data stored in the distributed storage platform to support data intensive applications e.g. providing recommendations determining user behavior etc. via parallel processing e.g. via a map reduce paradigm . However such analytics are generally performed as offline batch processing by the distributed computing platform . Accordingly the lightweight and or real time processing capabilities of the in node code framework can provide seamless integration with the distributed computing platform to provide both offline and real time processing capabilities.

By way of example the communication network of system includes one or more networks such as a data network not shown a wireless network not shown a telephony network not shown or any combination thereof. It is contemplated that the data network may be any local area network LAN metropolitan area network MAN wide area network WAN a public data network e.g. the Internet short range wireless network or any other suitable packet switched network such as a commercially owned proprietary packet switched network e.g. a proprietary cable or fiber optic network and the like or any combination thereof. In addition the wireless network may be for example a cellular network and may employ various technologies including enhanced data rates for global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. worldwide interoperability for microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi wireless LAN WLAN Bluetooth Internet Protocol IP data casting satellite mobile ad hoc network MANET and the like or any combination thereof.

The UE is any type of mobile terminal fixed terminal or portable terminal including a mobile handset station unit device multimedia computer multimedia tablet Internet node communicator desktop computer laptop computer notebook computer netbook computer tablet computer personal communication system PCS device personal navigation device personal digital assistants PDAs audio video player digital camera camcorder positioning device television receiver radio broadcast receiver electronic book device game device or any combination thereof including the accessories and peripherals of these devices or any combination thereof. It is also contemplated that the UE can support any type of interface to the user such as wearable circuitry etc. .

By way of example the distributed storage platform the distributed computing platform the UE and the services platform communicate with each other and other components of the communication network using well known new or still developing protocols. In this context a protocol includes a set of rules defining how the network nodes within the communication network interact with each other based on information sent over the communication links. The protocols are effective at different layers of operation within each node from generating and receiving physical signals of various types to selecting a link for transferring those signals to the format of information indicated by those signals to identifying which software application executing on a computer system sends or receives the information. The conceptually different layers of protocols for exchanging information over a network are described in the Open Systems Interconnection OSI Reference Model.

Communications between the network nodes are typically effected by exchanging discrete packets of data. Each packet typically comprises 1 header information associated with a particular protocol and 2 payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols the packet includes 3 trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet its destination the length of the payload and other properties used by the protocol. Often the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different higher layer of the OSI Reference Model. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol. The headers included in a packet traversing multiple heterogeneous networks such as the Internet typically include a physical layer 1 header a data link layer 2 header an internetwork layer 3 header and a transport layer 4 header and various application headers layer 5 layer 6 and layer 7 as defined by the OSI Reference Model.

Further communications between the storage nodes and or the computing nodes can be performed via one or more of the aforementioned protocols and or technologies. Further fast connections e.g. gigabit Ethernet fiber channel etc. can be utilized and the storage nodes the computing nodes and or the other components of the system .

In one embodiment the distributed storage platform the distributed computing platform the UE and or the services platform may interact according to a client server model. Further the services platform s can provide services to the client applications via the client server model. According to the client server model a client process sends a message including a request to a server process and the server process responds by providing a service. The server process may also return a message with a response to the client process. Often the client process and server process execute on different computer devices called hosts and communicate via a network using one or more protocols for network communications. The term server is conventionally used to refer to the process that provides the service or the host computer on which the process operates. Similarly the term client is conventionally used to refer to the process that makes the request or the host computer on which the process operates. As used herein the terms client and server refer to the processes rather than the host computers unless otherwise clear from the context. In addition the process performed by a server can be broken up to run as multiple processes on multiple hosts sometimes called tiers for reasons that include reliability scalability and redundancy among others.

In one embodiment the clients and or their respective code or scripts can be stored in for instance the client library . By way of example the distributed computing platform the computing nodes the UEs the client application and or the services platform may be considered as clients that receive database services from the distributed storage platform . In some embodiments the client library may include an interface that can determine which storage nodes to communicate with to execute code for generating results from databases . In certain embodiments databases are stored utilizing a key and value mechanism that allows storage using the key. A portion e.g. a partition a shard etc. of each database e.g. portions A I can be linked to a key. In one embodiment the key is hashed to determine which portion the key is linked to. A key may be hashed using a ring method for example. Using the ring each key and portion may be hashed to a primary location e.g. based on a key with an identifier that is hashed into a number k as well as one or more backup or replicate locations. The backup or replicate locations may be locations associated with the next storage node associated with the hash. The client library determines which storage nodes to read and write information from and to using the key hashes for executing client or user defined code via the in node code framework . The client library and or the storage nodes may include one or more lookup tables which portions of the database belong to which storage node . In this way the client library can identify which storage nodes include data for executing code to perform requested jobs or tasks.

In certain embodiments the portions e.g. portion A may be stored using multiple storage nodes over multiple databases . In one embodiment portions may be replicated over n number e.g. replicas 3 of storage nodes and or databases for redundancy failover and to reduce latency. Moreover the portions may be written to and read from at the same time by the client library . When reading from the databases the client library may determine if there are any consistency issues e.g. portion does not match portion . Moreover in certain embodiments an example storage scheme may require that when performing a write or a read at least a certain number e.g. required writes 2 required reads 2 etc. of portions need to be successfully written or read. This allows for redundancy and quorum consistency. If a database fails or is otherwise incapacitated a portion associated with the database may be later updated with content it should include by the storage nodes having replicated portions 

In one embodiment the in node code framework can relax the quorum requirement when executing code at storage nodes that have one or more replicate nodes. For example under quorum relaxation one storage node or a replicate set of nodes can execute the specified code to generate the result without having to execute the same code at the other replicates. In this way the distributed storage platform can further reduce the resource burden that would otherwise attach with requesting all or a quorum of replicate nodes to execute the same code to generate requested results.

The key value store is an example of a particular database structure that can be utilized in the various embodiments described herein. However it is contemplated that other types of database structures for example other key value stores other databases other shard databases other partition based databases etc. can be utilized in the various embodiments. In some embodiments while one storage node executes code the load e.g. live data serving load of the executing storage node can be transferred to other replicate nodes. Under this circumstance routing information can be changed based on the code execution status of the replicate storage nodes .

In one embodiment the analytics system on the client side can be used to for instance analyze data from different services like online stores or commerce music services social networking services etc. that can produce interesting results that can be used to enhance the services. One goal of the architecture is to provide a set of features e.g. the in node code framework with which the server side can integrate smoothly with the client side by enabling the server side e.g. the distributed storage platform and or storage nodes to themselves do at least a portion of the processing of data using for instance a map reduce paradigm.

For example the architecture can be used process data to make recommendations suggest store downloads based on user history or history of download by friends of the user finding common friends among the services and the like. In some of these use cases data for performing the processing can be stored in the server side and or the client side . In either case the architecture enables the combination of data from both sides while also enabling the server side to perform some of the processing itself so that only relevant data is returned or transmitted to the client side thereby by saving network bandwidth. In some embodiments the processing is performed in the storage nodes using application specific logic or code. Therefore the architecture also enables execution of custom code e.g. scripts and or compiled code in the storage nodes .

In other words the various embodiments of the system including the architecture described herein enables the system harness idle processing power available in the storage nodes e.g. servers in the distributed storage platform . As noted previously this enables the system to minimize the network input output traffic for data transfer by transferring only the processed or relevant portions of the data from the server side to the client side . Therefore the architecture enable for instance 1 executing user defined code in the distributed storage platform e.g. a shards based key value store 2 fetching key value pairs through a parallel process e.g. a map reduce job such as a Hadoop job 3 fetching values for keys processed by user defined code via the in node code framework 4 fetching complete namespace data through a map reduce or Hadoop job and the like. By way of example a namespace refers to an application or container e.g. a logical container such that all keys identifiers etc. within the namespace are unique. In some embodiments the namespace also provides for disambiguation of keys or identifiers that might have the same or similar names within different namespaces.

As shown depicts a component section that describes a map reduce execution engine to implement at least some of the embodiments described herein and a code or script description section that illustrates the code or scripts processed by the map reduce execution engine. References to specific classes APIs scripts and or related information or objects are for illustration and are not intended to limit the various embodiments to such classes scripts APIs etc. It is contemplated that one or more other equivalent classes APIs scripts etc. can be used to perform one or more of the functions roles responsibilities etc. discussed with respect to the various embodiments of the approach described herein. In one embodiment the code or script that represents the processing logic to be executed via the in node code framework is written in JavaScript as a JavaScript Object Notation JSON text. Table 1 below provides an example of such a script. Table 1 is provided for illustration and is not intended to limit the format of the code used in the various embodiments. Accordingly it is contemplated that the code can be represented in any other script and or compiled format or language.

In one embodiment the code is a script including a series of JavaScript functions which are executed one after another. As noted the language of the script is JavaScript and the value stored in the distributed storage platform or server side is in JSON format. In one embodiment the processing logic in the script is represented in the form of a series of map reduce functions. The script code e.g. the map reduce functions is executed in by the storage nodes to return the results back to the client side .

By way of example the storage nodes may execute the scripts through one or more APIs that can take additional script parameters. In one embodiment the script parameters can be tokenized. The server side will then fetch the value of the key process the value by the script and return the result value back to the client side as for instance an array of key value pairs in JSON. An example of this process is provided in Table 2 below.

In one embodiment the architecture provides a set of connector classes for use by the client side data job e.g. a Hadoop job to fetch data from the server side also referred to as Shards more efficiently. Example use cases for the connector classes include fetching a value for a key fetching all key values of a namespace etc. More specifically in one embodiment to fetch a value for a key in a Hadoop map the mapper in the Hadoop job extends one or more abstract classes and implements its methods. For example one class e.g. a mapper class can be used to optimize calls to the server side by sending batch requests of jobs. In some embodiments the class or one or more other classes can be used relax the quorum requirement e.g. reduce the requirement to receive responses from one than one replica or replicate node thereby reducing the resource load on the system by avoiding code execution at multiple replicas.

In another use case the architecture provides for fetching all key values of a namespace. For example a namespace within the server side can have any number keys and fetching the entire namespace data from the server side can be quite challenging because 1 a namespace can have millions of keys with gigabytes or terabytes of data 2 lack of available APIs for retrieving all key values 3 reading data through the traditional Shards layer can severely affect the performance of a storage cluster because of frequent garbage collection and 4 high bandwidth usage for reading large amounts of data that can potentially increase latency. In some embodiments to facilitate fetching data e.g. key values the architecture provides one or more input format classes for data jobs e.g. Hadoop jobs which take care of reading data from the server side and passes that to the data jobs on the client side .

In one embodiment the architecture provides for two possible ways to fetch data from the server side 1 direct Java Database Connectivity JDBC connection to a database management system such as a MySQL database and 2 reading data through a NamespaceExtension API as discussed in more detail below . For example the direct connection approach has less impact on the server side performance but generally requires passing database credentials to the client side and bypassing the storage abstraction layer of the server side .

In one embodiment the architecture integrates the server side and the client side via for instance the NamespaceExtension API for allowing script execution and for efficient fetching of data from the server side e.g. Shards . In this example the shards manager facilitates access to the server side via the NamespaceExtension API .

In one embodiment as depicted in script description section when processing a script at the client side the script is appended to the original key along with the separator in response the retrieveEntry key script command . On receiving the get key script command and or the routeRequest key command the InNodeMRRoutingStrategy uses the original key to determine the replicates storage nodes on the server side that contain the key. The SequentialReadOnlyStore then contacts one of the replicate storage nodes to fetch the value of the key. In case of failures the SequentialReadOnlyStore can contact one or more of the other replicate nodes .

In one embodiment the storage nodes are of the type InNodeMRStorageEngine which internally has for instance two storage engines a MySQLStorageEngine for handling non analytics storage and an AnalyticsStorageEngine for handling analytics storage. By way of example both of the internal storage engines are instances of MySQL storage except that the AnalyticsStorageEngine has a different connection pool that the MySQLStorageEngine . The connection pools for each respective engine can have different numbers of threads.

At process the InNodeMRStorageEngine receives the get command and checks if the job or request is for analytics or not e.g. by checking for the presence of the separator and delegates the request to the appropriate inner storage engine. If a script is provided with the get command then the value of the requested key is also processed through the script or code and the output is sent back to the client side as shown in process . By way of example when processing a script a new namespace e.g. shards script is created to store the script content with for instance the key as scripted.UUID . In one embodiment if the script is stored in Shards by the Hadoop Mapper init method and can be deleted in the close method. The calls to the Shards will then contain only the unique reference of the script. In this case the storage node executing the script can 1 check if the script is present or not and fetch the script contents if not present 2 compile the script and store the reference in a local cache and or 3 process the value of a key using the compiled JavaScript. If no script is provided the value of the requested key is retrieved and returned without processing as shown in process .

In one embodiment the architecture can provide for control of the resource usage at the server side e.g. at the storage nodes . For example such control resource control measures include for instance quorum relaxation throttling and the like. More specifically with respect to quorum relaxation in one embodiment the default socket client factory uses required reads as defined in the store definition of the namespace e.g. how may replicate storage nodes to read from . Any requirement to read from multiple nodes e.g. a quorum requirement can be relaxed or overridden with InNodeMRSocketStoreClientFactory which will fetch the value of a key from only one of the available replicate storage nodes to for instance reduce requirements associated with reading from multiple nodes .

With respect to throttling the server side can control the resource burden on the storage nodes for executing code or scripts by serving such requests e.g. analytics requests with accompanying scripts through HTTPService. More specifically to prevent frontend traffic from facing a sudden burst in socket connections from requests using the in node code framework the HTTPService can be enabled and all requests for analytics can use the HTTPService only. In this way the server side can limit the resource impacts of the scripts by limiting the number of connections or threads. In addition or alternatively the server side an limit the network bandwidth allocated for serving analytics requests. In another embodiment the server side can separate the connection pool used for analytics requests to limit the impact on MySQL .

Next the framework processes and or facilitates a processing of the at least one job to determine code for executing at one or more storage nodes of the at least one distributed storage platform wherein the code supports the at least one job step . In one embodiment the code is encoded in the at least one job at least one request to initiate the at least one job or a combination thereof. For example the code e.g. a script can be specified in its entirety as a parameter included as part of the job request. In addition or alternatively the code can include at least in part one or more pointers to one or more scripts preconfigured at the at least one distributed storage platform the one or more storage nodes or a combination thereof. In one embodiment the one or more pointers represent one or more keys stored in the at least one distributed storage platform the one or more storage nodes or a combination thereof. In this way the code need only specify an identifier that the storage nodes can use to retrieve the code from a storage or cache.

In step the framework process and or facilitate a processing of the code at the one or more storage nodes to determine one or more results of the at least one job. In step the framework can optionally process and or facilitate a processing of the code at the one or more storage nodes to determine other data that might be needed for executing the code. If other data is needed the framework causes at least in part retrieving of the other data wherein the one or more results are further based at least in part on the other data step . In other words a job might cause that the storage node to execute code that processes data that is stored in the distributed storage platform in addition to data store in another component of the network e.g. the UE . For example to execute an recommendation job the job or code might specify processing both a user profile stored in the distributed storage platform e.g. as backend data as well as user activity logs stored at the UE . Accordingly the in node code framework one or more corresponding storage nodes the distributed storage platform or a combination thereof include means for retrieving the other data.

If the at least one job uses parallel computation processes such as a map reduce paradigm the framework determines that the at least one job is a map reduce job step . In this case the code can be for causing at least in part a performing of at least a map phase of the map reduce job. Accordingly the in node code framework can partition and or distribute the code to one or more other storage nodes for processing step . By way of example the distribution can be based at least in part on whether the other nodes contain keys or other data specified in the code the at least one job or a combination thereof. The in node code framework then aggregates the results from the various storage nodes and applies for instance a reduce function to generate a combined result step .

After generating the results the framework cause at least in part a transmission of the one or more results to the distributed computing platform one or more computing nodes of the distributed computing platform at least one client e.g. client application requesting the at least one job or a combination thereof step . As discussed above by transmitting only processed and or relevant data the framework enables the system to reduce network bandwidth usage as well as leverage the use of potentially idle processing capabilities available at the storage nodes .

In step the in node code framework processes and or facilitates a processing of resource availability information associated with the one or more storage nodes to determine priority information for executing the code. In one embodiment the resource availability information includes at least in part processor availability information bandwidth availability information information on one or more other jobs executing at the one or more storage nodes or a combination thereof. For example in one embodiment the execution of arbitrary code at the storage node is considered to be an ancillary process that is subordinate to the main purpose of the storage nodes e.g. live serving of data to clients .

Accordingly the framework can determine and or set one or more limits with respect to the resource availability information wherein the priority information the executing of the code or a combination thereof is based at least in part on the one or more limits step . For example if executing a the code or script will tax the available resources of the storage node the framework can throttle or reduce the resources devoted to executing such code. This throttling can be for instance based on the priority information e.g. what priority the code is assigned relative to other tasks executing at the storage node .

Another factor that can affect the distribution of the code among storage nodes is the whether the distributed storage platform employs replicas e.g. replicate storage nodes shards databases etc. . In this case the in node code framework may reduce resource requirements further by for instance determining that the one or more storage nodes include at least one or more replicate nodes step . If there are available replicas the framework can relax the quorum requirement among the replicas and select just one of the replicas for executing the code step . In this way the framework can reduce the burden associated with executing the code and reconciling the corresponding results among multiple nodes .

Based at least in part on the determined resource availability information and or the replica selection the framework can determine the priority information associated with executing the code at the respective storage nodes step . In one embodiment the priority information is determined on a node by node basis so that the priority throttling etc. of the execution of the code can be tailored for individual nodes . In addition or alternatively the priority information can be determined collectively for the distributed storage platform as a whole for clusters of nodes with the platform or other defined groups of the storage nodes .

The processes described herein for providing a framework for executing code in a distributed storage platform may be advantageously implemented via software hardware firmware or a combination of software and or firmware and or hardware. For example the processes described herein may be advantageously implemented via processor s Digital Signal Processing DSP chip an Application Specific Integrated Circuit ASIC Field Programmable Gate Arrays FPGAs etc. Such exemplary hardware for performing the described functions is detailed below.

A bus includes one or more parallel conductors of information so that information is transferred quickly among devices coupled to the bus . One or more processors for processing information are coupled with the bus .

A processor or multiple processors performs a set of operations on information as specified by computer program code related to providing a framework for executing code in a distributed storage platform. The computer program code is a set of instructions or statements providing instructions for the operation of the processor and or the computer system to perform specified functions. The code for example may be written in a computer programming language that is compiled into a native instruction set of the processor. The code may also be written directly using the native instruction set e.g. machine language . The set of operations include bringing information in from the bus and placing information on the bus . The set of operations also typically include comparing two or more units of information shifting positions of units of information and combining two or more units of information such as by addition or multiplication or logical operations like OR exclusive OR XOR and AND. Each operation of the set of operations that can be performed by the processor is represented to the processor by information called instructions such as an operation code of one or more digits. A sequence of operations to be executed by the processor such as a sequence of operation codes constitute processor instructions also called computer system instructions or simply computer instructions. Processors may be implemented as mechanical electrical magnetic optical chemical or quantum components among others alone or in combination.

Computer system also includes a memory coupled to bus . The memory such as a random access memory RAM or any other dynamic storage device stores information including processor instructions for providing a framework for executing code in a distributed storage platform. Dynamic memory allows information stored therein to be changed by the computer system . RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory is also used by the processor to store temporary values during execution of processor instructions. The computer system also includes a read only memory ROM or any other static storage device coupled to the bus for storing static information including instructions that is not changed by the computer system . Some memory is composed of volatile storage that loses the information stored thereon when power is lost. Also coupled to bus is a non volatile persistent storage device such as a magnetic disk optical disk or flash card for storing information including instructions that persists even when the computer system is turned off or otherwise loses power.

Information including instructions for providing a framework for executing code in a distributed storage platform is provided to the bus for use by the processor from an external input device such as a keyboard containing alphanumeric keys operated by a human user a microphone an Infrared IR remote control a joystick a game pad a stylus pen a tough screen or a sensor. A sensor detects conditions in its vicinity and transforms those detections into physical expression compatible with the measurable phenomenon used to represent information in computer system . Other external devices coupled to bus used primarily for interacting with humans include a display device such as a cathode ray tube CRT a liquid crystal display LCD a light emitting diode LED display an organic LED OLED display a plasma screen or a printer for presenting text or images and a pointing device such as a mouse a trackball cursor direction keys or a motion sensor for controlling a position of a small cursor image presented on the display and issuing commands associated with graphical elements presented on the display . In some embodiments for example in embodiments in which the computer system performs all functions automatically without human input one or more of external input device display device and pointing device is omitted.

In the illustrated embodiment special purpose hardware such as an application specific integrated circuit ASIC is coupled to bus . The special purpose hardware is configured to perform operations not performed by processor quickly enough for special purposes. Examples of ASICs include graphics accelerator cards for generating images for display cryptographic boards for encrypting and decrypting messages sent over a network speech recognition and interfaces to special external devices such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.

Computer system also includes one or more instances of a communications interface coupled to bus . Communication interface provides a one way or two way communication coupling to a variety of external devices that operate with their own processors such as printers scanners and external disks. In general the coupling is with a network link that is connected to a local network to which a variety of external devices with their own processors are connected. For example communication interface may be a parallel port or a serial port or a universal serial bus USB port on a personal computer. In some embodiments communications interface is an integrated services digital network ISDN card or a digital subscriber line DSL card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments a communication interface is a cable modem that converts signals on bus into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example communications interface may be a local area network LAN card to provide a data communication connection to a compatible LAN such as Ethernet. Wireless links may also be implemented. For wireless links the communications interface sends or receives or both sends and receives electrical acoustic or electromagnetic signals including infrared and optical signals that carry information streams such as digital data. For example in wireless handheld devices such as mobile telephones like cell phones the communications interface includes a radio band electromagnetic transmitter and receiver called a radio transceiver. In certain embodiments the communications interface enables connection to the communication network for providing a framework for executing code in a distributed storage platform.

The term computer readable medium as used herein refers to any medium that participates in providing information to processor including instructions for execution. Such a medium may take many forms including but not limited to computer readable storage medium e.g. non volatile media volatile media and transmission media. Non transitory media such as non volatile media include for example optical or magnetic disks such as storage device . Volatile media include for example dynamic memory . Transmission media include for example twisted pair cables coaxial cables copper wire fiber optic cables and carrier waves that travel through space without wires or cables such as acoustic waves and electromagnetic waves including radio optical and infrared waves. Signals include man made transient variations in amplitude frequency phase polarization or other physical properties transmitted through the transmission media. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM CDRW DVD any other optical medium punch cards paper tape optical mark sheets any other physical medium with patterns of holes or other optically recognizable indicia a RAM a PROM an EPROM a FLASH EPROM an EEPROM a flash memory any other memory chip or cartridge a carrier wave or any other medium from which a computer can read. The term computer readable storage medium is used herein to refer to any computer readable medium except transmission media.

Logic encoded in one or more tangible media includes one or both of processor instructions on a computer readable storage media and special purpose hardware such as ASIC .

Network link typically provides information communication using transmission media through one or more networks to other devices that use or process the information. For example network link may provide a connection through local network to a host computer or to equipment operated by an Internet Service Provider ISP . ISP equipment in turn provides data communication services through the public world wide packet switching communication network of networks now commonly referred to as the Internet .

A computer called a server host connected to the Internet hosts a process that provides a service in response to information received over the Internet. For example server host hosts a process that provides information representing video data for presentation at display . It is contemplated that the components of system can be deployed in various configurations within other computer systems e.g. host and server .

At least some embodiments of the invention are related to the use of computer system for implementing some or all of the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more processor instructions contained in memory . Such instructions also called computer instructions software and program code may be read into memory from another computer readable medium such as storage device or network link . Execution of the sequences of instructions contained in memory causes processor to perform one or more of the method steps described herein. In alternative embodiments hardware such as ASIC may be used in place of or in combination with software to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware and software unless otherwise explicitly stated herein.

The signals transmitted over network link and other networks through communications interface carry information to and from computer system . Computer system can send and receive information including program code through the networks among others through network link and communications interface . In an example using the Internet a server host transmits program code for a particular application requested by a message sent from computer through Internet ISP equipment local network and communications interface . The received code may be executed by processor as it is received or may be stored in memory or in storage device or any other non volatile storage for later execution or both. In this manner computer system may obtain application program code in the form of signals on a carrier wave.

Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor for execution. For example instructions and data may initially be carried on a magnetic disk of a remote computer such as host . The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system receives the instructions and data on a telephone line and uses an infra red transmitter to convert the instructions and data to a signal on an infra red carrier wave serving as the network link . An infrared detector serving as communications interface receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus . Bus carries the information to memory from which processor retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory may optionally be stored on storage device either before or after execution by the processor .

In one embodiment the chip set or chip includes a communication mechanism such as a bus for passing information among the components of the chip set . A processor has connectivity to the bus to execute instructions and process information stored in for example a memory . The processor may include one or more processing cores with each core configured to perform independently. A multi core processor enables multiprocessing within a single physical package. Examples of a multi core processor include two four eight or greater numbers of processing cores. Alternatively or in addition the processor may include one or more microprocessors configured in tandem via the bus to enable independent execution of instructions pipelining and multithreading. The processor may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors DSP or one or more application specific integrated circuits ASIC . A DSP typically is configured to process real world signals e.g. sound in real time independently of the processor . Similarly an ASIC can be configured to performed specialized functions not easily performed by a more general purpose processor. Other specialized components to aid in performing the inventive functions described herein may include one or more field programmable gate arrays FPGA not shown one or more controllers not shown or one or more other special purpose computer chips.

In one embodiment the chip set or chip includes merely one or more processors and some software and or firmware supporting and or relating to and or for the one or more processors.

The processor and accompanying components have connectivity to the memory via the bus . The memory includes both dynamic memory e.g. RAM magnetic disk writable optical disk etc. and static memory e.g. ROM CD ROM etc. for storing executable instructions that when executed perform the inventive steps described herein to provide a framework for executing code in a distributed storage platform. The memory also stores the data associated with or generated by the execution of the inventive steps.

Pertinent internal components of the telephone include a Main Control Unit MCU a Digital Signal Processor DSP and a receiver transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit provides a display to the user in support of various applications and mobile terminal functions that perform or support the steps of providing a framework for executing code in a distributed storage platform. The display includes display circuitry configured to display at least a portion of a user interface of the mobile terminal e.g. mobile telephone . Additionally the display and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry includes a microphone and microphone amplifier that amplifies the speech signal output from the microphone . The amplified speech signal output from the microphone is fed to a coder decoder CODEC .

A radio section amplifies power and converts frequency in order to communicate with a base station which is included in a mobile communication system via antenna . The power amplifier PA and the transmitter modulation circuitry are operationally responsive to the MCU with an output from the PA coupled to the duplexer or circulator or antenna switch as known in the art. The PA also couples to a battery interface and power control unit .

In use a user of mobile terminal speaks into the microphone and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter ADC . The control unit routes the digital signal into the DSP for processing therein such as speech encoding channel encoding encrypting and interleaving. In one embodiment the processed voice signals are encoded by units not separately shown using a cellular transmission protocol such as enhanced data rates for global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi satellite and the like or any combination thereof.

The encoded signals are then routed to an equalizer for compensation of any frequency dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream the modulator combines the signal with a RF signal generated in the RF interface . The modulator generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission an up converter combines the sine wave output from the modulator with another sine wave generated by a synthesizer to achieve the desired frequency of transmission. The signal is then sent through a PA to increase the signal to an appropriate power level. In practical systems the PA acts as a variable gain amplifier whose gain is controlled by the DSP from information received from a network base station. The signal is then filtered within the duplexer and optionally sent to an antenna coupler to match impedances to provide maximum power transfer. Finally the signal is transmitted via antenna to a local base station. An automatic gain control AGC can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone any other mobile phone or a land line connected to a Public Switched Telephone Network PSTN or other telephony networks.

Voice signals transmitted to the mobile terminal are received via antenna and immediately amplified by a low noise amplifier LNA . A down converter lowers the carrier frequency while the demodulator strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer and is processed by the DSP . A Digital to Analog Converter DAC converts the signal and the resulting output is transmitted to the user through the speaker all under control of a Main Control Unit MCU which can be implemented as a Central Processing Unit CPU not shown .

The MCU receives various signals including input signals from the keyboard . The keyboard and or the MCU in combination with other user input components e.g. the microphone comprise a user interface circuitry for managing user input. The MCU runs a user interface software to facilitate user control of at least some functions of the mobile terminal to provide a framework for executing code in a distributed storage platform. The MCU also delivers a display command and a switch command to the display and to the speech output switching controller respectively. Further the MCU exchanges information with the DSP and can access an optionally incorporated SIM card and a memory . In addition the MCU executes various control functions required of the terminal. The DSP may depending upon the implementation perform any of a variety of conventional digital processing functions on the voice signals. Additionally DSP determines the background noise level of the local environment from the signals detected by microphone and sets the gain of microphone to a level selected to compensate for the natural tendency of the user of the mobile terminal .

The CODEC includes the ADC and DAC . The memory stores various data including call incoming tone data and is capable of storing other data including music data received via e.g. the global Internet. The software module could reside in RAM memory flash memory registers or any other form of writable storage medium known in the art. The memory device may be but not limited to a single memory CD DVD ROM RAM EEPROM optical storage magnetic disk storage flash memory storage or any other non volatile storage medium capable of storing digital data.

An optionally incorporated SIM card carries for instance important information such as the cellular phone number the carrier supplying service subscription details and security information. The SIM card serves primarily to identify the mobile terminal on a radio network. The card also contains a memory for storing a personal telephone number registry text messages and user specific mobile terminal settings.

While the invention has been described in connection with a number of embodiments and implementations the invention is not so limited but covers various obvious modifications and equivalent arrangements which fall within the purview of the appended claims. Although features of the invention are expressed in certain combinations among the claims it is contemplated that these features can be arranged in any combination and order.

