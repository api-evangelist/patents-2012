---

title: Responding to natural language queries
abstract: Disclosed herein are a system, non-transitory computer-readable medium, and method for responding to natural language queries. Keywords likely to appear in a natural language query are determined and each likely keyword is associated with a module. A response to a natural language query comprises information generated by each module associated with a likely keyword appearing in the natural language query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411803&OS=09411803&RS=09411803
owner: Hewlett Packard Enterprise Development LP
number: 09411803
owner_city: Houston
owner_country: US
publication_date: 20120928
---
Natural language interfaces may be utilized to translate natural language queries into a database query using structured query language SQL . Such a translation may be carried out using a semantic model that defines how the data is arranged in the database. The semantic model may comprise associations between certain keywords and database attributes e.g. customer or employee . In turn the database attributes may be associated with a database property type e.g. table or column . These associations of the semantic model may be adjusted to reflect changes in the underlying database model.

As noted above associations stored in semantic models may be used to translate natural language queries into SQL. However not all databases are relational databases that respond to SQL queries. In some examples data may be stored in a real time memory database or some other format not obtainable via SQL. In these instances modules or application programming interfaces API may be developed to retrieve the data via a computer program. Thus a database structure may be hidden such that the data is only accessible by way of APIs. Finally some data may not be stored in a database but instead generated in real time by a module. Without knowledge of a database structure it is difficult to generate a semantic model to respond to natural language queries.

In view of the foregoing aspects of the present disclosure provide techniques for responding to natural language queries when a database structure is unknown. In one aspect keywords likely to appear in a natural language query are determined and each likely keyword is associated with a module. In another aspect a response to a natural language query comprises information generated by each module associated with a likely keyword appearing in the natural language query. The aspects features and advantages of the disclosure will be appreciated when considered with reference to the following description of examples and accompanying figures. The following description does not limit the disclosure rather the scope of the disclosure is defined by the appended claims and equivalents. The present disclosure is broken into sections. The first section labeled Environment describes an illustrative environment in which various examples may be implemented. The second section labeled Components describes various physical and logical components for implementing various examples. The third section labeled Operation describes illustrative processes in accordance with aspects of the present disclosure.

The computer apparatus may also contain a processor which may be any number of well known processors such as processors from Intel Corporation. In another example processor may be an application specific integrated circuit ASIC . Non transitory computer readable medium CRM may store instructions that may be retrieved and executed by processor . As will be discussed in more detail below the instructions may include an indexer a query translator a results generator and a language learner . In one example non transitory CRM may be used by or in connection with any instruction execution system that can fetch or obtain the logic from non transitory CRM and execute the instructions contained therein. Non transitory computer readable media may comprise any one of many physical media such as for example electronic magnetic optical electromagnetic or semiconductor media. More specific examples of suitable non transitory computer readable media include but are not limited to a portable magnetic computer diskette such as floppy diskettes or hard drives a read only memory ROM an erasable programmable read only memory a portable compact disc or other storage devices that may be coupled to computer apparatus directly or indirectly. Alternatively non transitory CRM may be a random access memory RAM device or may be divided into multiple memory segments organized as dual in line memory modules DIMMs . The non transitory computer readable medium CRM may also include any combination of one or more of the foregoing and or other devices as well.

Although functionally illustrates one processor and one non transitory CRM as being within the same block it will be understood that these components may actually comprise at least one or multiple processors and memories that may or may not be stored within the same physical housing. For example any one of the memories may be a hard drive or other storage media located in a server farm of a data center. Accordingly references to a processor computer or memory will be understood to include references to a collection of processors computers or memories that may or may not operate in parallel.

The instructions stored in non transitory CRM may comprise any set of instructions to be executed directly such as machine code or indirectly such as scripts by the processor s . In that regard the terms instructions modules and programs may be used interchangeably herein. The instructions may be stored in any computer language or format such as in object code or modules of source code. Furthermore it is understood that the instructions may be implemented in the form of hardware software or a combination of hardware and software and that the examples herein are merely illustrative.

Indexer may determine which keywords are likely to appear in a natural language query and may associate each likely keyword with a module of a plurality of modules likely to provide an accurate answer to the natural language query. In one example a module may be defined as an API whose underlying code obtains or generates data. Query translator may determine whether at least one of the likely keywords determined by indexer appears in a received natural language query. Results generator may respond to the received natural language query with information generated by each module associated with a likely keyword appearing in a received natural language query. Language learner may alter an association between a likely keyword and a module when it is determined that the altered association is more likely to trigger an accurate response to a natural language query.

The modules exposed to indexer may be preselected by an administrator or a developer of the modules. Indexer may determine a keyword likely to appear in a natural language query based on source code text of a module. In one example indexer may convert the source code text of each module and parameters thereof to likely keywords when possible. Such conversion may be accomplished utilizing the Camel Case standard. Indexer may determine variations of every likely keyword in order to achieve better compatibility with different usages of a word. This may be carried out with the porter stemming algorithm e.g. status and statuses have the same stem . In a further example indexer may also associate the modules with synonyms of determined keywords to increase the range of keywords that may likely appear in a natural language query. Indexer may receive a feed of such synonyms from for example the WordNet English database.

In yet a further example indexer may associate each likely keyword with an attribute of a module based on metadata associated with each attribute. An attribute of the module may be detected from the source code text. Examples of an attribute may be the module s signature or parameters of the module. Each module name and parameter name may be associated with a likely keyword based on an analysis of metadata regarding the data types relationships and possible values thereof. For example a module s parameter whose type is integer may be associated with a likely keyword that is actually a number. Finally other keywords may comprise data that may be sought after by a natural language query. For example if a system contains employee data and an employee is named Mary Jones the first name Mary and the last name Jones may each be keywords associated with an attribute of a module enabled to generate information about the employee Mary Jones. 

The results generator may rank the information returned by each module based on a probability that the information is a correct response to the natural language query. The probability may be partially based on an amount of information returned by each module. For example if a module does not return any results its rank may be lower. In a further example the probability may be based on a number of associations between each module and likely keywords appearing in the received natural language query. For example if a module is associated with five keywords in a received natural language query it may be ranked higher than a module associated with one keyword.

In another example results generator may rank the information returned by each module using a context free grammar. Words in a received natural language query may be analyzed and compared to sentences of the context free grammar. The sentences may be generated and stored by language learner . Some of the sentences in the context free grammar may comprise previously received natural language queries. In one example the context free grammar may be a stochastic or probabilistic context free grammar. In the probabilistic or stochastic context free grammar each sentence thereof may be associated with a probability. Such probability may reflect how frequently each sentence triggered a correct answer to a previously received natural language query. In a further example results generator may use the Cocke Younger Kasami CYK algorithm to rank the relevant sentences of the context free grammar.

In another example language learner may comprise pattern learning logic to assign a probability to each association between keywords and modules. The probability assigned to each association may also reflect how frequently each association triggered a correct answer to a previously received natural language query.

One working example of a system and method to process natural language queries is illustrated in . In particular is a flow diagram in accordance with aspects of the present disclosure. present various aspects of natural language processing in accordance with the present disclosure. The actions shown in will be discussed below with regard to the flow diagrams of .

As shown in block of a keyword likely to appear in a natural language query is associated with a module. The module may be one of a plurality of modules likely to provide an accurate answer to the natural language query. Referring now to the example of example modules and are shown. The illustrative modules shown in may be APIs for obtaining customer and employee information of a company. Module may be a module to obtain the employee identifier of an employee whose first name and last name are being entered therein as parameters. Module may obtain the address of an employee whose employee identifier is being entered therein as a parameter. Module may obtain the address of a customer whose first name and last name are being entered therein as parameters. Finally module may obtain or otherwise calculate the salary of the employee whose identifier is being entered therein as a parameter. It is understood that the foregoing modules are merely for illustrative purposes and that many other types of modules or APIs may be defined.

Referring now to associations between keywords and attributes of the modules are shown. The associations may be stored in computer registers in a relational database as tables having a plurality of different columns and records XML documents or flat files. The associations may comprise any information sufficient to identify the relevant data such as numbers descriptive text proprietary codes references to data stored in other areas of the same memory or different memories including other network locations or information that is used by a function to calculate the relevant data.

Association and of show an association between the keyword Live and the modules Get employee address and Get customer address respectively. Thus when query translator detects the keyword Live the modules Get employee address and Get customer address may be called upon to provide an answer to the natural language query. Associations and may cause the modules Get employee address and Get customer address to be called upon when the keyword Street is detected in an incoming natural language query. Association associates the keyword Mary with the first name parameter of Get employee Id and the keyword Jones with the last name parameter of Get employee Id. The words Mary and Jones are delimited by a comma. Thus if either of these keywords is detected the Get employee Id module may be called upon with the first name parameter set to Mary and the last name parameter set to Jones. Similarly association associates the keyword Mary with the first name parameter of the module Get customer address and the keyword Smith with the last name parameter thereof. Thus detection of Mary or Smith in an incoming natural language query may cause the Get customer address module to be called upon with the first name parameter set to Mary and the last name parameter set to Smith. Associations and may cause the module Get employee salary to be called upon when the keywords Make or Money are detected. Associations thru may cause the Get employee address Get employee salary or Get employee Id modules to be called upon when the keyword Employee is detected in an incoming natural language query. Finally association may cause the module Get customer address to be called upon when the keyword Customer is detected in an incoming natural language query. The foregoing example associations shown in may be used to convert a natural language query into a series of calls to the example modules in . Once again the forgoing semantic model is merely for illustrative purposes and it is understood that different words and associations may be arranged therein. Furthermore as more data is added e.g. new customer or new employee new associations may be added to the semantic model of .

Referring back to it may be determined whether at least one of the likely keywords determined by indexer appears in a received natural language query as shown in block . In block a response to the received natural language query may be generated with information from each module associated with a likely keyword in the received natural language query. Referring back to the examples in a user may type in a question Where does Mary live In this example the word Mary and live are included in associations and . The keyword Live is associated with both Get employee address and Get customer address thus both may be called upon to answer the natural language query. However the parameters may be determined from the keyword Mary. Referring now to block shows example code that may be generated to retrieve an answer to the natural language query Where does Mary live Block first shows a call to the Get employee Id module with the first name parameter set to Mary which was indicated in the natural language query. Since no last name was indicated in the query the Get employee Id module may be called with the last name parameter set to Jones since this is the only other last name for Mary in the semantic model associated with Get employee Id. However other examples may have various last names for Mary associated with Get employee Id. The Get customer address module may be called with the first and last name parameters set to Mary and Smith in accordance with association . Block in also shows a call to Get employee address in accordance with its association with the keyword Live. The identifier returned from Get employee Id is used as a parameter for Get employee address. 

In block the answers generated by the code in block are shown. The first answer is the address of the employee Mary Jones. This may be chosen as the first answer based on previous indications that this was the correct answer when the query What is Mary s address was received in the past. When a user clicks on an answer language learner may keep track of the answers that a user selects in order to determine a probability. The second answer is the address of the customer Mary Smith. 

Advantageously the above described system method and non transitory computer readable medium convert natural language queries into computer code that calls upon modules to obtain answers to the query. In this regard the answers may be obtained despite having no knowledge of the structure of the database in which the data is stored. Furthermore answers to natural language queries may be generated even if the modules calculate the data in real time rather than querying a database.

Although the disclosure herein has been described with reference to particular examples it is to be understood that these examples are merely illustrative of the principles of the disclosure. It is therefore to be understood that numerous modifications may be made to the examples and that other arrangements may be devised without departing from the spirit and scope of the disclosure as defined by the appended claims. Furthermore while particular processes are shown in a specific order in the appended drawings such processes are not limited to any particular order unless such order is expressly set forth herein. Rather processes may be performed in a different order or concurrently and steps may be added or omitted.

