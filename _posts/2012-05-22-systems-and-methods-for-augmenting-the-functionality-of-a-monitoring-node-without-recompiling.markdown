---

title: Systems and methods for augmenting the functionality of a monitoring node without recompiling
abstract: Systems, methods are provided for augmenting functions of a computing device by a controlling computing device. The method comprises receiving a command and a data matrix from the controlling computing device. The data matrix contains data that when installed enables the subordinate computing device to accomplish additional functions. The method further comprises calling a first SEAM by the computing device to receive the command and the data matrix, calling a second SEAM by the computing device to create a SDS extension in its volatile memory, and populating the one or more volatile extensions with the data from the data matrix.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832649&OS=08832649&RS=08832649
owner: Honeywell International Inc.
number: 08832649
owner_city: Morristown
owner_country: US
publication_date: 20120522
---
The present invention generally relates to architectures for condition based health maintenance systems and more particularly relates to systems and methods for instituting a maintainer interface node within a condition based health maintenance system for monitoring a complex system.

Increases in vehicle complexity and the accompanying increase in maintenance costs have led to industry wide investments into the area of condition based health maintenance CBM . These efforts have led to the development of industry or equipment specific process solutions. However conventional CBM systems are generally rigidly configured which can result in cumbersome performance or users pay significant modification costs.

Once the parameters of the complex system are measured the measurement data is typically forwarded to more sophisticated devices and systems at an extraction level of processing. At the extraction level higher level data analysis and recording may occur such as the determination or derivation of trend and other symptom indicia.

Symptom indicia are further processed and communicated to an interpretation level where an appropriately programmed computing device may diagnose prognosticate default indications or track consumable usage and consumption. Raw material and other usage data may also be determined and tracked.

Data synthesized at the interpretation level may then be compiled and organized by maintenance planning analysis and coordination software applications at an action level for reporting and other interactions with a variety of users at an interaction level .

Although processes required to implement a CBM system are becoming more widely known the level of complexity of a CBM system remains high and the cost of developing these solutions is commensurately high. Attempts to produce an inexpensive common CBM solution that is independent from the design of the complex system that is being monitored have been less than satisfying. This is so because the combination and permutations of the ways in which a complex system can fail and the symptoms by which the failures are manifested are highly dependent on the system design.

Accordingly it is desirable to develop a health maintenance system architecture that is sufficiently flexible to support a range of complex systems. In addition it is desirable to develop a health maintenance system that may be easily reconfigured by a user in real time thus dispensing with prohibitive reprogramming costs and delays. Furthermore other desirable features and characteristics of the present invention will become apparent from the subsequent detailed description of the invention and the appended claims taken in conjunction with the accompanying drawings and this background of the invention.

A system is provided for extending the functionality of a subordinate computing device without re compiling code. The system comprises a controlling computing device wherein the controlling computing device and the subordinate computing device each comprise a first plurality of standardized executable application modules SEAMs each SEAM configured to execute on a processor to provide a unique function and to generate an event associated with the unique function associated with each SEAM and a computer readable storage medium having a configuration file recorded thereon the computer readable storage medium comprising a dynamic data store DDS and a static data store SDS . The DDS comprises an event queue one or more response queues and one or more unused storage locations and the SDS comprises a persistent software object configured to map a specific event from the event queue to a pre defined response record and to assign a response queue into which the pre defined response record is to be placed. The system further comprises a workflow service module configured to direct communication between the SDS the DDS and each of the first plurality of SEAMs. The controlling computing device is configured to transmit a command and a data matrix containing data to the subordinate computing device and the subordinate computing device is configured to create a linked extension of the SDS in an unused storage location of the DDS in response to the command and to populate the extension of SDS with the data contained in the data matrix.

A method is provided for augmenting functions of a subordinate computing device by a controlling computing device where the subordinate computing device and the controlling computer device both include a workflow service a dynamic data store DDS a static data store SDS and are both populated by at least a first set of standardized executable application modules SEAMs . The method comprises receiving a command and a function augmentation data matrix from the controlling computing device wherein the function augmentation data matrix contains data that when installed in the DDS of the subordinate computing device enables the subordinate computing device to accomplish additional functions. The method also comprises calling a first SEAM by the subordinate computing device the first SEAM being configured to receive the command and the function augmentation data matrix calling a second SEAM by the subordinate computing device the second SEAM being configured to create one or more SDS extensions in its DDS and populating the one or more DDS extensions with the data from the function augmentation data matrix.

A computer readable medium storage device is provided for. The computer readable storage device contains instructions that when executed augments the functions of a subordinate computing device by a controlling computing device where the subordinate computing device and the controlling computer device both include a workflow service a dynamic data store DDS a static data store SDS and are both populated by at least a first set of standardized executable application modules SEAMs . The steps comprise receiving a command and a function augmentation data matrix from the controlling computing device wherein the function augmentation data matrix contains data that when installed in the DDS of the subordinate computing device enables the subordinate computing device to accomplish additional functions. The steps further comprise calling a first SEAM by the subordinate computing device the first SEAM being configured to receive the command and the function augmentation data matrix calling a second SEAM by the subordinate computing device the second SEAM being configured to create one or more SDS extensions in its DDS and populating the one or more DDS extensions with the data from the function augmentation data matrix.

The following detailed description is merely exemplary in nature and is not intended to limit the invention or the application and uses of the invention. As used herein the word exemplary means serving as an example instance or illustration. Thus any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments. All of the embodiments described herein are exemplary embodiments provided to enable persons skilled in the art to make or use the invention and not to limit the scope of the invention which is defined by the claims. Furthermore there is no intention to be bound by any expressed or implied theory presented in the preceding technical field background brief summary or the following detailed description.

Those of skill in the art will appreciate that the various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware software executable by a computing device or combinations of both. Some of the embodiments and implementations are described below in terms of functional and or logical block components or modules and various processing steps. However it should be appreciated that such block components or modules may be realized by any number of hardware and or firmware components configured to perform the specified functions. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps are described herein generally in terms of their functionality. However it should be understood that software cannot exist without hardware with which to execute the software. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention. For example an embodiment of a system or a component may employ various integrated circuit components e.g. memory elements digital signal processing elements logic elements look up tables or the like which may carry out a variety of functions under the control of one or more microprocessors or other control devices. In addition those skilled in the art will appreciate that embodiments described herein are merely exemplary implementations.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a controller a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. The word exemplary is used exclusively herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments.

The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module with instructions executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of computer readable storage medium known in the art. An exemplary storage medium is coupled to the processor such the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal.

In this document relational terms such as first and second and the like may be used solely to distinguish one entity or action from another entity or action without necessarily requiring or implying any actual such relationship or order between such entities or actions. Numerical ordinals such as first second third etc. simply denote different singles of a plurality and do not imply any order or sequence unless specifically defined by the claim language. The sequence of the text in any of the claims does not imply that process steps must be performed in a temporal or logical order according to such sequence unless it is specifically defined by the language of the claim. The process steps may be interchanged in any order without departing from the scope of the invention as long as such an interchange does not contradict the claim language and is not logically nonsensical.

Furthermore depending on the context words such as connect or coupled to used in describing a relationship between different elements do not imply that a direct physical connection must be made between these elements. For example two elements may be connected to each other physically electronically logically or in any other manner through one or more additional elements.

While at least one exemplary embodiment will be presented in the following detailed description it should be appreciated that a vast number of variations exist. It should also be appreciated that the exemplary embodiment or exemplary embodiments are only examples and are not intended to limit the scope applicability or configuration of the invention in any way. Rather the following detailed description will provide those skilled in the art with a convenient road map for implementing an exemplary embodiment of the invention. It being understood that various changes may be made in the function and arrangement of elements described in an exemplary embodiment without departing from the scope of the invention as set forth in the appended claims.

In light of the plethora of complex systems that may be monitored by the embodiments being described herein below and the wide range of functionality that may be desired at any point in the complex system the following description contains non limiting examples of the subject matter being disclosed herein. A specific non limiting example of a complex system that may complement the following exemplary embodiments may be the vehicle as described in co owned co pending application Ser. No. 12 493 750 which is assigned to the assignee of the instant application.

For the sake of brevity and simplicity the present example will be assumed to have only five different processing levels or application layers. An Application Layer is a set of functions or services programmed into run time software resident in one or more computing nodes sharing a particular hierarchical level and which is adapted to meet the needs of a user concerning a particular health management implementation. As non limiting examples an application layer may be an Equipment Health Manager EHM Layer an Area Health Manager AHM Layer a Vehicle Heath Manager VHM Layer a Maintainer Layer or an Enterprise Layer .

However in equivalent embodiments discussed herein the hierarchical structure may have any number of levels of application layers . Application layers may include any number of computing nodes which are computing devices. The number of nodes is determined by the complexity of the complex system and the sophistication of the monitoring desired by the user. In some embodiments multiple nodes may be resident in one computing device. The computing nodes of the equipment based layers EHM Layer AHM Layer VHM Layer Maintainer layer and Enterprise layer may be also referred to as an EHM node an AHM node a VHM node a maintainer node and an enterprise node .

In the exemplary embodiments disclosed herein an EHM node is a computing device that provides an integrated view of the status of a single component of the monitored assets comprising the lowest level of the hierarchical structure . The EHM node may have different nomenclature favored by others. For example in equivalent embodiments the EHM node also be known as a Component Area Manager CAM . A complex system may require a large number of EHM nodes each of which may include multiple times series generation sources such as sensors transducers Built In Test Equipment BITE and the like. EHM nodes are preferably located in electronic proximity to a time series data generation source in order to detect symptomatic times series patterns when they occur.

An AHM node is a computing device situated in the next higher hierarchical level of the hierarchical structure and may receive and process message command and data inputs received from a number of EHM nodes and other nodes . An AHM node may report and receive commands and data from higher level or lower level components of the hierarchical structure . An AHM node processes data and provides an integrated view of the health of a single sub system of the complex system being monitored. The AHM node may have different nomenclature favored by others. For example in equivalent embodiments the AHM node also be known as a Sub system Area Manager SAM .

A VHM node is a computing device situated in the next higher hierarchical level for the hierarchical structure and may receive and process message command and data inputs received from a number of EHM nodes and AHM nodes . A VHM node may report and receive commands and data from higher level components of the hierarchical structure as well. A VHM node processes data and provides an integrated view of the health of the entire complex system being monitored. The VHM node may have different nomenclature favored by others. For example in equivalent embodiments the VHM node also be known as a system level control manager SLCM .

A Maintainer Layer contains one or more maintainer computing nodes that analyze data received from the EHM nodes AHM nodes and VHM nodes node and supports local field maintenance activities. Non limiting examples of an Maintainer Level computing system is the Windows PC ground based station PC GBS software produced by Intelligent Automation Corporation a subsidiary of Honeywell International of Morristown N.J. or the US Army s Platform Soldier Mission Readiness System PS MRS . The Maintainer Layer system may have different nomenclature favored by others. MNT nodes also receive data commands and messages from higher level nodes .

A maintainer node may be permanently or removably inserted at a particular electronic and or physical location within the hierarchical structure . A maintainer node may also be any suitable portable computing device or a stationary computing device that may be connected physically or electronically at any particular node or other point of access with in the hierarchical system . Thus a maintenance technician is not bound to a particular location in the hierarchical system from which to monitor the complex system.

The maintainer node may communicate information to and from the maintenance technician using a user interface over a hard wired connection a wireless connection and may be internet based thus allowing the use of web pages in common TCP IP format See . In order to communicate between a technician and the hierarchical system the maintainer node comprises a user interface web application that is responsible for data processing rendering web pages to the technician and receiving technician requests. In equivalent embodiments the maintainer node may connect to the user interface web application via web browser executing on a web server not shown .

An Enterprise Layer contains one or more computing nodes that analyze data received from the EHM nodes AHM nodes VHM nodes and the Maintainer Layer . The Enterprise level supports the maintenance logistics and operation of a multitude or fleet of assets. Non limiting examples of an Enterprise Layer computing system is the ZING system and the Predictive Trend Monitoring and Diagnostics System from Honeywell International. The Enterprise layer may have different nomenclature favored by others.

In accordance with the precepts of the subject matter disclosed herein each computing node of each level of the hierarchical structure may be individually and timely configured or reconfigured by the user by way of the data driven modeling tool . The data driven modeling tool allows a user to directly alter the configuration data which in turn provides specific direction and data to and or initiates one or more standardized executable application modules SEAMs resident in each computing node of the hierarchical structure via the model driven GUI . In the following description the term configure and provide specific direction and data may be used synonymously.

The number of SEAMs is not limited and may be expanded beyond the number discussed herein. Similarly the SEAMs discussed herein may be combined into fewer modules or broken down into component modules as may be required without departing from the scope of the disclosure herein. The SEAMs are a set of run time software that are selectable from one or more re use libraries and are subsequently directed to meet the health management implementation needs of a user. Each SEAM contains executable code comprising a set of logic steps defining standardized subroutines designed to carry out a basic function that may be directed and redirected at a later time to carry out a specific functionality.

There are 24 exemplary SEAMs discussed herein that are selected from five non limiting exemplary libraries a Measure Library an Extract Library an Interpret Library an Act Library and an Interact Library . The SEAMs are basic un modifiable modular software objects that are directed to complete specific tasks via the configuration data after the SEAMs are populated within the various nodes of the hierarchical structure . The configuration data is implemented in conjunction with a SEAM via the delivery to a node of a configuration file containing the configuration data . Once configured the SEAMs within the node may then cooperatively perform a specific set of functions on data collected from the complex system. A non limiting example of a specific set of functions may be a health monitoring algorithm.

As non limiting examples the Measure Library may include an Acquire SEAM a Sense SEAM and a Decode SEAM . The Acquire SEAM functionality may provide a primary path for the input of data into a computing node through a customized adapter See which embodies external callable interfaces. The customized adapter pushes blocks of data into an Acquire SEAM which then parses the data block and queues it for subsequent processing by another executable application .

The Sense SEAM may provide a secondary path for the input of data into a computing node through a system initiated request to read data from a physical I O device i.e. Serial data ports Sensor I O interfaces etc. . The Sense SEAM then parses the data block and queues it for subsequent processing by another executable application .

The Decode SEAM may take the data queued by the Acquire SEAM or Sense SEAM and translate the data into a useable form i.e. symptoms and or variables that other executable applications can process. The Decode SEAM may also fill a circular buffer See with the data blocks queued by an Acquire SEAM to enable snapshot or data logging functions.

The Extract Library may include an Evaluate SEAM a Record SEAM an Analyze SEAM a Trend SEAM and a record SEAM . The Evaluate SEAM may perform a periodic assessment of state variables of the complex system to trigger data collection set inhibit conditions and detect complex system events based on real time or near real time data.

The Record SEAM may evaluate decoded symptoms and variables to determine when snapshot data logger functions are to be executed. If a snapshot data log function has been triggered the Record SEAM may create specific snapshot data logs and send them to a dynamic data store DDS . The DDS is a data storage location in a configuration file . Snapshots may be triggered by another executable application or by an external system not shown .

The Analyze SEAM may run one or more algorithms using the variable values and trend data that may have been assembled by the Trend SEAM and subsequently stored in a dynamic data store DDS to determine specific symptom states and or provide estimates of unmeasured parameter values of interest.

The Interpret Library may include an Allocate SEAM a Diagnose SEAM a Rank Seam a Predict SEAM A Consumption Monitoring SEAM a Usage Monitoring SEAM and a Summarize SEAM . The Allocate SEAM may perform inhibit processing cascade effect removal and time delay processing on a set of symptoms and then allocate the symptoms to the appropriate fault condition s that is are specified for the monitored device or subsystem. The Allocate SEAM may also update the state of each fault condition based on changes in the state of any particular symptom associated with a fault condition.

The Diagnose SEAM may orchestrate interaction between a system user monitored assets and diagnostic reasoning to reduce the number of ambiguous failure modes for a given active fault condition until a maintenance procedure is identified that will resolve the root cause of the fault condition.

The Rank SEAM may rank order potential failure modes after diagnostic reasoning has been completed. The failure modes related corrective actions CA and relevant test procedures associated with a particular active fault condition are ranked according to pre defined criteria stored in a Static Data Store SDS . A SDS is a static data storage location in a configuration file containing a persistent software object that relates an event to a pre defined response.

The Predict SEAM may run prognostic algorithms on trending data stored in the DDS in order to determine potential future failures that may occur and provide a predictive time estimate. The Predict SEAM may also be known as an FC State Evaluation SEAM.

The Consumption Monitoring SEAM may monitor consumption indicators and or may run prognostic algorithms on trending data stored in the DDS that are configured to track the consumption of perishable life limited supply material in the complex system and then predict when resupply will be needed. The consumption monitoring functionality may be invoked by a workflow service module which is a component functionality of an internal callable interface and will be discussed further below.

The Usage Monitoring SEAM may monitor trend data stored in the DDS to track the usage of a monitored device or subsystem in order to estimate the need for preventative maintenance and other maintenance operations. The usage monitoring functionality may be invoked by the workflow service module which is a component functionality of the internal callable interface .

The Summarize SEAM may fuse health data received from all subsystems monitored by an application layer and its subordinate layers into a hierarchical set of asset status reports. Such reports may indicate physical or functional availability for use. The asset status reports may be displayed in a series of graphics or data trees on the GUI that summarizes the hierarchical nature of the data in a manner that allows the user to drill down into the CBM layer by layer for more detail. The Summarize functionality may be invoked by the Workflow service module . This invocation may be triggered in response to an event that indicates that a diagnostic conclusion has been updated by another module of the plurality. The display of the asset status may be invoked by the user through the user interface.

The Act Library may include a Schedule SEAM a Coordinate SEAM a Report SEAM a Track SEAM a Forecast SEAM and a Log SEAM . The Schedule SEAM schedules the optimal time in which required or recommended maintenance actions MA should be performed in accordance with predefined criteria. Data used to evaluate the timing include specified priorities and the availability of required assets such as maintenance personnel parts tools specialized maintenance equipment and the device subsystem itself. Schedule functionality may be invoked by the workflow service module .

The Coordinate SEAM coordinates the execution of actions and the reporting of the results of those actions between application layers and between layers and their monitored devices subsystems. Exemplary non limiting actions include initiating a BIT or a snapshot function. Actions may be pushed into and results may be pulled out of the Coordinate SEAM using a customized adapter which embodies an external callable interface. The customized adapter may be symmetric such that the same communications protocol may be used when communicating up the hierarchy as when communicating down the hierarchy.

The Report SEAM may generate a specified data block to be sent to the next higher application in the hierarchy and or to an external user. Report data may be pulled from the Report SEAM by the customized adapter . The Report SEAM may generate data that includes a health status summary of the monitored asset.

The Track SEAM may interact with the user to display actions for which the user is assigned and to allow work to be accomplished or reassigned.

The Forecast SEAM may determine the need for materials labor facilities and other resources in order to support the optimization of logistic services. Forecast functionality may be invoked by the Workflow service module .

The Log SEAM may maintain journals of selected data items and how the data items had been determined over a selected time period. Logging may be performed for any desired data item. Non limiting examples include maintenance actions reported faults events and the like.

The Interact Library may include a Render SEAM a Respond SEAM a Graph SEAM and an Invoke SEAM . The Render SEAM may construct reports tabularized data structured data and HTML pages for display export or delivery to the user via a user interface See .

The Respond SEAM may render data for display to the user describing the overall health of the complex system and to support detailed views to allow drill down for display of summary evidence recommended actions and dialogs. The rendering of display data may be initiated by the Workflow service module but the data may be pulled from the Render SEAM via the callable interface . The Respond SEAM may also receive and process commands from the user then route the commands to the appropriate module in the appropriate node for execution and processing. The commands may be pushed into the Respond Module via the callable interface .

The Graph SEAM may provide graphical data for use by the Render SEAM in the user displays on GUI . The graphical data may include the static content of snapshot and trend files or may dynamically update the content of the data in the circular buffer.

The Invoke SEAM may retrieve documents to be displayed to a user interface via a maintainer node or interacts with an external document server system not shown to cause externally managed documents to be imported and displayed.

To reiterate each of the SEAMs discussed above are never modified. The SEAMs are loaded into any computing node of the hierarchical structure and any number of SEAMs may be loaded into a single node. Once installed each standard executable application module may be initialized directed and redirected by a user by changing the configuration data resident in the database to perform specific tasks in regard to its host computing device or platform.

Communication between SEAMs within a node is facilitated by a callable interface . A callable interface is resident in each computing node of the hierarchical structure . The callable interface may have several sub modules that may be co resident in a single computing device of a computing node . Exemplary sub modules of the callable interface may include a framework executive as a component of the callable interface a workflow service module an error reporting server a debugging server a framework data accessor a run time shared data manager and common utilities . Those of ordinary skill in the art will recognize that in equivalent embodiments a module a sub module a server or a service may comprise software hardware firmware or a combination thereof.

The framework executive of a computing node provides functions that integrate the nodes within the hierarchical structure . The framework executive in conjunction with the configuration files coordinate initialization of each node including the SEAMs and the other service modules allowing the execution of functions that are not triggered by a customized adapter discussed further below . In some embodiments the computing nodes in all application layers may have a framework executive . In other embodiments nodes in most application layers except for example an EHM Layer will have a framework executive . In such embodiments the computing nodes in the EHM layer may rely on its host platform i.e. computing device operating software to perform the functions of the framework executive.

Error reporting services provide functions for reporting run time errors in a node within the hierarchical structure . The error reporting server converts application errors into symptoms that are then processed as any other failure symptom reports application errors to a debugging server and reports application errors to a persistent data manager not shown .

Debugging services collects and reports debugging status of an executable application module during testing integration certification or advanced maintenance services. This server may allow the user to set values for variables in the DDS and to assert workflow events.

The framework data accessor provides read access to the SDS and read write access to the DDS each stored in a memory by the SEAMs in a computing node . Write access to the SDS is accomplished via the data modeling tool which includes GUI .

The run time shared data manager manages all node in memory run time perishable data structures that are shared between SEAMs that are not stored in the DDS but does not include cached static data. As non limiting examples of perishable data structures may include I O queues and circular buffers.

Common utilities may include common message encoding decoding time stamping and expression evaluation functions for use by the SEAMs installed in a computing node.

The work flow service module is a standard set of logic instructions that enable a data driven flow of tasks within a computing node to be executed by the various SEAMs within the node. The workflow service module acts as a communication control point within the computing node where all communications related to program execution to or from one executable application module are directed through the node s workflow service module . Stated differently the workflow service module of a node orchestrates the work flow sequence among the various SEAMs that happen to reside in the node. In some embodiments the workflow service module may be a state machine.

For the sake of simplicity the SEAMs may be discussed below in terms of their respective libraries. The number of combinations and permutations of executable applications is large and renders a discussion using specific SEAMs unnecessarily cumbersome.

At an EHM layer there may be a number of EHM nodes each being operated by a particular host computing device that is coupled to one or more sensors and or actuators not shown of a particular component of the complex system. As a non limiting example the component of the complex system may be a roller bearing that is monitored by a temperature sensor a vibration sensor a built in test sensor and a tachometer each sensor being communicatively coupled to the computing device i.e. a node . As a non limiting example the host computing device of an EHM node of the complex system may be a computer driven component area manager CAM i.e. a node . For a non limiting example of a CAM that may be suitable for use as EHM nodes see co owned co pending U.S. patent application Ser. No. 12 493 750.

Each host EHM computing device in this example is operated by a host software application . The host executive software may be a proprietary program a custom designed program or an off the shelf program. In addition to operating the host device the host software application also may support any and all of the SEAMs via the framework services by acting as a communication interface means between EHM nodes and between EHM nodes and other nodes located in the higher levels.

The exemplary embodiment of illustrates that the host executive software of an EHM node may host i.e. cooperate one or more SEAMs from the Measure Library one or more SEAMs from the Extract Library and one or more SEAMs from the Act Library . The SEAMs and are identical to their counterpart application modules that may reside in any another node in any other level in the hierarchical structure . Only when directed by the configuration file will a SEAM s differ in performance from its counterpart module that has been configured for and is a resident in another node in the hierarchical structure . Once configured directed a standardized executable application becomes a special purpose executable application module.

At an AHM layer there may be a number of AHM nodes . Each AHM node is associated with a particular host computing device that may be coupled to one or more sensors and or actuators of a particular component s or a subsystem of the complex system and are in operable communication with other AHM nodes with various EHM nodes and with higher level nodes e.g. see and in . As a non limiting example the host computing device of an AHM of the complex system may be a computer driven sub system area manager SAM i.e. a node operating under its own operating system not shown . For non limiting examples of a SAM that may be suitable for use as an AHM node see co owned co pending patent application Ser. No. 12 493 750.

The exemplary AHM node of illustrates that the AHM node has an additional interpret functionality that in this example has not been configured into the EHM node . This is not to say that the EHM node cannot accept or execute a function from the Interpret library but that the system user has chosen not to populate the EHM node with that general functionality. On the other hand the AHM node software hosts one or more SEAMs from the Measure Library one or more SEAMs from the Extract Library and one or more SEAMs from the Act Library . In their unconfigured or undirected state the SEAMs and are identical to their counterpart application modules that may reside in any another node in any other level in the hierarchical structure .

Unlike the exemplary EHM node the exemplary AHM node may include a different communication interface means such as the customized adapter . A customized adapter is a set of services run time software hardware and software tools that are not associated with any of the SEAMs . The customized adapters are configured to bridge any communication or implementation gap between the hierarchical CBM system software and the computing device operating software such as the host application software See . Each computing node may be operated by its own operating system which is its host application software. For the sake of clarity shows only the host executive software for the EHM node . However host application software exists in all computing nodes .

In particular the customized adapters provide symmetric communication interfaces e.g. communication protocols between computing nodes and between computing nodes of different levels. The customized adapter allow for the use of a common communication protocol throughout the hierarchical structure from the lowest EHM layer to the highest enterprise layer as well as with the memory .

At a VHM layer there may be a number of VHM nodes each VHM node is associated with a particular host computing device that may be in operative communication with one or more sensors and or actuators of a particular component s of the complex system via an EHM node or to subsystems of the complex system and that are in operable communication via their respective AHM nodes . As a non limiting example the VHM node may be a computer driven system level control manager SLCM i.e. also a node . For non limiting examples of a SLCM that may be suitable for use as a VHM node see co owned co pending patent application Ser. No. 12 493 750.

In the exemplary hierarchical structure there may be only one VHM node which may be associated with any number of AHM node and EHM node nodes monitoring a sub systems of the complex system. In other embodiments there may more than one VHM node resident within the complex system. As a non limiting example the complex system may be a fleet of trucks with one VHM node in each truck that communicates with several EHMs and with several AHM nodes in each truck. Each group of EHM nodes and AHM nodes in a truck may also be disposed in a hierarchical structure

Like the exemplary AHM node an exemplary VHM node includes a customized adapter . The customized adapter is also configured to bridge any communication or implementation gap between the hierarchical system software and the computing device operating software operating within VHM node .

At the Maintainer MNT layer there may be a number of MNT nodes each MNT node is associated with a particular host computing device that may be in operative communication with one or more sensors and or actuators of a particular component s of the complex system via an EHM node in operative communication with one or more subsystems of the complex system and that are in operable communication via their respective AHM node and to the VHM nodes . As a non limiting example the MNT node may be a laptop computer in wired or wireless communication with the communication system of the hierarchical structure . Conversely the MNT node may be a stand alone computing device in a fixed location within the hierarchical structure .

Like the exemplary AHM node and VHM node the MNT node includes a customized adapter . The customized adapter is configured to bridge any communication implementation gap between the hierarchical system software and the computing device operating software operating within the various nodes of the hierarchical structure .

At the Enterprise ENT layer there may be a number of ENT nodes each ENT node is associated with a particular host computing device that may be in operative communication with one or more sensors and or actuators of a particular component s of the complex system via an EHM node to subsystems of the complex system and that are in operable communication via their respective AHM node and the VHM nodes as well the MNT nodes . As a non limiting example the ENT node may be a general purpose computer that is in wired or wireless communication with the communication system of the hierarchical structure .

Like the exemplary AHM node VHM node and the MNT node the ENT node includes a customized adapter . The customized adapter is also configured to bridge any communication or implementation gap between the hierarchical system software and the host computing device software operating within the ENT node.

In various embodiments none of the computing nodes are able to communicate directly with one another. Hence all computing nodes communicate via the customized adapters . In other embodiments most computing nodes may communicate via the customized adapters . For example an exception may be an EHM node which may communicate via its host executive software .

A customized adapter is a component of the host executive software and is controlled by that host software. The customized adapter provides an interface between the host executive software and the SEAMs . The workflow service module will invoke one or more of the SEAMs and services to make data available to the customized adapter which places data from a node onto a data bus of the communication system and pulls data from the bus for use by one of the SEAMs . For example the Acquire SEAM may receive data from the customized adapter or the Report SEAM may produce data to be placed on the bus by the customized adapter.

The communication system may be any suitable wired or wireless communications means known in the art or that may be developed in the future. Exemplary non limiting communications means includes a CANbus an Ethernet bus a firewire bus spacewire bus an intranet the Internet a cellular telephone network a packet switched telephone network and the like.

The use of a universal input output front end interface not shown may be included in each computing node as a customized adapter or in addition to a customized adapter . The use of a universal input output I O front end interface makes each node behind the interface agnostic to the communications system by which it is communicating. Examples of universal I O interfaces may be found in co owned application Ser. Nos. 12 750 341 and 12 768 448 and are examples of communication interface means.

The various computing nodes of the hierarchical structure may be populated using a number of methods known in the art the discussion of which is outside the scope of this disclosure. However exemplary methods include transferring and installing the pre identified pre selected SEAMs to one or more data loaders of the complex system via a disk or other memory device such as a flash drive. Other methods include downloading and installing the SEAMs directly from a remote computer over a wired or wireless network using the complex system model the table generator and the GUI . In regard to MNT nodes MNT nodes may be alternatively populated offline to the extent that they are hosted in portable computing devices.

The data modeling tool table generator and the GUI may be driven by or be a subsystem of any suitable HMS computer system known in the art. A non limiting example of such an HMS system is the Knowledge Maintenance System used by Honeywell International of Morristown N.J. and is a non limiting example of a model based configuration means. The data modeling tool allows a subject matter expert to model their hierarchical structure as to inputs outputs interfaces errors etc. The table generator then condenses the system model information into a compact dataset that at runtime configures or directs the functionality of the various SEAMs of hierarchical structure .

The GUI renders a number of control screens to the system user . The control screens are generated by the HMS system or by a maintainer computing device and provide an interface for the system user to configure each SEAM to perform specific monitoring interpretation and reporting functions associated with the complex system.

Whether permanently embedded in hierarchical system or removably attached a MNT node provides user interface capability that allows a user to retrieve relevant information about the hierarchical system and by extension the complex system that is being monitored. For example the Respond SEAM is configured to handle requests and responses invoked via a user interface . The user interface may be a web page rendered by a web browser . The requests and responses are processed by a user interface web application executing on a web server . Normal web functions such data processing and image rendering are not included in the SEAM libraries due to their relative complexity and to prevent over burdening SEAM functionality where such functionality may be more efficiently housed elsewhere.

In cases with removable i.e. non embedded MNT nodes a relational database mat be used to host the configuration file which includes the SDS and DDS . When embedded the SDS and DDS may be hosted in a binary configured database due to relative through put and memory space limitations.

In operation the user connects to the user interface web application via the via a web browser and requests certain data from the hierarchical system. The user web application in turn requests all data that is required to handle the user request from the configured SEAMs in the MNT Node using method See 

In the method begins at process See where the host application is undergoing routine application. A process a message command thread is begun. A process an API function call is made to the appropriate SEAMS resident in the tenant node along with whatever data i.e. messages events need to be sent. At process the appropriate SEAMS resident in the tenant node work on the data See e.g. Application Ser. Nos. 13 016 601 and 13 077 276 herein incorporated by reference in their entirety . At process the Host application retrieves the expected result from the tenant node by making another API function call. At process the debugging utility See services the function call execution and the Host application returns to normal operation .

The Respond SEAM is particularly designed to facilitate such functionality. The user web application receives the requested data e.g. XML format from the hierarchical system via the SEAMs of the MNT Node will add graphical information and return web pages populated with the requested data to the user via the browser .

In the interest of brevity and clarity of the following discussion the number of SEAMs in the following example has been limited. The operation of a lower level computing node such as an EHM node an AHM node and an VHM node utilizes the same basic SEAMS as an MNT node to accomplish basic data processing tasks such as but not limited to an Acquire SEAM a Decode SEAM Evaluate SEAM a Record SEAM and an Analyze SEAM as these SEAMs may be viewed as providing some basic functionality common to each SEAM resident in each computing node of the hierarchy but will be extended to other SEAMs in regards to 

In addition to the SEAMs each computing node also includes a configuration file and a workflow service module . The configuration file comprises the DDS and the SDS . Among other data structures the DDS may comprise an Event Queue EVQ a High Priority Queue HPQ a Time Delayed Queue TDQ a Periodic Queue PQ and an Asynchronous Queue AQ . However it will be appreciated by those of ordinary skill in the art that the number of queues their categorization and their priority may be defined and redefined to meet the requirements of a particular application. For Example the EVQ may be divided into three or more sub queues such as an Acquire Event Queue a Coordinate Event Queue and a User Interface Event Queue. Providing separate sub event queues resolves any concurrent write issues that may arise.

Referring to the DDS may also include at least one message buffer for each SEAM that has been populated into the MNT node . However in some embodiments only SEAMs within the Measure Library may have a message buffer. The DDS may also include a number of record snapshot buffers and circular buffers that store particular dynamic data values obtained from the complex system to be used by the various SEAMs for various computations as provided for by the configuration file . The data stored in each of the message buffers snapshot buffers and circular buffers is accessed using a data accessor which may be any suitable data accessor software object known in the art. The particular data structure and the location in the DDS for the message buffers circular buffers and snapshot buffers are predetermined and are established in a memory device at run time.

The SDS is a persistent software object that may be manifested or defined as one or more state machines that map a particular event being read by the workflow service module from the Event Queue EVQ to a particular response record i.e. an event response relationship . The state machine then assigns a response queue into which the response record is to be placed by the workflow service module for eventual reading and execution by the workflow service module . The structure and the location of the persistent data in the SDS is predetermined and is established in a memory device at run time.

The exemplary events may be received into the EVQ in response to a message from an outside source that is handled by the customized adapter of the computing node as directed by the host executive software . Events may also be received from any of the populated SEAMs resident in the computing node as they complete a task and produce an event .

In the more basic SEAMs such as Sense Acquire Decode and Evaluate the event response relationships stored within the SDS do not tend to branch or otherwise contain significant conditional logic. As such the flow of events and response records is relatively straight forward. However more sophisticated SEAMs such as Coordinate Forecast and Respond may utilize sophisticated algorithms that lead to complicated message response flows associated with an MNT node and an ENT node.

As an operational example of a lower level node the host executive software may push an input message into an EHM node that is received from an outside source. The host executive software calls a customized adapter which in turn calls the appropriate SEAM resident in the EHM node based on data included in the message. For Example the called SEAM may be the Acquire SEAM . When called the Acquire SEAM places the input message into a message buffer e.g. the Acquire input message buffer generates an event and places the event into the EVQ . The event may contain data about the complex system from another node or from a local sensor. In the interest of simplicity and clarity of explanation this first event will be assumed to be an acquire data message and the event generated from the input message will be referred to herein as AQe. In other embodiments the input message AQmay be generated by another SEAM and the event AQpushed into the EVQ by the SEAM.

Once the input message AQis placed in a message queue and its corresponding event is placed into the EVQ then the Acquire SEAM exits and returns control to the workflow service module via return message . In this simple example only a single processor processing a single command thread is assumed. Thus while the processor is executing a particular SEAM the workflow service module and no other SEAMs are operating. Similarly while the workflow service module is being operated by the processor no SEAMS are in operation. This is because all steps in the operation are performed sequentially. However in other embodiments multiple processors may be used thereby permitting multiple threads i.e. multiple workflow service modules to be operated in parallel using the same populated set of SEAMs and the same configuration file .

Upon receiving the return message See the workflow service module resumes operation and reads event AQfirst in this example because event AQis the first event in the EVQ . This is so because the EVQ is the highest priority queue and because the workflow service module may read events sequentially in a first in first out FIFO manner. Therefore those of ordinary skill in the art will appreciate that any subsequent events stored in the EVQ would be read in turn by the workflow server on FIFO basis. However reading events in a FIFO manner is merely exemplary. In equivalent embodiments the workflow service module may be configured to read events in some other ordinal or prioritized manner.

Once event AQis read the workflow service module consults the persistent data structures in the SDS to determine the required response record to the event AQ. The response record provided by the SDS may for example be a decode response record DECthat directs the Decode SEAM to process the data received from the input message AQ which is now stored in a storage location in the DDS . The SDS also directs the workflow service module to place the response record DECinto one of the response queues such as HPQ and assigns the location in the response queue in which to place the response based on an assigned priority. The SDS may determine the appropriate queue and its priority location in the queue based on the input message type the data in the input message and on other data such as a priority data field. The workflow service module places the response record DECinto the HPQ at the proper prioritized location and returns to read the next event in the EVQ .

Because the EVQ is the highest priority event response queue the workflow service module continues reading events and posts responses records until the EVQ is empty. When the EVQ is empty the workflow service module begins working on response records beginning with the highest priority response queue which in this example is the HPQ .

The first prioritized response record in HPQ in this example is the DECresponse i.e. a Decode response . When read the workflow service module calls via call a response handler interface of the Decode SEAM for the Decode SEAM to operate on the data referenced in the DECresponse record .

After being called by the workflow service module the Decode SEAM consults the SDS with the response record DECto determine what operation it should perform on the data associated with DECand performs it. As disclosed above a SDS maps the event DECto a predefined response record based on the message type and the data referenced within DEC. Data associated with event DECmay reside in any of the record snapshot buffers circular buffers or the data may have to be queried for from a source located outside the exemplary node.

The Decode SEAM operates on the data and generates an event and places the event into the EVQ and a message into the message queue . For example the response record generated by the Decode SEAM may be EVALindicating that the next process is to be performed by the Evaluate SEAM . The Decode SEAM then exits and sends a return message back to the workflow service module to resume its operation. The process begins anew with the workflow service module reading the EVQ because there are now new events including EVAL that have been added to the queue.

In the normal course the work flow service module eventually reads event EVALand consults the SDS to determine the proper response record and which response queue to place it and in what priority within the response queue. In this example the response EVALis also place in the HPQ and is in first priority because the response record DECwould have already been operated on and dropped out of the queue. The workflow service then reads the next event from the EVQ and the process continues.

Variable specification is static data located in the SDS that are used by the workflow service to execute various tasks required by SEAMs . Variable specification in the SDS does not change and comprises a global identification symbol a start bit a storage type a usage type an engineering unit scale factor an engineering unit offset factor an initial value and index to the DDS a bit size a persistence indicator a source assembly and a sampling frequency. A variable offset factor contains a start bit and a variable decode mask pointer and one or more additional pointers that point to specific variables required to execute a task.

Word specifications in the SDS comprise static 32 bit memory locations that contain a list of ID s for variables contained within a word. Words also comprise a unique word ID a source message and decode masks in their various forms as may be practiced in the art.

Decode Specifications Decode Specs are static data structures that contain a list of ID s for various words . The words are defined for each data element field in the message. For each data element the decode specification contains information about the location offset within the message its size its data type and similar information for use by the runtime code. Decode specifications also comprise Message type indicators to identify instances of a message s . Input output message buffers circular buffers snapshot specifications trend specifications and report specifications all have individual data structures and a corresponding decode specification.

Snapshot specifications are static storage locations that contain data records that define a times series or a snapshot of data that is recorded i.e. captured in regard to some component in a complex system. Snapshot specifications also contain a snapshot type ID a trigger algorithm data retention rules a trigger event a collection interval snapshot inhibits append interval times persistence indicators and pointer which points to a decode specification data structure for the snapshot specification. A snapshot type ID uniquely identifies a snapshot specification. A snapshot Id is a unique identifier for each instance of a snapshot type that is recorded. The snapshot ID identifies a particular batch of data captured according to the specification A B C . . . n and has a unique batch identifier 1 2 3 . . . n .

By utilizing a MNT node computing device a system user may access an EHM node AHM node or VHM node and add to its functionality by creating a SDS extension within non static DDS . Each component of the SDS extension is logically linked to its static counterpart in the SDS such that the SDS extension appears to the workflow service to be the static SDS . Thus the SDS extension comprises a variables extension a Words extension a decode specification extension a snapshot specification extension and its variable storage extension .

Variable storage area See also is the normal storage area of the DDS that is referenced by the SDS for variables. However the variable storage extension is an extension to that variable storage area and is referenced via the variable extension for variables introduced from the matrix data received from the MNT node . The data matrix also contains information as to where the data from the data matrix will be found in the DDS . That would include a similar set of data and variable instances .

As may be discerned from inspection of a node configured as an MNT node includes SEAMs from the Interpret library Act Library and the Interact library . Specifically the exemplary MNT node includes an exemplary compliment of additional SEAMs including an Allocate Seam a Rank Seam a Predict SEAM a Summarize SEAM a Usage Monitoring SEAM a Consumption Monitoring SEAM a Coordinate Seam and a Respond SEAM . This additional compliment of SEAMs allows the MNT node to communicate with a user via the user interface and to modify the functionality of lower level nodes such as an EHM and AHM and a VHM.

Some of the events generated by the Interpret Act and Interact libraries e.g. UI RES AL RK SUM are associated with user interface and user reporting functions that are much less time sensitive given the perception time of a human being and because they are events that concern a final product. Hence events generated by SEAMs from the Interpret Act and Interact libraries are typically assigned the lowest priority for execution by the workflow server. As such the response records generated from these events are assigned to the Asynchronous queue and are addressed by the workflow service after all of the response records slotted into the higher priority queues have been completed. If response records in the AQ are being executed by the workflow service and a higher priority response record is received the workflow service ceases work on the AQ until the higher priority response records are addressed and resolved. As such the response records in the AQ are typically addressed last and in a serial like fashion.

As mentioned above a MNT node has the capability of modifying the operation of a lower level node i.e. EHM AHM or VHM in essentially real time. This allows a system user to collect and or process data in an ad hoc manner to investigate emergent health maintenance issues. For example a system user may instruct an AHM node to gather data about a component being monitored by a particular EHM node that may not be under its normal supervision and to process the data with other stipulated data in order to investigate a particular health anomaly. This is done by directing the lower level node to create an SDS extension See of the SDS within the DDS . This technique does not require taking down the system to reconfigure and reload the DDS and the SDS . It also allows the change to remain a temporary modification.

SDS extension may be persistent or may be volatile. Typically the SDS extensions are volatile and erase when powered off as is typical with data stored in volatile memory such as RAM. The SDS extension may be made persistent if a flag is set by the system user to indicate that the data should be stored in persistent memory such as a flash memory device prior to power down and reloaded from the persistent memory into the DDS at power up.

As an operational example See the host executive software pushes an input message US1 into the MNT node received from the user web browser that includes a function augmentation data matrix extracted from the user s web page as is known in the art. The message also includes a command from the user interface that requests specific data from a lower level node e.g. an EHM that the lower level node is not configured to provide. The user generated matrix includes a variety of data that identifies nodes complex system components sensors and other data related to the data requested. The content of the matrix is situation specific. However the matrix itself and its construction would be well known to those of ordinary skill in the art as a normal web function.

Once the MNT node receives the matrix and the message from the web server the host executive software at the MNT node calls a customized adapter which in turn calls the appropriate SEAM resident in the MNT node based on data included in the message. In other embodiments the input message may be generated by another SEAM and the event RESpushed into the EVQ by that SEAM.

The MNT customized adapter calls the Respond SEAM which is based on the message type. The Respond SEAM places the USmessage into a message queue and queries the SDS for instructions for the disposition of the data matrix and the request for a snapshot. The Respond SEAM in this example receives its instructions from the SDS and when completed generates a Respond event RESe which is placed in the event queue for further processing. Once the input message USis placed in a message queue and its corresponding event RESeis placed into the EVQ then the Respond SEAM exits and turns control to the workflow service module via return message See . In this simple example only a single processor processing a single command thread is assumed although multiple threads may operate in parallel on the same queues.

The workflow service of the MNT node then reads the next highest priority event which in this simple example is the RESeevent. The workflow service then refers to the SDS for instructions for the disposition of the RESeevent which in this case produces a COORrresponse that would direct the MNT node to route the snapshot command and the data matrix to a particular lower level node such as an EHM node that was designated in the data matrix. The Workflow service of the MNT node then calls the specialized adapter which sends the snapshot command and the data matrix to the EHM via the communication system .

At the EHM node the specialized adapter of the EHM receives the message from the MNT node and pushes the message into the event queue of the EHM node . Thus the receipt of message is handled in the same manner as the message in the Data acquisition example of .

Based on the type of message received the specialized adapter calls the Coordinate SEAM . The Coordinate SEAM consults the EHM SDS to determine the appropriate response record . The proper response in this example indicated by the SDS is to direct EHM node to receive the snapshot command and the data matrix included in the message. When the workflow service has finished with the message the Coordinate SEAM generates an event COOReand places event COOReinto the EVQ .

The workflow service of the EHM then processes the next event record in the EVQ which in this example happens to be COORe. The workflow service then consults the SDS to determine the proper response record which in this example is COORrwhich is placed in the HP queue .

Because at this point there are no unprocessed events in the EVQ the Workflow service moves to the HP queue and takes up the first response record which in this case is COORr. The workflow service calls the Coordinate SEAM which directs the EHM node to process an ad hoc data snapshot of a component and to set up the SDS extensions into the DDS See . The SDS extensions hold the function augmentation data matrix data for the SEAMs containing the variables directing how to process the snapshot data requested based on the data matrix received in the user message. Once the COORrresponse record has been completed an event COOReis generated in the EVQ and the SDS extension is populated with the data from the coordinate message implementing user message US.

Because there is now an event in the EVQ the workflow service takes the next event in queue i.e. COORe and consults the SDS for the proper response which is a RECrand a COORrresponse records. The RECrand a COORrresponse records are placed into the HP Queue .

The EVQ being empty the workflow service moves to the first response record in the HP queue which is the RECrresponse record. The Record Seam is called by the workflow service which queries the SDS Extension for the function augmentation matrix data to begin recording the data snapshot event based on that data. Upon completing the initiation of the snapshot event the Record SEAM places an event RECeinto the EVQ . Sequentially the workflow service also picks up the COORrresponse record and calls the Coordinate SEAM to send a confirmation message to the MNT node that the data snapshot has been started based on those instructions.

At the MNT Node the specialized adapter receives the confirmation message from the EHM node that the snapshot has started places it in the message queue into the event queue . Based on the type of message received the MNT specialized adapter calls the Coordinate SEAM which receives the message that the data collection for the snapshot has begun.

Returning to the EHM Node when the data collection for the snapshot is completed the Record SEAM generates an event RECein the EVQ . The workflow service then reads RECefrom the EVQ and queries the SDS for a proper response record. The workflow service then files a COORrresponse record in the HP queue of the EHM node . The COORrresponse record instructs the EHM to send a snapshot completed message to the MNT node with the results.

The Workflow Service serially reads the COORrresponse record and calls the Coordinate SEAM which generates a snapshot complete message for the MNT node which includes the collected snapshot data and delivers it to the specialized adapter for delivery to the MNT node via communication system .

The MNT node receives the snapshot complete message and its specialized adapter pushes the message on to the message queue and calls the MNT Coordinate SEAM . The Coordinate SEAM consults the SDS and determines the proper response to the message which in this example is a Coorevent record and places it in the EVQ for further processing.

The Workflow service of the MNT serially reads the COORevent record and consults the SDS which returns an ANALrresponse record instructing the node to analyze the snapshot data received from the EHM node . The ANALrresponse is placed in the asynchronous queue which is the lowest priority queue. This is so because operations having to do with reports and other human interaction are not time sensitive because the human user cannot perceive the slight time delays resulting form the lower priority. Placing these types of response records in the lowest priority queue allows higher priority events and responses required for real time performance to be addressed faster in the higher priority queues.

The ANALrresponse record is serially read by the workflow service which calls the Analyze SEAM to analyze the snapshot data. The Analyze SEAM consults the SDS for the proper event response. When complete the Analyze SEAM places an ANALeevent into the EVQ . The Workflow service serially reads the ANALeevent and consults the SDS which returns an ALLOCrresponse record which is placed in the asynchronous queue instructing the node to perform allocation.

The process continues in a serial fashion according to the procedure illustrated in and utilized above as the workflow service serially moves through the asynchronous queue . The ALLOCr RANKr DIAGr PREr SUMrand RESrare all response records for execution by their indicated SEAMS Allocate Rank Diagnose Predict Summarize and Respond . The ANALe ALLOCe RANKe DIAGe PREe SUMeand RESeevents are all indications that the respective SEAMS have completed the tasks indicated by the chain of response records listed above. The final RESrresponse record directs the MNT node to deliver the requested data to the system user via the specialized adapter and the web server .

At process an event is pushed into the system by the customized adapter or in the case of some EHM nodes by the host executive software . In some embodiments the host executive may make a function call to a SEAM to accept the event message such as the Acquire SEAM . At process the event record is placed into the EVQ by the called Seam in the order in which it was received and the input message is stored in a queue or a message buffer resident in the DDS by the SEAM . The SEAM then sends a return command to the customized adapter and exits.

It is assumed in this simple example the workflow service module had no other events or response records to process. Therefore the workflow service module may restart at process although it may restart at any point in its routine. At process the workflow service module attempts to read the next event record in FIFO order from the EVQ . If it is determined that the EVQ is not empty at decision point then the workflow service module reads the next event from the EVQ and then consults the persistent data e.g. a state machine in the SDS with the event .

At process the SDS receives the event as an input and produces a predefined response record . The SDS also indicates the response queue into which the response record is to be placed and indicates a priority location for the response record in the response queue as. Any data associated with an event response record is stored in a shared data structure in the DDS such as in a circular buffer or in a record snapshot buffer .

At process the workflow service module stores the response record into the assigned response queue in its priority order and then returns to process to read the next event .

When the SDS assigns response queues the highest priority response records are placed in the HPQ in their order of assigned priority and not on a FIFO basis. Response records of lesser priority such as responses records requiring a time delay may be placed in the TDQ . Responses records of still lesser priority may be placed in the PQ . Such response records in the PQ may need to be addressed only on a periodic basis for example. Response records of the least priority are assigned to the AQ and may be addressed asynchronously as the higher priority response queues permit. Further response records are placed into one of the response queues according to a processing priority that is assigned by the SDS and may or may not be placed on a FIFO basis. The above described loop continues for as long as there are events in the EVQ .

If the EVQ is determined to be empty at determination point then the workflow service module proceeds to the highest priority response queue that contains a response record and reads the highest priority response record e.g. the first or the next response record at process . When a response record is read the workflow service module issues a function call to the SEAM referenced in the response record to perform its function on the data indicated in the response record and then exits.

At process the called SEAM consults the SDS to determine the task to be performed by the SEAM. Although not strictly required for simple SEAM functions such as the Acquire SEAM more complex SEAMs such as the Forecast SEAM or the Coordinate SEAM for example may have various alternative algorithms or conditional logic that may be performed. As such the SDS may direct the SEAM as to which explicit functionality or algorithm to execute.

At process the designated SEAM performs its function or task on the data associated with the response record . Once the SEAM performs its function the method proceeds to process where a new event record is generated and placed into the EVQ and the method repeats.

While at least one exemplary embodiment has been presented in the foregoing detailed description of the invention it should be appreciated that a vast number of variations exist. It should also be appreciated that the exemplary embodiment or exemplary embodiments are only examples and are not intended to limit the scope applicability or configuration of the invention in any way. Rather the foregoing detailed description will provide those skilled in the art with a convenient road map for implementing an exemplary embodiment of the invention. It being understood that various changes may be made in the function and arrangement of elements described in an exemplary embodiment without departing from the scope of the invention as set forth in the appended claims.

