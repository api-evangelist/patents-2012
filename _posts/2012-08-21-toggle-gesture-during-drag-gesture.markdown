---

title: Toggle gesture during drag gesture
abstract: Methods and systems for providing input to a computing device based on a toggle gesture performed during a drag gesture are provided. A drag gesture can be performed on a touch screen to manipulate a user interface object. For example, the drag gesture can move the user interface object or resize the user interface object. Such manipulation commands may have alternate modes or options. For example, a user may want to place a copy of the user interface object rather than simply moving it. Accordingly, a toggle gesture can be performed during the drag gesture to choose an alternate manipulation command. For example, a drag gesture can be performed to move an object, and a toggle gesture can be performed during the drag gesture to copy the object instead of moving it.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09250783&OS=09250783&RS=09250783
owner: Apple Inc.
number: 09250783
owner_city: Cupertino
owner_country: US
publication_date: 20120821
---
Many types of input devices are available for performing operations in a computing system such as buttons or keys mice trackballs joysticks touch sensor panels touch screens and the like. Touch screens in particular are becoming increasingly popular because of their ease and versatility of operation as well as their declining price. Touch screens can include a touch sensor panel which can be a clear panel with a touch sensitive surface and a display device such as a liquid crystal display LCD that can be positioned partially or fully behind the panel so that the touch sensitive surface can cover at least a portion of the viewable area of the display device. Touch screens generally allow a user to perform various functions by touching e.g. physical contact or near field proximity the touch sensor panel using a finger stylus or other object at a location often dictated by a user interface UI being displayed by the display device.

Example touch screen input can include a drag gesture wherein a user touches a user interface object and drags across the surface of the touch screen. A drag gesture can cause some manipulation of the user interface object based on the distance velocity or acceleration of the drag. Possible manipulations can include moving the user interface object or resizing the user interface object for example. However the number of manipulations possible with a simple drag gesture may be limited.

This relates to providing input to a computing device based on a toggle gesture performed during a drag gesture. A drag gesture can be performed on a touch screen to manipulate a user interface object. For example the drag gesture can move the user interface object or resize the user interface object. Such manipulation commands may have alternate modes or options. For example a user may want to place a copy of the user interface object rather than simply moving it. Accordingly a toggle gesture can be performed during the drag gesture to choose an alternate manipulation command. For example a drag gesture can be performed to move an object and a toggle gesture can be performed during the drag gesture to copy the object instead of moving it. In another example a drag gesture can resize several objects at once each being resized proportionally to its initial size and a toggle gesture can be performed during the drag gesture to instead make each object a uniform size and adjust that size with the drag gesture.

In the following description of examples reference is made to the accompanying drawings which form a part hereof and in which it is shown by way of illustration specific examples that can be practiced. It is to be understood that other examples can be used and structural changes can be made without departing from the scope of the disclosed examples.

Various examples relate to providing input to a computing device based on a toggle gesture performed during a drag gesture. A drag gesture can be performed on a touch screen to manipulate a user interface object. For example the drag gesture can move the user interface object or resize the user interface object. Such manipulation commands may have alternate modes or options. For example a user may want to place a copy of the user interface object rather than simply moving it. Accordingly a toggle gesture can be performed during the drag gesture to choose an alternate manipulation command. For example a drag gesture can be performed to move an object and a toggle gesture can be performed during the drag gesture to copy the object instead of moving it. In another example a drag gesture can resize several objects at once each being resized proportionally to its initial size and a toggle gesture can be performed during the drag gesture to instead make each object a uniform size and adjust that size with the drag gesture.

Although examples disclosed herein may be described and illustrated herein primarily in terms of a touch screen it should be understood that the examples are not so limited but are additionally applicable to touch I O devices in general.

In a touch screen can display a plurality of user interface UI objects including table . The table can be made up of several other UI objects displayed on the touch screen including columns and . Additionally a selection indicator can be displayed around column indicating that column is currently selected. The selection indicator can have handles and for resizing selected columns. A position of a first touch input can be represented as a circle in although touch input may not be explicitly displayed on a touch screen according to some examples. Although only the position of the touch input is shown in touch input can include position velocity acceleration size direction of motion proximity pressure shape orientation tilt and other such features.

The first touch input can be detected on the selection indicator and a first command can be selected based on the detected first touch input . For example a move command can be selected based on a detected drag gesture on selection indicator . A drag gesture can be detected when touch input is detected on a UI object and the touch input includes motion due to a user dragging across the surface of the touch screen. A command selected based on a gesture can take as parameters the features of the gesture. For example a move command can take as a parameter the UI object on which the drag gesture is performed or an object associated with that UI object. Additionally a move command can take as a parameter the distance of the drag gesture the velocity of the drag gesture or the position of the touch input among other possibilities. In some examples touch input can include a simple tap input a press and hold input a swipe gesture a pinch gesture and or a rotate gesture among other possibilities. Additionally in some examples commands can include move copy resize rotate sort and or insert among other possibilities.

For example illustrates a preview of execution of a move command. The position of the first touch input can change and the selected move command can take as a parameter the changed position. Additionally the move command can take as a parameter the selection indicator and or its associated column . The preview of the executed move command can be displayed with column moved to the right of column . However if that move command has not actually been executed additional motion of the first touch input can cause the parameters of the selected move command to change and the preview of the executed move command can change. Once liftoff of the first touch input is detected and the drag gesture has concluded the selected move command can be executed according to the parameters based on the drag gesture.

The second touch input can be detected and the selection of the first command can be modified based on the detected second touch input . Modifying the selection of the first command can include selecting a second command instead of the first command. For example the selection of a move command may be modified based on a detected toggle gesture. Modifying the selection of the move command can include selecting a copy command instead of a move command. illustrates selecting a copy command based on the second touch input . A preview of the execution of the copy command can display a new column that is a copy of previously selected column . The new column can be inserted to the right of column based on the position of first touch input . The selected second command can then be executed based on the detection of the liftoff of the first touch input .

In some examples modifying the selection of the first command can include changing a parameter of the selected first command from a first value to a second value. For example if the first command is a copy command a paste type may be a parameter of the copy command. Various paste types may include plain text formatted text and the like. The selection of the copy command may include selecting plain text as a default paste type. Modifying the selection of the copy command based on a toggle gesture can include changing the paste type parameter from plain text to formatted text. The selected first command with the changed parameter can then be executed based on the detection of the liftoff of the first touch input .

In some examples liftoff of the second touch input can be detected and the modification of the selection of the first command can be undone based on the detection of the liftoff of the second touch input. This can allow a user to undo the modification by ending the toggle gesture before any commands are executed. In cases where commands are only executed when the liftoff of the first touch input is detected the modification of the command can be undone by ending the toggle gesture before the liftoff of the first touch input.

If modification of the selection of the first command includes selecting a second command instead of the first command then undoing the modification of the selection of the first command can include selecting the first command instead of the second command. For example modifying the selection of a move command can include selecting a copy command instead of the move command and undoing that modification can include selecting the move command instead of the copy command. If modification of the selection of the first command includes changing a parameter of the selected first command from a first value to a second value then undoing the modification of the first command can include changing the parameter of the selected first command from the second value to the first value.

Although the general behavior of a toggle gesture may be that liftoff of the second touch input before liftoff of the first touch input will undo the modification a user intending to perform a toggle gesture may attempt to liftoff both first and second touch inputs simultaneously and inadvertently liftoff the second before the first. Accordingly in some examples if liftoff of the first touch input is detected within a predetermined threshold time after the liftoff of the second touch input then the modification of the selection of the first command may not be undone and a command can be executed based on the modified selection of the first command as if the liftoff of the first touch input had indeed occurred before the liftoff of the second touch input.

In a touch screen can display a plurality of UI objects including table . The table can be made up of several other UI objects displayed on the touch screen including columns and . Additionally a selection indicator can be displayed around columns and indicating that both columns and are currently selected. The selection indicator can have handles and for resizing selected columns. A position of first touch input can be represented as a circle in although touch input may not be explicitly displayed on a touch screen according to some examples. Although only the position of the touch input is shown in touch input can include position velocity acceleration size direction of motion proximity pressure shape orientation tilt and other such features.

The first touch input can be detected on the handle and a first command can be selected based on the detected first touch input . For example a resize command can be selected based on a detected drag gesture on handle .

The second touch input can be detected and the selection of the first command can be modified based on the detected second touch input . For example the selection of a resize command may be modified based on a detected toggle gesture. Modifying the selection of the resize command can include changing the resize type parameter of the resize command from proportional to uniform. illustrates changing the resize type parameter to uniform. A preview of the execution of the resize command with a uniform resize type can display the columns and with uniform width. Once liftoff of the first touch input is detected and the drag gesture has concluded the selected resize command can be executed with a uniform resize type.

In some examples liftoff of the second touch input can be detected and the modification of the selection of the first command can be undone based on the detection of the liftoff of the second touch input. For example undoing the modification of the selection of the resize command can include changing the resize type parameter back from uniform to proportional.

In some examples multiple toggle gestures can be performed to modify the selection of a first command in multiple ways. For example detecting both a second touch input and a third touch input during the continued detection of a first touch input can cause the selection of the first command to be modified differently than if only the second touch input alone were detected during the continued detection of the first touch input. If the detection of a first touch input can cause the selection of a move command then the detection of a second touch input can cause the selection of a copy command and the detection of a second touch input and a third touch input can cause a paste type parameter of the copy command to change from plain text to formatted text. Multiple such command and modification combinations are possible.

In some examples the touch screen can display visual feedback to indicate that a toggle gesture has been performed. For example if detection of a first touch input can cause the selection of a move command and the detection of a second touch input can modify the selection of the move command so that a copy command is selected instead of the move command then the touch screen can display a UI object indicative of the selection of a copy command during the detection of the second touch input. If liftoff of the second touch input is detected then the modification of the selection of the move command can be undone so that the move command is selected instead of the copy command and the touch screen can stop displaying the UI object indicative of the selection of the copy command. In some cases the detection of the first touch input can cause the touch screen to display a UI object indicative of the selection of a first command and the detection of a second touch input can cause the modification of the UI object so that it is indicative of a modification of the selection of the first command.

If liftoff of the second touch input is detected step then the modification of the selection of the first command can be undone based on the liftoff of the second touch input step . If liftoff of the first touch input is subsequently detected step the first command can be executed step . If liftoff of the first touch input is not detected before an additional second touch input is detected step the process can start over at step .

However if liftoff of the second touch input is not detected step then the modification of the selection of the first command may not be undone. Based on detection of liftoff of the first touch input step a command can be executed based on the modified selection of the first command step . For example if modifying the selection of the first command includes selecting a second command instead of the first command then executing a command based on the modified selection of the first command can include executing the second command. If modifying the selection of the first command includes maintaining the selection of the first command and changing a parameter of the first command from a first value to a second value then executing a command based on the modified selection of the first command can include executing the first command with the second value as a parameter.

The examples discussed above can be implemented in one or more Application Programming Interfaces APIs . An API is an interface implemented by a program code component or hardware component hereinafter API implementing component that allows a different program code component or hardware component hereinafter API calling component to access and use one or more functions methods procedures data structures classes and or other services provided by the API implementing component. An API can define one or more parameters that are passed between the API calling component and the API implementing component.

The above described features can be implemented as part of an application program interface API that can allow it to be incorporated into different applications e.g. spreadsheet apps utilizing touch input as an input mechanism. An API can allow a developer of an API calling component which may be a third party developer to leverage specified features such as those described above provided by an API implementing component. There may be one API calling component or there may be more than one such component. An API can be a source code interface that a computer system or program library provides in order to support requests for services from an application. An operating system OS can have multiple APIs to allow applications running on the OS to call one or more of those APIs and a service such as a program library can have multiple APIs to allow an application that uses the service to call one or more of those APIs. An API can be specified in terms of a programming language that can be interpreted or compiled when an application is built.

In some examples the API implementing component may provide more than one API each providing a different view of the functionality implemented by the API implementing component or with different aspects that access different aspects of the functionality implemented by the API implementing component. For example one API of an API implementing component can provide a first set of functions and can be exposed to third party developers and another API of the API implementing component can be hidden not exposed and provide a subset of the first set of functions and also provide another set of functions such as testing or debugging functions which are not in the first set of functions. In other examples the API implementing component may itself call one or more other components via an underlying API and thus be both an API calling component and an API implementing component.

An API defines the language and parameters that API calling components use when accessing and using specified features of the API implementing component. For example an API calling component accesses the specified features of the API implementing component through one or more API calls or invocations embodied for example by function or method calls exposed by the API and passes data and control information using parameters via the API calls or invocations. The API implementing component may return a value through the API in response to an API call from an API calling component. While the API defines the syntax and result of an API call e.g. how to invoke the API call and what the API call does the API may not reveal how the API call accomplishes the function specified by the API call. Various API calls are transferred via the one or more application programming interfaces between the calling API calling component and an API implementing component. Transferring the API calls may include issuing initiating invoking calling receiving returning or responding to the function calls or messages in other words transferring can describe actions by either of the API calling component or the API implementing component. The function calls or other invocations of the API may send or receive one or more parameters through a parameter list or other structure. A parameter can be a constant key data structure object object class variable data type pointer array list or a pointer to a function or method or another way to reference a data or other item to be passed via the API.

Furthermore data types or classes may be provided by the API and implemented by the API implementing component. Thus the API calling component may declare variables use pointers to use or instantiate constant values of such types or classes by using definitions provided in the API.

Generally an API can be used to access a service or data provided by the API implementing component or to initiate performance of an operation or computation provided by the API implementing component. By way of example the API implementing component and the API calling component may each be any one of an operating system a library a device driver an API an application program or other module it should be understood that the API implementing component and the API calling component may be the same or different type of module from each other . API implementing components may in some cases be embodied at least in part in firmware microcode or other hardware logic. In some examples an API may allow a client program to use the services provided by a Software Development Kit SDK library. In other examples an application or other client program may use an API provided by an Application Framework. In these examples the application or client program may incorporate calls to functions or methods provided by the SDK and provided by the API or use data types or objects defined in the SDK and provided by the API. An Application Framework may in these examples provide a main event loop for a program that responds to various events defined by the Framework. The API allows the application to specify the events and the responses to the events using the Application Framework. In some implementations an API call can report to an application the capabilities or state of a hardware device including those related to aspects such as input capabilities and state output capabilities and state processing capability power state storage capacity and state communications capability etc. and the API may be implemented in part by firmware microcode or other low level logic that executes in part on the hardware component.

The API calling component may be a local component i.e. on the same data processing system as the API implementing component or a remote component i.e. on a different data processing system from the API implementing component that communicates with the API implementing component through the API over a network. It should be understood that an API implementing component may also act as an API calling component i.e. it may make API calls to an API exposed by a different API implementing component and an API calling component may also act as an API implementing component by implementing an API that is exposed to a different API calling component.

The API may allow multiple API calling components written in different programming languages to communicate with the API implementing component thus the API may include features for translating calls and returns between the API implementing component and the API calling component however the API may be implemented in terms of a specific programming language. An API calling component can in one embedment call APIs from different providers such as a set of APIs from an OS provider and another set of APIs from a plug in provider and another set of APIs from another provider e.g. the provider of a software library or creator of the another set of APIs.

It will be appreciated that the API implementing component may include additional functions methods classes data structures and or other features that are not specified through the API and are not available to the API calling component . It should be understood that the API calling component may be on the same system as the API implementing component or may be located remotely and accesses the API implementing component using the API over a network. While illustrates a single API calling component interacting with the API it should be understood that other API calling components which may be written in different languages or the same language than the API calling component may use the API .

The API implementing component the API and the API calling component may be stored in a non transitory machine readable storage medium which includes any mechanism for storing information in a form readable by a machine e.g. a computer or other data processing system . For example a machine readable medium includes magnetic disks optical disks random access memory read only memory flash memory devices etc.

In the exemplary software stack shown in applications can make calls to Services A or B using several Service APIs and to Operating System OS using several OS APIs. Services A and B can make calls to OS using several OS APIs.

Note that the Service 2 has two APIs one of which Service 2 API 1 receives calls from and returns values to Application 1 and the other Service 2 API 2 receives calls from and returns values to Application 2. Service 1 which can be for example a software library makes calls to and receives returned values from OS API 1 and Service 2 which can be for example a software library makes calls to and receives returned values from both OS API 1 and OS API 2. Application 2 makes calls to and receives returned values from OS API 2.

Touch I O device may include a touch sensitive panel which is wholly or partially transparent semitransparent non transparent opaque or any combination thereof. Touch I O device may be embodied as a touch screen touch pad a touch screen functioning as a touch pad e.g. a touch screen replacing the touchpad of a laptop a touch screen or touchpad combined or incorporated with any other input device e.g. a touch screen or touchpad disposed on a keyboard or any multi dimensional object having a touch sensitive surface for receiving touch input.

In one example touch I O device embodied as a touch screen may include a transparent and or semitransparent touch sensitive panel partially or wholly positioned over at least a portion of a display. According to this example touch I O device functions to display graphical data transmitted from computing system and or another source and also functions to receive user input. In other examples touch I O device may be embodied as an integrated touch screen where touch sensitive components devices are integral with display components devices. In still other examples a touch screen may be used as a supplemental or additional display screen for displaying supplemental or the same graphical data as a primary display and to receive touch input.

Touch I O device may be configured to detect the location of one or more touches or near touches on device based on capacitive resistive optical acoustic inductive mechanical chemical measurements or any phenomena that can be measured with respect to the occurrences of the one or more touches or near touches in proximity to device . Software hardware firmware or any combination thereof may be used to process the measurements of the detected touches to identify and track one or more gestures. A gesture may correspond to stationary or non stationary single or multiple touches or near touches on touch I O device . A gesture may be performed by moving one or more fingers or other objects in a particular manner on touch I O device such as tapping pressing rocking scrubbing twisting changing orientation pressing with varying pressure and the like at essentially the same time contiguously or consecutively. A gesture may be characterized by but is not limited to a pinching sliding swiping rotating flexing dragging or tapping motion between or with any other finger or fingers. A single gesture may be performed with one or more hands by one or more users or any combination thereof. Exemplary gestures include the drag and toggle gestures discussed above in view of and A C.

Computing system may drive a display with graphical data to display a graphical user interface GUI . The GUI may be configured to receive touch input via touch I O device . Embodied as a touch screen touch I O device may display the GUI. Alternatively the GUI may be displayed on a display separate from touch I O device . The GUI may include graphical elements displayed at particular locations within the interface. Graphical elements may include but are not limited to a variety of displayed virtual input devices including virtual scroll wheels a virtual keyboard virtual knobs virtual buttons any virtual UI and the like. A user may perform gestures at one or more particular locations on touch I O device which may be associated with the graphical elements of the GUI. In other examples the user may perform gestures at one or more locations that are independent of the locations of graphical elements of the GUI. Gestures performed on touch I O device may directly or indirectly manipulate control modify move actuate initiate or generally affect graphical elements such as cursors icons media files lists text all or portions of images or the like within the GUI. For instance in the case of a touch screen a user may directly interact with a graphical element by performing a gesture over the graphical element on the touch screen. Alternatively a touch pad generally provides indirect interaction. Gestures may also affect non displayed GUI elements e.g. causing user interfaces to appear or may affect other actions within computing system e.g. affect a state or mode of a GUI application or operating system . Gestures may or may not be performed on touch I O device in conjunction with a displayed cursor. For instance in the case in which gestures are performed on a touchpad a cursor or pointer may be displayed on a display screen or touch screen and the cursor may be controlled via touch input on the touchpad to interact with graphical objects on the display screen. In other examples in which gestures are performed directly on a touch screen a user may interact directly with objects on the touch screen with or without a cursor or pointer being displayed on the touch screen.

Feedback may be provided to the user via communication channel in response to or based on the touch or near touches on touch I O device . Feedback may be transmitted optically mechanically electrically olfactorally acoustically or the like or any combination thereof and in a variable or non variable manner.

Attention is now directed towards examples of a system architecture that may be embodied within any portable or non portable device including but not limited to a communication device e.g. mobile phone smart phone a multi media device e.g. MP3 player TV radio a portable or handheld computer e.g. tablet netbook laptop a desktop computer an All In One desktop a peripheral device or any other system or device adaptable to the inclusion of system architecture including combinations of two or more of these types of devices. is a block diagram of one example of system that generally includes one or more computer readable mediums processing system I O subsystem radio frequency RF circuitry and audio circuitry . These components may be coupled by one or more communication buses or signal lines .

It should be apparent that the architecture shown in is only one example architecture of system and that system could have more or fewer components than shown or a different configuration of components. The various components shown in can be implemented in hardware software firmware or any combination thereof including one or more signal processing and or application specific integrated circuits.

RF circuitry is used to send and receive information over a wireless link or network to one or more other devices and includes well known circuitry for performing this function. RF circuitry and audio circuitry are coupled to processing system via peripherals interface . Interface includes various known components for establishing and maintaining communication between peripherals and processing system . Audio circuitry is coupled to audio speaker and microphone and includes known circuitry for processing voice signals received from interface to enable a user to communicate in real time with other users. In some examples audio circuitry includes a headphone jack not shown .

Peripherals interface couples the input and output peripherals of the system to processor and computer readable medium . One or more processors communicate with one or more computer readable mediums via controller . Computer readable medium can be any device or medium that can store code and or data for use by one or more processors . Medium can include a memory hierarchy including but not limited to cache main memory and secondary memory. The memory hierarchy can be implemented using any combination of RAM e.g. SRAM DRAM DDRAM ROM FLASH magnetic and or optical storage devices such as disk drives magnetic tape CDs compact disks and DVDs digital video discs . Medium may also include a transmission medium for carrying information bearing signals indicative of computer instructions or data with or without a carrier wave upon which the signals are modulated . For example the transmission medium may include a communications network including but not limited to the Internet also referred to as the World Wide Web intranet s Local Area Networks LANs Wide Local Area Networks WLANs Storage Area Networks SANs Metropolitan Area Networks MAN and the like.

One or more processors run various software components stored in medium to perform various functions for system . In some examples the software components include operating system communication module or set of instructions touch processing module or set of instructions graphics module or set of instructions and one or more applications or set of instructions . Each of these modules and above noted applications correspond to a set of instructions for performing one or more functions described above and the methods described in this application e.g. the computer implemented methods and other information processing methods described herein . These modules i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise re arranged in various examples. In some examples medium may store a subset of the modules and data structures identified above. Furthermore medium may store additional modules and data structures not described above.

Operating system includes various procedures sets of instructions software components and or drivers for controlling and managing general system tasks e.g. memory management storage device control power management etc. and facilitates communication between various hardware and software components.

Communication module facilitates communication with other devices over one or more external ports or via RF circuitry and includes various software components for handling data received from RF circuitry and or external port .

Graphics module includes various known software components for rendering animating and displaying graphical objects on a display surface. In examples in which touch I O device is a touch sensitive display e.g. touch screen graphics module includes components for rendering displaying and animating objects on the touch sensitive display.

One or more applications can include any applications installed on system including without limitation a browser address book contact list email instant messaging word processing keyboard emulation widgets JAVA enabled applications encryption digital rights management voice recognition voice replication location determination capability such as that provided by the global positioning system GPS a music player etc.

Touch processing module includes various software components for performing various tasks associated with touch I O device including but not limited to receiving and processing touch input received from I O device via touch I O device controller .

I O subsystem is coupled to touch I O device and one or more other I O devices for controlling or performing various functions. Touch I O device communicates with processing system via touch I O device controller which includes various components for processing user touch input e.g. scanning hardware . One or more other input controllers receives sends electrical signals from to other I O devices . Other I O devices may include physical buttons dials slider switches sticks keyboards touch pads additional display screens or any combination thereof.

If embodied as a touch screen touch I O device displays visual output to the user in a GUI. The visual output may include text graphics video and any combination thereof. Some or all of the visual output may correspond to user interface objects. Touch I O device forms a touch sensitive surface that accepts touch input from the user. Touch I O device and touch screen controller along with any associated modules and or sets of instructions in medium detects and tracks touches or near touches and any movement or release of the touch on touch I O device and converts the detected touch input into interaction with graphical objects such as one or more user interface objects. In the case in which device is embodied as a touch screen the user can directly interact with graphical objects that are displayed on the touch screen. Alternatively in the case in which device is embodied as a touch device other than a touch screen e.g. a touch pad the user may indirectly interact with graphical objects that are displayed on a separate display screen embodied as I O device .

Touch I O device may be analogous to the multi touch sensitive surface described in the following U.S. Pat. No. 6 323 846 Westerman et al. U.S. Pat. No. 6 570 557 Westerman et al. and or U.S. Pat. No. 6 677 932 Westerman and or U.S. Patent Publication 2002 0015024A1 each of which is hereby incorporated by reference.

Examples in which touch I O device is a touch screen the touch screen may use LCD liquid crystal display technology LPD light emitting polymer display technology OLED organic LED or OEL organic electro luminescence although other display technologies may be used in other examples.

Feedback may be provided by touch I O device based on the user s touch input as well as a state or states of what is being displayed and or of the computing system. Feedback may be transmitted optically e.g. light signal or displayed image mechanically e.g. haptic feedback touch feedback force feedback or the like electrically e.g. electrical stimulation olfactory acoustically e.g. beep or the like or the like or any combination thereof and in a variable or non variable manner.

System also includes power system for powering the various hardware components and may include a power management system one or more power sources a recharging system a power failure detection circuit a power converter or inverter a power status indicator and any other components typically associated with the generation management and distribution of power in portable devices.

In some examples peripherals interface one or more processors and memory controller may be implemented on a single chip such as processing system . In some other examples they may be implemented on separate chips.

In some examples a computer implemented method is disclosed. The method includes detecting a first touch input by a user on a touch sensitive surface selecting a first command based on the first touch input while continuing to detect the first touch input detecting a second touch input by the user on the touch sensitive surface and modifying the selection of the first command based on the second touch input. Additionally or alternatively to one or more of the examples disclosed above the method can further include detecting a liftoff of the second touch input undoing the modifying the selection of the first command based on the liftoff of the second touch input detecting a liftoff of the first touch input and executing the first command based on the liftoff of the first touch input. Additionally or alternatively to one or more of the examples disclosed above modifying the selection of the first command can include selecting a second command and the method can further include detecting a liftoff of the first touch input and executing the second command based on the liftoff of the first touch input. Additionally or alternatively to one or more of the examples disclosed above the method can further include while continuing to detect the first touch input detecting a third touch input by the user on the touch sensitive surface and modifying the selection of the first command based on the third touch input. Additionally or alternatively to one or more of the examples disclosed above modifying the selection of the first command can include changing a parameter of the first command from a first value to a second value and the method can further include detecting a liftoff of the first touch input and executing the first command with the second value as a parameter. Additionally or alternatively to one or more of the examples disclosed above the method can further include determining a distance between the second touch input and the first touch input and determining that the distance is less than a predetermined threshold distance wherein modifying the selection of the first command can be further based on the determining that the distance is less than the predetermined threshold distance. Additionally or alternatively to one or more of the examples disclosed above the method can further include determining that the second touch input is within a predefined location on the touch sensitive surface wherein modifying the selection of the first command can be further based on the determining that the second touch input is within the predefined location on the touch sensitive surface. Additionally or alternatively to one or more of the examples disclosed above the method can further include detecting a liftoff of the first touch input at a first liftoff time detecting a liftoff of the second touch input at a second liftoff time determining that the first liftoff time is within a predetermined temporal threshold after the second liftoff time and in response to the determining that the first liftoff time is within the predetermined temporal threshold after the second liftoff time executing a command based on the modifying the selection of the first command. Additionally or alternatively to one or more of the examples disclosed above the first command can include one of move copy resize rotate sort and insert.

In some examples an electronic device is provided. The electronic device can include a touch sensitive surface for receiving touch input a processor to execute instructions and a memory coupled with the processor to store instructions which when executed by the processor cause the processor to perform operations to generate an application programming interface API that allows an API calling component to perform the following operations detecting a first touch input by a user on the touch sensitive surface selecting a first command based on the first touch input while continuing to detect the first touch input detecting a second touch input by the user on the touch sensitive surface and modifying the selection of the first command based on the second touch input. Additionally or alternatively to one or more of the examples disclosed above the operations can further include detecting a liftoff of the second touch input undoing the modifying the selection of the first command based on the liftoff of the second touch input detecting a liftoff of the first touch input and executing the first command based on the liftoff of the first touch input. Additionally or alternatively to one or more of the examples disclosed above modifying the selection of the first command can include selecting a second command and the operations can further include detecting a liftoff of the first touch input and executing the second command based on the liftoff of the first touch input. Additionally or alternatively to one or more of the examples disclosed above the operations can further include while continuing to detect the first touch input detecting a third touch input by the user on the touch sensitive surface and modifying the selection of the first command based on the third touch input. Additionally or alternatively to one or more of the examples disclosed above modifying the selection of the first command can include changing a parameter of the first command from a first value to a second value and the operations can further include detecting a liftoff of the first touch input and executing the first command with the second value as a parameter. Additionally or alternatively to one or more of the examples disclosed above the operations can further include determining a distance between the second touch input and the first touch input and determining that the distance is less than a predetermined threshold distance wherein modifying the selection of the first command can be further based on the determining that the distance is less than the predetermined threshold distance. Additionally or alternatively to one or more of the examples disclosed above the operations can further include determining that the second touch input is within a predefined location on the touch sensitive surface wherein modifying the selection of the first command can be further based on the determining that the second touch input is within the predefined location on the touch sensitive surface.

Although the disclosed examples have been fully described with reference to the accompanying drawings it is to be noted that various changes and modifications will become apparent to those skilled in the art. Such changes and modifications are to be understood as being included within the scope of the disclosed examples as defined by the appended claims.

