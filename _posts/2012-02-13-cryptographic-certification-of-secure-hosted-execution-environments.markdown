---

title: Cryptographic certification of secure hosted execution environments
abstract: Implementations for providing a persistent secure execution environment with a hosted computer are described. A host operating system of a computing system provides an encrypted checkpoint to a persistence module that executes in a secure execution environment of a hardware-protected memory area initialized by a security-enabled processor. The encrypted checkpoint is derived at least partly from another secure execution environment that is cryptographically certifiable as including another hardware-protected memory area established in an activation state to refrain from executing software not trusted by the client system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09425965&OS=09425965&RS=09425965
owner: Microsoft Technology Licensing, LLC
number: 09425965
owner_city: Redmond
owner_country: US
publication_date: 20120213
---
This application is a continuation of U.S. patent application Ser. No. 13 323 465 filed on Dec. 12 2011 the disclosure of which is hereby incorporated herein by reference in its entirety for all purposes. U.S. patent application Ser. No. 13 323 465 is related to U.S. patent application Ser. No. 13 323 562 filed on Dec. 12 2011.

In a conventional computing environment the user controls physical access to the user s computing systems. The user trusts to some degree the hardware and software in its data centers. This trust combined with physical control of the devices provides the user with a certain degree of confidence that their computing systems are secure.

In a hosted computing environment the user typically does not have physical control over the computing systems used to execute the user s applications. The user in addition to trusting the hardware and software that executes in the hosted computing environment has no choice but to trust the hosted computing provider not to tamper with or snoop on the user s code and data. The user also trusts the hosted computing provider to provide physical security sufficient to prevent unauthorized persons from removing hard disks or tampering with the system. And users place their trust in the hosted computing provider to prevent third parties from tampering with or stealing their data. A hosted computing provider may therefore incur a certain amount of liability in the form of guarantees and the like to encourage users to run their software in the provider s hosted computing environment.

This Summary is provided in order to introduce simplified concepts of the present disclosure which are further described below in the Detailed Description. This summary is not intended to identify essential features of the claimed subject matter nor is it intended for use in determining the scope of the claimed subject matter.

Embodiments of the present disclosure enable an application hosting service to cryptographically certify that it provides a secure execution environment that is resistant to snooping and tampering such that it includes for example only the user s trusted code and data. In order to service a request from a client system to establish a secure execution environment a protected memory area is instantiated by a security enabled processor. The hosted computing system goes through an attestation protocol to provide verifiable facts about the security enabled processor and the software and data in the secure execution environment such as the manufacturer and model of the security enabled processor and the vendor or code identity of the software. Upon successful completion of the attestation protocol a cryptographically protected communication channel is established between the client system and the secure execution environment and one or more applications are executed within the secure execution environment.

The application hosting service may use various trust certificates including certificates from a trusted authority and one or more intermediaries to establish a chain of trust from the security enabled processor to the trusted authority. These trust certificates collectively may be used in the attestation protocol to certify the security enabled processor s security. The application hosting service may be audited to verify that the security enabled processors of the application hosting service are physically secured and have not been tampered with. The auditor may provide an auditor certificate that may be used as part of the attestation protocol. Alternatively the auditor may make the results of the audit available in other ways e.g. publish them on the internet . The application hosting service may use in the attestation protocol cryptographic credentials for the processor produced by the hardware manufacturer vouching for the integrity and proper functioning of the security enabled processor.

As discussed above a user places a certain degree of trust in a conventional hosted computing provider to securely execute the user s applications and safeguard the user s data. Embodiments of the present Detailed Description allow the hosted computing service to provide cryptographic certification both that a user s execution environment is resistant to tampering and snooping and that the user s execution environment is established with the content that the client requests and with no untrusted code or data. Providing a secure execution environment that is free from outside snooping and tampering may by itself enable a nefarious hosted computing provider to set up the execution environment with untrusted code that is able to snoop on or tamper with the user s code and data from within. And simply providing an execution environment with nothing but the user s trusted code and data may by itself enable the hosted provider or a third party to tamper with or snoop on the contents of the execution environment from outside the execution environment. But embodiments of the present disclosure enable a hosted computing provider to cryptographically certify that it provides a secure execution environment that is resistant to outside snooping and tampering and that includes no untrusted code and data.

Computing systems according to embodiments include a security enabled processor configured to instantiate for a client system such as a computing device controlled by a hosted computing user or consumer a secure computing environment including a protected memory area. The code and data selected by the client system is stored in a protected memory area and is accessible to code stored in the protected memory area but inaccessible to all code executing outside the protected memory area. The latter includes code running in other protected memory areas that might exist. The code in the secure execution environment can be chosen by the client system the service provider third parties or a combination of all of them. For example the client system might choose to execute only its application code including support libraries in the secure execution environment. The execution of this code is protected from all other code on the computer.

Threads can transition from running code outside the protected memory area to running code inside the protected memory area only through specific entry gate functions mediated by the security enabled processor. Likewise threads transition from running code inside the protected memory area to running code outside the protected memory area through specific exit gate functions mediated the security enabled processor. The code that runs in the protected memory area has no special privileges except the ability to access code and data in the protected memory area. For example the code that runs in the protected memory area does not need to run in the processor s kernel mode or privileged mode nor does it need access to instructions such as I O instructions accessible only to the processor s kernel mode or privileged mode. The hardware protected memory area is brought to a well known initial state and then loaded with a loader module and one or more parameters specified by the user s client system in order to establish a requested activation state of the protected memory area.

The trusted execution environment provides a mechanism by which the user trusted code running within the protected memory area certifies to the client system that it is running within a secure execution environment. The security enabled processor performs an attestation protocol involving providing the client system with a certification that a secure execution environment is established and that in an initial activation state of the secure execution environment only the software identified explicitly or implicitly in a request from the client user is executed. The attestation protocol may involve the client or other parties. The purpose of the attestation protocol is to cryptographically verify to the client system or other system that the secure execution environment has particular properties. These properties may include in various non limiting examples 

The following describes various embodiments of an attestation protocol. Embodiments are not limited to the following embodiments and the attestation protocol described below may include additional functionality such as with chains of trust rooted in one or more trusted certificate authorities without departing from the scope of the present Detailed Description. Once the protected memory area is instantiated with the requested activation state the security enabled processor produces an identifier that identifies the initial activation state of the hardware protected memory area and stores the identifier in a location accessible only to the security enabled processor. The identifier may include a digest such as a hash of the activation state of the protected memory area. The identifier may include a public key that the security enabled processor used to decrypt the contents placed into the protected memory area in the activation state. The identifier may be some other identifier that identifies the activation state.

The loader module is executed and causes the security enabled processor to create an attestation certificate signed by a private key of the security enabled processor. The signed attestation certificate is transmitted to the client system and therefore enables the client system to verify using a known public key of the security enabled processor that corresponds to the private key of the security enabled processor that the attestation certificate is signed by the security enabled processor. The signed attestation certificate also enables the client system to verify that the client system communicates with a loader module running in a protected memory area created by the security enabled processor. Thus a trust relationship is formed between the client system and the security enabled processor. A chain of trust including additional certificates from a trusted authority and possibly one or more intermediaries may be used in embodiments to establish the trust relationship.

The attestation certificate includes the identifier of the activation state of the protected memory area. The client system compares the identifier with a known identifier of the requested activation state to determine that the activation state of the protected memory area is the requested activation state including the loader module and the one or more parameters. Because the attestation certificate with the identifier is signed encrypted with the security enabled processor s private key and because a trust relationship is established between the client system and the security enabled processor the client system is able to rely on the identifier to determine that the activation state of the protected memory area is the requested activation state.

Thus embodiments provide the client system with verification of both that the hosted computing provider establishes a secure execution environment resistant to tampering and snooping and that the secure execution environment is instantiated with the requested activation state. The signed attestation certificate provides the client system with verification that the secure execution environment is established. And the identifier provides the client system with verification that the secure execution environment is instantiated with the requested activation state. The client system then utilizes the secure execution environment to load and execute requested applications.

Although the security enabled processor may be resistant to casual physical attacks it may be vulnerable to physical tampering. The hosted computing system is also configured in various embodiments to certify to the client system that the security enabled processor is physically secure for example in one embodiment the hosted computing system is configured to transmit an auditor certificate signed by an auditing entity s private key declaring that the security enabled processor has not been physically tampered with during a specific time period. Personnel from the auditing entity may periodically or continually monitor the hosted computing service to determine that the security enabled processors are physically intact. The auditor certificate therefore provides the client system with additional degrees of confidence in the secure execution environment. In another embodiment the client system presents the certificate of the security enabled processor directly to a computer system of the auditing entity requesting verification of the processor s physical security. The computer system of the auditing entity responds with a certificate verifying that the security enabled processor has not been physically tampered with.

The application hosting service according to various embodiments described herein runs only code in the secure execution environment that has been selected by the client system. An entity associated with the client system may write all of the software that runs within the secure execution environment or the entity may outsource portions of the software to software providers that the entity trusts. In one non limiting example the client system may select an application from a trusted application software vendor and a library operating system from a trusted operating system vendor. The entity associated with the client system is considered the software vendor for the portions of the software created directly by the entity. The software vendors may provide certificates for signed binaries verifying that the software binary files are indeed the ones provided by the software vendors respectively and that the binaries have not been altered.

With these divisions of responsibility the application hosting service acts as an intermediary but does not actually certify the integrity of any system component. The security enabled processor vendor certifies the secure execution environment. The auditing entity certifies the physical security of the secure execution environment. The software providers certify the software running within the secure execution environment. The application hosting service may perform some none or all of these roles in various embodiments. In embodiments the application hosting service provider maintains availability of the computing facility which includes providing the computing facility power and network connectivity and other entities such as the hardware providers software providers and auditing entities provide for other various aspects of the security of the applications being hosted.

Examples of application hosting services include internet hosting facilities cloud computing providers outsourced corporate data centers corporate data centers operated by contract and content delivery networks.

The processes systems and devices described herein may be implemented in a number of ways. Example implementations are provided below with reference to the following figures.

An application hosting service includes a memory and a security enabled processor . The memory includes a host operating system OS and a set up module . Although the set up module is shown in to be separate from the host OS the set up module may be a component of the host OS . Also the application hosting service may include multiple processors including multiple security enabled processors such as the security enabled processor . The host OS and or the set up module may execute on the security enabled processor or on one or more other processors not shown in .

System performs various functions such as but not limited to one or more of the following a initializing secure execution environments with code and data b receiving client requests to bind an instance of a secure execution environment to a client system and configure it to run the client s software c binding an instance of a secure execution environment to a client and configuring the secure execution environment to run the client s software d providing to the client a certified specification of the software that is to run within the secure execution environment. These various functions may be performed in different orders depending on specific embodiments. Furthermore specific embodiments may combine some of the functions.

In one embodiment the hosting service may perform function b prior to performing other ones of the above mentioned functions. When a client request arrives the hosting service initializes a secure execution environment action a . The hosting service may include code and or data e.g. parameters supplied in the client request in the initialization. Thus binding action c may be performed implicitly as part of action b . Alternatively the hosting service may initialize the secure execution environment action a with generic code and data not specific to the client and bind the secure execution environment to a client action c in a separate step.

In another embodiment the hosting service initializes one or more secure execution environments action a with generic code and data. This generic code and data could provide a generic run time environment for arbitrary applications. When a client request arrives action b the hosting service selects one of the previously initialized secure execution environments and binds it to the client action c by sending it code or data from the client request.

Actions c and d can be combined. For example variants of authenticated key exchange protocols may perform an attestation protocol. The attestation protocol provides to the client verifiable properties about the software and data in the secure execution environment action d and establishes a shared cryptographic key between the secure execution environment and the client action c .

The following example is a detailed description of one class of embodiments. The set up module receives a request from the client system via network to establish a secure execution environment on the application hosting service . The network may be the public Internet or some other wired or wireless network type. Embodiments are not limited to any type or types of networks. The request is accompanied by an indication of a loader module and one or more parameters . The indication of the loader module may be an identifier for the loader module or it may be an application binary of the loader module itself or some other indicator. In embodiments where the indication of the loader module is an identifier it may be a uniform resource identifier URI such as a uniform resource locator URL identifying the loader module and possibly a location where the loader module can be found.

The set up module causes in response to receipt of the request the security enabled processor to instantiate a protected memory area which is a hardware protected memory area within memory . The set up module provides the security enabled processor with pointers to the loader module and the parameters and instructs the security enabled processor to bring the protected memory area to a well known initial state such as all memory addresses within the protected memory area and all appropriate registers within the security enabled processor zeroed out or to some other well known initial state and to load the loader module and the parameters into the protected memory area after bringing the protected memory area to the well known initial state. The instantiation of the protected memory area first into the well known initial state and then loaded with the loader module and the parameters represents a requested activation state of the protected memory area . In other words it represents the state of the secure execution environment that the client device specifies in its request to set up a secure execution environment.

The combination of the protected memory area and execution of code therein by the security enabled processor represents the secure execution environment. Although the protected memory area is shown as being part of a contiguous memory area that also includes the host OS and the set up module the protected memory area may in alternative embodiments be part of a separate memory area such as a memory area on the same integrated circuit as the security enabled processor that physically isolates the protected memory area from the rest of the application hosting service .

The security enabled processor may be configured to encrypt and decrypt all data written to and read from respectively the protected memory area in order to prevent outside snooping on the protected memory area . The security enabled processor may also be configured to produce hashes or other digests of the data written to the protected memory area in order to verify upon a read of the contents of the protected memory area that the contents have not been altered.

As part of the instantiation process the security enabled processor produces an identifier identifying the activation state of the protected memory area . The identifier may be in various embodiments a digest such as a hash of the contents of the protected memory area in the activation state. The identifier may be a public key corresponding to a private key that was used to sign the software stored in the protected memory area . The activation state includes the loader module the parameters and any other code or data placed into the protected memory area upon instantiation. The identifier may be stored in a location that is accessible only to the security enabled processor such as in a register or memory location within the security enabled processor that is inaccessible except by the security enabled processor or perhaps encrypted in an area of memory . In embodiments wherein the identifier is a hash of the contents of the protected memory area in the activation state the security enabled processor produces the hash using a cryptographic hash function such as the MD5 Message Digest Algorithm Secure Hash Algorithms SHA 0 SHA 1 SHA 2 or other hash function.

Upon instantiation of the protected memory area with the loader module and the parameters the set up module instructs the security enabled processor to execute the loader module such as through an entry function or gate which the security enabled processor uses in order to enable the secure execution environment to receive communications from outside the secure execution environment. An instance of the loader module executes on the security enabled processor and causes the processor to create an attestation certificate signed by a security enabled processor SEP private key . The SEP private key is permanently stored on the security enabled processor in a way that is accessible only to the security enabled processor . Thus so long as the security enabled processor is physically intact an entity receiving the attestation certificate can have a high degree of confidence that the signed attestation certificate is signed by the security enabled processor .

The attestation certificate may include among other things the identifier . The loader module then transmits the attestation certificate to the client system via an exit function or exit gate employed by the security enabled processor to enable the secure execution environment to communicate with the outside world. Alternatively the identifier may be encrypted with the SEP private key and transmitted to the client system separately from the attestation certificate which would also be signed encrypted using the SEP private key .

Upon receipt of the attestation certificate the client system decrypts it using a SEP public key that corresponds to the SEP private key of the security enabled processor. The means by which the client system obtains the SEP public key is described below.

The client system compares the identifier contained within the decrypted attestation certificate with a known identifier of the requested activation state of the secure execution environment. A determination that the known identifier matches the identifier provides the client system with a high degree of confidence that the actual activation state of the protected memory area matches the requested activation state of the protected memory area . In various non limiting examples successful verification of the identifier provides the client system with confidence that the protected memory area includes the loader module the parameters any other code or data implicitly or explicitly specified in the request to establish a secure execution environment and nothing else. As noted above the attestation certificate is signed encrypted by using the SEP private key that is accessible only by the security enabled processor . The attestation certificate includes the identifier of the activation state of the protected memory area and the identifier is produced by the security enabled processor and may be stored securely in a way that makes the identifier accessible only to the security enabled processor .

Because the loader module or other code such as some malicious code surreptitiously loaded within the protected memory area cannot access the SEP private key the loader module or other code cannot alter the identifier without also altering the attestation certificate and invalidating the security enabled processor s signature. Thus upon successfully using the SEP public key to verify that the attestation certificate is properly signed using the SEP private key and upon successfully verifying that the identifier contained therein matches the known identifier the client system can have a high degree of confidence that it communicates with a secure execution environment that was instantiated with the requested activation state.

To achieve this high degree of confidence the client system forms a trust relationship with the security enabled processor . Merely possessing the SEP public key may be insufficient to establish that the security enabled processor is a true security enabled processor that is properly configured to provide a secure execution environment on the application hosting service . A chain of trust is therefore provided to vouch for the authenticity of the security enabled processor .

The loader module or the set up module may transmit one or more trust certificates such as a trusted authority TA certificate and possibly one or more intermediary certificates . The TA certificate is signed using a private key of a trusted authority . The TA certificate identifies either the security enabled processor or possibly one or more intermediaries and provides the public key of either the security enabled processor i.e. the SEP public key or public keys of the intermediate authority directly below it. The client system may obtain the trusted authority TA public key and use it to decrypt the TA certificate and then obtain the public key published therein. Any intermediate certificates are decrypted and the public keys of any underlying intermediaries are extracted from the intermediate certificates . Ultimately the client system is able to obtain either from the TA certificate or from one of the intermediate certificates the SEP public key .

This process creates a chain of trust from the trusted authority to the security enabled processor . Essentially the trusted authority vouches for the most immediate intermediary the intermediaries vouch for any lower level intermediaries and ultimately one of the intermediaries or the trusted authority if there are no intermediaries vouches for the security enabled processor and provides the SEP public key . By following the chain of trust in this way the client system is able to establish a trust relationship with the security enabled processor .

The trusted authority may be the hardware manufacturer that manufactured the security enabled processor . Alternatively the trusted authority may be some other entity that provides assurances that an intermediary which may be the hardware manufacturer is trustworthy.

In the same or different embodiments the set up module is further configured to transmit to the client system an auditing certificate signed by a private key of an auditor entity indicating that the security enabled processor has not been tampered with. In the same or alternative embodiments the client system provides the auditor entity with an identity of the security enabled processor which may be included in the attestation certificate and requests that the auditor entity provide the client system with the auditing certificate . The auditor entity may employ one or many mechanisms for verifying the physical security of the security enabled processor. For example personnel of the auditor entity may periodically visit the data center s that house the application hosting service physically inspect the computing devices and verify that the security enabled processor is physically uncompromised has not been tampered with and is otherwise intact. In other embodiments personnel of the auditor entity may continuously monitor the data center s that house the application hosting service using closed circuit cameras or personnel of the auditor entity may conduct random inspections of randomly chosen computing devices within the data center s that house the application hosting service . Depending on the auditing processes employed the auditor entity may offer different levels or degrees of certification of physical security to suit the business needs of various clients. In various embodiments the auditing certificate may be part of the chain of trust described above. Alternatively the auditing certificate may be a stand alone certificate perhaps backed by its own chain of trust used by the client system to further verify that the facilities provided by the application hosting service are secure.

Once the client system verifies that the attestation certificate is properly signed by the security enabled processor and that the identifier contained therein matches the known identifier and possibly after verifying the chain of trust via the TA certificate and the intermediate certificate s and any other certificates such as the auditing certificate the client system and the loader module may establish an encrypted communication channel. In one embodiment to establish an encrypted communication channel the client system produces a session key encrypts the session key with the SEP public key and transmits the encrypted session key to the loader module . The loader module receives the session key such as through an entry function or gate of the security enabled processor . The loader module causes the security enabled processor to decrypt the session key using the SEP private key and the loader module establishes communications with the client system using the decrypted session key The client system and the loader module use the session key to cryptographically protect communications between them.

The attestation protocol described above may be protected from various state replay attacks using various methods such as those described in U.S. Pat. No. 7 421 579 issued to England et al. on Sep. 2 2008 and entitled Multiplexing a secure counter to implement second level secure counters U.S. Pat. No. 7 065 607 issued to England et al. on Jun. 20 2006 and entitled System and method for implementing a counter and as described in Memoir Practical State Continuity for Protected Modules by Bryan Parno Jacob R. Lorch John R. Douceur James Mickens and Jonathan M. McCune and published in Proceedings of the IEEE Symposium on Security and Privacy IEEE May 2011.

The client system instructs the loader module to load and execute an application . The loader module then loads and executes the application into the protected memory area . Alternatively the application is pre identified by the parameters and is loaded by the loader module upon establishment of the encrypted channel. In still other embodiments the parameters include an application binary of the application and the loader module receives a command via the encrypted channel to execute the application . In other embodiments the application is loaded as part of the activation state of the protected memory area . In other embodiments the application is loaded over the Network from an application vendor. Other variations are possible without departing from the scope of the present disclosure.

The application may include an operating system subsystem sometimes referred to as a library OS such as is described in U.S. patent application Ser. No. 12 834 895 filed Jul. 13 2010 and entitled ULTRA LOW COST SANDBOXING FOR APPLICATION APPLIANCES. The operating system subsystem provides various operating system elements within the application process. The operating system subsystem also utilizes a small subset of application programming interfaces APIs to communicate with a host operating system via an operating system platform adaptation layer PAL in order to provide the application with basic computation services.

In any event loading and executing the application that is specified by the client system in the secure execution environment may be the ultimate aim of the attestation protocol described above. The attestation protocol thus provides a user associated with the client system with a high degree of confidence that the application executes within a secure execution environment that is free of snooping and tampering from the outside and that is loaded with no untrusted content.

In one example configuration the computing system comprises one or more processors and memory . The processors include one or more security enabled processors that are the same as or similar to security enabled processor . The processors may include one or more general purpose or special purpose processors other than a security enabled processor. The computing system may also contain communication connection s that allow communications with various other systems. The computing system may also include one or more input devices such as a keyboard mouse pen voice input device touch input device etc. and one or more output devices such as a display speakers printer etc. coupled communicatively to the processor s and memory .

Memory may store program instructions that are loadable and executable on the processor s as well as data generated during execution of and or usable in conjunction with these programs. In the illustrated example memory stores an operating system which provides basic system functionality of the computing system and among other things provides for operation of the other programs and modules of the computing system . The operating system may be the same as or similar to the host OS .

Memory includes a set up module which may be the same as or similar to the set up module . Memory includes a protected memory area established by the security enabled processor. The protected memory area may be the same as or similar to the protected memory area .

Memory includes a loader module which may be the same as or similar to the loader module . The loader module may be loaded into the protected memory area upon request by a client system. Memory includes a TA certificate and one or more intermediate certificates which may be the same as or similar to the TA certificate and the intermediate certificate s respectively.

Memory includes an auditing certificate which may be the same as or similar to the auditing certificate . Memory includes a persistence module which may be the same as or similar to the persistence module .

In one example configuration the computing system comprises one or more processors and memory . The computing system may also contain communication connection s that allow communications with various other systems. The computing system may also include one or more input devices such as a keyboard mouse pen voice input device touch input device etc. and one or more output devices such as a display speakers printer etc. coupled communicatively to the processor s and memory .

Memory may store program instructions that are loadable and executable on the processor s as well as data generated during execution of and or usable in conjunction with these programs. In the illustrated example memory stores an operating system which provides basic system functionality of the computing system and among other things provides for operation of the other programs and modules of the computing system .

Memory includes an establishment module configured to transmit a request to an application hosting service such as the application hosting service to establish a secure execution environment within the application hosting service. The request includes an indication of a requested activation state of the secure execution environment such as a loader module and one or more parameters that are to be loaded into the secure execution environment.

The verification module is configured to receive from an instance of the loader module executing in a protected memory area of the application hosting service an encrypted attestation certificate. The encrypted attestation certificate is encrypted signed with a private key of a security enabled processor of the application hosting service. The verification module is in various embodiments configured to decrypt the attestation certificate using a SEP public key of the security enabled processor. Successful decryption of the attestation certificate with the SEP public key indicates that the attestation certificate was encrypted signed by the security enabled processor. The verification module is configured in various embodiments to receive one or more trust certificates such as a trusted authority certificate and one or more intermediate certificates to establish a chain of trust between the trusted authority and the security enabled processor as is described elsewhere within this Detailed Description. The one or more trust certificates may collectively vouch for the identity of the security enabled processor and or to indicate that the security enabled processor is secure.

The verification module is configured in various embodiments as part of or in addition to establishment of the chain of trust to receive an auditing certificate signed by a private key of an auditor entity indicating that the security enabled processor is physically uncompromised. The auditing certificate may be provided by the application hosting service or by some other entity.

The verification module is configured in various embodiments as part of or in addition to establishment of the chain of trust to receive a processor certificate such as from a manufacturer of the security enabled processor that indicates that the security enabled processor is secure.

Upon successfully establishing a chain of trust and verifying that any other certificates such as the auditing certificate and or a processor certificate are valid such as by decrypting such certificates using public keys of their issuers the verification module accepts that the security enabled processor is a legitimate security enabled processor.

The verification module is configured to extract an identifier from the attestation certificate and compare it to known identifier . The known identifier represents the requested activation state of the secure execution environment as identified in the request transmitted by the establishment module. The establishment module is configured to establish in response to verification by the verification module that the legitimacy of the security enabled processor is verified and that the digest matches the known identifier of the requested activation state an encrypted connection with the instance of the loader module executing in the secure execution environment. The known identifier may include a digest such as a hash of the requested activation state of the protected memory area. The known identifier may include a public key matching a private key that was used to sign the contents placed into the protected memory area in the requested activation state. The known identifier may be some other identifier that identifies the initial activation state. In some embodiments the establishment module produces a session key for the encrypted connection encrypts the session key using the SEP public key of the security enabled processor and transmits the encrypted session key to the instance of the loader module executing in the secure execution environment of the application hosting service. The encrypted connection utilizes the session key to send and receive data to and from the secure execution environment. Other embodiments of establishing an encrypted connection are possible without departing from the scope of this present Detailed Description

The establishment module instructs the instance of the loader module executing in the secure execution environment to load an application for execution within the secure execution environment. Neither the application nor the loader module need be included in the computing system . Rather the establishment module may instruct the loader module to download the application from some other location such as by providing a URI or URL for the application . The one or more parameters provided by the establishment module in the request sent to the application hosting service may identify the application for execution within the secure execution environment. The parameters may include a URI URL or other identifier of the application . Alternatively the parameters may include an application binary for the application that is directly loaded into the secure execution environment upon instantiation.

Memory may also include a client side persistence module configured to perform one or more functions associated with persisting the secure execution environment such as for example in order to migrate the secure execution environment between computers in an application hosting service or in order to re create the secure execution environment on the same computer in the application hosting service as is described in more detail with respect to . Such client side persistence functions include receiving a persistence key as part of a migration of a secure execution environment decrypting the persistence key with a private key of the computing system and transmitting the unencrypted persistence key to a persistence module such as persistence module residing on a migration computer of an application hosting service such as migration computer .

At the host operating system places the loader module and the parameters into an area of memory to be protected.

At the set up module instructs a security enabled processor SEP of the application hosting service such as the security enabled processor to instantiate in response to the request a protected memory area that includes the loader module and one more parameters identified by the request.

At the security enabled processor establishes a protected memory area by putting the area of memory that includes the loader module and the parameters into a protected state. The protected memory area is placed into a well known initial state. The well known initial state may be all memory cells of the protected memory area and all processor registers are all written to zero to one or to some other predetermined value or pattern of values. As described elsewhere within this Detailed Description data stored in the protected memory area is inaccessible to code stored and executed outside the protected memory area once the security enabled processor puts the protected memory area into the well known initial state. It is the security enabled processor that governs this access.

At the set up module instructs the loader module to execute within the protected memory area. The set up module may be able to pass instruction to the loader module through an entry gate or function provided by the security enabled processor that enables the secure execution environment to receive communication from the outside execution environment.

At the security enabled processor produces an identifier of the contents of the protected memory area. The identifier may be in various embodiments a digest such as a hash of the contents of the protected memory area in the activation state. The identifier may be a public key matching a private key used to sign the software stored in the protected memory area. At the point where the identifier is created the contents of the protected memory area includes the loader module and the one or more parameters included in the request but no other data or code. Thus the content of the protected memory area represents the requested activation state implicitly or explicitly identified by the request. In embodiments where the identifier is a digest the digest may be produced using one of various hash functions or other similar cryptographic functions.

At the security enabled processor stores the identifier in a manner that is accessible only to the security enabled processor. For example the security enabled processor may store the identifier in a secure register of the security enabled processor. The security enabled processor may store the identifier encrypted in a memory location. But in any event the identifier is stored in a way that makes it accessible only to the security enabled processor. The identifier may be created upon instruction by the loader module. In alternative embodiments the identifier may be created upon instantiation of the protected memory area without instruction from the loader module.

At an instance of the loader module executing in the secure execution environment instructs the security enabled processor to produce an attestation certificate including the identifier and signed by a private key of the security enabled processor. The private key of the security enabled processor is securely stored in the security enabled processor in a way that is accessible only to the security enabled processor. The attestation certificate may include other information besides the identifier such as a time stamp the one or more parameters or other data.

At the security enabled processor encrypts signs the attestation certificate using the private key of the security enabled processor and provides the signed attestation certificate to the loader module executing in the secure execution environment.

At the loader module provides the client system with certification that the secure execution environment is established in an initial activation state to execute only that software identified by the client system request. The certification may include a signed attestation certificate. The loader module may transmit the attestation certificate via an exit gate or function of the security enabled processor that enables the secure execution environment to communicate with code outside of the secure execution environment.

At the loader module and or the application hosting service transmits one or more trust certificates such as TA certificate and intermediate certificates that collectively vouch for the identity of the security enabled processor and or indicate that the security enabled processor is secure. This may also include an auditing certificate signed by a private key of an auditor entity indicating that the security enabled processor is physically intact. This may include a processor certificate from a manufacturer of the security enabled processor indicating that the security enabled processor is secure. In alternative embodiments the auditing certificate and or the processor certificate are delivered separately to the client system such as directly from the auditing entity a hardware manufacturer or third party. In one non limiting example the attestation certificate may include a URI identifying where the client system can retrieve the auditing certificate.

At the loader module obtains one or more application components to be executed in the secure execution environment. Obtaining one or more application components may include retrieving the one or more application components from a persistent storage of the application hosting service from a remote location such as via a URI identified in the parameters of the initial activation state or the authorization message or in some other location . Obtaining one or more application components may include retrieving the one or more application components from the client system such as via a cryptographically protected communication channel.

The one or more application components are selected by the client system either by transmitting a URI URL other identifier or an application binary application package or file system image. Transmission of the URI URL other identifier application binary application package file system image and so forth may be done via the request received at in the authorization message received at or received in some other manner such as via a secure communication connection established between the loader module and the client system channel using for example secure socket layer SSL protocol or other protocol .

In various non limiting embodiments the client system provides the loader module with an encryption key. In these embodiments obtaining the one or more application components may include decrypting the one or more components using the encryption key received through a secure communication channel . In various embodiments the encryption key may be transported in the clear over a secure communication channel. In other embodiments the encryption key may be encrypted with the public key of the security enabled processor and decrypted by the security enabled processor on behalf of the loader module. In various embodiments obtaining the one or more application components at may occur in a different sequence than is shown in without departing from the scope of the present disclosure. In one non limiting example of such alternative embodiments the one or more application components may have been obtained and loaded into the protected memory area as part of the initial activation state. At the loader module causes the security enabled application to execute the obtained one or more application components within the protected memory area.

At the client system receives from an instance of the loader module executing in a protected memory area of the application hosting service a certification such as an attestation certificate that the secure execution environment is established to execute in the activation state only the software identified by the request. The attestation certificate includes an identifier. Receipt of the attestation certificate indicates that the application hosting service purports to have established a secure execution environment. The identifier identifies the contents of a protected memory area of the secure execution environment upon its instantiation. The identifier may be in various embodiments a digest such as a hash of the contents of the protected memory area in the activation state. The identifier may be a public key matching a private key used to sign the software stored in the protected memory area.

At the client system receives one or more trust certificates such as the TA certificate and or the intermediate certificates . As described elsewhere within this Detailed Description the one or more trust certificates verifiably and collectively establish a chain of trust between a trusted authority and the security enabled processor of the application hosting service to indicate that the security enabled processor is secure.

At the client system receives an auditing certificate signed by a private key of an auditor entity indicating that the security enabled processor is physically uncompromised. The auditor entity periodically inspects the security enabled processors of the application hosting service as is described elsewhere within this Detailed Description.

At the client system receives a processor certificate from a manufacturer of the security enabled processor indicating that the security enabled processor is secure. The processor certificate may be one of the trust certificates received at . Alternatively the processor certificate may be separately received from the hardware manufacturer of the security enabled processor or third party vouching for the security and proper functioning of the security enabled processor.

At the client system verifies that the various certificates received at and are proper such as by verifying their authenticity using the various issuers public keys. If one or more of the certificates are invalid then the client system may reject the secure execution environment as invalid.

At the client system obtains a public key of the security enabled processor. The client system may obtain the public key from one of the trust certificates received at . Alternatively the client system may have pre stored the public key of the security enabled processor.

At the client system verifies the attestation certificate using the known public key of a security enabled processor of the application hosting service. The known public key corresponds to a private key of the security enabled processor. Successful decryption with the public key therefore indicates that the attestation certificate is verifiably from the security enabled processor.

At the client system extracts the identifier from the decrypted attestation certificate. And at the client system compares the identifier with an expected value of a known identifier of the requested activation state of the secure execution environment. A successful match indicates that the activation state of the secure execution environment instantiated by the security enabled processor of the application hosting service is as specified in the request transmitted at .

At the client system determines whether the identifiers match. If the identifiers do not match then the client system rejects the secure execution environment for not having the requested activation state. Identifiers that do not match indicate that the actual activation state of the secure execution environment has less more or different code and data than the requested activation state. A successful match of the identifiers along with verification that the attestation and trust certificates are valid permits the client system to have a high degree of confidence that a secure execution environment has been established with no untrusted code such that for example the secure execution environment is established with only code and data that is trusted by the client system.

At the client system authorizes the instance of the loader module executing in the protected memory area to execute one or more application components within the secure execution environment. In embodiments authorizing the loader module may include transmitting an indicator of the one or more application components to be executed in the secure execution environment. The indicator may be a URI URL other identifier or an application binary application package or file system image of the one or more application components to be executed. In various embodiments transmission of the indicator may be part of transmitting the request at . In other embodiments transmitting the indicator may utilize a separate message such as for example a message sent over a secure connection established using SSL or other protocol or a message transmitted at some previous time in order to pre stage the one or more application components to be executed in the secure execution environment. The client system may generate and transmit to the loader module an encryption key to be used to decrypt the various messages and or the indicator.

In conventional hosted computing migration or re creation of a hosted consumer s execution is handled by a virtual machine monitor. In conventional hosted computing migration a host virtual machine monitor inspects the state of the execution copies all of the memory pages writes the memory pages out to a disk or transfers them via a network and starts up the execution on the same or a different machine. But because code and data stored within a protected memory area of a secure execution environment according to embodiments of the present disclosure are inaccessible to code executing outside the protected memory area a host OS is not able to inspect the state of execution or copy the state information to a disk in order to migrate to another machine. Instead the code running inside the protected memory area handles various aspects of the re creation and migration processes.

The host OS determines that there is a need to persist the secure execution environment. Persisting the secure execution environment may be for the purpose of migrating the secure execution environment from the host computer to the migration computer . Alternatively persisting the secure execution environment may be for the purpose of re creating the execution on the host computer . In any event the host OS is configured to call an entry gate or function provided by the security enabled processor which permits the host OS to instruct the secure execution environment to persist its present execution state to persistent storage.

The persistence module receives the persistence instruction via the entry gate and in response creates an encrypted checkpoint . To accomplish this the persistence module shuts down execution of the loader module and the application including for example causing the threads to quiesce and writes the processor registers to protected memory. At that point only one thread the suspend thread of the persistence module may be left running. The various memory pages are enumerated and stored along with the processor registers as state information . The contents of the protected memory area including the application and the state information are stored as the encrypted checkpoint on persistent storage . The encrypted checkpoint is encrypted with a persistence key that is generated by the persistence module . The persistence module encrypts the persistence key using a public key of the client system . Alternatively the persistence key is encrypted using a public key of the migration security enabled processor or a public key of the security enabled processor . The encrypted persistence key is stored as sealed persistence key in persistent storage .

In embodiments that utilize the persistence of the execution state to migrate the execution to the migration computer a migration host OS of the migration computer causes a migration protected memory area to be established. In embodiments that utilize the persistence of the execution state to re create the execution on the host computer in a new protected memory area due to for example a reboot of the host computer or for other reason the host OS causes a new protected memory area to be established on host computer . The migration protected memory area or the new protected memory area to be established on host computer is instantiated in a manner that is described elsewhere within this Detailed Description in particular in the descriptions of .

In embodiments where the persistence of the execution state is for the purpose of migrating it to migration computer the migration host OS calls an entry gate or function of the migration security enabled processor to cause the loader module to launch or execute the persistence module within the migration protected memory area . The persistence module copies the sealed persistence key into the migration protected memory area and transmits the sealed persistence key to the client system . The client system decrypts the sealed persistence key using the private key of the client system and transmits it back to the persistence module via the encrypted connection established during the initialization of the secure execution environment on the migration computer . Alternatively in embodiments that encrypt the persistence key with the public key of the migration security enabled processor the sealed persistence key is unsealed using the private key of the migration security enabled processor .

In embodiments that utilize the persistence of the execution state for the purpose of re creating the execution on the host computer the host OS calls an entry gate or function of the security enabled processor to cause the loader module to launch or execute the persistence module within a newly re created protected memory area . The persistence module copies the sealed persistence key into the newly recreated protected memory area and transmits the sealed persistence key to the client system . The client system decrypts the sealed persistence key using the private key of the client system and transmits it back to the persistence module via the encrypted connection established during the initialization of the secure execution environment on the migration computer . Alternatively in embodiments that encrypt the persistence key with the public key of the security enabled processor the sealed persistence key is unsealed using the private key of the security enabled processor .

The persistence module copies the encrypted checkpoint into the migration protected memory area or the newly recreated protected memory area and uses the unsealed persistence key to decrypt the encrypted checkpoint . The persistence module uses the state information from the encrypted checkpoint to repopulate the memory pages associated with the executing threads from the loader module and the application and to repopulate the registers in the migration security enabled processor or the security enabled processor . Thus in various embodiments the execution of the secure execution environment on the host computer is either migrated to the migration computer or re created on the host computer .

In various embodiments the secure execution environment on migration computer can be instantiated before migration processes begin such as at the same time that the secure execution environment on host computer is initialized. The persistence module on the migration protected memory area can be pre populated with the private key of the client system to enable it to decrypt the sealed persistence key without transmitting it to the client system for unsealing. In some embodiments instead of using the public key of the client system to encrypt the persistence key the sealed persistence key is encrypted using a public key of the migration security enabled processor so that it can be decrypted using the private key of the migration security enabled processor .

At a persistence module such as the persistence module generates a persistence key. The persistence key is used to encrypt a checkpoint of the secure execution environment.

At the persistence module encrypts the persistence key. In embodiments the persistence module encrypts the persistence key using a public key of a client system such as the client system . In alternative embodiments where the identity of the host migration computer is known the persistence module encrypts the persistence key using a public key of a security enabled processor of the migration computer.

At the persistence module writes the encrypted persistence key to persistent storage. Alternatively the persistence module transmits the persistence key to the client system or to a pre established secure execution environment on the migration computer.

At the persistence module shuts down execution of the processes and threads executing in the secure execution environment and writes state information to the protected memory area.

At the persistence module encrypts the contents of the protected memory area using the persistence key to generate a checkpoint. The contents of the protected memory area include the state information such as the page files and register data associated with the secure execution environment.

At the encrypted checkpoint is stored on a persistent storage such as a hard disk drive of the application hosting service or some other persistent storage. Alternatively the encrypted checkpoint is loaded directly into a pre established protected memory area of the migration computer such as over an encrypted communication channel to the protected memory area of the migration computer.

At the protected memory area is initialized on the migration computer. The host operating system of the migration computer causes the loader module in the protected memory area of the migration computer to load and execute the persistence module within the secure execution environment of the migration computer.

At the persistence module executing within a secure execution environment of the migration computer transmits the encrypted persistence key to the client system. In alternative embodiments where the persistence key is encrypted using the public key of the security enabled processor of the migration computer the persistence key is not transmitted to the client system instead the persistence module requests that the security enabled processor decrypt the persistence key. In still another alternative embodiment where the secure execution environment is pre established on the migration computer the pre established secure execution environment on the migration computer may already have the private key of the client system obviating the need to transmit the encrypted persistence key to the client system. At the secure execution environment on the migration computer receives the unencrypted persistence key.

At the persistence module decrypts the encrypted checkpoint using the persistence key and loads the state information in the checkpoint into the page files and registers of the new secure execution environment to restore the state of execution and the migration process completes.

At a persistence module generates a persistence key. The persistence key is used to encrypt a checkpoint of the secure execution environment as described in more detail below.

At the persistence module encrypts the persistence key. In embodiments the persistence module encrypts the persistence key using a public key of a client system such as the client system . In alternative embodiments the persistence module encrypts the persistence key using a public key of a security enabled processor of the host computer.

At the persistence module writes the encrypted persistence key to persistent storage. Alternatively the persistence module transmits the persistence key to the client system or to a pre established secure execution environment on the host computer such as over a secure communication channel to the newly created protected memory area of the pre established secure execution environment.

At the persistence module shuts down execution of the secure execution environment and writes the state information to the protected memory area. The state information may include the virtual memory pages and register context associated with the secure execution environment. At the persistence module encrypts the state information using the persistence key to generate a checkpoint.

At the encrypted checkpoint is stored on a persistent storage such as a hard disk drive of the application hosting service or some other persistent storage. Alternatively the encrypted checkpoint is loaded directly into a newly established protected memory area such as over a communication channel to the newly created protected memory area.

At a new protected memory area is initialized on the host computer. At the host operating system of the host computer places the loader module and one or more parameters into the memory area to be protected.

At the persistence module executing within the newly created secure execution environment of the host computer reads the sealed persistence key from persistent storage.

At the persistence module in the newly created secure execution environment unseals the persistence key. In embodiments where the persistence key is encrypted using the public key of the security enabled processor of the host computer the persistence module requests that the security enabled processor decrypt the persistence key. In other embodiments where the secure execution environment is pre established on the host computer the private key of the security enabled processor of the host computer is used to unseal the persistence key.

At the persistence module reads the encrypted checkpoint from the persistent storage. At the persistence module decrypts the encrypted checkpoint using the persistence key and loads the state information in the checkpoint into the virtual memory and register context of the new secure execution environment to restore the state of execution and the re creation process completes.

Depending on the configuration and type of computing device used memories and of the computing systems and in respectively may include volatile memory such as random access memory RAM and or non volatile memory such as read only memory ROM flash memory etc. . Memories and may also include additional removable storage and or non removable storage including but not limited to flash memory magnetic storage optical storage and or tape storage that may provide non volatile storage of computer readable instructions data structures program modules and other data for computing systems and .

Memories and are examples of computer readable media. Computer readable media includes at least two types of computer readable media namely computer storage media and communications media.

Computer storage media includes volatile and non volatile removable and non removable media implemented in any process or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to phase change memory PRAM static random access memory SRAM dynamic random access memory DRAM other types of random access memory RAM read only memory ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology compact disk read only memory CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other non transmission medium that can be used to store information for access by a computing device.

In contrast communication media may embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transmission mechanism. As defined herein computer storage media does not include communication media.

Although the disclosure uses language that is specific to structural features and or methodological acts the invention is not limited to the specific features or acts described. Rather the specific features and acts are disclosed as illustrative forms of implementing the invention.

