---

title: Protecting computers against virtual machine exploits
abstract: Computers are protected against virtual machine exploits. A computer includes an exploit monitor for a virtual machine running in the computer. Loading of a virtual machine program in the virtual machine triggers the exploit monitor to modify the virtual machine program after the virtual machine program is loaded in the virtual machine but before the virtual machine program is executed in the virtual machine. The modification includes adding monitoring code, such as one or more checkpoints, in the virtual machine program. When the monitoring code is reached during execution of the virtual machine program in the virtual machine, the virtual machine program is evaluated to determine whether or not the virtual machine program is a virtual machine exploit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484732&OS=08484732&RS=08484732
owner: Trend Micro Incorporated
number: 08484732
owner_city: Tokyo
owner_country: JP
publication_date: 20120201
---
The present invention relates generally to computer security and more particularly but not exclusively to methods and apparatus for protecting computers against virtual machine exploits.

A virtual machine program comprises virtual machine code that is executed in a virtual machine e.g. a JAVA Virtual Machine . In contrast to virtual machine code native code is compiled or interpreted to run with a particular processor such as an x 86 class processor. Malicious codes that take advantage of vulnerabilities of virtual machine programs are called virtual machine exploits. The number of virtual machine exploits continually increases posing a serious danger to computers worldwide. Unfortunately currently available antivirus solutions do not adequately protect computers from virtual machine exploits because a typical antivirus relies on traditional hook points that are too far removed from the virtual machine environment.

In one embodiment a method of protecting a computer against a virtual machine exploit includes loading an exploit monitor in a virtual machine running in a computer. Loading of a virtual machine program into the virtual machine is detected. The exploit monitor modifies the virtual machine program to include a checkpoint after the virtual machine program has been loaded into the virtual machine but before the virtual machine program runs in the virtual machine. The virtual machine program is executed in the virtual machine. Determination of whether or not the virtual machine program comprises a virtual machine exploit is made when the checkpoint is reached during execution of the virtual machine program in the virtual machine.

In another embodiment a computer comprises a processor and a memory comprising computer readable program code executed by the processor the memory comprises a virtual machine a virtual machine program loaded into the virtual machine and an exploit monitor configured to modify the virtual machine program upon loading of the virtual machine program into the virtual machine but before the virtual machine program is executed in the virtual machine the exploit monitor being configured to insert a checkpoint into the virtual machine program to determine whether the virtual machine program comprises a virtual machine exploit when the checkpoint is reached during execution of the virtual machine program.

In another embodiment a method of protecting a computer against a virtual machine exploit includes detecting loading of a virtual machine program into a virtual machine running in a computer. The virtual machine program is modified to include monitoring code after the virtual machine program has been loaded into the virtual machine but before the virtual machine program runs in the virtual machine. The virtual machine program is executed in the virtual machine. The monitoring code is executed in the virtual machine to determine whether or not the virtual machine program comprises a virtual machine exploit.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

Referring now to there is shown a schematic diagram of a computer in accordance with an embodiment of the present invention. The computer may be a desktop computer a laptop computer a server computer or other computing device. The computer may have fewer or more components to meet the needs of a particular application. The computer may include a processor such as those from the Intel Corporation or Advanced Micro Devices for example. The computer may have one or more buses coupling its various components. The computer may include one or more user input devices e.g. keyboard mouse one or more data storage devices e.g. hard drive optical disk USB memory a display monitor e.g. LCD flat panel monitor CRT a computer network interface e.g. network adapter modem and a main memory e.g. RAM . The computer network interface may be coupled to a computer network which in this example includes the Internet.

The computer is a particular machine as programmed with software modules stored non transitory in the main memory for execution by the processor . In the example of the software modules in the memory include an operating system a virtual machine an exploit monitor and one or more virtual machine VM programs . The software modules comprise computer readable program codes. The computer may be configured to perform its functions by executing the software modules which may be loaded from the data storage device to the main memory . The software modules may also be received over the computer network interface for loading into the main memory . The software modules may also be made available in other computer readable medium including optical disk flash drive and other memory devices.

The operating system may comprise a commercially available operating system. In one embodiment the operating system comprises the Microsoft Windows operating system. The virtual machine may comprise a conventional virtual machine such as a JAVA virtual machine or a Flash ActionScript virtual machine Flash AVM . A virtual machine program comprises virtual machine code configured to be executed by a virtual machine. In one embodiment where the virtual machine comprises a JAVA virtual machine the virtual machine program comprises JAVA bytecode.

The exploit monitor may comprise virtual machine code configured to be executed by the virtual machine to protect the computer against virtual machine exploits. The exploit monitor may be configured to be loaded into the virtual machine when the virtual machine is started up to detect loading of a virtual machine program into the virtual machine to modify the virtual machine program to include monitoring code before the virtual machine program is executed by the virtual machine and to monitor and analyze the actions of the virtual machine program during runtime i.e. when the virtual machine program is executed by the virtual machine to determine whether or not the virtual machine program is a virtual machine exploit. Separate exploit monitors may be implemented for different types of virtual machines . For example an exploit monitor for JAVA bytecode may be implemented for a JAVA virtual machine another exploit monitor for Flash ActionScript bytecode may be implemented for Flash ActionScript virtual machine and so on.

In the example of whenever a virtual machine is started a corresponding i.e. compatible exploit monitor is injected into the virtual machine . For example an exploit monitor for detecting JAVA bytecode exploits is injected into a JAVA virtual machine when the JAVA virtual machine is started an exploit monitor for detecting Flash ActionScript bytecode is injected into a Flash ActionScript virtual machine when the Flash ActionScript virtual machine is started and so on. The method of may thus include a step of determining the type of virtual machine being started and selecting an exploit monitor from a plurality of exploit monitors the selected exploit monitor being for the type of the virtual machine being started and injecting the selected exploit monitor into the virtual machine see arrow .

A virtual machine program is normally stored in a binary file with a format compatible with the virtual machine where the virtual machine program is to be run. For example the JAVA programming language stores JAVA bytecode in accordance with the class file format with .class extension name . When a virtual machine program is started the computer loads the binary file of the virtual machine program into the virtual machine. The binary file of the virtual machine program contains the virtual machine code of the virtual machine program and definitions of object oriented programming OOP methods. The virtual machine code also referred to as bytecode comprises virtual machine specific operation codes.

When a new binary file of a virtual machine program is loaded into the virtual machine see arrow the exploit monitor dynamically analyzes the virtual machine program and modifies the virtual machine program to create a modified virtual machine program see arrow . The exploit monitor modifies the virtual machine program at runtime when the binary file of the virtual machine program is loaded into the virtual machine but before the virtual machine program is executed by the virtual machine . The modified virtual machine program comprises the virtual machine program plus some monitoring code configured to allow the exploit monitor to evaluate the virtual machine program see arrow and make a determination of whether or not the virtual machine program comprises a virtual machine exploit. The exploit monitor may be configured to perform one or more response actions upon detecting that the virtual machine program performs actions indicative of a virtual machine exploit. The response actions may include alerting the user or an administrator blocking execution of the virtual machine program and so on.

In one embodiment the exploit monitor is configured to analyze the format of the virtual machine program to obtain the control flow graphic CFG of the virtual machine program and decide where to insert checkpoints within the virtual machine program . The exploit monitor then modifies the virtual machine program by inserting one or more checkpoints into the virtual machine program . In the checkpoints the state of the virtual machine e.g. stack trace API parameters return value etc. may be checked to determine whether the virtual machine program is performing a malicious action indicative of an exploit. For example a checkpoint may invoke an OOP method for detecting virtual machine exploits. The OOP method may be but not necessarily a part of the exploit monitor . For example the OOP method may call back into the exploit monitor or a module of the exploit monitor .

In the example of a virtual machine program makes API application programming interface calls to perform various functions. For example the virtual machine program may call an API having the bytecode an API having the bytecode an API and an API . When the binary file of the virtual machine program is loaded into the virtual machine the exploit monitor dynamically analyzes the virtual machine codes of the virtual machine program and inserts checkpoints where appropriate. For example the exploit monitor may be configured to insert checkpoints before or around particular instructions known to be exploited by malicious codes. In the example of the exploit monitor inserted a checkpoint between the instruction and the instruction of the bytecode . The exploit monitor also inserted a checkpoint before the instruction of the bytecode . The exploit monitor did not find a suspicious instruction or format in the API and API and accordingly did not include a checkpoint in them.

When the virtual machine program calls the API see block the checkpoint is reached and executed to allow the exploit monitor to receive and check the state of the virtual machine to determine whether or not the virtual machine program is performing a malicious action indicative of a virtual machine exploit see arrow . Similarly when the virtual machine program calls the API see block the checkpoint is reached and executed to allow the exploit monitor to receive and check the state of the virtual machine to determine whether or not the virtual machine program is performing a malicious action indicative of a virtual machine exploit see arrow . In the example of the control flow goes to call the API when the API returns a success. Otherwise the control flow goes to call the API . The API is called after execution of the API or API . The control flow graphic of is provided for illustration purposes only.

JAVA virtual machine code is stored in a format referred to as a JAVA class file which usually has the .class extension name. In a JAVA class file an OOP method is stored in a data structure named method info which contains a description of the OOP method as well as the virtual machine code JAVA bytecode in this example for the OOP method. The virtual machine code is executed by the JAVA virtual machine when the OOP method is called by a JAVA program.

The JAVA exploit monitor is registered as a JAVA agent library. Each time a new JAVA virtual machine starts the JAVA exploit monitor is injected into the JAVA virtual machine. When the JAVA virtual machine loads a new JAVA class file the JAVA exploit monitor gets notified and the JAVA exploit monitor then analyzes the JAVA class file and dynamically adds one or more check points to the JAVA class file depending on the content of the JAVA class file.

In one embodiment the JAVA exploit monitor adds one or more checkpoints to the JAVA class file when the JAVA class file includes a class that is usually exploited by a virtual machine exploit. For example there is a JAVA runtime class named Java.Security.AllPermission . By creating an instance of this class the running virtual machine program may get full access to use and control of the local computer. Java virtual machine exploits often use the AllPermission class combined with some privilege escalation vulnerabilities in JAVA virtual machines e.g. CVE 2008 5353 CVE 2010 0094 to get full permission to use the computer in order to perform malicious actions such as to download malicious payloads e.g. computer viruses execute malicious codes etc. To monitor this dangerous operation the JAVA exploit monitor adds a check point to the construct OOP method of the AllPermission class the OOP method being referred to as the method . shows the original bytecode of the method before modification by the JAVA exploit monitor .

The just provided example of detecting JAVA virtual machine exploits may also be employed to detect JAVA attacks that involve buffer overflow memory corruption sandbox privilege escalation and so on. It can also be used in a backend to distinguish malicious JAVA files from normal ones.

Methods and apparatus for protecting computers against virtual machine exploits have been disclosed. While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

