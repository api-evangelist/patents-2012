---

title: Map rendering using interpolation of style parameters across zoom levels
abstract: A graphics or image rendering system, such as a map image rendering system, may receive map data associated with a set of zoom levels, where the map data includes style attribute data corresponding to various features of a map surface at corresponding zoom levels. The system may interpolate at least some of the style parameter values from the received map data to provide style parameter values over a range of zoom levels.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08803901&OS=08803901&RS=08803901
owner: Google Inc.
number: 08803901
owner_city: Mountain View
owner_country: US
publication_date: 20120924
---
The present application is a continuation of U.S. application Ser. No. 13 247 637 entitled Map Rendering Using Interpolation of Style Parameters Across Zoom Levels filed on Sep. 28 2011 now U.S. Pat. No. 8 274 524 which is hereby incorporated by reference herein in its entirety.

The present disclosure relates to map rendering systems such as electronic map display systems and more specifically to a map rendering system that renders elements of map features using interpolated style parameter values across different zoom levels.

Digital maps are found in and may be displayed by a wide variety of devices including mobile phones car navigation systems hand held global positioning system GPS units computers and many websites. Although digital maps are easy to view and to use from an end user s perspective creating a digital map is a difficult task and can be a time consuming process. In particular every digital map begins with storing in a map database a set of raw data corresponding to millions of streets and intersections and other features to be displayed as part of a map. The raw map data that is stored in the map database and that is used to generate digital map images is derived from a variety of sources with each source typically providing different amounts and types of information. This map data must therefore be compiled and stored in the map database before being accessed by map display or map rendering applications and hardware.

There are of course different manners of digitally rendering map images referred to as digital map images based on map data stored in a map database. One method of rendering a map image is to store map images within the map database as sets of rasterized or pixilated images made up of numerous pixel data points with each pixel data point including properties defining how a particular pixel in an image is to be displayed on an electronic display device. While this type of map data is relatively easy to create and store the map rendering technique using this data typically requires a large amount of storage space for comprehensive digital map images and it is difficult to manipulate the digital map images as displayed on a display device in very many useful manners.

Another more flexible methodology of rendering images uses what is traditionally called vector image data. Vector image data is typically used in high resolution and fast moving imaging systems such as those associated with gaming systems and in particular three dimensional gaming systems. Generally speaking vector image data or vector data includes data that defines specific image objects or elements also referred to as primitives to be displayed as part of an image via an image display device. In the context of a map image such image elements or primitives may be for example individual roads text labels e.g. map or street labels areas text boxes buildings points of interest markers terrain features bike paths etc. Each image element is generally made up or drawn as a set of one or more triangles of different sizes shapes colors fill patterns etc. with each triangle including three vertices interconnected by lines. Thus for any particular image element the image database stores a set of vertex data points with each set of vertex data points defining a particular vertex of one of the triangles making up the image element. Generally speaking each vertex data point includes data pertaining to a two dimensional or a three dimensional position of the vertex in an X Y or an X Y Z coordinate system for example and various vertex attributes defining properties of the vertex such as color properties fill properties line width properties for lines emanating from the vertex etc.

During the image rendering process the vertices defined for various image elements of an image to be rendered are provided to and are processed in one or more image shaders which operate in conjunction with a graphics processing unit GPU such as a graphics card or a rasterizer to produce a two dimensional image on a display screen. Generally speaking an image shader is a set of software instructions used primarily to calculate rendering effects on graphics hardware with a high degree of flexibility. Image shaders are well known in the art and various types of image shaders are available in various application programming interfaces APIs provided by for example OpenGL and Direct3D to define special shading functions. Basically image shaders are simple programs in a high level programming language for example that describe or determine the traits of either a vertex or a pixel. Vertex shaders for example define the traits e.g. position texture coordinates colors etc. of a vertex while pixel or fragment shaders define the traits color z depth and alpha value of a pixel. A vertex shader is called for each vertex in an image element or primitive so that for each vertex input into the vertex shader the vertex shader produces one updated vertex output. Each vertex output by the vertex shader is then rendered as a series of pixels onto a block of memory that will eventually be sent to a display screen.

Unfortunately there are certain image processing actions such as changing colors fill properties line widths etc. of image objects or elements on a displayed map image that require the downloading of new vector data with new properties or vertex attributes from the map database or from the application or system creating the vector data points. As a result it may be relatively time consuming to simply change style properties of rendered images such as the colors or fill patterns of image elements such as roads for example the line widths used to display image element outlines text etc. because doing so means that new vector data with the new vertex attributes style attributes defining these new properties must be sent to the rendering engine from the map database or other application. As a result it is still relatively difficult to change or modify vector images created using vector data to perform simple visual modifications of features within the images themselves at the image rendering device such as changing properties of map elements like line widths color properties etc.

A computer implemented method for rendering a map on a display device includes determining a first set of style parameters for a feature of a map at a first zoom level a second set of style parameters for a second zoom level and a third set of style parameters for a third zoom level where the third set of style parameters is determined by interpolating the first and second set of style parameters. The method then renders or displays the first feature of the map in a viewing window based on the interpolated third set of style parameters. The method further determines a fourth set of style parameters based on a fourth zoom level and determines the third set of style parameters based on the first second and fourth set of style parameters. The method further determines whether to retrieve the fourth set of style parameters based on a current bandwidth a current processor capacity or a resolution setting. The method includes using a linear interpolation process and or a polynomial interpolation process.

In one embodiment style attribute information may be stored as a style lookup table and the method may determine style attribute tables that are associated with the first second third and or fourth zoom levels.

In one embodiment the method may determine to retrieve only a subset of available style parameters for a given zoom level based on any combination of an interpolation attribute a priority attribute a current bandwidth or a current processor capacity.

In another embodiment a computer device includes a communications network interface one or more processors one or more memories coupled to the one or more processors and a display device coupled to the one or more processors. The one or more memories include computer executable instructions that are executed on the processor to determine a first view of a map surface defined by a first magnification of the surface of the map where a first zoom level of the first view corresponds to the first magnification. The computer executable instructions are executed to retrieve a first set of style parameters for a first feature of the map surface the first set of style parameters corresponding to the first zoom level. The computer executable instructions are executed to determine a second view of the map surface defined by a second magnification of the map surface where a second zoom level of the second view corresponds to the second magnification. The computer executable instructions are executed to retrieve a second set of style parameters for the first feature of the map surface the second set of style parameters corresponding to a third zoom level where the third zoom level corresponds to a third magnification different from the first and the second magnification. The computer executable instructions are executed to determine a third set of style parameters for the first feature of the map surface at the second zoom level based on interpolating the first set of style parameters and the second set of style parameters when the second zoom level is between the first and third zoom level. The computer executable instructions are executed to render the first feature in the second view at the second zoom level using the third set of style parameters.

The computer device executes the computer executable instructions to retrieve the first and the second set of style parameters as a subset of style parameters available for retrieval based on a style attribute setting associated with each of the style parameters indicating whether the style parameter is designated for interpolation.

The computer device executes the computer executable instructions to retrieve the first and the second set of style parameters as a subset of style parameters available for retrieval based on a style priority attribute associated with each of the style parameters.

The computer device executes the computer executable instructions to retrieve the first and the second set of style parameters as a subset of style parameters available for retrieval based on whether a current processor capacity is above a threshold.

The computer device executes the computer executable instructions to retrieve the first and the second set of style parameters as a subset of style parameters available for retrieval based on whether a current available bandwidth is above a threshold.

The computer device executes the computer executable instructions to retrieve a fourth set of style parameters for the first feature of the map surface when a resolution setting is increased the fourth set of style parameters corresponding to a fourth zoom level wherein the fourth zoom level corresponds to a fourth magnification different from the first the second and the third magnification. The computer device executes the computer executable instructions to determine the third set of style parameters for the first feature of the map surface at the second zoom level based on interpolating at least the first set of style parameters at the first magnification the second set of style parameters at the second magnification and the fourth set of style parameters at the fourth magnification wherein the third magnification is different from the first second and fourth magnification.

In another embodiment a computer device includes a communications network interface one or more processors one or more memories coupled to the one or more processors and a display device coupled to the one or more processors. The one or more memories include computer executable instructions that are executed on the processor to determine a first view of a map surface defined by a first magnification of the surface of the map and where a first zoom level of the first view corresponds to the first magnification. The computer executable instructions are executed to retrieve a first set of style parameters for a first feature of the map surface the first set of style parameters corresponding to a zoom level closest to the first zoom level. The computer executable instructions are executed to determine if the first set of style parameters corresponds to the first zoom level. The computer executable instructions are executed to render a first feature in the first view at the first zoom level using the first set of style parameters if the first set of style parameters corresponds to the first zoom level. The computer executable instructions are executed to retrieve a second set of style parameters for the first feature of the map surface if the first set of style parameters do not correspond to the first zoom level the second set of style parameters corresponding to a third zoom level where the third zoom level corresponds to a third magnification different from the first and the second magnification and where the first zoom level is between the second and the third zoom level. The computer executable instructions are executed to determine a third set of style parameters for the first feature of the map surface at the first zoom level based on interpolating the first and the second set of style parameters. The computer executable instructions are executed to render the first feature in the first view at the first zoom level using the third set of style parameters.

The present application generally relates to techniques for rendering map features during zooming operations of a viewing window. A graphics or image rendering system such as a map image rendering system may receive map data for a given set of zoom levels where the map data includes style parameter values for various features of a map surface where the style parameter values correspond to a particular zoom level. The techniques may interpolate at least some of the style parameter values from the received map data to provide style parameter values over a range of zoom levels and the map image rendering system may render a viewing window at a zoom level based on the interpolated style parameters.

Referring now to a map related imaging system according to an embodiment includes a map database stored in a server or in multiple servers located at for example a central site or at various different spaced apart sites and also includes multiple map client devices and each of which stores and implements a map rendering device or a map rendering engine. The map client devices may be connected to the server via any hardwired or wireless communication network including for example a hardwired or wireless local area network LAN metropolitan area network MAN or wide area network WAN the Internet or any combination thereof. The map client devices may be for example mobile phone devices computers such a laptop tablet desktop or other suitable types of computers or components of other imaging systems such components of automobile navigation systems etc. Moreover the client devices may be communicatively connected to the server via any suitable communication system such as any publically available and or privately owned communication network including those that use hardwired based communication structure such as telephone and cable hardware and or wireless communication structure such as wireless communication networks including for example wireless LANs and WANs satellite and cellular phone communication systems etc.

The map database may store any desired types or kinds of map data including raster image map data and vector image map data. However the image rendering systems described herein are best suited for use with vector image data which defines or includes a series of vertices or vertex data points for each of numerous sets of image objects elements or primitives within an image to be displayed. Generally speaking each of the image objects defined by the vector data will have a plurality of vertices associated therewith and these vertices will be used to display a map related image object to a user via one or more of the client devices . As will also be understood each of the client devices includes an image rendering engine having one or more processors one or more memories a display device and in many cases a rasterizer or graphics card which are generally programmed and interconnected in known manners to implement or to render graphics images on the associated display device . The display device for any particular client device may be any type of electronic display device such as a liquid crystal display LCD a light emitting diode LED display a plasma display a cathode ray tube CRT display or any other type of known or suitable electronic display.

Generally speaking the map related imaging system of operates such that a user at one of the client devices opens or executes a map application not shown in that operates to communicate with and obtain map information or map related data from the map database via the server and that then displays or renders a map image based on the received map data. The map application may allow the user to view different geographical portions of the map data stored in the map database to zoom in or zoom out on a particular geographical location to rotate spin or change the two dimensional or three dimensional viewing angle of the map being displayed etc. More particularly when rendering a map image on a display device or a display screen using the system described below each of the client devices downloads map data in the form of vector data from the map database and processes that vector data using one or more image shaders to render an image on the associated display device .

Referring now to an image generation or imaging rendering device according to an embodiment associated with or implemented by one of the client devices is illustrated in more detail. The image rendering system of includes two processors and two memories and a user interface and a rasterizer . In this case the processor the memory and the rasterizer are disposed on a separate graphics card denoted below the horizontal line although this need not be the case in all embodiments. For example in other embodiments a single processor may be used instead. In addition the image rendering system includes a network interface a communications and storage routine and one more map applications having map display logic therein stored on the memory which may be executed on the processor e.g. which may be a central processing unit CPU . Likewise one or more image shaders in the form of for example vertex shaders and fragment shaders are stored on the memory and are executed on the processor . The memories and may include either or both volatile and non volatile memory and the routines and shaders are executed on the processors and to provide the functionality described below. The network interface includes any well known software and or hardware components that operate to communicate with for example the server of via a hardwired or wireless communications network to obtain image data in the form of vector data for use in creating an image display on the user interface or display device . The image rendering device also includes a data memory which may be a buffer or volatile memory for example that stores vector data received from the map database the vector data including any number of vertex data points and one or more lookup tables as will be described in more detail.

During operation the map logic of the map application executes on the processor to determine the particular image data needed for display to a user via the display device using for example user input GPS signals prestored logic or programming etc. The display or map logic of the application interacts with the map database using the communications routine by communicating with the server through the network interface to obtain map data preferably in the form of vector data or compressed vector data from the map database . This vector data is returned via the network interface and may be decompressed and stored in the data memory by the routine . In particular the data downloaded from the map database may be a compact structured or otherwise optimized version of the ultimate vector data to be used and the map application may operate to transform the downloaded vector data into specific vertex data points using the processor . In one embodiment the image data sent from the server includes vector data generally defining data for each of a set of vertices associated with a number of different image elements or image objects to be displayed on the screen and possibly one or more lookup tables which will be described in more detail below. If desired the lookup tables may be sent in or may be decoded to be in or may be generated by the map application to be in the form of vector texture maps which are known types of data files typically defining a particular texture or color field pixel values to be displayed as part of an image created using vector graphics. More particularly the vector data for each image element or image object may include multiple vertices associated with one or more triangles making up the particular element or object of an image. Each such triangle includes three vertices defined by vertex data points and each vertex data point has vertex data associated therewith. In one embodiment each vertex data point includes vertex location data defining a two dimensional or a three dimensional position or location of the vertex in a reference or virtual space as well as an attribute reference. Each vertex data point may additionally include other information such as an object type identifier that identifies the type of image object with which the vertex data point is associated. The attribute reference referred to herein as a style reference or as a feature reference references or points to a location or a set of locations in one or more of the lookup tables downloaded and stored in the data memory .

Style parameters may include a fill color e.g. for area objects an outline color an outline width an outline dashing pattern and an indication of whether to use rounded end caps e.g. for road objects an interior color an interior width an interior dashing pattern and interior rounded end caps e.g. for road objects a text color and a text outline color e.g. for text objects an arrow color an arrow width an arrow dashing pattern e.g. for arrow objects a text box fill color and a set of text box outline properties e.g. for text box objects to name but a few. Of course different ones of the vertex style attributes provided may be applicable or relevant to only a subset of image objects and thus the vertex style data points associated with a particular type of image object may only refer to a subset of the vertex attributes listed for each style.

Generally speaking the techniques for rendering a map involve determining a viewing window of a map surface at a first zoom level and determining a set of style parameters for a plurality of zoom levels a set comprises one or more elements . When a viewing window is to be rendered at the first zoom level the techniques described herein may interpolate across the plurality of style parameters to provide style parameter values appropriate for the first zoom level.

A zoom level generally corresponds to a magnification which is used in part to define a displayable area of a map surface within a viewing window. A magnification of the viewing window may correspond with a scale for which the map surface is rendered or drawn. For example where magnification or scale is expressed as a ratio such as 1 1 000 one of any unit of measurement on the viewing window may correspond exactly or approximately to 1 000 actual units. When the viewing window size is measured in inches the distance scale may translate an inch of the viewing window to a length of 1 000 miles or kilometers .

Some computerized maps allow users to zoom in or zoom out of a map surface where a zoom level generally corresponds to a magnification of the viewing window that displays the map surface. Unlike a paper map that displays all possible map surface data in one fixed rendering computer mapping applications may only display certain map features that can be resolved by eye at a certain zoom level or magnification corresponding to a distance to the object while excluding other map features that normally cannot be seen by eye at the same zoom level without the aid of a magnification device. In these computer mapping applications increasing a zoom level of a viewing window may not only enlarge features already displayed on a map but also cause the mapping application to draw additional features of the map.

Not all zoom level increases however warrant drawing additional map features. For example where an increase in magnification between a first and a second zoom level of a mapping application is relatively small existing features of the map surface may simply be magnified without any additional feature data rendered. This viewing difference between magnification of existing objects and magnification plus additional rendering of map data may be demonstrated as follows. When increasing magnification of a map surface without retrieving additional zoom level data tiles a building represented as a block or square will simply be displayed as an enlarged block or square . When increasing magnification and retrieving additional zoom level data the same building may be displayed as an enlarged block but with additional sub features such as windows columns doors etc.

As discussed above map vector data may comprise location data and or style attribute data for a set of vertices. The map vector data may be segregated or organized by zoom level similar to that illustrated in and style attribute data may be provided along with the map data at the particular zoom levels. When style information is not provided for a zoom level style information may simply be drawn from existing or previous style attributes from other zoom levels. Generally this may provide abrupt changes in a visual aspect of a feature as a viewing window changes for example when zoom level changes.

One method of remedying these abrupt changes is to provide style parameters for each zoom level. However this can be costly in terms of retrieval bandwidth such as network bandwidth between two or more computers or intra device communication bandwidth between a processor and a local memory and processor capacity. Graphics cards having dedicated graphics processing units such as those described in this application are designed to specifically and efficiently process graphics calculations which often involve mathematical interpolations. In some embodiments client processing efficiencies e.g. interpolation calculation resources of a graphics card may be utilized for interpolating certain style parameters for rendering an image of a map when a viewing window changes from one zoom level to another. In other embodiments a CPU such as the CPU may be utilized to interpolate style parameters.

In some embodiments while rendering richer style aspects of map features may be accomplished by sending more data i.e. style attribute data from a server to a client for every view change e.g. zoom level change having a graphics processor card perform a bulk of calculations for adjusting style changes at a client device may save both bandwidth and time of download as well as decrease overall system processing times since specialized graphics cards can more efficiently process style adjustments at a client than for example at a server for a plurality of clients. Thus an aspect of the techniques is determining a reduced set of style parameters that may be retrieved by a client for applying interpolation processing for example via a graphic cards processor. In other embodiments however a CPU such as the CPU may be utilized to interpolate style parameters.

A block may determine a closest zoom level which has associated style attribute data that is appropriate for that zoom level. Determining a closest zoom level may be accomplished by any programmatic manner. For example a closest zoom level may be determined by querying a lookup table that provides information on available zoom levels and that indicates what zoom levels are associated with style attribute data that is appropriate for that zoom level. In situations in which map data is always provided with attribute data for particular zoom levels the determination may be based on querying for a prior lower level zoom level or a subsequent higher level zoom level that initiates a retrieval of additional data. A block may determine whether a current viewing window zoom level as determined to be part of the viewing state of block is the same as the closest zoom level of block . If the current viewing window is the same as the closest zoom level data then the style attribute data for the current zoom level may be used to render the viewing window at block without interpolation since the current zoom level already contains data appropriate for the zoom level. In one embodiment block may not select the closest zoom level that contains an associated style attribute data for the zoom level. Instead block may choose a second closest third closest etc. This may be the case when for example the closest zoom level that has associated style attribute data may not be available.

If the viewing window zoom level is not the same as the closest zoom level determined at block then a block may determine at least two zoom levels containing map data including style attribute data where the at least two zoom levels define a range that includes the viewing window zoom level. In other words the block may determine two additional zoom levels such that the viewing window zoom level is between the two additional zoom levels. A closest zoom level of block may be used as a first zoom level for block . A second zoom level may then be determined by searching a closest zoom level in an opposite direction from the viewing window zoom level of block . For example if block determined a zoom level closest to the viewing window zoom level at a subsequent higher zoom level block may determine a prior lower zoom level as a second zoom level and vice versa.

In one embodiment a block may interpolate the style parameter values of the two zoom levels to produce interpolated style attribute data for use in rendering the map display. A block may based on the interpolated style attribute data of the block render the map surface for the viewing window at the viewing window magnification zoom level. In an embodiment block may include determining an interpolation parameter and utilizing the interpolation parameter to interpolate the style attribute data. The interpolation parameter may generally represent a degree of a particular style attribute corresponding to a first zoom level of the two zoom levels versus a degree of the particular style attribute corresponding to a second zoom level of the two zoom levels. In an embodiment the interpolation parameter is determined based on the viewing window zoom level. As an illustrative example if the viewing window zoom level is halfway between the first zoom level and the second zoom level the interpolation parameter may correspond to 50 of particular style attribute corresponding to the first zoom level and 50 of the particular style attribute corresponding to the second zoom level. As another illustrative example if the viewing window zoom level is one quarter of the way from the first zoom level to the second zoom level the interpolation parameter may correspond to 75 of particular style attribute corresponding to the first zoom level and 25 of the particular style attribute corresponding to the second zoom level.

In another embodiment the interpolation parameter may be determined and varied over time. As an illustrative example if the viewing window zoom level is changed from the first zoom level to the second zoom level the interpolation parameter may be varied over a time period so that the interpolated style parameter changes gradually over time from 100 of a particular style attribute corresponding to the first zoom level to 50 of the particular style attribute corresponding to the first zoom level and 50 of the particular style attribute corresponding to the second zoom level until finally becoming 100 of the particular style attribute corresponding to the second zoom level. For example the map display may be animated so that a feature e.g. a road width initially is displayed corresponding to a first style parameter value e.g. corresponding to the first zoom level and gradually is changed over time so that the feature is eventually displayed corresponding to a second style parameter value e.g. corresponding to the second zoom level . Thus in an embodiment the map surface may initially be rendered with style data of one of the zoom levels e.g. a closest zoom level until a trigger is activated. A trigger may be an event in which a current viewing window zoom level is changed to exceed a threshold zoom level for example. When the trigger occurs blocks and block may be repeated over time so that interpolated style attributes are gradually changed over time e.g. from the first zoom level to the second zoom level and the map surface is animated so that the rendering of map features changes gradually over time.

It should be noted that some view changes may not affect style parameters e.g. a viewing window direction . Zoom changes however usually do affect some style parameters. Also not all the available set of style parameters may be affected by the view change and thus sometimes only a subset of style attributes may be retrieved.

If additional map data is needed for rendering the mapping application determines and retrieves an additional amount of map data at block that includes at least one additional style parameter value e.g. for the reduced set of style parameters . The process then determines a new set of style parameter values at a block for the view change by interpolating the newly retrieved style parameter values of block and the previous style parameter values of block . Because interpolation needs at least two data points the minimum amount of additional data retrieved at block is at least a one additional style parameter value. The viewing window may be re rendered at block based on the interpolated style data. In an embodiment blocks and may be repeated and an interpolation parameter utilized at block is changed over time so that so that the interpolated style parameter changes gradually over time from 100 for example of a particular style attribute corresponding to the first zoom level to 50 of the particular style attribute corresponding to the first zoom level and 50 of the particular style attribute corresponding to the second zoom level until finally becoming 100 for example of the particular style attribute corresponding to the second zoom level.

In some embodiments when a determined selected or current zoom level is outside the range of interpolation data extrapolation based on existing style attribute data points may be used to adjust a style parameter. In some of these embodiments extrapolation may be a default process of adjusting a style parameter when no attribute data exists that is appropriate for a given zoom level and the given zoom level is outside the range style attribute data points that can be used for interpolation.

While the described method and system may be illustrated for interpolating style parameters over zooming ranges other view changes that require a style parameter value to be adjusted may be implemented in a similar manner using the described method and system. For example where style changes may be adjusted for changes in viewing direction the same interpolation method and system may be used to provide values for the style aspects over the viewing window direction change.

Because retrieving and processing map data incurs a bandwidth cost and a processing cost receiving too much style parameter data may negate the savings of interpolating at the client. Additional modifications to the described method and system may thus function to reduce the number style attributes that are retrieved in a set of style parameters i.e. number of elements in the set as well as limit the number of sets of style parameters needed to perform interpolation calculations.

A block may determine depending on a number of factors whether to retrieve for an initial view rendering style attribute data that includes more than a minimum two data sets of style parameter values used in performing interpolation. When this additional data is retrieved at one time interpolation calculations may be performed for an entire range of zoom levels at one time. Additional style attribute data i.e. additional sets of style parameter values corresponding to zoom levels beyond what is minimally needed e.g. to perform a basic interpolation may be retrieved and processed depending on factors such as a type of style parameter a frequency or likelihood of additional view changes in the near future a degree of accuracy desired for interpolating a style parameter etc. It should be noted that these parameters may be interrelated to each other. Further when determining whether to retrieve and interpolate additional data points the techniques may involve some indication that additional map data points style attribute data is available. For example the client may be provided information about what zoom levels are associated with additional map data and or what zoom levels have additional map data for retrieval map data that includes additional style attribute data .

A block may interpolate the sets of style parameters determined retrieved in blocks and . A block may then render a feature of a map surface using the interpolated style attribute values. In an embodiment blocks and may be repeated and an interpolation parameter utilized at block is changed over time so that the interpolated style parameter changes gradually over time from 100 for example of a particular style attribute corresponding to the first zoom level to 50 of the particular style attribute corresponding to the first zoom level and 50 of the particular style attribute corresponding to the second zoom level until finally becoming 100 for example of the particular style attribute corresponding to the second zoom level.

Increasing the number of data points for interpolation generally increases the accuracy of the interpolation. For example in addition to rendering a smooth change between a first and second zoom level within two interpolation points the described method and system may require that additional data points that define a range of zoom levels be interpolated in advance for the range so that a transition anywhere within the range is more accurate for the entire range.

The tradeoff with increasing interpolation accuracy may often be additional bandwidth and processing capacity needed for retrieving and or processing the additional data points. A level of interpolation accuracy may depend on a resolution parameter that may be set by a user or automatically set by the mapping application. Processor capacity for performing interpolation calculations may be considered. For example a current processor capacity may be checked against a threshold. Where the processor that is to perform the interpolation e.g. the processor of the graphics card may generally be more efficient in calculating and or performing interpolation mathematics decisions of whether to download a plurality of additional style data points may depend more on bandwidth and or latency considerations associated with retrieving the additional style data points from the server. In some embodiments bandwidth considerations may depend on checking whether a current bandwidth time to download for retrieving style attribute data is above a threshold. For example the client may check a current download rate of a retrieval process to determine whether to retrieve additional style parameters. This may also depend on the amount of style data that may be requested.

While the process of determines how many style attribute data sets to retrieve illustrates a process for determining what style parameters to include in each data set according to an embodiment. Generally a system may provide a complete set of style attribute values whenever any style attribute value is retrieved and or requested. For example a complete style attribute lookup table may be retrieved each time map data is retrieved and rendered for a new zoom level. Alternatively only a subset of style parameters available for retrieval may be retrieved requested or processed. Using the described techniques herein a subset or reduced set of style parameters may be determined based on whether the style parameters can be interpolated and how those style parameters may be interpolated.

Some style parameters cannot or are chosen not to be interpolated. Block may determine whether a style parameter is designated for interpolation. This determination may be performed based on an associated flag attribute or other indicator associated with the style parameter indicating whether the style parameter is suitable for interpolation or can be subject to interpolation. The flag may be set by a map application designer based on aesthetic considerations of the map. Some style parameters do not represent values that can be interpolated or extrapolated. For example where a style parameter value is selected from a set of fixed values no interpolation may be possible or appropriate.

Some style parameters may not be suitable for interpolation because an interpolation function used by the graphics processor may not be suitable for interpolating the values of a particular style parameter. Depending on the capabilities of the processor that is to calculate the interpolation sometimes only a linear interpolation may be implemented. Perhaps other interpolations such as exponential interpolations may be more suitable for calculating for example a curve which the graphics processor is not programmed to perform. In this case the method and system may simply determine that a particular style parameter will not be interpolated. In which case a default value may be used for the style parameter value in lieu of interpolation.

Block may determine whether a style parameter can be interpolated based on a current viewing or rendering condition. Some style parameters may not be subject to interpolation because of a current viewing condition such as a current zoom level range. For example certain style parameters may only be relevant at higher zoom levels than lower zoom levels. In those cases the style parameters may not be retrieved and interpolated until a zoom level adjustment to the higher zoom level is initiated.

Block may determine whether a style parameter is to be interpolated based on a priority parameter. Similar to the interpolation indication the priority parameter may be an associated flag attribute or other indicator associated with the style parameter indicating a priority value. This priority parameter may be used by the mapping system to determine a set of high priority style parameters to retrieve and process over low priority style parameters. This may be the case when a current condition of the mapping application requires reduced data retrieval and or processing due to processor load. For example where the processor is overloaded or backed up the processor capacity is low or below a threshold low priority style parameters may not be retrieved and interpolated to reduce processor workload.

Block may determine whether high and or low priority style parameters based on priority attribute will be retrieved and processed based on a current bandwidth of a retrieval path channel or connection. For example block may determine not to retrieve and process low priority style parameters when bandwidth is below a threshold.

Block determines whether there is data sufficient for interpolating the style parameter. Interpolation generally requires at least two data points.

Block may select or not select the style parameter for retrieval and or processing based blocks . Blocks may be repeated to determine a reduced set of style parameters for retrieval and processing.

Any suitable subset of the blocks may be implemented in any suitable order by a number of different devices e.g. client or server and remain consistent with the method and system described herein. Moreover additional determination blocks may be added to refine the filtering of style parameters subject to interpolation processing.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

For example the network may include but is not limited to any combination of a LAN a MAN a WAN a mobile a wired or wireless network a private network or a virtual private network. Moreover while only four client devices are illustrated in to simplify and clarify the description it is understood that any number of client computers or display devices are supported and can be in communication with the server .

Additionally certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware and software modules can provide information to and receive information from other hardware and or software modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware or software modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware or software modules. In embodiments in which multiple hardware modules or software are configured or instantiated at different times communications between such hardware or software modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware or software modules have access. For example one hardware or software module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware or software module may then at a later time access the memory device to retrieve and process the stored output. Hardware and software modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods or routines described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented hardware modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. application program interfaces APIs . 

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm or a routine is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms routines and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to such signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. For example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still cooperate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the description. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Still further the figures depict preferred embodiments of a map rendering system for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for rendering map or other types of images using the principles disclosed herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

