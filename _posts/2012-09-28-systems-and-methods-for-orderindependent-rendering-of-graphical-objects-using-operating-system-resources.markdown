---

title: Systems and methods for order-independent rendering of graphical objects using operating system resources
abstract: Embodiments relate to systems and methods for order-independent rendering of graphical objects using operating system resources. In implementations, an application programming interface (API) can be provided in the operating system of a mobile or other device. The API can comprise a set of both compute and graphical processing resources, and can accept calls from applications or other requestors to render graphical objects to compose a scene. The set of compute resources can assign, access, and/or sort a set of tag information attached to each graphical element. That information can encode features such as distance from a viewpoint, transparency, and others. Applications requesting the rendering of a scene can access the compute resources via the API to sort the graphics objects according to their tag information, such as closest to farthest from a viewpoint. Applications are relieved of separately determining an order for rendering the objects of a scene.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533615&OS=08533615&RS=08533615
owner: Google, Inc.
number: 08533615
owner_city: Mountain View
owner_country: US
publication_date: 20120928
---
This application claims priority to U.S. Provisional Application No. 61 656 245 filed Jun. 6 2012 entitled Systems and Methods for Order Independent Rendering of Graphical Objects Using Operating System Resources by the same inventor herein assigned or under obligation of assignment to the same entity as this application and which application is incorporated herein in its entirety.

The present teachings relate to systems and methods for order independent rendering of graphical objects using operating system resources and more particularly to platforms and techniques for sending graphics rendering tasks to a set of computation resources via an application programming interface API and automatically generating a rendering or presentation order for individual graphical objects based on a set of tag information associated with those objects.

In the operating system field the application programming interfaces of various operating system families have incorporated calls or interfaces to a variety of graphics routines. The APIs of known operating systems such as desktop operating systems or mobile device systems for instance allow applications operating under those operating systems to call certain shading rendering shape adjusting motion related and or other processing routines to supply results to those applications.

In existing API implementations however an application which wishes to render a scene containing a number of graphics objects may need to explicitly order those objects before rendering and presentation to the user via a display. For instance a computer based game or simulation which depicts a large flock of birds may need to determine which individual bird as a graphical element needs to be generated rendered and or presented first second third and so forth to create a desired visual effect such as the motion of the flock across the screen or others. While known APIs can accept calls to produce those individual graphical objects it may be the responsibility of the calling application such as gaming software to compute and arrange those objects in the desired order in the scene. In implementations this can be due to the fact that graphical resources exposed by the APIs in existing operating systems may be single threaded. The depicted birds or other objects of the scene can be arranged for example based on the distance of the objects from a viewpoint in the scene. The viewpoint can for instance reflect the vantage point of a player in a game or other user. However when the set of graphical objects of a scene are large or under other conditions the necessity to compute the order of the objects can represent a significant computational burden on the application. The need to generate and order graphical objects via the typically single threaded API can affect the performance of the application and detract from the resulting user experience

It may be desirable to provide methods and systems for order independent rendering of graphical objects using operating system resources in which the API of an operating system can provide both computational and graphical resources to applications running under that operating system and automatically generate an ordering of graphical objects on the API side.

Embodiments of the present teachings relate to systems and methods for order independent rendering of graphical objects using operating system resources. More particularly embodiments relate to platforms and techniques for providing computational and graphical resources via the application programming interface API of an operating system which permits calling applications to request the generation of a scene using a set of graphical objects the generation or rendering of which can be parallelized using native API resources. According to implementations the order in which the finished graphical objects can be generated or rendered can be determined and potentially enhanced or optimized by the compute resources without any necessary intervention on the part of the calling application.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In implementations as shown each graphical element in the set of graphical objects can have associated attributes and or other information attached to that element. In implementations that information can be or include for instance an element ID such as a number address pixel location and or other identifier. In implementations the information attached to each graphical element in the set of graphical objects can likewise include a set of tag information . The set of tag information of each element in the set of graphical objects can be or include for example an indication of the distance of the graphical element in the rendered scene as measured from a viewpoint and or other point of reference. In implementations the viewpoint can represent the focal point from which a user perceives the field of view of the rendered scene and or can represent or be placed in other positions in the rendered scene . In implementations the rendered scene can therefore be accessed generated rendered and or otherwise presented from a coherent vantage point from the point of view of the user viewing that scene or otherwise. According to implementations and as for instance illustrated in the rendered scene can be generated and or output by or via a device such as a laptop and or desktop computer a cellular phone or smart phone a personal digital assistant a tablet computer and or other wired or wireless networked and or standalone device machine or platform. In implementations the rendered scene can be presented by the device on a display such as an LCD and or other display device or media. According to implementations the device can operate under the control and management of an operating system . The operating system can be or include for instance an operating system designed to be installed on a mobile device.

According to implementations a set of applications can be stored hosted and or run on the device under control of the operating system . The set of applications can be or include for example messaging applications media playback applications gaming software and or other software or applications. In regards any application or applications in the set of applications can generate one or more workloads which can consist of or contain the set of graphical objects from which the rendered scene is or will be composed. According to implementations the set of applications can interface to the operating system via an application programming interface API through which any of the applications in the set of applications can call on routines services file access services hardware support and or other resources or services managed or mediated by the operating system . In implementations the application programming interface API can provide an interface to multiple sets or classes of resources available on or through the device such as as illustrated a set of compute resources and a set of graphical resources . According to implementations the application programming interface API can incorporate or can be associated with resources such as the Renderscript services incorporated in the operating system . In implementations the set of compute resources and or the set of graphical resources can be exposed or made available to calling applications in parallelized form so that multiple graphical objects and or other objects can be sent to those resources at one time or in one call.

In implementations the set of compute resources can be or include resources or services such as for example computational routines sorting routines floating point computational routines or resources cache memory or other storage resources and or other computationally related routines services and or resources.

In implementations the set of graphical resources can be or include resources or services such as for instance transform and lighting T L processing or effects shading processing or effects transparency processing or effects vertex based processing or effects motion related processing or effects vector related processing or effects raster operations ROPs and or other graphically related computations processing or effects. According to implementations an application in the set of application can call on any one or more resources in the set of compute resources and the set of graphical resources to generate and output the rendered scene and or other graphical results.

According to implementations and as for instance illustrated in an application in the set of applications can call the set of compute resources and or other resources via the application programming interface API to perform processing ordering sorting and or other operations on the set of graphical objects which together make up the rendered scene in desired ways. In implementations as shown the calling application can access the set of compute resources and identify the set of graphical objects to the set of compute resources for instance by providing an address or name of an associated file by providing an index to storage and or a graphics array in memory and or using other identifiers. According to implementations the calling application can indicate that it wishes the set of compute resources to process generate sort and or render the set of graphical objects in a certain order to produce a set of sorted graphical objects . In implementations the calling application can specify that the set of graphical objects be sorted into an order based on their distance from the viewpoint of the rendered scene as reflected in the set of tag information associated with each graphical element. In implementations the calling application can for instance specify that the set of graphical objects be sorted to produce the set of sorted graphical objects in ascending order of their distance from the viewpoint or can specify that the set of sorted graphical objects be sorted or arranged in descending order of their distance from the viewpoint . It will be appreciated that other types of parameters variables metadata and or other information can be stored in set of tag information and that the set of sorted graphical objects can be sorted or ordered based on that other information and or using other rules metrics functions and or heuristics. For example in implementations the set of sorted graphical objects can be sorted ordered and or re ordered based on an average color value or intensity value of the set of graphical objects and or based on other variables features and or orderings. According to implementations in further regards the generation rendering and or presentation of the set of graphical objects can thereby be performed in an order which is independent of the order in which those objects are originally stored accessed identified by the element ID and or received.

According to implementations the set of compute resources and or other resources mediated by the application programming interface API can return the set of sorted graphical objects to the calling application for remaining processing and presentation of the rendered scene . In implementations the remaining processing and presentation of the rendered scene can be carried out using the set of graphical resources presented by the application programming interface API and or using other routines services and or resources.

According to implementations it may be noted that the delivery of the set of graphical objects to the set of compute resources and or other resources can take place at different times during the execution of the calling application in the set of applications . According to implementations the calling application can for instance send the task of sorting the set of graphical objects to the set of compute resources before the rendered scene is or needs to be actually generated and output so that the sorting operations that take place using the set of compute resources represent a late ordering of the graphical objects just before the rendered scene is actually output to the display device or other output. According to implementations the calls that the calling application makes to the set of compute resources set of graphical resources and or other resources can include a specification of the timing of the delivery of the set of sorted graphical objects and or related data or processing. In regards the set of applications can thereby be relieved of the computational overhead of generating an ordering of the set of graphical objects at the application level. Responsiveness of the user experience can therefore be enhanced.

In implementations it will additionally be appreciated that the abstraction of graphical ordering and other processing tasks to the application programming interface API and its component resources can produce and or can be used to create further performance advantages. In implementations for instance the sorting operations and other processing performed in the set of compute resources and or other resources exposed by the application programming interface API can be configured to be performed and or supported by underlying hardware of the device such as for instance general purpose and or dedicated processor chips of the device . Moreover in implementations the set of compute resources and or other resources mediated by the application programming interface API can be configured to further enhance and or optimize object ordering and rendering operations. The set of compute resources can for instance be configured to automatically analyze the set of graphical objects and determine those graphical objects or areas which for instance may be blocked by an intervening solid or opaque object taking along a line of sight to the viewpoint and or otherwise. The set of compute resources can for further instance be configured to assign the rendering or positioning of a graphical object or element to a lower priority when for instance that object has a high transparency value and so will appear as a transparent or highly translucent object or element in the rendered scene or may not be visible to the user at all. In implementations an object or element can be categorized as transparent translucent and or opaque and or other categories or states based on the transparency value and or other parameters. Other filters rules calculations and or sortings or orderings can be performed by the set of compute resources . In implementations those filters rules calculations and or sortings or orderings can be triggered by an explicit request of the calling application in the set of applications while in other implementations those filters rules calculations and or sortings or orderings can be automatically initiated by the set of compute resources regardless of the calling application. Other interactions between the set of applications application programming interface API set of compute resources set of graphical resources and or other services routines applications and or resources can be performed.

In the set of sorted graphical objects can optionally be generated and or output by the set of compute resources and or other resources or services of the operating system or otherwise based on the set of tag information and or other data. According to implementations the set of sorted graphical objects can for instance be transmitted to the graphics processor and or other hardware or other resource. In implementations the results of can be processed and or rendered without a store and or retrieve operation as optional . In the graphics processor and or other hardware or other resource can receive the set of sorted graphical objects . In the graphics processor and or other hardware or other resources can generate the rendered scene including the set of sorted graphical objects on the display and or other output device. As for instance shown in and merely illustratively in a rendered scene such as one shown in that figure the palm tree object element can be rendered and or presented before the beach house object element which in turn can be rendered and or presented before the sailboat object element which likewise in turn can be rendered and or presented before the moon object element . In aspects those objects can be rendered and or presented in order of their distance from the viewpoint as reflected in the set of tag information for each. But it will again be appreciated that other attributes or information can be used to generate an ordering of the set of graphical objects . In implementations the set of tag information can include further or additional ordering fields and or other information besides distance values to be used to order objects such as a render group identifier. In aspects the objects in a scene can be grouped in render groups according to attributes such as for instance their status as transparent opaque translucent and so forth. In implementations different rendering groups can be assigned a higher priority based on this factor with or without distance taken into account. For instance objects identified as opaque can be rendered first for example in order of near to far followed by the transparent objects in order of far to near. Other attributes or factors can be used as part of the set of tag information and subsequent ordering.

In implementations it will likewise be appreciated that within one rendered scene groups of the set of graphical objects can fall into different assigned sort groups. Thus for instance a scene of 20 objects may have 10 of those objects sorted far to near while the remaining 10 objects are sorted near to far based on the assigned groupings. In such implementations the sorting operation can be configured to complete the sorting and or rendering of all of one group before the sorting and or rendering of another group.

In processing can repeat return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which each element of the set of graphical objects has an associated set of tag information which contains a distance value or metric in implementations the set of tag information can comprise multiple variables parameters values functions and or other information.

Similarly while embodiments have been described in which the device hosts one processor and one graphics processor in implementations the device can host multiple general purpose processors multiple graphical processors and or both. Other resources described as singular or integrated can in embodiments be implemented as plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

