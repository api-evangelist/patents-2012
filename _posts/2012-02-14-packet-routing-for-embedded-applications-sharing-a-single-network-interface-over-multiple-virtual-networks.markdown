---

title: Packet routing for embedded applications sharing a single network interface over multiple virtual networks
abstract: Techniques are provided for packet routing in a distributed network switch. The distributed network switch includes multiple switch modules operatively connected to one another, and each switch module includes multiple bridge elements and a management controller. In one embodiment, a shared interface routing (SIR) framework is provided that includes an analysis and bifurcation layer and at least one packet interface. A packet is received over a first logical network and via a physical port, the packet being destined for at least a first application executing on the management controller. The analysis and bifurcation layer analyzes the packet and sends the packet to the packet interface, which then routes the packet to the first application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09083644&OS=09083644&RS=09083644
owner: International Business Machines Corporation
number: 09083644
owner_city: Armonk
owner_country: US
publication_date: 20120214
---
Computer systems often use multiple computers that are coupled together in a common chassis. The computers may be separate servers that are coupled by a common backbone within the chassis. Each server is a pluggable board that includes at least one processor an on board memory and an Input Output I O interface. Further the servers may be connected to a switch to expand the capabilities of the servers. For example the switch may permit the servers to access additional Ethernet networks or PCIe slots as well as permit communication between servers in the same or different chassis.

Further multiple switches may be combined to create a distributed network switch. However the communication interface between the distributed network switch and the servers may become so busy that packets are dropped or lost . That is a server may transmit packets to a switch faster than the switch can process the received packets. If the buffer associated with the switch fills up subsequent packets may be dropped. To avoid packet loss a switch may instruct the server to temporarily stop sending packets to the switch. The switch may use this period of time to relieve network congestion.

Embodiments of the invention provide a method product and system for performing an operation for packet routing in a distributed network switch the distributed network switch comprising multiple switch modules operatively connected to one another each switch module including a plurality of bridge elements and a management controller. The operation includes providing by the distributed network switch a shared interface routing SIR framework that includes an analysis and bifurcation layer and at least one packet interface. The operation also includes receiving by the management controller a packet from a first logical network via a physical port destined for at least a first application executing on the management controller. The physical port is shared between multiple applications executing on the management controller to send and receive traffic over multiple logical networks where the multiple logical networks includes the first logical network. The operation also includes analyzing the packet by the analysis and bifurcation layer of the SIR framework. The operation also includes sending the packet to the at least one packet interface based on the analysis. The operation also includes routing by the first packet interface the packet to the first application executing on the management controller.

Embodiments of the invention provide techniques for packet routing for a distributed network switch. The distributed network switch includes multiple switch modules operatively connected to one another and each switch module includes multiple bridge elements and a management controller. One embodiment provides a shared interface routing SIR framework that includes an analysis and bifurcation layer and at least one packet interface. The management controller receives a packet from a first logical network and via a physical port where the packet is destined for at least a first application executing on the management controller. The physical port is configured to be shared between a plurality of applications executing on the management controller to send or receive traffic over a plurality of logical networks. The analysis and bifurcation layer analyzes the packet and sends the packet to the packet interface. The packet interface then routes the packet to the first application. Accordingly the distributed network switch may support packet routing for multiple embedded applications sharing a single physical port over multiple logical networks.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The server may operate under the control of an operating system and execute various computer software applications components programs objects modules and data structures such as virtual machines .

The server may include network adapters e.g. converged network adapters or CNAs . A converged network adapter may include single root I O virtualization SR IOV adapters such as a Peripheral Component Interconnect Express PCIe adapter that supports Converged Enhanced Ethernet CEE . Another embodiment of the system may include a multi root I O virtualization MR IOV adapter. The network adapters may further be used to implement a Fiber Channel over Ethernet FCoE protocol RDMA over Ethernet Internet small computer system interface iSCSI and the like. In general a network adapter transfers data using both an Ethernet and PCI based communication method and may be coupled to one or more of the virtual machines . In particular Ethernet may be used as the protocol to the switch fabric while PCI may be used as the protocol to transfer data to from main memory to the network adapter . Additionally the adapters may facilitate shared access between the virtual machines . While the adapters are shown as being included within the server in other embodiments the adapters may be physically distinct devices that are separate from the server .

In one embodiment each network adapter may include a converged adapter virtual bridge not shown that facilitates data transfer between the adapters by coordinating access to the virtual machines . Each converged adapter virtual bridge may recognize data flowing within its domain i.e. addressable space . A recognized domain address may be routed directly without transmitting the data outside of the domain of the particular converged adapter virtual bridge.

Each network adapter may include one or more Ethernet ports that couple to one of the bridge elements . Additionally to facilitate PCIe communication the server may have a PCI Host Bridge . The PCI Host Bridge would then connect to an upstream PCI port on a switch element in the distributed network switch . The data is then routed via the switching layer to the correct downstream PCI port which may be located on the same or different switch module as the upstream PCI port . The data may then be forwarded to the PCI device .

The bridge elements may be configured to forward data frames throughout the distributed network switch . For example a network adapter and bridge element may be connected using two 40 Gbit Ethernet connections or one 100 Gbit Ethernet connection. The bridge elements forward the data frames transmitted by the network adapter to the switching layer . The bridge elements may include a lookup table that stores address data used to forward the received data frames. For example the bridge elements may compare address data associated with a received data frame to the address data stored within the lookup table. Thus the network adapters do not need to know the network topology of the distributed network switch .

The distributed network switch in general includes a plurality of bridge elements that may be located on a plurality of a separate though interconnected hardware components. To the perspective of the network adapters the distributed network switch acts like one single switch even though the distributed network switch may be composed of multiple switches that are physically located on different components. Distributing the network switch provides redundancy in case of failure.

Each of the bridge elements may be connected to one or more transport layer modules that translate received data frames to the protocol used by the switching layer . For example the transport layer modules may translate data received using either an Ethernet or PCI communication method to a generic data type i.e. a cell that is transmitted via the switching layer i.e. a cell fabric . Thus the switch modules comprising the distributed network switch are compatible with at least two different communication protocols e.g. the Ethernet and PCIe communication standards. That is at least one switch module has the necessary logic to transfer different types of data on the same switching layer .

Although not shown in in one embodiment the switching layer may comprise a local rack interconnect LRI which connects bridge elements located within the same chassis and rack as well as links that connect to bridge elements in other chassis and racks.

After routing the cells the switching layer may communicate with transport layer modules that translate the cells back to data frames that correspond to their respective communication protocols. A portion of the bridge elements may facilitate communication with an Ethernet network which provides access to a LAN or WAN e.g. the Internet . Moreover PCI data may be routed to a downstream PCI port that connects to a PCIe device . The PCIe device may be a passive backplane interconnect as an expansion card interface for add in boards or common storage that can be accessed by any of the servers connected to the distributed network switch .

A second server may include a processor connected to an operating system and memory which includes one or more virtual machines similar to those found in the first server . The memory of server also includes a hypervisor with a virtual bridge . The hypervisor manages data shared between different virtual machines . Specifically the virtual bridge allows direct communication between connected virtual machines rather than requiring the virtual machines to use the bridge elements or switching layer to transmit data to other virtual machines communicatively coupled to the hypervisor .

An Input Output Management Controller IOMC i.e. a special purpose processor is coupled to at least one bridge element which provides the IOMC with access to the switching layer . One function of the IOMC may be to receive commands from an administrator to configure the different hardware elements of the distributed network switch . In one embodiment these commands may be received from a separate switching network from the switching layer .

Although one IOMC is shown the system may include a plurality of IOMCs . In one embodiment these IOMCs may be arranged in a hierarchy such that one IOMC is chosen as a master while the others are delegated as members.

The switch modules i.e. a chassis interconnect element include one or more sub switches and an IOMC . The sub switches may include a logical or physical grouping of bridge elements . Each bridge element may be physically connected to the servers . For example a bridge element may route data sent using either Ethernet or PCI communication protocols to other bridge elements attached to the switching layer . However in one embodiment the bridge element may not be needed to provide connectivity from the network adapter to the switching layer for PCI or PCIe communications.

Each switch module includes an IOMC for managing and configuring the different hardware resources in the system . In one embodiment the respective IOMC for each switch module may be responsible for configuring the hardware resources on the particular switch module. However because the switch modules are interconnected using the switching layer an IOMC on one switch module may manage hardware resources on a different switch module.

The dotted line in chassis defines the midplane between the servers and the switch modules . That is the midplane includes the data paths that transmit data between the network adapters and the sub switches .

Each bridge element connects to the switching layer . In addition a bridging element may also connect to a network adapter or an uplink. As used herein an uplink port of a bridging element provides a service that expands the connectivity or capabilities of the system . As shown in chassis one bridging element includes a connection to an Ethernet or PCI connector . For Ethernet communication the connector may provide the system with access to a LAN or WAN e.g. the Internet . Alternatively the port connector may connect the system to a PCIe expansion slot e.g. PCIe device . The device may be additional storage or memory which each server may access via the switching layer . Advantageously the system provides access to a switching layer that has network devices that are compatible with at least two different communication methods.

As shown a server may have a plurality of network adapters . This provides redundancy if one of these adapters fails. Additionally each adapter may be attached via the midplane to a different switch module . As illustrated one adapter of server is communicatively coupled to a bridge element located in switch module while the other adapter is connected to a bridge element in switch module . If one of the switch modules fails the server is still able to access the switching layer via the other switching module. The failed switch module may then be replaced e.g. hot swapped which causes the IOMCs and bridging elements to update the routing tables and lookup tables to include the hardware elements on the new switching module.

Accordingly the distributed network switch disclosed herein is configured to provide Layer 2 Ethernet switching via multiple switch modules the LRI interconnecting the switch modules and management firmware executing on a management controller such as the IOMC . Doing so may eliminate the need for stand alone Ethernet switches to interconnect processing elements in the servers . At least in some embodiments the networked system may also be augmented in a granular and or scalable manner by adding individual components such as switch modules and or processing elements.

In one embodiment each switch module is operatively connected to multiple bridge elements. In a particular embodiment each switch module is configured to use four bridge elements where each bridge element is a distributed Virtual Ethernet Bridge dVEB that supports data transfer rates of one hundred gigabits per second 100 Gbps . The dVEBs are managed by firmware executing on the management controller.

In one embodiment the switch module is configured to support packet routing over multiple logical networks for multiple applications sharing a single physical port of the switch module. To this end the components also include a shared interface routing SIR framework configured to route packets from different logical networks to the applications via a single port of a bridging element of a switch module. The applications may be configured to access the SIR framework via a predefined application programming interface API provided by a software development kit SDK .

In one embodiment the SIR framework includes an analysis and bifurcation layer a virtual route and ether type VRET layer and a virtual user space net interface VUSI layer . In one embodiment the analysis and bifurcation layer is implemented in the kernel space of the management controller while the VRET layer and the VUSI layer are implemented in the user space of the management controller. Implementing the analysis and bifurcation layer in kernel space as opposed to user space may result in improved packet routing efficiency at least in some cases. The analysis and bifurcation layer is configured to interpret hardware tags read predefined packet fields performs a first level bifurcation into the user space of the management controller and or pass packets to a network stack of the operating system executing on the management controller. In some embodiments the analysis and bifurcation layer is configured to analyze packets in user and or kernel space and route packets in user space. Regardless of the manner in which the user space of the management controller receives a packet the user space is defined within a separate operating system context from the kernel space. In some embodiments the operating system defines a separate user space for each instantiated application each user space having a respective operating system context.

In one embodiment the VRET layer includes at least two components including a packet pipe interface and a virtual network device interface. The packet pipe interface is a user space interface configured to allow an application to define a pipe based on a predetermined field of an Ethernet frame herein referred to as an ether type field. One example of the ether type field is EtherType which is a two octet field indicating which protocol is encapsulated in the payload of an Ethernet Frame. In one embodiment the packet pipe interface encapsulates Ethernet packets into netpipe packets that describe characteristics specific to the switch module and or to the internal routing for a received frame e.g. a receiving port .

In one embodiment the virtual network device interface of the VRET layer is configured to allow an application to use a network stack of the operating system to access packets. When the VRET layer determines that a packet should be transmitted to the network stack the virtual network device interface sends the packet to a virtual network device configured to send the packet to the rest of the network stack as though the virtual network device was a hardware device receiving the packet.

In one embodiment the VUSI layer defines an interface using hardware abstraction layer HAL techniques. The interface is configured such as to hide implementation and or hardware specific details from applications using the VUSI layer . In some embodiments the VUSI layer provides support for additional functionality in the SIR framework . Examples of additional functionality include quality of service QoS and hardware assisted routing. The components may also include an analysis assist layer configured to parse and or inspect incoming frames at the ingress ports of the switch module. The analysis assist layer may be implemented in hardware and is further described below in conjunction with .

By configuring the management controller of the switch module to include the SIR framework embodiments of the invention provide a processing framework for parsing and analyzing incoming packets in kernel space and transferring the packets to user space such as to designated queues and or threads. Doing so allows specific Ethernet packets containing a variety of control protocols and or application data flows in an embedded system to be routed prioritized and or queued in a manner that may be more efficient to alternative approaches at least in some cases. An example of an alternative approach is providing a daemon running in user space where the daemon is configured to copy every packet into user space and analyze the respective packet in user space. Embodiments of the invention may also prevent or at least reduce occurrences of traffic of lower priority control protocols creating congestion for traffic of higher priority control protocols over a single interface. Embodiments of the invention may also steer and or categorize incoming control protocol traffic over different logical networks sharing a single interface.

As shown the components in kernel space include the network stack virtual network devices an LRI network LRINET component and ports of the CEE NIC. In one embodiment the LRINET component is a kernel driver configured to prioritize route and or queue packets. In one embodiment to use the virtual network devices a VLAN configuration utility such as vconfig is first used to create VLAN devices on top of the virtual network devices. As shown application traffic may be transmitted from the ports to the applications via the network stack in kernel space and via the sockets in user space . Further application traffic and or control traffic may be transmitted from the ports to the applications via the LRINET component the virtual network devices the network stack and the sockets . Alternatively the application traffic and or control traffic may be transmitted via the LRINET component the sfit library . The applications may optionally access the sfit library via the SDK . Further using a Central Controlling Bridge CCB interface the applications may alternatively access the sockets using remote procedure calls RPC .

In one embodiment the virtual network devices may be specific to a logical network only or specific to a logical network and VLAN. The virtual network devices may have MAC addresses corresponding to a general purpose MAC of a CCB component of the switch module. At least in some embodiments the CCB functions as a switch control point configured to receive packets for any additional processing required by the distributed network switch. The general purpose MAC address refers to a switch functional MAC address configured to allow entities outside the switch to communicate with the switch as a network functional entity. Each received packet is inspected to identify associated logical networks VLANs network adapters etc.

At step the VUSI layer determines whether the frame should be sent to the network stack. If so the VUSI layer verifies that the frame has not already been sent to the network stack modifies the frame according to techniques described above step and sends the modified frame to the network stack . Otherwise the VUSI layer modifies the frame according to techniques described above step and selects a buffer space for queuing the frame. If there is no buffer space left in the selected buffer step then the VUSI layer drops the frame step . Otherwise the VUSI layer queues the frame in the selected buffer . After the steps or the method terminates.

As described above in one embodiment the SIR framework may include an analysis assist layer configured to parse and or inspect incoming frames at the ingress ports of the switch module. Accordingly the analysis assist layer may to offload at least some of the processing performed by the analysis and bifurcation layer. At least in embodiments where the analysis assist layer is implemented in hardware and the analysis and bifurcation layer is implemented in firmware or software processor load on the management controller may be reduced and reserved for performing other tasks such as executing embedded applications.

In one embodiment the analysis assist layer may classify each frame preserve state information associated with the frame and store the state information in reserved areas for transport across the LRI. The frame may then be routed to the specified destination. When the destination is the port connecting the management controller the analysis assist layer stores the state information in a predefined header such as a Q in Q header inserts the CCB tag into the frame and sends the frame to the management controller. The state information includes a reason code to be used by the analysis and bifurcation layer eliminating the need for the analysis and bifurcation layer to parse the frame. For traffic originating from the management controller the analysis and bifurcation layer may include state information and directives in a CCB tag that is subsequently used by the analysis assist layer to route the frame toward the specified destination. The state information and or directives are configured to facilitate correct routing of frames for the distributed network switch.

In one embodiment the receiving frame parser then captures predetermined frame state information and stores the state information in an internal header used to route the frame across the LRI. The frame is then transmitted via the receiving pipeline routed across the LRI and presented to the transmitting pipeline . The transmitting pipeline is configured to access the stored state information and insert an additional predefined tag such as a Q in Q tag in the frame header. The predefined tag includes a format type classifying the frame as i a normal frame also referred to as a functional frame ii a redirected frame with a reason code identifying the reason for redirection or iii a control frame. The frame is then sent out the egress port to the management controller. Subsequently the analysis and bifurcation layer uses the format type and reason code to determine how to process the frame. In other words the analysis and bifurcation layer no longer needs to perform frame parsing saving some processor cycles on the management controller. If the frame is transmitted through the VUSI layer the reason code may be propagated for use by one or more applications executing on the management controller.

As shown in the components for processing frames from the management controller to an egress port also include a frame parser a receiving pipeline the LRI and a transmitting pipeline . The egress frames include routed frames from the management controller to one or more end nodes frames injected by the management controller and frames targeted to specific end nodes after redirection to the management controller. In one embodiment the management controller builds a frame and includes a predefined tag such as a CCB tag . The frame is then sent to an ingress port of the switch module. The receiving frame parser then parses the frame extracts predetermined information from the CCB tag and stores the extracted information for transport across the LRI . Information in the CCB tag may include directives to the analysis assist layer such as force tag VLAN present or skip source . The frame is then sent across the LRI and arrives at the transmitting pipeline of the egress port. The transmitting pipeline then processes the frame accordingly altering the frame as needed and sends the frame out the egress port to the destination specified in the frame.

Further the physical port is shared between multiple applications executing on the management controller to send or receive traffic over multiple logical networks including the first logical network. At step the analysis and bifurcation layer of the SIR framework analyzes the packet. At step the packet is sent to the at least one packet interface based on the analysis. At step the first packet interface routes the packet to the first application executing on the management controller. After the step the method terminates.

Embodiments of the invention provide techniques for packet routing for a distributed network switch. The distributed network switch includes multiple switch modules operatively connected to one another each switch module including multiple bridge elements and a management controller. One embodiment provides a shared interface routing SIR framework that includes an analysis and bifurcation layer and at least one packet interface. The management controller receives a packet from a first logical network and via a physical port the packet being destined for at least a first application executing on the management controller. The physical port is configured to be shared between a plurality of applications executing on the management controller to send or receive traffic over a plurality of logical networks. The analysis and bifurcation layer analyzes the packet and sends the packet to the packet interface to be routed to the first application. Accordingly the distributed network switch may support packet routing for multiple embedded applications sharing a single physical port over multiple logical networks.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

