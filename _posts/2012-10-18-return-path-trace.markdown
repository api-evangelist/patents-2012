---

title: Return path trace
abstract: A reverse network tracing mechanism is described. In an embodiment, a network information request is received that is addressed to a predetermined destination. It is determined that the network information request has an expired timer and a message is returned indicating that a return network path routing procedure has been initiated. After determining that the network information request has an unexpired timer, contents of the network information request are modified to enable identification of at least a portion of the return path from the predetermined destination to a source address of the network information request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09344320&OS=09344320&RS=09344320
owner: Amazon Technologies, Inc.
number: 09344320
owner_city: Reno
owner_country: US
publication_date: 20121018
---
Network diagnostic tools are useful for identifying issues and problems in a computer network such as a slow network connection. For example the traceroute utility and similar diagnostic tools are useful for identifying the hops paths or transfers through nodes on a network that a message traverses from a source network address to a destination network address. The traceroute utility may provide a user with the routers traversed from the source network address to the destination network address as well as the elapsed time for each hop. This information can be useful for identifying a failed connection or for identifying the cause of a slow connection.

In general this disclosure describes a system and method for implementing a reverse network path tracing mechanism. In one embodiment a reverse traceroute proxy RTP mechanism is implemented within a destination network. The RTP receives traceroute messages bound for the destination network address and loops the traceroute messages back to the source. The computer at the source address executing the traceroute utility will receive both the forward and return path information and thus be able to determine the hops to the destination network address and subsequent hops identifying the path taken back to the source of the traceroute message.

In general the traceroute utility is one example of a network diagnostic function that can be used to identify the network path that a data packet takes from a source computer to a destination computer. The traceroute utility typically lists the intermediate routers that the data packet passes through until either the packet reaches its destination or fails to reach its destination and is discarded. In addition the traceroute utility typically collects information for the elapsed time taken for each hop from router to router. A user may thus be able to identify how the source and destination systems are connected to each other and the latencies involved for each hop. For example referring to a user operating a computer may wish to determine the network path from computer to a host server . A traceroute utility may be used to determine that messages from computer take a first hop to intermediate router . Although messages from host server to computer may take an alternate path for example through router traceroute utilities typically do not provide for tracing of such reverse paths.

In one embodiment that may be implemented in Internet Protocol IP networks the traceroute utility operates by causing each router along a network path to return an ICMP Internet Control Message Protocol message. An IP packet typically contains a time to live TTL value which specifies how many hops that the packet can traverse before it expires. Each time a packet passes through a router its TTL value is decremented by one and if the TTL value reaches zero the packet is discarded and a TTL Exceeded message is returned to the source.

The traceroute utility operates by initially sending a packet with a TTL value of one. The first router along the path decrements the TTL to zero and discards the packet because the TTL has expired and returns a TTL Exceeded message. The traceroute utility identifies this router as the first router on the path to the destination. The traceroute utility will then send a packet with a TTL value of two. The first router along the path decrements the TTL to one and forwards the packet to the next router in the path. The second router along the path decrements the TTL to zero and discards the packet because the TTL has expired and returns a TTL Exceeded error message. The traceroute utility identifies this router as the second router on the path. The traceroute utility sends additional packets with a TTL of three and then four and so on causing each router along the path to return a TTL Exceeded message and thus discovering the intermediate routers in the path until either the final destination is reached or the maximum TTL value is reached and the traceroute ends. The timestamp values returned for each router s TTL Exceeded message may be used to determine the latency values.

Utilities such as traceroute typically operate over Internet Protocol IP networks using IP datagrams. For example in some embodiments the traceroute utility may send a UDP datagram to a random port number that is unlikely to be active. In other embodiments the traceroute utility may send an ICMP Echo Request packet.

Referring back to a traceroute utility may be initiated at computer by user . User may for example execute a traceroute function and enter an IP address or other network name for destination host server . For example a traceroute for destination address a.b.c.d may provide the following results 

The above example shows that computer ran a traceroute to a.b.c.d. On the first hop a packet was sent from computer to the 10.s.s.s network. On the second hop the packet went to the 10.x.x.x network. On the third hop the packet went to the 10.y.y.y network. On the fourth hop the packet reached the a.b.c.d. network destination host server .

Traceroute utilities typically only provide information regarding the forward path to the destination address. However network traffic involves both a forward route and a return route the forward route from the source to the destination and often a return route from the destination back to the source that is different than the forward route. The forward and return routes may therefore be asymmetric. Referring back to the forward path from source computer to destination computer may traverse router . However the return path from destination host server to source computer may traverse router . The routes are different and thus network issues can occur either on the route to the destination or on the route back from the destination. A user may therefore run traceroutes to a destination address and make incorrect or unfounded inferences. For example if the forward and return paths are completely different a user may make the assumption that there is a problem with the forward path or the destination network when the issue could be with the return path.

One way to address this issue is to execute a traceroute from the destination network to the user network. However this would require someone to perform actions at the destination network in conjunction with the user at the original source network. While the destination network may attempt to provide such a reverse traceroute service users typically do not disclose their identification information to enable such a reverse traceroute service. Additionally it may not be possible to identify the source network because the source network address is being translated e.g. NAT d at the source. Another issue with the traceroute information not providing the return path is that the round trip latency data may not be accurate since the actual return path may be totally different than the forward path.

In various embodiments described herein a reverse traceroute proxy RTP mechanism is described. In one embodiment the RTP mechanism can be implemented as a host service that executes within multiple data center points of presence POPs . Such an RTP mechanism may be configured to receive traceroute packets bound for the data center s network address and loop the traceroute packets back to the source such that the return hop information is included. In this way external parties executing traceroutes to the data center will be provided with the hops to the data center and subsequent hops on the return path to the originator of the traceroute packets.

Various aspects of the disclosure will now be described with regard to certain examples and embodiments which are intended to illustrate but not to limit the disclosure. In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures.

In one embodiment illustrated in an RTP host may be configured to provide a reverse traceroute proxy mechanism. RTP host may be implemented on a computing device such as a server or other resource within a data center providing computing services for a host network. RTP host may examine incoming data for any packets bound for its IP address 100.64.2.2 in this example as the destination. Such packets may be ICMP datagrams UDP datagrams TCP packets or other data units that may be considered valid types of packets to proxy by the RTP. In one embodiment RTP host may be configured to examine data traffic for any packets that have a TTL 1. In order to inform a source which in this example has IP address 100.64.1.1 that initiated a traceroute that the reverse portion of the traceroute is starting RTP host may respond to such a packet with an ICMP TTL Exceeded or similar message sourced from an IP network address that indicates that the reverse traceroute to the source has begun. In one embodiment for any packet received at RTP host from source with a TTL 1 RTP host may generate an ICMP TTL Exceeded message destined to source with a source IP address that resolves to a descriptive DNS name indicative of the start of the reverse traceroute. For example the DNS can be reverse traceroute begins.host.com. Other addresses may be used that may uniquely identify to the traceroute originator that the reverse traceroute process has begun.

For packets received at RTP host with a TTL of 2 or more RTP host may change the destination IP address to the source IP address e.g. change the destination IP address from 100.64.2.2 to 100.64.1.1 . RTP host may then forward the packet back out to the Internet after decrementing the TTL. For example when the received packet has a TTL of 2 then RTP host may forward the packet back out to the Internet with TTL 1. The router at the next hop which in this example is router R will receive the packet decrement the TTL to zero and send an ICMP TTL Exceeded message back to source . The ICMP TTL Exceeded message will be routed back to source via the return path through routers and and source will be able to determine the first router R on the return path from RTP host to source .

When the received packet has a TTL of 3 then RTP host may forward the packet back out to the Internet with TTL 2. Router R will receive the packet decrement the TTL to 1 and forward the packet back out to the Internet with TTL 2. The router at the next hop which in this example is router R will receive the packet decrement the TTL to zero and send an ICMP TTL Exceeded message back to source . By continuing in this fashion a series of ICMP TTL Exceeded messages will be returned to source by each router in the return path and source will be able to determine the return path through routers R R R and R .

In another embodiment illustrated in for packets received at RTP host from source with a TTL 1 RTP may generate an ICMP TTL Exceeded message destined to source with a source IP address that resolves to a descriptive DNS name indicating that the reverse traceroute to RTP host has begun e.g. reverse traceroute begins.host.com .

For packets received at RTP host with TTL of 2 or more RTP host may change the destination IP address to the source IP address in this example the destination IP address is changed from 100.64.2.2 to 100.64.1.1 . RTP may also change the source IP address to a unique RTP host IP address i.e. not an IP address that can be tracerouted to the RTP . In this example the source IP address is changed to 100.64.2.2. The packet is then forwarded out to the Internet from RTP host .

In this embodiment the modified packets are now addressed to source with IP address 100.64.1.1 as the destination and any resulting ICMP TTL Expired messages will now be returned to RTP host with IP address 100.64.2.2 instead of being returned to source . When such messages are received by RTP host RTP host may generate an ICMP TTL Exceeded message back to the original source but may first modify the ICMP TTL Expired message payload to contain the original packet and reset the values that were originally transmitted. In some embodiments the source and destination IP addresses in the payload may be modified to include the information that was transmitted from source . RTP host may also spoof the source IP address of all the hops on the return path back towards source to reflect the hops of the return path observed by RTP host . By continuing in this manner return path information for the return path through routers and from RTP host to source will be provided to source .

The examples illustrated in describe embodiments in the context of a traceroute function operating to route a network path in an IP network with IP datagrams. However the described principles may be used to provide reverse path information in other contexts or may be used to trace other paths. For example in addition to identifying a reverse path as discussed above embodiments described herein may be used to identify other path types or schemes. For example data flows that may take multiple paths across a plurality of nodes may be traced using a trace proxy mechanism as described above.

If the route tracing request packet is addressed to a network address that resolves to the computing system s address then operation may be followed by operation . Operation illustrates examining the route tracing request packet for a time to live TTL 1. Operation may be followed by operation . If the route tracing request packet has a time to live TTL 1 then operation may be followed by operation . Operation illustrates that a TTL Exceeded message is sent. The TTL Exceeded message may be addressed to the source address included in the route tracing request packet. The TTL Exceeded message may also include a modified source address set to an address that resolves to a DNS name indicative of the reverse traceroute process.

If the route tracing request packet has a TTL that is a value other than 1 then operation may be followed by operation . If the route tracing request packet has a TTL 2 then operation may be followed by operation . Operation illustrates that the contents of the route tracing request packet may be modified to enable tracing of at least a portion of a return path from the computing system to the first source address.

In one embodiment modifying the route tracing request packet may include changing a destination address of the route tracing request packet to the first source address and setting the TTL 1. In other embodiments modifying the route tracing request packet may include changing a destination address of the route tracing request packet to the source address identified in the packet and setting the new source address of the route tracing request packet to an address associated with the computing system implementing the RTP mechanism. The system may further receive a TTL Exceeded message addressed to the address associated with the computing system and generating a TTL Exceeded message addressed to the original source address. The TTL Exceeded message may include previously received source and destination information. Furthermore the generated TTL Exceeded message may include modified source and destination addresses indicative of return path information.

Operation may be followed by operation . Operation illustrates that the route tracing request packet may be forwarded back out to the communication network such as the Internet.

If the network information request is addressed to the predetermined destination then operation may be followed by operation . Operation illustrates examining the network information request for an expired timer. In one embodiment the timer is a time to live TTL mechanism for determining if a message is expired. Operation may be followed by operation . If the timer is expired then operation may be followed by operation . Operation illustrates returning a message indicating that a return path routing procedure has been initiated.

If the network information request has a timer that has not expired then operation may be followed by operation . If the network information request has a timer that is not active then operation may be followed by operation . If the route tracing request packet has a timer that is active then operation may be followed by operation . Operation illustrates modifying contents of the network information request to enable identification of at least a portion of the return path from the predetermined destination to the source address of the network information request.

Operation may be followed by operation . Operation illustrates forwarding the network information request back out to the communication network such as the Internet.

In one embodiment the timer is a time to live TTL mechanism for determining if a message is expired. In this embodiment a TTL Exceeded message is returned that is addressed to a source address of the network information request and with a source address of the TTL Exceeded message set to an address that resolves to a predetermined DNS name. Furthermore determining that the network information request has an unexpired timer comprises determining that the network information request has a TTL 2. In some embodiments modifying contents of the network information request comprises changing a destination address of the network information request to the source address of the network information request and setting the TTL 1. Additionally and optionally additional network information requests may be received. The contents of the additional network information requests may be modified so that destination addresses of the additional network information requests are set to the source address of the network information request and the TTL values may be adjusted.

In other embodiments modifying contents of the network information request comprises changing a destination address of the network information request to the source address of the network information request and setting a source address of the network information request to an address associated with the computing system that is providing the RTP mechanism. Additionally and optionally a TTL Exceeded message may be received that is addressed to the address associated with the computing system and a TTL Exceeded message is generated that is addressed to the source address of the network information request that includes previously received source and destination information. The generated TTL Exceeded message may include modified source and destination addresses that indicate return path information

First network may be for example a publicly accessible network made up of multiple networks operated by various entities such as the Internet. Second network may be for example a company network that is wholly or partially inaccessible from computing systems external to second network . Computers and may include for example home computing systems that connect directly to the Internet e.g. via a cable modem or a Digital Subscriber Line DSL .

In addition to server computers and of second network second network may include a gateway as discussed above. Second network may further include additional networking devices such as a router . Router may manage communications within second network for example by forwarding packets or other data communications as appropriate based on characteristics of such communications e.g. header information including source and or destination addresses protocol identifiers etc. and or the characteristics of the second network e.g. routes based on network topology etc. . It will be appreciated that for the sake of simplicity various aspects of the computing systems and other devices of this example are illustrated without showing certain conventional details. Additional computing systems and other devices may be interconnected in other embodiments and may be interconnected in different ways.

Referring to server computers and are part of second network and each server computer may be assigned a network address not shown in accordance with second network . For example the second network addresses may be unique with respect to the second network but not guaranteed to be unique with respect to other computing systems that are not part of second network . As one example Internet Protocol IP and other networking protocols may reserve groups or blocks of network addresses with such reserved network addresses not being routable over networks external to the second network . In such situations different networks may each use the same network addresses within their networks as the network addresses are locally unique to each network but those network addresses may not be used for communications between a computing system of a different network and another computing system external to the network. IP addresses are used to illustrate some example embodiments in the present disclosure. However it should be understood that other network addressing schemes may be applicable and are not excluded from the scope of the present disclosure.

In this example to facilitate communications between server computers and of second network and other external computing systems that are not part of second network e.g. computers and and or other computing systems that are part of first network one or more gateway devices may be used. In particular one or more first network addresses not shown may have previously been assigned for use in representing second network . Such first network addresses may be routable over the Internet such that a communication that is sent by external computer and that has one of second network s first network addresses as its destination network address will be routed over the Internet to gateway device . Furthermore additional gateway devices not shown may be provided as needed.

Gateway device may operate to manage both incoming communications to the second network from first network and outgoing communications from second network to first network . For example if server computer sends a message not shown to one of computers in first network server computer may create an outgoing communication that includes an external first network address e.g. a public IP address for computer as the destination address and include a second network address e.g. a private IP address for server computer as the source network address. Router then uses the destination address of the outgoing message to direct the message to gateway device for handling. In particular in order to allow computer to reply to the outgoing message gateway device may temporarily map one of the public network addresses for second network to server computer and modify the outgoing message to replace the source network address with the mapped first network address. Gateway device may then update its mapping information with the new mapping and forward the modified outgoing message to the destination computer over the Internet.

If computer responds to the modified outgoing message by sending a response incoming message not shown that uses the mapped first network address for server computer as the destination network address the response incoming message may be directed over the Internet to gateway device . Gateway device may then perform similar processing in reverse to that described above for the outgoing message. In particular gateway device may use its mapping information to translate the mapped first network address into the second network address of server computer modify the destination network address of the response incoming message from the mapped first network address to the second network address of server computer and forward the modified incoming message to server computer . In this manner at least some of the internal computers of second network may communicate with external computing systems via temporary use of the first network addresses. Furthermore in some situations one or more of the internal computing systems of second network may be mapped to use one of the first network addresses e.g. to a unique combination of a first network address and a port number such that external computing systems may initiate new incoming messages to the internal computing system by directing the new incoming messages to the mapped representative first network address port as the destination network address of the new incoming messages.

Communication network may provide access to computers . User computers may be computers utilized by customers or other customers of data center . For instance user computer or may be a server a desktop or laptop personal computer a tablet computer a wireless telephone a personal digital assistant PDA an e book reader a game console a set top box or any other computing device capable of accessing data center . User computer or may connect directly to the Internet e.g. via a cable modem or a Digital Subscriber Line DSL . Although only two user computers and are depicted it should be appreciated that there may be multiple user computers.

User computers may also be utilized to configure aspects of the computing resources provided by data center . In this regard data center might provide a Web interface through which aspects of its operation may be configured through the use of a Web browser application program executing on user computers . Alternatively a stand alone application program executing on user computers might access an application programming interface API exposed by data center for performing the configuration operations. Other mechanisms for configuring the operation of the data center including deploying updates to an application might also be utilized.

Servers shown in may be standard servers configured appropriately for providing the computing resources described above and may provide computing resources for executing one or more applications. In one embodiment the computing resources may be virtual machine instances . In the example of virtual machine instances each of the servers may be configured to execute an instance manager or capable of executing the virtual machine instances . The instance managers may be a virtual machine monitor VMM or another type of program configured to enable the execution of virtual machine instances on servers for example. As discussed above each of the virtual machine instances may be configured to execute all or a portion of an application.

It should be appreciated that this example describes a computing environment providing virtual machine instances other types of implementations can be utilized with the concepts and technologies disclosed herein. For example the embodiments disclosed herein might also be utilized with computing systems that do not utilize virtual machine instances.

In the example data center shown in a router may be utilized to interconnect the servers and . Router may also be connected to gateway which is connected to communications network . Router may manage communications within networks in data center for example by forwarding packets or other data communications as appropriate based on characteristics of such communications e.g. header information including source and or destination addresses protocol identifiers etc. and or the characteristics of the private network e.g. routes based on network topology etc. . It will be appreciated that for the sake of simplicity various aspects of the computing systems and other devices of this example are illustrated without showing certain conventional details. Additional computing systems and other devices may be interconnected in other embodiments and may be interconnected in different ways.

In some embodiments one or more of the virtual machine instances of data center may form part of one or more networks. In some embodiments gateway may be used to provide network address translation NAT functionality to a group of virtual machine instances and allow the virtual machine instances of the group to use a first group of internal network addresses to communicate over a shared internal network and to use a second group of one or more other external network addresses for communications between virtual machine instances of the group and other computing systems or virtual machine instances that are external to the group. An IP address is one example of a network address that is particularly applicable to the TCP IP context in which some embodiments of the present disclosure can be implemented. The use of IP addresses herein is intended to be illustrative of network addresses and not limiting as to the scope of the described concepts.

Virtual machine instances may be assigned a private network address not shown . For example the private network addresses may be unique with respect to their respective private networks but not guaranteed to be unique with respect to other computing systems that are not part of the private network. IP addresses are used to illustrate some example embodiments in the present disclosure. However it should be understood that other network addressing schemes may be applicable and are not excluded from the scope of the present disclosure.

Gateway may operate to manage both incoming communications to data center from communication network and outgoing communications from data center to communication network . For example if virtual machine instance sends a message not shown to computer virtual machine instance may create an outgoing communication that includes network address on a first network e.g. an external public IP address for computer as the destination address and include a network address on a second network e.g. a private IP address for virtual machine instance as the source network address. Router may then use the destination address of the outgoing message to direct the message to gateway for handling. In particular in order to allow computer to reply to the outgoing message gateway may temporarily map one of the public network addresses for data center to virtual machine instance and modify the outgoing message to replace the private network address for the source network address with the mapped public network address. Gateway may then update its mapping information with the new mapping and forward the modified outgoing message to computer over the Internet.

If computer responds to the modified outgoing message by sending a response incoming message not shown that uses the mapped public network address for virtual machine instance as the destination network address the response incoming message may be directed over the Internet to gateway . Gateway may then perform similar processing in reverse to that described above for the outgoing message. In particular gateway may use its mapping information to translate the mapped public network address into the private network address of virtual machine instance modify the destination network address of the response incoming message from the mapped public network address to the private network address of virtual machine instance and forward the modified incoming message to virtual machine instance . In this manner at least some of the internal computers of data center may communicate with external computing systems via temporary use of the public network addresses. Furthermore in some situations one or more of the internal computing systems of data center may be mapped to use one of the public network addresses e.g. to a unique combination of a public network address and a port number such that external computing systems may initiate new incoming messages to the internal computing system by directing the new incoming messages to the mapped representative public network address port as the destination network address of the new incoming messages.

It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. These network topologies and devices should be apparent to those skilled in the art.

It should also be appreciated that data center described in is merely illustrative and that other implementations might be utilized. Additionally it should be appreciated that the functionality disclosed herein might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art. It should also be appreciated that a server gateway or other computing device may comprise any combination of hardware or software that can interact and perform the described types of functionality including without limitation desktop or other computers database servers network storage devices and other network devices PDAs tablets cellphones wireless phones pagers electronic organizers Internet appliances television based systems e.g. using set top boxes and or personal digital video recorders and various other consumer products that include appropriate communication capabilities. In addition the functionality provided by the illustrated modules may in some embodiments be combined in fewer modules or distributed in additional modules. Similarly in some embodiments the functionality of some of the illustrated modules may not be provided and or other additional functionality may be available.

It will be appreciated that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software modules and or systems may execute in memory on another device and communicate with the illustrated computing systems via inter computer communication. Furthermore in some embodiments some or all of the systems and or modules may be implemented or provided in other ways such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the modules systems and data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection. The systems modules and data structures may also be transmitted as generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission media including wireless based and wired cable based media and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly the present invention may be practiced with other computer system configurations. For example the methods and systems described herein for providing reverse traceroute proxy mechanisms may be performed by devices other than computing systems and gateway devices. For example the described processes may be performed in part or in whole by other network devices and peripherals such as a network interface card NIC or any other device configured to perform such functionality.

In some embodiments a system memory may be used which is one embodiment of a computer readable storage medium configured to store program instructions and data as described above for for implementing embodiments of the corresponding methods and apparatus. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer readable storage medium may include non transitory and tangible storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to a computer system or gateway device. A computer readable storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of the computer systems described above as system memory gateway device or another type of memory. Portions or all of the multiple computer systems such as those illustrated herein may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality.

It will be appreciated that in some embodiments the functionality provided by the routines discussed above may be provided in alternative ways such as being split among more routines or consolidated into fewer routines. Similarly in some embodiments illustrated routines may provide more or less functionality than is described such as when other illustrated routines instead lack or include such functionality respectively or when the amount of functionality that is provided is altered. In addition while various operations may be illustrated as being performed in a particular manner e.g. in serial or in parallel and or in a particular order in other embodiments the operations may be performed in other orders and in other manners. Similarly the data structures discussed above may be structured in different ways in other embodiments such as by having a single data structure split into multiple data structures or by having multiple data structures consolidated into a single data structure and may store more or less information than is described e.g. when other illustrated data structures instead lack or include such information respectively or when the amount or types of information that is stored is altered .

Each of the processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code modules executed by one or more computers or computer processors. The code modules may be stored on any type of non transitory computer readable medium or computer storage device such as hard drives solid state memory optical disc and or the like. The processes and algorithms may be implemented partially or wholly in application specific circuitry. The results of the disclosed processes and process steps may be stored persistently or otherwise in any type of non transitory computer storage e.g. volatile or non volatile storage.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition certain method or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial in parallel or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

While certain example embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions disclosed herein. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the inventions disclosed herein.

