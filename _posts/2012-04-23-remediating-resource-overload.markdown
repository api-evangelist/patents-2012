---

title: Remediating resource overload
abstract: A method, an apparatus and an article of manufacture for remediating overload in an over-committed computing environment. The method includes measuring resource usage of each of multiple virtual machines on each of at least one hypervisor in a computing environment, upon detection of a resource overload on one of the at least one hypervisor, determining at least one operation that is to be taken for at least one of the multiple virtual machines on the hypervisor to remediate resource overload while increasing values of running virtual machines, and sending a command to the hypervisor to issue the at least one operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839243&OS=08839243&RS=08839243
owner: International Business Machines Corporation
number: 08839243
owner_city: Armonk
owner_country: US
publication_date: 20120423
---
Embodiments of the invention generally relate to information technology and more particularly to virtual machine management.

Resource oversubscription in computing cloud systems is becoming common in information technology IT services. Virtual machines VMs are often provisioned to host separate services in the cloud systems. Traditionally these VMs are provisioned with all of their allocated resources for example memory and central processing unit CPU guaranteed in the physical resources. Resource allocation of more than the amount that can be guaranteed by the physical resources that is resource oversubscription allows for more VMs to be hosted on a hypervisor. As VMs often do not consume all of the allocated resources over subscription can increase resource utilization and as a result reduce cost of service provision.

However oversubscription brings the risk of resource overload in the hypervisor before hosted VMs use up the allocated resources and the resource overload especially memory overload largely degrades service performance.

Existing approaches attempting to remedy the undesirable consequences of oversubscription include migration only solutions. However migration only solutions are not sufficient to remediate overload in over committed systems in these systems there exists the possibility for a large number of hypervisors to be close to overload at the same time and migration overhead may be large in a dense over committed hypervisor cluster.

In one aspect of the present invention techniques for remediating resource overload are provided. An exemplary computer implemented method for remediating overload in an over committed computing environment can include steps of measuring resource usage of each of multiple virtual machines on each of at least one hypervisor in a computing environment upon detection of a resource overload on one of the at least one hypervisor determining at least one operation that is to be taken for at least one of the multiple virtual machines on the hypervisor to remediate resource overload while increasing values of running virtual machines and sending a command to the hypervisor to issue the at least one operation.

In another aspect of the invention techniques for an automated overload remediation method for a virtualized environment are provided. An exemplary computer implemented method includes the steps of recovering from a system resource overloaded situation by selecting from a plurality of virtual machines in the system a subset of the virtual machines to migrate and a subset of the virtual machines to quiesce and periodically selecting a subset of the virtual machines to migrate and a subset of the virtual machines to resume to increase the number of running virtual machines and increase work value achieved by the running virtual machines.

Another aspect of the invention or elements thereof can be implemented in the form of an article of manufacture tangibly embodying computer readable instructions which when implemented cause a computer to carry out a plurality of method steps as described herein. Furthermore another aspect of the invention or elements thereof can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform noted method steps. Yet further another aspect of the invention or elements thereof can be implemented in the form of means for carrying out the method steps described herein or elements thereof the means can include i hardware module s ii software module s or iii a combination of hardware and software modules any of i iii implement the specific techniques set forth herein and the software modules are stored in a tangible computer readable storage medium or multiple such media .

These and other objects features and advantages of the present invention will become apparent from the following detailed description of illustrative embodiments thereof which is to be read in connection with the accompanying drawings.

As described herein an aspect of the present invention includes remediating overload in over committed computing environments. At least one embodiment of the invention includes providing a mechanism to remediate overload without assuming that there is always resource available for migration. As detailed herein a work value notion is used to compare the importance of VMs and the overload remediation problem is formulated as a variant of the Removable Online Multi Knapsack Problem ROMKP . An aspect of the invention includes an algorithm to solve this optimization problem.

An embodiment of the invention can be implemented for example in a large commercial cloud environment. When no resource available hypervisors exist at least one embodiment of the invention includes discarding certain computations temporarily that is quiescing one or more VMs determined to be less important to remediate the ongoing overload so that the rest of the VMs run normally. After a set of VMs complete their jobs and terminate normally or release resources resources become available and quiesced VMs are resumed to finish their jobs. Accordingly as detailed herein an aspect of the invention includes determining which operations migration quiesce or resume should be taken for which VMs in order to remediate resource overload in over subscribed computing systems which may not have sufficient resources while increasing for example maximizing the values of running services.

Further at least one embodiment of the invention includes combining considerations of quiesce resume and migration operations of VMs to provide an algorithm that addresses this problem variant. Accordingly the algorithm incorporates considerations of the cost of the quiesce migration resume operations and a global optimization is approximated by a heuristic algorithm.

When an overload on a hypervisor is detected by the monitor in the hypervisor the remediation center has the knowledge on resource usages of all of the hypervisors in the cloud and makes decisions of which VMs are to be migrated or quiesced or resumed. Additionally the remediation center sends commands to corresponding hypervisors to issue operations. The message transmissions between the monitors and the remediation center are illustrated via the dashed lines in .

As resource usage of a VM changes with time and VM provision and de provision occur from time to time resource usage in the cloud changes as well. Accordingly the remediation center periodically checks whether sufficient resources become available for any quiesced VMs to resume.

As detailed herein an aspect of the invention includes the use of a notion of work value to define the importance of a VM. Work value as used herein aims at measuring the potential loss of the services tasks on a VM caused by the VM s being quiesced and or the impacts of a VM s being quiesced on the execution of other VMs. These values are not measured as utility in traditional VM placement techniques because such approaches do not quiesce VMs. For example work value includes the expected work to be done by a quiesced VM if it was not quiesced and the utilities in these techniques do not consider this aspect.

An objective of at least one embodiment of the invention is to quiesce VMs performing the least amount of work value and resume VMs that were performing more work value. As described herein an analytic model is used to assess work value of each VM leveraging existing analysis for example time series with seasonality of VM metrics to compute estimate work value. Such a computation can incorporate knowledge of patterns of predicted workload life time predictions from past or workload type customer style etc.

Also at least one embodiment of the invention includes using a dependency model to assess work value of each VM. This can include for example static dependency via configuration analysis dynamic dependency and or use of other heuristics such as VM price current central processing unit CPU work etc.

One example embodiment of work value is revenue or price. If price is not used as the work value the work value may be indicated by service types. When a VM providing critical services such as email and network file system NFS is quiesced it can cause great loss. The potential loss can be estimated directly from knowledge about a VM s services or by leveraging analytical models if such direct knowledge is not available. For example if a VM provides backup service for a number of machines and performs the backup service regularly once a week the analysis of time series with seasonality can be applied to detect the regularity of this VM s service and predict the criticality of this VM at a specific time. Workload patterns can also be predicted and used to determine the importance of a VM s work at a specific time.

In addition to using knowledge about services analytical models and workload patterns to estimate the work value administrators can specify a computation of the work value of VMs at any time t. An example of computing the work value is given below the parameters V V V and the function V pattern are to be properly set 

Besides the loss of the quiesced VM s service the quiesced VM may also impact other VMs which depend on the quiesced VM. By way of example a stock trading service in a WebSphere Application Server WAS depends on a DB2 server and the WAS and DB2 servers exist in two separate VMs. When the DB2 VM is quiesced the WAS VM does not achieve any work value.

Additionally at least one embodiment of the invention can include optimizing the total work values of running VMs in dependency free scenarios when certain VMs are selected to be quiesced migrated or resumed. In dependency free scenarios a VM s work value is independent of the work values of other VMs. In such a scenario the problem is a variant of multiple knapsack problem MKP or more specifically a variant of Removable Online MKP because VMs are to be provisioned removed from hypervisors and relocated from one hypervisor to another and VMs have changing resource usages and work values. Besides work values costs of VM quiescing and migration are also considered in handling this problem.

By way of example consider a cloud computing environment that has m hypervisors H H . . . H. Hhas the amount of resource R for simplicity of this example assume that there is one type of resource however it is to be appreciated that at least one embodiment of the invention can be extended to support multiple types of resources . Also assume there are n VMs VM VM . . . VM. The variables used herein are defined as follows 

u r and xchange with time accordingly they are denoted as a function of time t u t r t and x t . Formally the following is given 

thrd thrd and thrdare the thresholds for the costs of quiesce resume and migration respectively. Those values can be determined by the system or specified by administrators.

Whether VMis to be quiesced resumed migrated or unchanged is formally expressed by the relationship between x t and x t 1 as shown below 

This variant of the ROMKP problem is NP hard. At least one embodiment of the invention includes a designed ROWM approximate algorithm to solve the problem. There are two parts in the algorithm the overload remediation part that decides which VMs to quiesce migrate when an overload occurs to a hypervisor and the periodic resume part that decides which quiesced VMs to resume when resources become sufficient.

Upon an overload that is resource usage exceeding a threshold thrd1 a set of VMs on the overloaded hypervisor is identified that have to be migrated or quiesced to remediate the overload. Then a test is carried out to determine if all of the VMs in C that is the VMs consuming the most resources on the overloaded hypervisor such that the rest of the VMs consume less than a threshold thrd2 can be migrated to other hypervisors by applying a heuristic algorithm for MKP. The test will fail when there are insufficient resources. Accordingly the VM with the least work value to resource usage ratio in the entire cloud is planned to be quiesced and the test is carried out again. This procedure is continued until the test passes.

Subsequently the planned to be quiesced VMs in Q are checked to select those VMs that have been unnecessarily planned to be quiesced. After these steps the final plan of migration and quiesce is obtained. The steps of periodic resume part are similar to the description of the overload remediation part above except that a test is carried out to determine whether all quiesced VMs in C can be resumed.

This algorithm has the time complexity of O n log n nkm where n is the number of VMs in the Cloud k is the number of VMs to be migrated resumed and m is the number of hypervisors. It is polynomial time overhead and can be implemented for by way of example clouds of hundreds of hypervisors and thousands of VMs.

By way of example at least one embodiment of the invention can be implemented as a MAPE Monitor Analyze Plan Execution loop on a large cloud platform. is a diagram illustrating architecture of implementation of the overload remediation system in a target cloud according to an embodiment of the present invention. The shaded components in are those components added to the target cloud for supporting overload remediation. The unshaded components in are components of the cloud itself.

The cloud manager is a software package in charge of VM provision de provision migration and other management operations for VMs . The data warehouse stores measurement data which are periodically reported by the monitors in hypervisors . A customer can issue commands to the cloud manager for conducting desired operations via a portal . A REST REpresentation State Transfer application programming interface API is leveraged between the portal and the cloud manager for requesting specific operations in the cloud manager. Additionally a message queue component can be implemented in between the cloud manager and the portal.

Compared with the basic overload remediation illustrated in the system depicted in includes a remediation database DB to support persistency. The database stores events generated by the hypervisor monitor for example a resource overload event an overload remediated event etc. status of the actions performed by the cloud manager for example success of migration failure of resuming a VM etc. and the current states of all managed VMs for example normally running overloaded quiesced etc. . The remediation center is a process running on a separate computer that periodically queries the remediation DB to process any new events received by the DB. When processing these events the remediation center retrieves performance data from the data warehouse as these data are needed in the remediation algorithms. When the decision of which VMs to be migrated quiesced and or resumed is made commands are sent to the cloud manager to execute the decision.

In step Q Q the VM with the next smallest U R value and with acceptable quiesce cost. Step includes determining if the overload is remediated. If yes the algorithm proceeds to step otherwise the algorithm returns to step . Accordingly the migration plan is successfully created as M and step includes removing from Q the VMs unnecessarily added into Q by step . is the final result.

Step determines if the test was successful. If successful the work is carried out and the algorithm proceeds to step . Otherwise the algorithm proceeds to step . In step Q Q the VM with the next smallest U R value and with acceptable quiesce cost. Subsequently the algorithm returns to step .

The resume plan is successfully created as M and step includes removing from Q the VMs unnecessarily added into Q by step . is the final result.

Upon detection of a resource overload on one of the at least one hypervisor steps and are carried out. Step includes determining at least one operation that is to be taken for at least one of the multiple virtual machines on the hypervisor to remediate resource overload while increasing or maximizing values of running virtual machines. As detailed herein the operation can include at least one of migration quiesce or resume.

Determining at least one operation that is to be taken can include computing a work value of each virtual machine on the hypervisor wherein work value can include at least one of a measure of potential loss of services on the virtual machine caused by the virtual machine being quiesced and a measure of an impact of the virtual machine being quiesced on execution of at least one other virtual machine. The work value of each virtual machine can include a combination of at least one factor including virtual machine lifetime price revenue service level agreement central processing unit utilization virtual machine dependency and workload prediction.

Additionally determining an operation that is to be taken can include identifying at least one virtual machine with a lowest work value to quiesce and or at least one virtual machine with a higher work value to resume for optimization. Further determining at least one operation that is to be taken can include continuously measuring and leveraging the work value and resource consumption of each virtual machine. At least one embodiment of the invention can also include using a ratio of work value and resource consumption to determine whether any of a migrate quiesce or resume operation is to be taken on a virtual machine.

Step includes sending a command to the hypervisor to issue the at least one operation. Additionally the techniques depicted in can include periodically determining whether sufficient resources become available for a quiesced virtual machine to resume.

As also detailed herein at least one embodiment of the invention includes an automated overload remediation method for a virtualized environment. Such a method includes recovering from a system resource overloaded situation by selecting from a plurality of virtual machines in the system a subset of the virtual machines to migrate and a subset of the virtual machines to quiesce. Also such an embodiment of the invention can include periodically selecting a subset of the virtual machines to migrate and a subset of the virtual machines to resume to increase the number of running virtual machines and increase work value achieved by the running virtual machines. As detailed herein each migrate quiesce and resume selection takes into account a work value metric contributed by each virtual machine. The work value metric combines one or more factors including virtual lifetime price revenue service level agreement central processing unit utilization virtual machine dependency and workload prediction.

Additionally in at least one embodiment of the invention a problem is formulated as a variant of a Removable Online Multiple Knapsack Problem ROMKP . Such a formulated problem includes considering object work values and resource usages changing with time in addition to arrival of new objects permitting knapsack operations including removal of one or more objects from a knapsack moving one or more objects from one knapsack to another and replacing one or more objects back into a knapsacks. Such a problem also includes considering costs of the knapsack operations in decision making.

A solution to the variant of ROMKP problem can include continuously measuring and leveraging the work value and resource usage of each virtual machine using a ratio of work value and resource usage as criterion to make a decision for selecting a migrate quiesce or resume operation for one or more virtual machines and computing a cost of each migrate quiesce and or resume operations and using the cost as a constraint in problem formulation. Additionally in at least one embodiment of the invention the work value for a virtual machine is defined as 1 resource usage if the virtual machine was not quiesced during a given recent time period P and infinity if the virtual machine was quiesced during the period P.

The techniques depicted in can also as described herein include providing a system wherein the system includes distinct software modules each of the distinct software modules being embodied on a tangible computer readable recordable storage medium. All the modules or any subset thereof can be on the same medium or each can be on a different medium for example. The modules can include any or all of the components shown in the figures. In an aspect of the invention the modules can run for example on a hardware processor. The method steps can then be carried out using the distinct software modules of the system as described above executing on a hardware processor. Further a computer program product can include a tangible computer readable recordable storage medium with code adapted to be executed to carry out at least one method step described herein including the provision of the system with the distinct software modules.

Additionally the techniques depicted in can be implemented via a computer program product that can include computer useable program code that is stored in a computer readable storage medium in a data processing system and wherein the computer useable program code was downloaded over a network from a remote data processing system. Also in an aspect of the invention the computer program product can include computer useable program code that is stored in a computer readable storage medium in a server data processing system and wherein the computer useable program code is downloaded over a network to a remote data processing system for use in a computer readable storage medium with the remote system.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in a computer readable medium having computer readable program code embodied thereon.

An aspect of the invention or elements thereof can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform exemplary method steps.

Additionally an aspect of the present invention can make use of software running on a general purpose computer or workstation. With reference to such an implementation might employ for example a processor a memory and an input output interface formed for example by a display and a keyboard . The term processor as used herein is intended to include any processing device such as for example one that includes a CPU central processing unit and or other forms of processing circuitry. Further the term processor may refer to more than one individual processor. The term memory is intended to include memory associated with a processor or CPU such as for example RAM random access memory ROM read only memory a fixed memory device for example hard drive a removable memory device for example diskette a flash memory and the like. In addition the phrase input output interface as used herein is intended to include for example a mechanism for inputting data to the processing unit for example mouse and a mechanism for providing results associated with the processing unit for example printer . The processor memory and input output interface such as display and keyboard can be interconnected for example via bus as part of a data processing unit . Suitable interconnections for example via bus can also be provided to a network interface such as a network card which can be provided to interface with a computer network and to a media interface such as a diskette or CD ROM drive which can be provided to interface with media .

Accordingly computer software including instructions or code for performing the methodologies of the invention as described herein may be stored in an associated memory devices for example ROM fixed or removable memory and when ready to be utilized loaded in part or in whole for example into RAM and implemented by a CPU. Such software could include but is not limited to firmware resident software microcode and the like.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus . The memory elements can include local memory employed during actual implementation of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during implementation.

Input output or I O devices including but not limited to keyboards displays pointing devices and the like can be coupled to the system either directly such as via bus or through intervening I O controllers omitted for clarity .

Network adapters such as network interface may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

As used herein including the claims a server includes a physical data processing system for example system as shown in running a server program. It will be understood that such a physical server may or may not include a display and keyboard.

As noted aspects of the present invention may take the form of a computer program product embodied in a computer readable medium having computer readable program code embodied thereon. Also any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using an appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of at least one programming language including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks. Accordingly an aspect of the invention includes an article of manufacture tangibly embodying computer readable instructions which when implemented cause a computer to carry out a plurality of method steps as described herein.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module component segment or portion of code which comprises at least one executable instruction for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It should be noted that any of the methods described herein can include an additional step of providing a system comprising distinct software modules embodied on a computer readable storage medium the modules can include for example any or all of the components detailed herein. The method steps can then be carried out using the distinct software modules and or sub modules of the system as described above executing on a hardware processor . Further a computer program product can include a computer readable storage medium with code adapted to be implemented to carry out at least one method step described herein including the provision of the system with the distinct software modules.

In any case it should be understood that the components illustrated herein may be implemented in various forms of hardware software or combinations thereof for example application specific integrated circuit s ASICS functional circuitry an appropriately programmed general purpose digital computer with associated memory and the like. Given the teachings of the invention provided herein one of ordinary skill in the related art will be able to contemplate other implementations of the components of the invention.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of another feature integer step operation element component and or group thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

At least one aspect of the present invention may provide a beneficial effect such as for example remediating hypervisor overload without assuming there is always resource available for migration.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

