---

title: Synchronous business process execution engine for action orchestration in a single execution transaction context
abstract: An asynchronous business process specification declared in a procedural markup language comprising an activity flow model and a plurality of activities is received. An indication is received that a subset of the plurality of activities is to be synchronously executed without reduced latency. All process execution related objects are fetched once into a memory. The synchronous subset is executed in a single execution transaction context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09250869&OS=09250869&RS=09250869
owner: EMC Corporation
number: 09250869
owner_city: Hopkinton
owner_country: US
publication_date: 20120330
---
A business process execution engine process engine provides orchestration for sequences of business activities called a business process or simply process in an asynchronous reliable and stateful manner.

The business process is defined as an activity flow model typically declared using a procedural markup language for example in eXtensible Markup Language XML . An activity represents either human performed tasks or automated software services accessed for example through an application programming interface API .

Typical process engines while being reliable and stateful may execute a process with an indeterminate and or an unpredictable execution time. This is a disadvantage for certain business processes.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

By design a typical process engine executes the process in an asynchronous manner with respect to the process invocation mechanism. For example the actual execution of the process by the process engine is not coordinated in time with its invocation. The engine may pause execution and resume it at a later time when resources are available while the invoker has terminated or has moved on to another responsibility.

A business process execution engine that executes business processes synchronously while still supporting all the primary capabilities of a standard asynchronous process engine is disclosed.

In some embodiments the synchronous process engine executes the exact same business process models that the asynchronous one executes by using the same procedural markup definition a user defining a process need not learn anything new nor do they need to revise existing models.

In some embodiments the synchronous process engine operates on an entire business process or in hybrid fashion as a specified portion of a process with the remainder of the business process operated on by an asynchronous process engine.

Processor is coupled bi directionally with memory which can include a first primary storage typically a random access memory RAM and a second primary storage area typically a read only memory ROM . As is well known in the art primary storage can be used as a general storage area and as scratch pad memory and can also be used to store input data and processed data. Primary storage can also store programming instructions and data in the form of data objects and text objects in addition to other data and instructions for processes operating on processor . Also as well known in the art primary storage typically includes basic operating instructions program code data and objects used by the processor to perform its functions for example programmed instructions. For example primary storage devices can include any suitable computer readable storage media described below depending on whether for example data access needs to be bi directional or uni directional. For example processor can also directly and very rapidly retrieve and store frequently needed data in a cache memory not shown.

A removable mass storage device provides additional data storage capacity for the computer system and is coupled either bi directionally read write or uni directionally read only to processor . For example storage can also include computer readable media such as magnetic tape flash memory PC CARDS portable mass storage devices holographic storage devices and other storage devices. A fixed mass storage can also for example provide additional data storage capacity. The most common example of mass storage is a hard disk drive. Mass storage generally store additional programming instructions data and the like that typically are not in active use by the processor . It will be appreciated that the information retained within mass storage can be incorporated if needed in standard fashion as part of primary storage for example RAM as virtual memory.

In addition to providing processor access to storage subsystems bus can be used to provide access to other subsystems and devices as well. As shown these can include a display monitor a network interface a keyboard and a pointing device as well as an auxiliary input output device interface a sound card speakers and other subsystems as needed. For example the pointing device can be a mouse stylus track ball or tablet and is useful for interacting with a graphical user interface.

The network interface allows processor to be coupled to another computer computer network or telecommunications network using a network connection as shown. For example through the network interface the processor can receive information for example data objects or program instructions from another network or output information to another network in the course of performing method process steps. Information often represented as a sequence of instructions to be executed on a processor can be received from and outputted to another network. An interface card or similar device and appropriate software implemented by for example executed performed on processor can be used to connect the computer system to an external network and transfer data according to standard protocols. For example various process embodiments disclosed herein can be executed on processor or can be performed across a network such as the Internet intranet networks or local area networks in conjunction with a remote processor that shares a portion of the processing. Throughout this specification network refers to any interconnection between computer components including the Internet Ethernet intranet local area network LAN home area network HAN serial connection parallel connection wide area network WAN Fibre Channel PCI PCI X AGP VLbus PCI Express Expresscard Infiniband ACCESS.bus Wireless LAN WiFi HomePNA Optical Fibre G.hn infrared network satellite network microwave network cellular network virtual private network VPN Universal Serial Bus USB FireWire Serial ATA 1 Wire UNI O or any form of connecting homogenous heterogeneous systems and or groups of systems together. Additional mass storage devices not shown can also be connected to processor through network interface .

An auxiliary I O device interface not shown can be used in conjunction with computer system . The auxiliary I O device interface can include general and customized interfaces that allow the processor to send and more typically receive data from other devices such as microphones touch sensitive displays transducer card readers tape readers voice or handwriting recognizers biometrics readers cameras portable mass storage devices and other computers.

In addition various embodiments disclosed herein further relate to computer storage products with a computer readable medium that includes program code for performing various computer implemented operations. The computer readable medium is any data storage device that can store data which can thereafter be read by a computer system. Examples of computer readable media include but are not limited to all the media mentioned above magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media such as optical disks and specially configured hardware devices such as application specific integrated circuits ASIC s programmable logic devices PLD s and ROM and RAM devices. Examples of program code include both machine code as produced for example by a compiler or files containing higher level code for example a script that can be executed using an interpreter.

The computer system shown in is but an example of a computer system suitable for use with the various embodiments disclosed herein. Other computer systems suitable for such use can include additional or fewer subsystems. In addition bus is illustrative of any interconnection scheme serving to link the subsystems. Other computer architectures having different configurations of subsystems can also be utilized.

By design the asynchronous process engine executes over an indeterminate amount of time because it allocates each activity independently to computing resources for example using a queue. For example in the example shown in the engine may allocate Activity and to resources with short queues but may allocate Activity to a resource with a long queue suspending the completion of the portion of a process until the resource associated with Activity is freed.

When designing action orchestrated business processes this indeterminate execution time is a disadvantage. Disadvantages of only using an asynchronous process engine include that 

In one sense synchronous process engine provides a static resource allocation wherein a computing resource is tied up statically for a single execution context permitting a predictable and or determinate time for execution.

In some embodiments the synchronous process engine orchestrates the activities through a variety of flow patterns like splits parallel joins n out of m joins error forks and others. Each orchestration managed by the process engine may be initiated through a variety of different mechanisms for example by an externally occurring event through direct invocation via a software API and or from a computer software program s graphical user interface.

In some embodiments the synchronous process engine carries out the same set of activities provides e.g. a more limited set of initiation mechanisms and is capable of orchestrating the same flow patterns as the asynchronous engine . Since manual activities are asynchronous by nature the synchronous engine executes the manual activities as null operations causing neither changes nor side effects to any aspect of the execution or process relevant data. If no non manual activities are detected by the engine for forward progress execution the engine ends the execution and returns to the invoker immediately. Manual activities and or null operations may be flagged for post process execution. In some embodiments if no non manual activities are detected for forward progress execution the engine terminates the process execution and returns immediately no post process execution of the remaining manual activities occurs because the process has ended the engine will not even do the null operation as it is unnecessary for example there are no remaining automated activities to carry out .

Similarly rendezvous also known as wait for activities that require waiting for external events to occur are not allowed for a synchronous process engine as waiting may lock the associated resources.

In some embodiments with a dedicated associated resource for the synchronous process engine a simplification is to serialize the parallelized activities synchronous execution. Because the resource is dedicated the synchronous serialized activities are many times faster than the asynchronous parallelized activities.

Due to the manner in which it executes business processes the synchronous process engine may provide orchestration for actions within software applications. Actions are defined as changes to or retrieval of data needed by the application that typically require multiple steps and some specific sequencing to accomplish.

Examples of application actions carried out by the engine include querying data from a relational database calling a remote Web service uploading content to a repository sending electronic mail and sending electronic files to an FTP site. These individual actions are orchestrated to form composite actions by the synchronous process engine . The engine allows these actions to be carried out with very low latency with respect to their invocation and for the information accessed by the actions to be modified without the need to coordinate complex distributed transaction semantics with the synchronous process engine. In some embodiments the engine has no persistency requirements thus there is no need for distributed transaction coordination with the data accessed by the engine s activities during execution. This is in contrast to where the distributed transaction coordination comes into play if the engine needs to persist state data which is unnecessary for a synchronous process engine.

One example is looking up city data to use in filling out user interface web forms for example verifying zip codes and or area codes etc. The business portion of a process would be a single activity as shown in . The activity is executed synchronously to fill out the drop down GUI control on the Web Form to list all cities for a particular US State as shown in .

In some embodiments upon model definition and or creation by default the system assumes an asynchronous process engine will execute all activities. The example given in is a loan approval process which includes two sequential activities a determination of income from a credit application and a determination of a debt to income ratio and another activity reporting the loan approval status . Using only an asynchronous engine there may be no way to predict execution time for activities and together.

In the user or system specifies that activities and are to be executed synchronously in a Turbo Mode by synchronous engine and thus are shown in a different grey color. The remaining activities for example are still executed by the asynchronous engine . In this way the system designer can assign a predictable execution time for activities and together.

In one embodiment an activity type called an activity template is used to represent the invocation of synchronous process states within the larger business process. In a single activity would represent a different process that would be executed synchronously i.e. in Turbo mode . That process would contain the two activities Determine Income from Credit Application and Determine Debt to Income Ratio.

In step an asynchronous business process specification declared in a procedural markup language comprising an activity flow model and more than one activity is received. For example the procedural markup language may be expressed in XML XPDL BPEL and or BPMN.

In step an indication that a subset of the activities is to be synchronously executed without reduced latency is received. In some embodiments the synchronous subset that is manual activities is identified as null operations. The indication may be received via an API or via a user interface. In some embodiments the engine identifies any activities in the synchronous subset that are rendezvous activities and flags them as not synchronously executable. In some embodiments the engine identifies parallelized activities within the synchronous subset and serializes the parallelized activities for synchronous execution.

In step all process execution related objects are fetched once into cache and or memory. In step the synchronous subset is executed in a single execution transaction context. For example the synchronous subset may be executed without clearing the process execution related objects from the memory and or without recording an execution state during the execution. Executing in a single execution transaction context includes executing with a predictable execution time. In some embodiments the null operations are flagged for future manual execution.

Without limitation the following are example release notes that can be used to describe use of the synchronous engine 

Use the stateless process engine to execute process instances in memory. The stateless process engine relies on a Synchronous Invoke Process activity that invokes a workflow synchronously. The synchronous transaction commits only at the end of the workflow so that if an error occurs during the subprocess the entire workflow fails.

Invoking process instances using the Synchronous Invoke Process activity provides significant performance improvement. For example during in house testing the execution time of one workflow instance containing 20 activities was reduced from three seconds to 160 milliseconds. Actual performance benefits depends on multiple factors including load the number of processors processor speed and the nature of the activities in the process.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

