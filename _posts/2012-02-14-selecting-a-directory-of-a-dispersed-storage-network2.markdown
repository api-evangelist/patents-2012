---

title: Selecting a directory of a dispersed storage network
abstract: A method begins by a processing module receiving a dispersed storage network (DSN) access request accessing DSN memory regarding a set of encoded data slices, selecting a local DSN directory or a global DSN directory to produce a selected DSN directory, identifying an entry of the selected DSN directory regarding the set of encoded data slices to produce an identified entry, and accessing the DSN memory regarding the set of encoded data slices. The method continues with the processing module determining whether to update one or more of the local DSN directory and the global DSN directory based on the accessing the DSN memory and when the one or more of the local DSN directory and the global DSN directory is to be updated, updating the one or more of the local DSN directory and the global DSN directory in accordance with the accessing the DSN memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09658911&OS=09658911&RS=09658911
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09658911
owner_city: Armonk
owner_country: US
publication_date: 20120214
---
The present U.S. Utility Patent Application is claiming priority pursuant to 35 U.S.C. 119 e to U.S. Provisional Application No. 61 448 526 entitled Dispersed Storage Network Directory System Utilization filed Mar. 2 2011 which is incorporated herein by reference in its entirety and made part of the present U.S. Utility Patent Application for all purposes.

This invention relates generally to computing systems and more particularly to data storage solutions within such computing systems.

Computers are known to communicate process and store data. Such computers range from wireless smart phones to data centers that support millions of web searches stock trades or on line purchases every day. In general a computing system generates data and or manipulates data from one form into another. For instance an image sensor of the computing system generates raw picture data and using an image compression program e.g. JPEG MPEG etc. the computing system manipulates the raw picture data into a standardized compressed image.

With continued advances in processing speed and communication speed computers are capable of processing real time multimedia data for applications ranging from simple voice communications to streaming high definition video. As such general purpose information appliances are replacing purpose built communications devices e.g. a telephone . For example smart phones can support telephony communications but they are also capable of text messaging and accessing the internet to perform functions including email web browsing remote applications access and media communications e.g. telephony voice image transfer music files video files real time video streaming. etc. .

Each type of computer is constructed and operates in accordance with one or more communication processing and storage standards. As a result of standardization and with advances in technology more and more information content is being converted into digital formats. For example more digital cameras are now being sold than film cameras thus producing more digital pictures. As another example web based programming is becoming an alternative to over the air television broadcasts and or cable broadcasts. As further examples papers books video entertainment home video etc. are now being stored digitally which increases the demand on the storage function of computers.

A typical computer storage system includes one or more memory devices aligned with the needs of the various operational aspects of the computer s processing and communication functions. Generally the immediacy of access dictates what type of memory device is used. For example random access memory RAM memory can be accessed in any random order with a constant response time thus it is typically used for cache memory and main memory. By contrast memory device technologies that require physical movement such as magnetic disks tapes and optical discs have a variable response time as the physical movement can take longer than the data transfer thus they are typically used for secondary memory e.g. hard drive backup memory etc. .

A computer s storage system will be compliant with one or more computer storage standards that include but are not limited to network file system NFS flash file system FFS disk file system DFS small computer system interface SCSI internet small computer system interface iSCSI file transfer protocol FTP and web based distributed authoring and versioning WebDAV . These standards specify the data storage format e.g. files data objects data blocks directories etc. and interfacing between the computer s processing function and its storage system which is a primary function of the computer s memory controller.

Despite the standardization of the computer and its storage system memory devices fail especially commercial grade memory devices that utilize technologies incorporating physical movement e.g. a disc drive . For example it is fairly common for a disc drive to routinely suffer from bit level corruption and to completely fail after three years of use. One solution is to utilize a higher grade disc drive which adds significant cost to a computer.

Another solution is to utilize multiple levels of redundant disc drives to replicate the data into two or more copies. One such redundant drive approach is called redundant array of independent discs RAID . In a RAID device a RAID controller adds parity data to the original data before storing it across the array. The parity data is calculated from the original data such that the failure of a disc will not result in the loss of the original data. For example RAID 5 uses three discs to protect data from the failure of a single disc. The parity data and associated redundancy overhead data reduces the storage capacity of three independent discs by one third e.g. n 1 capacity . RAID 6 can recover from a loss of two discs and requires a minimum of four discs with a storage capacity of n 2.

While RAID addresses the memory device failure issue it is not without its own failure issues that affect its effectiveness efficiency and security. For instance as more discs are added to the array the probability of a disc failure increases which increases the demand for maintenance. For example when a disc fails it needs to be manually replaced before another disc fails and the data stored in the RAID device is lost. To reduce the risk of data loss data on a RAID device is typically copied on to one or more other RAID devices. While this addresses the loss of data issue it raises a security issue since multiple copies of data are available which increases the chances of unauthorized access. Further as the amount of data being stored grows the overhead of RAID devices becomes a non trivial efficiency issue.

The DSN memory includes a plurality of distributed storage DS units for storing data of the system. Each of the DS units includes a processing module and memory and may be located at a geographically different site than the other DS units e.g. one in Chicago one in Milwaukee etc. .

Each of the user devices the DS processing unit the DS managing unit and the storage integrity processing unit may be a portable computing device e.g. a social networking device a gaming device a cell phone a smart phone a personal digital assistant a digital music player a digital video player a laptop computer a handheld computer a video game controller and or any other portable device that includes a computing core and or a fixed computing device e.g. a personal computer a computer server a cable set top box a satellite receiver a television set a printer a fax machine home entertainment equipment a video game console and or any type of home or office computing equipment . Such a portable or fixed computing device includes a computing core and one or more interfaces and or . An embodiment of the computing core will be described with reference to .

With respect to the interfaces each of the interfaces and includes software and or hardware to support one or more communication links via the network indirectly and or directly. For example interface supports a communication link wired wireless direct via a LAN via the network etc. between the first type of user device and the DS processing unit . As another example DSN interface supports a plurality of communication links via the network between the DSN memory and the DS processing unit the first type of user device and or the storage integrity processing unit . As yet another example interface supports a communication link between the DS managing unit and any one of the other devices and or units and or via the network .

In general and with respect to data storage the system supports three primary functions distributed network data storage management distributed data storage and retrieval and data storage integrity verification. In accordance with these three primary functions data can be distributedly stored in a plurality of physically different locations and subsequently retrieved in a reliable and secure manner regardless of failures of individual storage devices failures of network equipment the duration of storage the amount of data being stored attempts at hacking the data etc.

The DS managing unit performs distributed network data storage management functions which include establishing distributed data storage parameters performing network operations performing network administration and or performing network maintenance. The DS managing unit establishes the distributed data storage parameters e.g. allocation of virtual DSN memory space distributed storage parameters security parameters billing information user profile information etc. for one or more of the user devices e.g. established for individual devices established for a user group of devices established for public access by the user devices etc. . For example the DS managing unit coordinates the creation of a vault e.g. a virtual memory block within the DSN memory for a user device for a group of devices or for public access . The DS managing unit also determines the distributed data storage parameters for the vault. In particular the DS managing unit determines a number of slices e.g. the number that a data segment of a data file and or data block is partitioned into for distributed storage and a read threshold value e.g. the minimum number of slices required to reconstruct the data segment .

As another example the DS managing unit creates and stores locally or within the DSN memory user profile information. The user profile information includes one or more of authentication information permissions and or the security parameters. The security parameters may include one or more of encryption decryption scheme one or more encryption keys key generation scheme and data encoding decoding scheme.

As yet another example the DS managing unit creates billing information for a particular user user group vault access public vault access etc. For instance the DS managing unit tracks the number of times a user accesses a private vault and or public vaults which can be used to generate a per access bill. In another instance the DS managing unit tracks the amount of data stored and or retrieved by a user device and or a user group which can be used to generate a per data amount bill.

The DS managing unit also performs network operations network administration and or network maintenance. As at least part of performing the network operations and or administration the DS managing unit monitors performance of the devices and or units of the system for potential failures determines the devices and or units activation status determines the devices and or units loading and any other system level operation that affects the performance level of the system . For example the DS managing unit receives and aggregates network management alarms alerts errors status information performance information and messages from the devices and or the units . For example the DS managing unit receives a simple network management protocol SNMP message regarding the status of the DS processing unit .

The DS managing unit performs the network maintenance by identifying equipment within the system that needs replacing upgrading repairing and or expanding. For example the DS managing unit determines that the DSN memory needs more DS units or that one or more of the DS units needs updating.

The second primary function i.e. distributed data storage and retrieval begins and ends with a user device . For instance if a second type of user device has a data file and or data block to store in the DSN memory it sends the data file and or data block to the DS processing unit via its interface . As will be described in greater detail with reference to the interface functions to mimic a conventional operating system OS file system interface e.g. network file system NFS flash file system FFS disk file system DFS file transfer protocol FTP web based distributed authoring and versioning WebDAV etc. and or a block memory interface e.g. small computer system interface SCSI internet small computer system interface iSCSI etc. . In addition the interface may attach a user identification code ID to the data file and or data block .

The DS processing unit receives the data file and or data block via its interface and performs a distributed storage DS process thereon e.g. an error coding dispersal storage function . The DS processing begins by partitioning the data file and or data block into one or more data segments which is represented as Y data segments. For example the DS processing may partition the data file and or data block into a fixed byte size segment e.g. 2to 2bytes where n 2 or a variable byte size e.g. change byte size from segment to segment or from groups of segments to groups of segments etc. .

For each of the Y data segments the DS processing error encodes e.g. forward error correction FEC information dispersal algorithm or error correction coding and slices or slices then error encodes the data segment into a plurality of error coded EC data slices which is represented as X slices per data segment. The number of slices X per segment which corresponds to a number of pillars n is set in accordance with the distributed data storage parameters and the error coding scheme. For example if a Reed Solomon or other FEC scheme is used in an n k system then a data segment is divided into n slices where k number of slices is needed to reconstruct the original data i.e. k is the threshold . As a few specific examples the n k factor may be 5 3 6 4 8 6 8 5 16 10.

For each EC slice the DS processing unit creates a unique slice name and appends it to the corresponding EC slice . The slice name includes universal DSN memory addressing routing information e.g. virtual memory addresses in the DSN memory and user specific information e.g. user ID file name data block identifier etc. .

The DS processing unit transmits the plurality of EC slices to a plurality of DS units of the DSN memory via the DSN interface and the network . The DSN interface formats each of the slices for transmission via the network . For example the DSN interface may utilize an internet protocol e.g. TCP IP etc. to packetize the EC slices for transmission via the network .

The number of DS units receiving the EC slices is dependent on the distributed data storage parameters established by the DS managing unit . For example the DS managing unit may indicate that each slice is to be stored in a different DS unit . As another example the DS managing unit may indicate that like slice numbers of different data segments are to be stored in the same DS unit . For example the first slice of each of the data segments is to be stored in a first DS unit the second slice of each of the data segments is to be stored in a second DS unit etc. In this manner the data is encoded and distributedly stored at physically diverse locations to improve data storage integrity and security.

Each DS unit that receives an EC slice for storage translates the virtual DSN memory address of the slice into a local physical address for storage. Accordingly each DS unit maintains a virtual to physical memory mapping to assist in the storage and retrieval of data.

The first type of user device performs a similar function to store data in the DSN memory with the exception that it includes the DS processing. As such the device encodes and slices the data file and or data block it has to store. The device then transmits the slices to the DSN memory via its DSN interface and the network .

For a second type of user device to retrieve a data file or data block from memory it issues a read command via its interface to the DS processing unit . The DS processing unit performs the DS processing to identify the DS units storing the slices of the data file and or data block based on the read command. The DS processing unit may also communicate with the DS managing unit to verify that the user device is authorized to access the requested data.

Assuming that the user device is authorized to access the requested data the DS processing unit issues slice read commands to at least a threshold number of the DS units storing the requested data e.g. to at least 10 DS units for a 16 10 error coding scheme . Each of the DS units receiving the slice read command verifies the command accesses its virtual to physical memory mapping retrieves the requested slice or slices and transmits it to the DS processing unit .

Once the DS processing unit has received a read threshold number of slices for a data segment it performs an error decoding function and de slicing to reconstruct the data segment. When Y number of data segments has been reconstructed the DS processing unit provides the data file and or data block to the user device . Note that the first type of user device performs a similar process to retrieve a data file and or data block.

The storage integrity processing unit performs the third primary function of data storage integrity verification. In general the storage integrity processing unit periodically retrieves slices and or slice names of a data file or data block of a user device to verify that one or more slices have not been corrupted or lost e.g. the DS unit failed . The retrieval process mimics the read process previously described.

If the storage integrity processing unit determines that one or more slices is corrupted or lost it rebuilds the corrupted or lost slice s in accordance with the error coding scheme. The storage integrity processing unit stores the rebuilt slice or slices in the appropriate DS unit s in a manner that mimics the write process previously described.

In an example of storing data the gateway module receives an incoming data object that includes a user ID field an object name field and the data object field and may also receive corresponding information that includes a process identifier e.g. an internal process application ID metadata a file system directory a block number a transaction message a user device identity ID a data object identifier a source name and or user information. The gateway module authenticates the user associated with the data object by verifying the user ID with the DS managing unit and or another authenticating unit.

When the user is authenticated the gateway module obtains user information from the management unit the user device and or the other authenticating unit. The user information includes a vault identifier operational parameters and user attributes e.g. user data billing information etc. . A vault identifier identifies a vault which is a virtual memory space that maps to a set of DS storage units . For example vault i.e. user 1 s DSN memory space includes eight DS storage units X 8 wide and vault i.e. user 2 s DSN memory space includes sixteen DS storage units X 16 wide . The operational parameters may include an error coding algorithm the width n number of pillars X or slices per segment for this vault a read threshold T a write threshold an encryption algorithm a slicing parameter a compression algorithm an integrity check method caching settings parallelism settings and or other parameters that may be used to access the DSN memory layer.

The gateway module uses the user information to assign a source name to the data. For instance the gateway module determines the source name of the data object based on the vault identifier and the data object. For example the source name may contain a file identifier ID a vault generation number a reserved field and a vault identifier ID . As another example the gateway module may generate the file ID based on a hash function of the data object . Note that the gateway module may also perform message conversion protocol conversion electrical conversion optical conversion access control user identification user information retrieval traffic monitoring statistics generation configuration management and or source name determination.

The access module receives the data object and creates a series of data segments through Y in accordance with a data storage protocol e.g. file storage system a block storage system and or an aggregated block storage system . The number of segments Y may be chosen or randomly assigned based on a selected segment size and the size of the data object. For example if the number of segments is chosen to be a fixed number then the size of the segments varies as a function of the size of the data object. For instance if the data object is an image file of 4 194 304 eight bit bytes e.g. 33 554 432 bits and the number of segments Y 131 072 then each segment is 256 bits or 32 bytes. As another example if segment size is fixed then the number of segments Y varies based on the size of data object. For instance if the data object is an image file of 4 194 304 bytes and the fixed size of each segment is 4 096 bytes then the number of segments Y 1 024. Note that each segment is associated with the same source name.

The grid module receives the data segments and may manipulate e.g. compression encryption cyclic redundancy check CRC etc. each of the data segments before performing an error coding function of the error coding dispersal storage function to produce a pre manipulated data segment. After manipulating a data segment if applicable the grid module error encodes e.g. Reed Solomon Convolution encoding Trellis encoding etc. the data segment or manipulated data segment into X error coded data slices .

The value X or the number of pillars e.g. X 16 is chosen as a parameter of the error coding dispersal storage function. Other parameters of the error coding dispersal function include a read threshold T a write threshold W etc. The read threshold e.g. T 10 when X 16 corresponds to the minimum number of error free error coded data slices required to reconstruct the data segment. In other words the DS processing module can compensate for X T e.g. 16 10 6 missing error coded data slices per data segment. The write threshold W corresponds to a minimum number of DS storage units that acknowledge proper storage of their respective data slices before the DS processing module indicates proper storage of the encoded data segment. Note that the write threshold is greater than or equal to the read threshold for a given number of pillars X .

For each data slice of a data segment the grid module generates a unique slice name and attaches it thereto. The slice name includes a universal routing information field and a vault specific field and may be 48 bytes e.g. 24 bytes for each of the universal routing information field and the vault specific field . As illustrated the universal routing information field includes a slice index a vault ID a vault generation and a reserved field. The slice index is based on the pillar number and the vault ID and as such is unique for each pillar e.g. slices of the same pillar for the same vault for any segment will share the same slice index . The vault specific field includes a data name which includes a file ID and a segment number e.g. a sequential numbering of data segments Y of a simple data object or a data block number .

Prior to outputting the error coded data slices of a data segment the grid module may perform post slice manipulation on the slices. If enabled the manipulation includes slice level compression encryption CRC addressing tagging and or other manipulation to improve the effectiveness of the computing system.

When the error coded data slices of a data segment are ready to be outputted the grid module determines which of the DS storage units will store the EC data slices based on a dispersed storage memory mapping associated with the user s vault and or DS storage unit attributes. The DS storage unit attributes may include availability self selection performance history link speed link latency ownership available DSN memory domain cost a prioritization scheme a centralized selection message from another source a lookup table data ownership and or any other factor to optimize the operation of the computing system. Note that the number of DS storage units is equal to or greater than the number of pillars e.g. X so that no more than one error coded data slice of the same data segment is stored on the same DS storage unit . Further note that EC data slices of the same pillar number but of different segments e.g. EC data slice of data segment and EC data slice of data segment may be stored on the same or different DS storage units .

The storage module performs an integrity check on the outbound encoded data slices and when successful identifies a plurality of DS storage units based on information provided by the grid module . The storage module then outputs the encoded data slices through X of each segment through Y to the DS storage units . Each of the DS storage units stores its EC data slice s and maintains a local virtual DSN address to physical location table to convert the virtual DSN address of the EC data slice s into physical storage addresses.

In an example of a read operation the user device and or sends a read request to the DS processing unit which authenticates the request. When the request is authentic the DS processing unit sends a read message to each of the DS storage units storing slices of the data object being read. The slices are received via the DSnet interface and processed by the storage module which performs a parity check and provides the slices to the grid module when the parity check was successful. The grid module decodes the slices in accordance with the error coding dispersal storage function to reconstruct the data segment. The access module reconstructs the data object from the data segments and the gateway module formats the data object for transmission to the user device.

In an example of a write operation the pre slice manipulator receives a data segment and a write instruction from an authorized user device. The pre slice manipulator determines if pre manipulation of the data segment is required and if so what type. The pre slice manipulator may make the determination independently or based on instructions from the control unit where the determination is based on a computing system wide predetermination a table lookup vault parameters associated with the user identification the type of data security requirements available DSN memory performance requirements and or other metadata.

Once a positive determination is made the pre slice manipulator manipulates the data segment in accordance with the type of manipulation. For example the type of manipulation may be compression e.g. Lempel Ziv Welch Huffman Golomb fractal wavelet etc. signatures e.g. Digital Signature Algorithm DSA Elliptic Curve DSA Secure Hash Algorithm etc. watermarking tagging encryption e.g. Data Encryption Standard Advanced Encryption Standard etc. adding metadata e.g. time date stamping user information file type etc. cyclic redundancy check e.g. CRC32 and or other data manipulations to produce the pre manipulated data segment.

The encoder encodes the pre manipulated data segment using a forward error correction FEC encoder and or other type of erasure coding and or error coding to produce an encoded data segment . The encoder determines which forward error correction algorithm to use based on a predetermination associated with the user s vault a time based algorithm user direction DS managing unit direction control unit direction as a function of the data type as a function of the data segment metadata and or any other factor to determine algorithm type. The forward error correction algorithm may be Golay Multidimensional parity Reed Solomon Hamming Bose Ray Chauduri Hocquenghem BCH Cauchy Reed Solomon or any other FEC encoder. Note that the encoder may use a different encoding algorithm for each data segment the same encoding algorithm for the data segments of a data object or a combination thereof.

The encoded data segment is of greater size than the data segment by the overhead rate of the encoding algorithm by a factor of X T where X is the width or number of slices and T is the read threshold. In this regard the corresponding decoding process can accommodate at most X T missing EC data slices and still recreate the data segment . For example if X 16 and T 10 then the data segment will be recoverable as long as 10 or more EC data slices per segment are not corrupted.

The slicer transforms the encoded data segment into EC data slices in accordance with the slicing parameter from the vault for this user and or data segment . For example if the slicing parameter is X 16 then the slicer slices each encoded data segment into 16 encoded slices.

The post slice manipulator performs if enabled post manipulation on the encoded slices to produce the EC data slices. If enabled the post slice manipulator determines the type of post manipulation which may be based on a computing system wide predetermination parameters in the vault for this user a table lookup the user identification the type of data security requirements available DSN memory performance requirements control unit directed and or other metadata. Note that the type of post slice manipulation may include slice level compression signatures encryption CRC addressing watermarking tagging adding metadata and or other manipulation to improve the effectiveness of the computing system.

In an example of a read operation the post slice de manipulator receives at least a read threshold number of EC data slices and performs the inverse function of the post slice manipulator to produce a plurality of encoded slices. The de slicer de slices the encoded slices to produce an encoded data segment . The decoder performs the inverse function of the encoder to recapture the data segment . The pre slice de manipulator performs the inverse function of the pre slice manipulator to recapture the data segment .

The messages include a request messages and response messages wherein the response messages are formed in response to a corresponding request message of request messages . A requester generates and sends a request message to a responder. The responder generates and sends the response message to the requester. For example the requester generates and sends a read request message to solicit a retrieval action and the responder generates and sends a corresponding read response message to provide information associated with the read request message . As another example the DS processing of the user device e.g. the requester generates a request and outputs the request to the DSN interface of the user device . The DSN interface of the user device transforms the request to produce and send the request message to the DS unit e.g. the responder . The computing core of the DS unit generates a response and outputs the response to the DSN interface of the DS unit . The DSN interface of the DS unit transforms the response to produce and send the response message to the user device .

Requester and responder roles may change when a request response message pair is initiated by another unit of the system. For example DS unit e.g. the requester generates and sends the request message to the user device e.g. the responder . The user device generates and sends the response message to the DS unit in response to receiving the request message . Such request response message pairs may be utilized by any module or unit of the system. The request messages may be sent by one requester to one or more responders such that the same request message is sent to two or more responders when a plurality of responders is selected. Such a selection of a plurality of responders is discussed in greater detail with reference to .

The protocol header includes one or more of a protocol class field a protocol class version field an operation code field a request response field a request number field and a payload length field . Such a protocol class field contains any number of bytes to specify a sub protocol identifier to enable a plurality of families of protocols to be utilized. For example the protocol class field is one byte in length and includes a protocol class value of 01 hex to signify a first protocol class. The protocol class version field contains any number of bytes to specify a sub protocol version associated with the protocol class enabling a plurality of versions of protocols to be utilized with each protocol class. For example the protocol class version field is one byte in length and includes a protocol class version value of 01 hex to signify a first protocol class version.

The operation code field contains any number of bytes to specify an operation code associated with a requested action providing message interpretation instructions to a message target. For example the operation code field is one byte in length and includes an operation code value of a read operation. The request response field contains any number of bytes to specify whether the message is a request message or a response message. For example the request response field is one byte in length and a response reserve value is indicated by a one bit flag of the byte e.g. a most significant bit of the byte . In an instance a flag value of the one bit flag is zero when the message is a request message. In another instance the flag value of the one bit flag is one when the message is a response message.

The request number field contains any number of bytes to include a request number value to associate at least one request message with at least one response message. Such a request number value may be produced as at least one of a random number a random number plus a predetermined number and based on a previous request number. For example the request number field is four bytes in length and includes a request number value of 457 to associate a read request message with a read response message when the previous request number value is 456. As another example the request number field includes a request number value of 5 358 to associate a read response message with a read request message when a request number value of 5 358 is extracted from the read request message.

The payload length field contains any number of bytes to include a payload length value to indicate a number of bytes contained in the payload . Such a payload length value may be determined based on one or more of counting bytes of the payload utilizing a predetermined number based on one or more of the protocol class value the protocol class version value the operation code value and the response reserved value and utilizing a predetermined formula based on one or more of the protocol class value the protocol class version value the operation code value and the response reserved value. For example the payload length field is four bytes in length and includes a payload length value of zero when the operation code value is associated with a write rollback response operation and the response reserved value is associated with a response message. As another example the payload length field includes a payload length value of 104 when the operation code value is associated with a read request message and a predetermined formula of 48n 8 associated with the read request message is utilized e.g. where n 2 corresponding to 2 slice names .

The payload may be organized into one or more payload fields in accordance with one or more of the values of the protocol class field protocol class version field the operation code field and the request response field . The one or more payload fields include payload bytes M wherein values of the payload bytes M are establishing accordance with the one or more payload fields. For example the one or more payload fields include slice name fields when the payload is associated with a read request DSN frame. As another example the one or more payload fields include one or more encoded data slices when the payload is associated with a read response DSN frame. The method to generate the fields of the DSN frame and to generate values for the fields is discussed in greater detail with reference to .

In an example of operation the DS processing dispersed storage error encodes data utilizing the dispersed storage error coding parameters to produce 3 sets of encoded data slices   through   e.g. set one includes slices through   . The DS processing outputs a write request that includes the three sets of encoded data slices to the DSN interface . The DSN interface generates at least one write request DSN frame wherein at least one payload section of the at least one write request DSN frame includes at least one encoded data slice of the three sets of encoded data slices. The DSN interface sends the at least one write request DSN frame to the DS units wherein the at least one write request DSN frame sent to DS unit includes payload the at least one write request DSN frame sent to DS unit includes payload the at least one write request DSN frame sent to DS unit includes payload and the at least one write request DSN frame sent to DS unit includes payload .

The DSN interface selects at least one encoded data slice of the three sets of encoded data slices to include in each of the payloads . The DSN interface may select at least one of all slices of a corresponding pillar of the three sets of encoded data slices per payload e.g. pillar one slices are included in the payload one slice of the corresponding pillar of the three sets of encoded data slices per payload e.g. one slice of pillar is included in payload all encoded data slices of the three sets of encoded data slices for all payloads and one set e.g. from one data segment of encoded data slices of the three sets of encoded data slices for all payloads .

The payload scenarios A D represent example scenarios indicating which encoded data slices of the three sets of encoded data slices are included in the payloads . Payload scenario A represents a scenario where the DSN interface selects all slices of the corresponding pillar of the three sets of encoded data slices per payload. For example the DSN interface selects slices     and   of pillar to be included in payload slices     and   of pillar to be included in payload slices     and   of pillar to be included in payload and slices     and   of pillar to be included in payload . Payload scenario B represents a scenario where the DSN interface selects one slice of the corresponding pillar of the three sets of encoded data slices per payload. For example the DSN interface selects slice   of pillar to be included in payload slice   of pillar to be included in payload slice   of pillar to be included in payload and slice   of pillar to be included in payload .

Payload scenario C represents a scenario where the DSN interface selects all encoded data slices of the three sets of encoded data slices for all payloads . For example the DSN interface selects slices                       and   to be included in each payload of payloads . Payload scenario D represents a scenario where the DSN interface selects one of encoded data slices of the three sets of encoded data slices for all payloads . For example the DSN interface selects slices       and   to be included in each payload of payloads .

The processing module generates a protocol class value of the values for the protocol class field by at least one of retrieving the protocol class value from a protocol class list based on the operational function utilizing the protocol class value of a request DSN frame e.g. a DSN frame that includes a request message when the DSN frame is a response DSN frame e.g. a DSN frame that includes a response message retrieving the protocol class value from a support protocol class list and retrieving the protocol class value from a unit module type protocol class list. For example the processing module generates a protocol class value of 01 when the protocol class value of a corresponding read request DSN frame has value of 01 and the operational function is a read response.

The method continues at step where the processing module generates a protocol class version field. The processing module generates a protocol class version value of the values for the protocol class version field by at least one of utilizing a most recent protocol class version value retrieving the protocol class version value from a protocol class version list based on the operational function utilizing the protocol class version value of a request DSN frame when the DSN frame is a response DSN frame retrieving the protocol class version value from a support protocol class version list and retrieving the protocol class version value from a unit module protocol class version list. For example the processing module generates a protocol class version value of 03 based on retrieving the most recent protocol class version value from the support protocol class version list.

The method continues at step where the processing module generates an operation code field that includes an opcode value based on one or more of an operational function being communicated by the DSN frame an opcode list and a predetermination. For example the processing module generates the operation code field to include an opcode value of 40 hex when the operational function being communicated by the DSN frame is a read request operation the protocol class field value is 01 and the protocol class version field value is 03.

The method continues at step where the processing module generates a request response field to indicate a request message for a request message DSN frame or a response message for a response message DSN frame. For example processing module generates the request response field to include a value of zero when the DSN frame is the request message DSN frame. As another example the processing module generates the request response field to include a value of one when the DSN frame is the response message DSN frame. The method continues at step where the processing module generates a request number field that includes a request number value by at least one of transforming a random number generator output to produce the value adding an increment to a previous request number value to produce the value selecting a predetermined number to produce the value and utilizing a request number value of a request DSN frame when the DSN frame is a response DSN frame. For example the processing module generates a request number value of 39 239 in a four byte wide request number field based on the random number generator output. As another example the processing module generates a request number value of 9 093 when the previous request number value is 9 083 and the increment is 10. As yet another example the processing module generates a request number value of 277 when the request number value of the request DSN frame is 277 and the DSN frame is a response DSN frame.

The method continues at step where the processing module arranges in order the protocol class field the protocol class version field the opcode field the request response field the request number field and a payload length field to produce the protocol header. The method continues at step where the processing module determines whether the DSN frame is to have a payload based on one or more values of one or more of the fields of the protocol header. For example the processing module determines that the DSN frame is not to have the payload when the opcode value indicates a write commit response operation. As another example the processing module determines that the DSN frame is to have the payload when the opcode value indicates a read request operation. The method branches to step when the processing module determines that the DSN frame is not to have the payload. The method continues to step when the processing module determines that the DSN frame is to have the payload.

The method continues at step where the processing module determines the payload as one of a request payload for a request message DSN frame and a response payload for a response message DSN frame. Such a determination may be based on one or more of the operational function the values for the protocol class field the protocol class version field the request response field and the opcode field. The method to determine the payload is discussed in greater detail with reference to .

The method continues at step where the processing module sums a number of bytes of the payload to produce a value for the payload length field. Alternatively the processing module determines the value utilizing one or more of a payload length formula and a fixed value. Such a determination may be based on one or more of the operational function the values for the protocol class field the protocol class version field the request response field and the opcode field. For example the processing module determines to utilize a payload length formula of 8T to produce the value as a four byte payload length field where T is the number of transaction numbers when the operational function is a write commit request operation. As another example the processing module determines to utilize a fixed value of zero when the operational function is an undo write response operation. As yet another example the processing module determines to sum number of bytes of the payload to produce the value as a four byte payload length field when the operational function is a checked write request operation.

The method continues at step where the processing module appends the request payload to the protocol header to produce the request message DSN frame for a request message DSN frame or the processing module appends the response payload to the protocol header to produce the response message DSN frame for a response message DSN frame. The method continues at step where the processing module outputs the DSN frame. For example the processing module sends the request message DSN frame when the operational function is a write request operation. As another example the processing module sends the response message DSN frame when the operational function is a write response operation.

The method continues at step where the processing module establishes a value for the payload length field as a predetermined value. For example processing module establishes the value as zero for the payload field when the DSN frame is not to have a payload. The method continues at step where the processing module establishes the protocol header as the DSN frame. The method continues at step where the processing module outputs the DSN frame.

The payload includes a transaction number field that includes a transaction number value and one or more slice information sections associated with the transaction number value. The transaction number field may be utilized to associate two or more request response DSN frames when a multistep sequence is utilized to accomplish a desired overall function minimizing conflict errors. The transaction number value may be based on elapsed seconds since Jan. 1 1970 UTC with nanosecond millisecond and or seconds of precision when the operational function is to be completed in a transactional manner and may be set to zero when the operational function is to be completed in a non transactional manner e.g. one step or without regard to concurrent operational functions . For example a transaction number value of eight bytes in length is utilized in the request DSN frame of the checked read request operation.

The one or more slice information sections correspond to one or more slice names of the associated checked read request operational function. Each slice information section of the one or more slice information sections includes a slice name field and a last known slice revision numbering field. The slice name field includes a slice name of the one or more slice names of the associated checked read request operational function. The last known slice revision numbering field includes a last known revision number of a previously stored encoded data slice of the slice name e.g. stored locally . For example a slice information section includes slice name field of 48 bytes in length and last known slice revision numbering field of 8 bytes in length and a slice information section includes slice name field and last known slice revision numbering field when two slice names are associated with the checked read request operational function. The method to generate the checked read request message is described in greater detail with reference to .

The generate transaction number module is operable to generate a transaction number by obtaining a clock value multiplying the clock value by a predetermined multiplier to produce an expanded clock value and summing the expanded clock value and a random number to produce the value wherein a number of digits of the random number is substantially the same as a number of digits of the predetermined multiplier. The generate requests module is operable to generate at least a threshold number of DSN concurrency requests wherein each of the at least the threshold number of DSN concurrency requests includes a header section and a payload section and each of the payload sections includes the transaction number a last known slice revision number e.g. from a perspective of the client module and a slice name section e.g. that includes one or more slice names wherein a first slice name section of a first one of the payload sections includes one or more first slice names that includes a first slice name corresponding to a first encoded data slice of the set of encoded data slices and a second slice name section of a second one of the payload sections includes one or more second slice names that includes a second slice name corresponding to a second encoded data slice of the set of encoded data slices.

Each of the header sections includes a payload length field and at least one of an operation code field a protocol class field and a protocol class version field wherein a first payload length field of a first one of the header sections includes a first payload length of the first one of the payload sections a second payload length field of a second one of the header sections includes a second payload length of the second one of the payload sections each of the operation code fields includes a concurrency request operation code e.g. 41 hex each of the protocol class fields includes a protocol class for the concurrency request operation code and each of the protocol class version fields includes a version of the concurrency request operation code.

The output module is operable to output in order the header section the transaction number the slice name section and the last known slice revision number of the payload section for each of the at least the threshold number of DSN concurrency requests . The generate the last known revision number module is operable to generate the last known revision number by at least one of selecting the last known revision number from a revision number list obtaining the last known revision number as a revision number associated with a copy of the data e.g. locally stored copy extracting the last known slice revision number from a list range response message extracting the last known slice revision number from a concurrency response message and extracting the last known slice revision number from a read response message.

The method continues at step where the processing module generates a last known revision number by at least one of selecting the last known revision number from a revision number list obtaining the last known revision number as a revision number associated with a copy of the data e.g. locally stored copy extracting the last known slice revision number from a list range response message extracting the last known slice revision number from a concurrency response message and extracting the last known slice revision number from a read response message.

The method continues at step where the processing module generates at least a threshold number of DSN concurrency requests wherein each of the at least the threshold number of DSN concurrency requests includes a header section and a payload section and each of the payload sections includes the transaction number the last known slice revision number and a slice name section wherein a first slice name section of a first one of the payload sections includes one or more first slice names that includes a first slice name corresponding to a first encoded data slice of the set of encoded data slices and a second slice name section of a second one of the payload sections includes one or more second slice names that includes a second slice name corresponding to a second encoded data slice of the set of encoded data slices.

Each of the header sections includes a payload length field and at least one of an operation code field a protocol class field and a protocol class version field wherein a first payload length field of a first one of the header sections includes a first payload length of the first one of the payload sections a second payload length field of a second one of the header sections includes a second payload length of the second one of the payload sections each of the operation code fields includes a concurrency request operation code each of the protocol class fields includes a protocol class for the concurrency request operation code and each of the protocol class version fields includes a version of the concurrency request operation code.

The method continues at step where the processing module outputs in order the header section the transaction number the slice name section and the last known slice revision number of the payload section for each of the at least the threshold number of DSN concurrency requests. In addition the processing module may update a slice status table to indicate that the one or more slice names are associated with a read lock status to prevent any further modifications of associated encoded data slices until steps associated with the checked read request operation are completed e.g. encoded data slices are received in response to the DSN concurrency requests .

The payload includes one or more slice payload sections that correspond to one or more slice names of an associated checked read request operational function e.g. one or more slice names extracted from a read request DSN frame . Each slice payload section of the one or more slice payload sections includes fields are in accordance with a checked read operation. The check operation determines whether a last known slice revision number of an associated checked read request operation substantially matches a most recent slice revision number of a previously stored encoded data slice corresponding to a slice name of the associated checked read request operation. A slice payload section of the one or more slice payload sections includes a check status field a slice revision count field one or more slice revision numbering fields one or more slice length fields and one or more slice payload fields where r represents a slice revision count value of the slice revision count field when the last known slice revision number does not substantially match the most recent slice revision number of the slice name of the associated checked read request operation. Another slice payload section of the one or more slice payload sections includes the check status field and the slice revision count field when the last known slice revision number substantially matches the most recent slice revision number of the slice name of the associated checked read request operation.

The check status field includes a predetermined check status value to indicate an outcome of the checked read operation. For example the check status field includes a check status value of zero when the outcome of the checked read operation indicates that the last known slice revision number does not substantially match the most recent slice revision number of the slice name of the associated checked read request operation. As another example the check status field includes a check status value of one when the outcome of the checked read operation indicates that the last known slice revision number substantially matches the most recent slice revision number of the slice name of the associated checked read request operation.

Such a slice revision count value indicates a number of visible revisions of an associated slice name included in the slice payload section when the outcome of the check operation indicates that the last known slice revision number does not substantially match the most recent slice revision number of the slice name of the associated checked read request operation or the slice revision count value is set to zero when the outcome of the check operation indicates that the last known slice revision number substantially matches the most recent slice revision number of the slice name of the associated checked read request operation. For example the slice revision count field is four bytes in length and includes a slice revision count value of 7 when 7 encoded data slices of 7 revisions are visible associated with the corresponding slice name when the outcome of the checked read operation indicates that the last known slice revision number does not substantially match the most recent slice revision number of the slice name of the associated checked read request operation.

As another example the slice revision count value is set to zero when there is no encoded data slice that is associated with the corresponding slice name e.g. the slice may have been deleted when the outcome of the checked read operation indicates that the last known slice revision number does not substantially match the most recent slice revision number of the slice name of the associated checked read request operation. As yet another example the slice revision count value is set to zero when the outcome of the checked read operation indicates that the last known slice revision number substantially matches the most recent slice revision number of the slice name of the associated checked read request operation.

Each slice revision numbering field of the one or more slice revision numbering fields includes a revision number of the associated slice name. For example a slice revision numbering field is eight bytes in length and includes a revision number that is greater than other revision numbers of the slice name when an encoded data slice associated with the revision number is a latest encoded data slice of the one or more encoded data slices associated with the slice name. Each slice length field of the one or more slice length fields for each of the revisions of the slice name includes a length of a corresponding encoded data slice. For example a slice length field value is set to 4 096 as a number of bytes of the corresponding encoded data slice. As another example the slice length field value is set to zero when an encoded data slice of the revision of the corresponding slice name does not exist e.g. the slice was deleted . Each slice payload field of the one or more slice payload fields for each of the revisions of the slice name includes the corresponding encoded data slice. The slice payload field may be set to zero if the corresponding encoded data slice does not exist. The method to generate the checked read response message is described in greater detail with reference to .

The determine most recent revision module is operable to determine a most recent slice revision number based on a slice name contained in the slice name section. The determining may be based on utilizing the slice name to index into a slice table retreat from memory to extract one or more slice revision numbers corresponding to the slice name and identifying the most recent slice revision number of the one or more slice revision numbers. When the most recent slice revision number substantially matches the last known revision number the generate response module is operable to generate a DSN concurrency response to include a header section and a payload section wherein the payload section includes a revision match status indication e.g. 1 and a slice revision count regarding the slice name e.g. zero or a number of available encoded data slices associated with the slice name .

When the most recent slice revision number does not substantially match the last known revision number the generate response module is operable to generate the DSN concurrency response to include the header section and the payload section wherein the payload section includes a revision mismatch status indication e.g. 0 the slice revision count regarding the slice name e.g. the number of available encoded data slices associated with the slice name one or more slice revision numbers corresponding to the slice name one or more slice lengths corresponding to the slice name and one or more encoded data slices corresponding to the slice name . The generating includes accessing memory to retrieve the one or more slice version numbers the one of more slice lengths and the one or more encoded data slices .

The header section includes a payload length field and at least one of an operation code field a protocol class field and a protocol class version field wherein the payload length field includes a length of the payload section the operation code field includes a concurrency response operation code the protocol class field includes a protocol class for the concurrency response operation code and the protocol class version field includes a version of the concurrency response operation code. The error module is operable to determine when an error condition exists based on one or more of the slice name being associated with a locked encoded data slice state a transaction number error the slice name is associated with one or more encoded data slices that are unavailable and one of at least the threshold number of DSN concurrency requests is not authorized and discard the DSN concurrency response when the error condition exists. The DS unit outputs the DSN concurrency response when the error condition does not exist. For example the generate response module sends the DSN concurrency response to a requesting entity e.g. a DS processing module of a DSN client .

When the most recent slice revision number substantially matches the last known revision number the method continues at step where the processing module generates a DSN concurrency response to include a header section and a payload section wherein the payload section includes a revision match status indication e.g. 1 and a slice revision count regarding the slice name e.g. zero or a number of available encoded data slices associated with the slice name . When the most recent slice revision number does not substantially match the last known revision number the method continues at step where the processing module generates the DSN concurrency response to include the header section and the payload section wherein the payload section includes a revision mismatch status indication e.g. 0 the slice revision count regarding the slice name e.g. the number of available encoded data slices associated with the slice name one or more slice revision numbers corresponding to the slice name one or more slice lengths corresponding to the slice name and one or more encoded data slices corresponding to the slice name.

The header section includes a payload length field and at least one of an operation code field a protocol class field and a protocol class version field wherein the payload length field includes a length of the payload section the operation code field includes a concurrency response operation code the protocol class field includes a protocol class for the concurrency response operation code and the protocol class version field includes a version of the concurrency response operation code. The method continues at step where the processing module determines when an error condition exists based on one or more of the slice name being associated with a locked encoded data slice state a transaction number error the slice name is associated with one or more encoded data slices that are unavailable and one of at least the threshold number of DSN concurrency requests is not authorized. The method continues at step where the processing module discards the DSN concurrency response when the error condition exists. The method continues at step where the processing module outputs the DSN concurrency response e.g. to a requesting entity when the error condition does not exist.

The directory server may include the computing core and memory to facilitate storage of one or more of directory information and directory slices . The directory information may include one or more of a filename a source name associated with the filename a vault identifier ID a generation ID an object number associated with the file name a timestamp an open completed update status indicator extended data e.g. a snapshot ID a size indicator a segment allocation table vault source name a content portion and an operation indicator e.g. add modify delete . The directory slices may be generated when a directory file associated with the directory information is dispersed storage error encoded producing the directory slices .

The DS processing dispersed storage error encodes data to produce a plurality of sets of encoded data slices . The computing core outputs the plurality of sets of encoded data slices via the DSN interface module and the DS processing units outputs the plurality of sets of encoded data slices via the DSN interface to send the plurality of sets of encoded data slices as data slices via the network to the DSN memory for storage therein.

The DS processing generates a directory file to include directory information associated with the data. The DS processing dispersed storage error encodes the directory file to produce directory slices . The DS processing determines one or more locations e.g. the cache memory the directory server the DSN memory to store the directory slices . The determination may be based on one or more of an access type e.g. write modify delete a performance requirement a DSN performance indicator a predetermination a lookup a message and a command. For example the DS processing determines to store the directory slices in the cache memory when the performance requirement indicates a low access latency requirement.

The DS processing stores the directory slices at the one or more locations. For example the computing core outputs the directory slices via the flash interface module to the cache memory for storage therein when the directory slices are to be stored in the cache memory . As another example the computing core outputs the directory slices via the network interface module the LAN for transfer to the directory server when the directory slices are to be stored in the directory server . As yet another example the computing core outputs the directory slices via the DSN interface module the DS processing units outputs the directory slices via the DSN interface and the network communicates the directory slices to the DSN memory . The directory slices may be stored utilizing a block vault approach wherein directory slices of a common pillar are stored in a common file. For example pillar directory slices are stored in a pillar directory slice file in a third DS unit of the DSN memory when the block vault approach is utilized.

The DS processing unit shares the directory information with at least one other DS processing units of the one or more DS processing units . For example a first DS processing unit generates the directory information to include an open completed status update indicator that indicates an open status and sends the directory information via the network and or the LAN to a second DS processing unit when the first DS processing unit initiates a sequence to generate and store encoded data slices . The second DS processing unit receives the directory information and determines that the open completed status update indicator indicates the open status. The second DS processing unit waits for subsequent directory information from the first DS processing unit to indicate a completed status before initiating a second sequence to generate and store encoded data slices corresponding to a directory file associated with the directory information . Alternatively the first DS processing unit sends the directory information via the LAN to the directory server for storage therein. In such a scenario the second DS processing unit retrieves the directory information via the LAN from the directory server .

The pathname field includes a file system path or a file system file name. For example the pathname field includes a filename of pic.jpg when a corresponding directory file entry describes an associated file system file name. The source name field includes a source name of the corresponding directory file entry indicating where e.g. source name DSN address encoded data slices associated with the directory file entry are stored. For example a file with a filename of spot.gif is stored as encoded data slices at a source name of C. The extended data field to 60 includes extended data associated with the directory file entry. The extended data includes one or more of a snapshot ID a timestamp a size indicator a segment allocation table source name metadata a portion of content and a revision level number.

In a data retrieval example encoded directory slices associated with the directory file are retrieved from the DSN memory at source name B utilizing a network. The retrieving via the network may introduce undesirable network loading when frequent retrievals of the directory file occur and or when the directory file is quite large. The encoded directory slices are dispersed storage error decoded to produce the directory file. A desired filename e.g. outline.pdf is identified within the directory file. The associated source name e.g. BC associated with the filename is extracted from the directory file. Encoded data slices associated with data are retrieved from the DSN memory utilizing the source name e.g. BC .

Directory file entries of the previous directory file are represented in the parent directory file e.g. pic.jpg papers except for directory file entries pushed into one or more of the child directory files as a result of the restructuring. For example a first child directory file stored at source name B includes directory file entries file.doc lists and spot.gif and a second child directory file stored at source name B includes directory file entries shipping.doc outline.pdf and stuff.ppt.

In a data retrieval example of file spot.gif associated with index 4 encoded directory slices associated with the parent directory file are retrieved via a network from the DSN memory at source name B. The encoded directory slices are dispersed storage error decoded to produce the parent directory file . The index field of the parent directory file does not include the index 4. The index field of the parent directory includes indexes 1 and 5. A child directory file a is referenced between index 1 and index 5 utilizing a source name of B. Encoded directory slices associated with the child directory file a are retrieved from the DSN memory at source name B and decoded to produce child directory . A source name of C is extracted from the child directory file corresponding to an entry for spot.gif of index 4. Encoded data slices associated with data of spot.gif are retrieved from the DSN memory utilizing the source name e.g. C . The encoded data slices are dispersed storage error decoded to produce data of spot.gif.

The restructuring of a directory file into a parent directory file and one or more child directory files may include any number of child directory files e.g. any span width and any number of levels wherein a child directory file is further restructured into one or more child directory files. A child directory file may include any number of entries. A method to determine a span width per level a number of entries per child directory file and a number of levels of child directory files is discussed in greater detail with reference to .

The method continues at step where the processing module determines whether to reconfigure the directory structure based on the directory metrics. For example the processing module determines to reconfigure the directory structure when the number of entries indicator is greater than an entries threshold level. As another example the processing module determines to reconfigure the directory structure when the access contention indicator indicates unfavorable contention. For instance more than a threshold number of access requests per unit of time are received for the directory structure. The method repeats back to step when the processing module determines not to reconfigure the directory structure. The method continues to step when the processing module determines to reconfigure the directory structure.

The method continues at step where the processing module determines a number of layers for a reconfigured directory structure. The determination may be based on one or more of the directory metrics an estimated performance level a DSN access performance level goal and a directory metrics goal. For example the processing module determines to utilize three layers for the reconfigured directory structure when an estimated performance level corresponding to three layers compares favorably to the DSN access performance level goal.

The method continues at step where the processing module determines a number of spans per layer. The determination may be based on one or more of the directory metrics the number of layers a DSN network bandwidth capacity indicator a DSN network bandwidth utilization indicator and a DSN network bandwidth utilization goal. For example the processing module determines more spans per layer such that fewer entries result per directory file of a same layer to achieve a DSN network bandwidth goal as retrieval of smaller directory files utilize less DSN network bandwidth capacity.

The method continues at step where the processing module determines directory entry reassignments. The determination may be based on one or more of a number of entries the directory metrics the number of layers the spans per layer one or more file IDs an estimated frequency of access associated with a file ID and a data type indicator. For example the processing module determines to reassign file ID to a top layer directory file to reduce access latency based on a data type indicator e.g. a priority indicator associated with the file ID. As another example the processing module determines to reassign file ID to a lower layer directory file where increased access latency is acceptable when an estimated frequency of access associated with file ID is lower.

The method continues at step where the processing module reconfigures the directory structure in accordance with the number of layers the spans per layer and the directory entry reassignments to produce the reconfigured directory structure. For example the processing module creates one or more children directory files moves one or more directory entries from a parent directory file to the one or more children directory files and adds pointers associated with the one or more children directory files to the parent directory file.

The local DSN directory file includes one or more directory file entries that populate each of a pathname field a source name field and an extended data field . The local DSN directory file may be utilized to access data stored in a DSN memory. For example a file pic.jpg is stored as a plurality of sets of encoded data slices at source name B with an associated local directory revision level of 2 in the DSN memory. The local DSN directory file may be dispersed storage error encoded to produce at least one set of encoded directory slices and the slices may be stored in a local memory by a first DS processing unit as the local slice table .

The local slice table includes a pillar width number of entries that populate a slice name field a slice revision field and a slice field . For example the local slice table includes 5 entries when a pillar width is 5. This listing field includes slice names the slice revision field includes an indicator of the associated local directory revision level and the slice field includes the set of encoded directory slices of the local DSN directory file .

The updated local DSN directory file includes one or more directory file entries that populate each of the pathname field the source name field and the extended data field . For example a second DS processing unit modifies or adds an entry to the local DSN directory file to produce the updated local DSN directory file . For instance the second DS processing unit adds an entry corresponding to a pathname of lists stored at a source name of DE with a corresponding local directory revision level of 3 e.g. one level greater than the previous revision level of 2 . The second DS processing unit dispersed storage encodes the updated local DSN directory file to produce a set of updated directory slices generates the set of write slice requests and sends the set of write slice requests to the DSN memory to facilitate storing the updated directory slices in the DSN memory by the second DS processing unit .

The set of write slice requests includes a pillar width number of write slice requests wherein each write slice requests of the pillar width number of write slice requests includes a slice name a revision level indicator and slice data. For example the set of write slice requests includes slice names revision level indicators for local directory revision level of 3 and 5 updated encoded directory slices. The 5 updated encoded directory slices are stored in DS units and are available for retrieval to produce the global DSN directory file .

At path the first DS processing unit retrieves the set of updated directory slices from DS units and dispersed storage error decodes the updated directory slices to produce the global DSN directory file . The global DSN directory file includes one or more directory file entries that populate each of the pathname field the source name field and the extended data field . For example the first DS processing unit produces the global DSN directory file that is substantially the same as the updated local DSN directory file produced by the second DS processing unit.

The first DS processing unit determines whether the revision level of the local DSN directory file compares favorably to the revision level of the global DSN directory file by identifying at least one revision mismatch of a plurality of possible revision mismatch . The plurality of possible revision mismatches includes a slice to slice revision mismatch wherein the mismatch is identified by detecting a slice revision mismatch between a directory slice of the local slice table and a corresponding directory slice of a set of directory slices that make up the global DSN directory file a slice to file revision mismatch wherein the mismatch is identified by detecting a revision mismatch between the a directory slice of the local slice table and a revision level of the global DSN directory file a file to file revision mismatch wherein the mismatch is identified by detecting a revision mismatch between a revision level of the local DSN directory file and a revision level of the global DSN directory file and a file to slice revision mismatch wherein the mismatch is identified by detecting a revision mismatch between a revision level of the local DSN directory file and a corresponding directory slice of the set of directory slices that make up the global DSN directory file .

A first state includes when the local directory is stale. A second state includes when the local directory is not stale e.g. currently stored in the cache memory and does not require verification . The verification verifies that a revision level of a local directory stored in the cache memory compares favorably to a revision level of a global directory retrieved from the DSN memory wherein the local directory stored in the cache is associated with the global directory retrieved from the DSN memory e.g. a favorable comparison indicates that the local directory stored in the cache is substantially the same as the global directory retrieved from the DSN memory when synchronized . A third state includes a local directory unknown staleness state e.g. when the local directory requires verification .

Entry into the first state includes an entry path from any state including when detecting a new directory entry e.g. one or more entries of one or more directory files is created detecting a directory modification detecting that a directory is not stored in the cache memory detecting an unfavorable checked write response message has been received and detecting a directory entry is deleted from the cache memory. For example a new directory entry is detected when reading a parent directory to attach the new directory entry that associates the new directory entry with the first state. As another example the global directory is retrieved from the DSN memory and a revision level comparison of the global directory in the local directory stored in the cache memory does not compare favorably.

A determination is made whether to read the global directory from the DSN memory when the local directory is associated with the first state and a read of the global directory has not been initiated. The determination may be based on one or more of a state indicator indicating the first state for the directory a time period since a last read sequence and a number of directories associated with the first state where the read of the directory has not been initiated is greater than a read directory threshold number. For example a determination is made to read the global directory from the DSN memory when five directories are associated with the first state the read of the five directories has not been initiated and the read directory threshold number is four. One or more read requests messages are sent to the DSN memory to retrieve the plurality of sets of directory slices of the global directory.

Entry into the second state includes when a favorable number of read response messages are received from the DSN memory regarding the one or more read request message to retrieve the plurality of sets of directory slices of the global directory and when a directory verification is favorable. For example a decode threshold number of read response messages are received from the DSN memory that includes directory slices of the global directory. The directory slices are dispersed storage error decoded to produce the global directory. The global directory is stored in the cache memory as an updated local directory by at least one of storing the global directory in the cache memory storing the at least some of the directory slices in the cache memory dispersed storage error encoding the directory to produce new directory slices and storing the new directory slices in the cache memory. The local directory is associated with the second state. Alternatively or in addition to a verification timer is started which is utilized to determine when verification of the local directory stored in the cache memory is required e.g. when the timer times out .

Entry into the third state includes when verification of the local directory stored in the cache memory is required. For example a determination is made that the verification timer associated with the directory has expired and the local directory is associated with the third state. A determination is made whether to initiate verification of the local directory when the local directory is associated with the third state and a verification has not been initiated. The determination may be based on one or more of a state indicator indicating the third state for the local directory a time period since a last verification sequence and a number of directories associated with the third state where the verification of the local directory has not been initiated is greater than a directory verification threshold number. For example a determination is made to initiate the verification of the local directory when one directory is associated with the third state the verification of the one directory has not been initiated and the directory verification threshold number is zero.

The verification of the directory is initiated by sending one or more DSN concurrency requests e.g. checked read operations to the DSN memory to retrieve slice name and revision information of the global directory. Slice name and revision information is received from the DSN memory regarding the global directory. A favorable verification is made when the slice name and revision information compares favorably to slice name and revision information of the local directory retrieved from the cache memory. The directory is associated with the second state when the verification is favorable. The verification timer is restarted associated with the local directory. The local directory is deleted from the cache memory and the local directory is associated with the first state when the verification is unfavorable.

The determine unknown staleness module is further operable to determine the DSN local directory to be in the unknown staleness state by determining whether a cycle timer has expired e.g. time since last determining or last storing of the DSN local directory in the local memory and or in the DSN memory and when the cycle timer has expired indicating that the DSN local directory is in the unknown staleness state. The determine unknown staleness module is further operable to determine the state of the DSN local directory is in the unknown staleness state by at least one of detecting creation of a new directory entry within the DSN local directory detecting modification of an existing directory entry within the DSN local directory detecting that directory access frequency of the DSN local directory compares unfavorably to an access threshold e.g. accessing a directory stored in the DSN memory very often determining that the DSN local directory is not stored in the local memory and receiving a checked write response that includes an indication that the local slice revision level compares unfavorably to a global slice revision level e.g. a write sequence out of synchronization .

When in the unknown staleness state the compare revisions module is operable to compare a local revision level of one of the one or more local DSN directory files with a global revision level of a corresponding global DSN directory file. The compare revisions module is further operable to compare the local revision level with the global revision level by comparing the local slice revision level of an encoded directory slice of the set of encoded directory slices of the one of the one or more local DSN directory files with the global slice revision level of a corresponding encoded directory slice of a set of encoded directory slices of the corresponding global DSN directory file. The compare revisions module is further operable to compare the local revision level with the global revision level by comparing the local revision level of one of the one or more local DSN directory files with a global slice revision level of a corresponding encoded directory slice of a set of encoded directory slices of the corresponding global DSN directory file. The compare revisions module is further operable to compare the local revision level with the global revision level by comparing a local slice revision level of an encoded directory slice of the set of encoded directory slices of one of the one or more local DSN directory files with the global revision level of the corresponding global DSN directory file. The compare revisions module is further operable to provide comparison information based on the comparison. For example the comparison information includes an indicator that the comparison is favorable when the local revision level of one of the one or more local DSN directory files is substantially the same as a most recent revision level of the global revision level of the corresponding global DSN directory file.

The obtain local slice revision module operable to obtain the local slice revision level by one of retrieving the local slice revision level from the DSN memory and retrieving the local slice revision level from the local memory . The retrieving the local slice revision level from the DSN memory includes transmitting a read local directory slice request regarding the encoded directory slice to the DSN memory and receiving a read local directory slice response from the DSN memory wherein the response includes the local slice revision level .

The obtain global slice revision module is operable to transmit a read global directory slice request regarding the corresponding encoded directory slice to the DSN memory and receive the corresponding encoded directory slice from the DSN memory wherein the corresponding encoded directory slice includes the global slice revision level . The obtain status code module is operable to transmit a DSN concurrency directory slice request that includes the local slice revision level to the DSN memory receive a DSN concurrency directory slice response and extract a status code from the DSN concurrency directory slice response wherein the status code indicates whether the local slice revision level compares favorably or unfavorably to the global slice revision level .

The update staleness state module is operable to update the state of the DSN local directory to a stale state when the local revision level compares unfavorably to the global revision level. The update staleness state module is further operable to update the state of the DSN local directory to a not stale state when the local revision level compares favorably to the global revision level. When the DSN local directory is in the stale state the identify stale directory file module is operable to identify a stale local DSN directory file e.g. all stale files or files of interest associated with the DSN local directory of the one or more local DSN directory files e.g. based on comparison information produced by the compare revisions module the retrieve DSN directory file module is operable to retrieve a corresponding DSN directory file from a global directory that is stored in the DSN memory the update stale directory file module is operable to update the stale local DSN directory file based on the corresponding DSN directory file e.g. the update stale directory file module sends the corresponding DSN directory file as an updated local DSN directory file to the local memory for storage therein and the update staleness state module is operable to change the state of the local directory to the not stale state e.g. the update stale directory file module sends a change state to the update staleness state module that includes an indicator to change the state to the not stale state .

The determining the DSN local directory to be in the unknown staleness state includes determining whether a cycle timer has expired and when the cycle timer has expired indicating that the DSN local directory is in the unknown staleness state. The determining the state of the DSN local directory is in the unknown staleness state further includes at least one of detecting creation of a new directory entry within the DSN local directory detecting modification of an existing directory entry within the DSN local directory detecting that directory access frequency of the DSN local directory compares unfavorably to an access threshold determining that the DSN local directory is not stored in the local memory and receiving a checked write response that includes an indication that the local revision level compares unfavorably to the global revision level.

When in the unknown staleness state the method continues at step where the processing module compares a local revision level of one of the one or more local DSN directory files with a global revision level of a corresponding global DSN directory file. The comparing the local revision level with the global revision level includes comparing a local slice revision level of an encoded directory slice of the set of encoded directory slices of the one of the one or more local DSN directory files with a global slice revision level of a corresponding encoded directory slice of a set of encoded directory slices of the corresponding global DSN directory file. The comparing the local revision level with the global revision level includes comparing the local revision level of one of the one or more local DSN directory files with a global slice revision level of a corresponding encoded directory slice of a set of encoded directory slices of the corresponding global DSN directory file. The comparing the local revision level with the global revision level further includes comparing a local slice revision level of an encoded directory slice of the set of encoded directory slices of one of the one or more local DSN directory files with the global revision level of the corresponding global DSN directory file.

The comparing the local slice revision level of the encoded directory slice of the set of encoded directory slices of the one of the one or more local DSN directory files with the global slice revision level of the corresponding encoded directory slice of the set of encoded directory slices of the corresponding global DSN directory file includes obtaining the local slice revision level by one of retrieving the local slice revision level from the DSN memory e.g. transmitting a read local directory slice request regarding the encoded directory slice to the DSN memory and receiving a read local directory slice response from the DSN memory wherein the response includes the local slice revision level and retrieving the local slice revision level from the local memory transmitting a read global directory slice request regarding the corresponding encoded directory slice to the DSN memory and receiving the corresponding encoded directory slice from the DSN memory wherein the corresponding encoded directory slice includes the global slice revision level. The comparing further includes transmitting a DSN concurrency directory slice request that includes the local slice revision level to the DSN memory receiving a DSN concurrency directory slice response and extracting a status code from the DSN concurrency directory slice response wherein the status code indicates whether the local slice revision level compares favorably or unfavorably to the global slice revision level.

The method branches to step when the local revision level compares unfavorably to the global revision level. The method continues to step when the local revision level compares favorably to the global revision level. The method continues at step where the processing module updates the state of the DSN local directory to a not stale state when the local revision level compares favorably to the global revision level. The method repeats back to step .

The method continues at step where the processing module updates the state of the DSN local directory to a stale state when the local revision level compares unfavorably to the global revision level. When the DSN local directory is in the stale state the method continues at step where the processing module identifies a stale local DSN directory file of the one or more local DSN directory files e.g. based on the comparing . The method continues at step where the processing module retrieves a corresponding DSN directory file from a global directory that is stored in the DSN memory. That continues at step where the processing module updates the stale local DSN directory file based on the corresponding DSN directory file. The method continues at step where the processing module changes the state of the DSN local directory to the not stale state. The method repeats back to step .

The pathname field includes a file system path or a file system file name wherein two or more directory file entries may include the same filename when each entry is associated with a different revision or an action associated with the operation field . The source name field includes a source name of a corresponding directory file entry indicating where e.g. source name DSN address encoded data slices associated with the entry are stored. For example three files with a filename of pic.jpg are included in three directory file entries and are stored as encoded data slices at three locations of the DSN memory including at source names B B and B. The extended data field includes extended data associated with the directory file entry.

The timestamp field includes a timestamp e.g. of a system clock associated with the directory file entry indicating when the directory file entry was added to the directory file. For example a first directory file entry associated with filename pic.jpg was added at timestamp 00 01 00 a second directory file entry associated with filename pic.jpg was added at timestamp 00 02 00 and a third directory file entry associated with filename pic.jpg was added at timestamp 00 03 00.

The operation field includes an operation indicator associated with the directory file entry indicating an operation type. The operation type includes at least one of add e.g. when a first directory file entry is added to the directory file associated with the filename modify e.g. when a subsequent directory file entry is added to the directory file associated with the filename and delete e.g. when a directory file entry is added to the directory file associated with deleting encoded data slices associated with the filename . For example a first directory file entry is associated with an add operation of filename pic.jpg was initially added to the directory file and encoded data slices associated with a file corresponding to filename pic.jpg was stored in the DSN memory at timestamp 00 01 00. As another example a second directory file entry is associated with a modify operation of filename pic.jpg was subsequently added to the directory file and encoded data slices associated with a second revision of the file corresponding to filename pic.jpg was stored in the DSN memory at timestamp 00 02 00. As yet another example a third directory file entry associated with a modify operation of filename pic.jpg was subsequently added to the directory file and encoded data slices associated with a third revision of the file corresponding to filename pic.jpg was stored in the DSN memory at timestamp 00 03 00.

In a retrieval example of operation a directory file entry corresponding to a desired filename is identified to produce an identified directory file entry wherein the directory file entry is a most recent entry e.g. most recent timestamp that is not a delete operation. For example the third directory file entry associated with the modify operation of filename pic.jpg is identified as the identified directory file entry when the timestamp 00 03 00 indicates the most recent entry. A source name associated with the identified directory file entry is extracted from the identified directory file entry. For example source name B is extracted from the third directory file entry. A plurality of sets of encoded data slices is retrieved from the DSN memory utilizing the source name. At least some of the plurality of sets of encoded data slices are dispersed storage error decoded to produce a most recent revision of the file pic.jpg.

Subsequent example directory file entries including a delete operation and a directory compacting function are discussed with reference to . The method to modify the directory file is discussed in greater detail with reference to . The method to compact the directory file is discussed in greater detail with reference to . The method to utilize the directory file is discussed in greater detail with reference to .

A source name associated with the identified directory file entry is extracted from the identified directory file entry. For example source name B is extracted from the fifth directory file entry. A plurality of sets of encoded data slices is retrieved from a dispersed storage network DSN memory utilizing the source name. At least some of the plurality of sets of encoded data slices are dispersed storage error decoded to produce a most recent revision of the file pic.jpg.

The method continues at step where the processing module generates a new directory entry to include or more of the write type the filename a timestamp e.g. a current clock time extended data and a source name. The method continues at step where the processing module modifies the directory file to include the new directory entry producing a modified directory file. For example processing module appends the new directory entry to the directory file to produce the modified directory file in accordance with a directory file structure.

The method continues at step where the processing module saves the modified directory file. For example the processing module stores the modified directory file in a cache memory. As another example the processing module dispersed storage error encodes the modified directory file to produce a plurality of sets of encoded directory slices and sends the plurality of sets of encoded directory slices to a dispersed storage network DSN memory for storage therein. As yet another example the processing module dispersed storage error encodes the modified directory file to produce the plurality of sets of encoded directory slices and stores the plurality of sets of encoded directory slices in the cache memory.

The method continues at step where the processing module performs a write function in accordance with the write command. For example the processing module dispersed storage error encodes the data to produce a plurality of sets of encoded data slices and sends the plurality of sets of encoded data slices to the DSN memory for storage therein when the write command is associated with one of the add write type and the modify write type. As another example the processing module generates one or more write request messages wherein each of the one or more read request messages includes a slice payload field including all zeroes when the write command is associated with the delete write type. Next the processing module sends the one or more write request messages to the DSN memory.

The method continues at step where the processing module identifies entries for the same filename. The identifying may be based on comparing a filename to other filenames of the directory file. The method continues at step where the processing module identifies a most recent write entry for the same filename. The identifying may be based on comparing timestamps associated with the directory file entries for the same filename wherein an operation associated with the directory file entries includes a write function e.g. one of add and modify to identify the most recent write entry. The method continues at step where the processing module identifies other entries for the same filename as the other entries associated with the same filename that are not the most recent write entry for the same filename.

The method continues at step where the processing module deletes encoded data slices corresponding to the other entries for the same filename. For example the processing module extracts a source name associated with an entry of the other entries and deletes encoded data slices stored in a dispersed storage network DSN memory associated with the source name. The method continues at step where the processing module modifies the directory file removing the other entries for the same filename to produce a modified directory file. As such the modified directory file only includes the most recent write entry. The method continues at step where the processing module saves the modified directory file e.g. in a cache memory and or in the DSN memory .

The select directory module is operable to select a local DSN directory or a global DSN directory based on the DSN access request to produce a selected DSN directory . The select directory module functions to select the local DSN directory or the global DSN directory by identifying the local DSN directory from a plurality of local DSN directories based on a data identification code e.g. a data identifier ID a filename associated with the DSN access request identifying the global DSN directory from a plurality of global DSN directories based on the data identification code associated with the DSN access request e.g. find all DSN directories that are associated with the data ID and selecting the selected DSN directory based on at least one of access type of the DSN access request a DSN directory type indicator of the DSN access request and requestor information of the DSN access request e.g. user ID vault ID etc. . For example the local DSN directory is selected as the selected DSN directory when the access type of the DSN access request is a read request e.g. enabling a faster read sequence . As another example the global DSN directory is selected as the selected DSN directory when the access type of the DSN access request is a write request.

The identify entry module is operable to identify an entry of the selected DSN directory regarding the set of encoded data slices to produce an identified entry. The identify entry module functions to identify the entry of the selected DSN directory by generating the entry when an access type is a write request wherein the entry includes a data identifier and a source name. Alternatively the identify entry module functions to identify the entry the selected DSN directory by accessing the selected DSN directory . The accessing includes retrieving the selected DSN directory from a local cache memory when the selected DSN directory is the local DSN directory . When the selected DSN directory is the global DSN directory the accessing the selected DSN directory includes generating at least one set of read slice requests wherein each request includes a source name of the global DSN directory sending the at least one set of read slice requests to the DSN memory receiving at least a decode threshold number of read slice responses to produce at least a decode threshold number of encoded global DSN directory slices and dispersed storage error decoding the at least a decode threshold number of encoded global DSN directory slices to reproduce the at least a portion of the selected DSN directory.

The access DSN memory module is operable to access the DSN memory regarding the set of encoded data slices based on information within the identified entry. The information within the identified entry includes one or more of a data identifier a pathname a source name a set of slice names corresponding to the set of encoded data slices and a revision identifier. The access DSN memory module further functions to access the DSN memory by performing a concurrency test between the entry of the local DSN directory and the entry of the global DSN directory and when a result of the concurrency test is unfavorable e.g. different revisions accessing the DSN memory based on the information of the entry in the global DSN directory . For example when the access type is a read request a set of read slice requests are generated wherein each read slice request includes a source name of the information within the identified entry the set of read slice requests are outputted to the DSN memory at least a decode threshold number of read slice responses are received to produce at least a decode threshold number of encoded data slices of the set of encoded data slices and the at least a decode threshold number of encoded data slices are dispersed storage error decoded to reproduce a data segment corresponding to the set of encoded data slices . As another example when the access type is a write request a data segment of the DSN access request is dispersed storage error encoded to produce the set of encoded data slices a set of write slice requests are generated wherein the set of write slice requests includes the set of encoded data slices and wherein each write slice request includes the source name and the set of write slice requests are outputted to the DSN memory .

The determine whether to update module is operable to determine whether to update one or more of the local DSN directory and the global DSN directory based on the accessing the DSN memory . The determine whether to update module functions to determine whether to update the one or more of the local DSN directory and the global DSN directory by at least one of updating the global DSN directory when the access type is a write access request or a delete access request updating the global DSN directory and the local DSN directory when the access type is a write access request or a delete access request and updating the entry within the local DSN directory when a concurrency issues exists with a corresponding entry with the global DSN directory . The determine whether to update module further functions to determine to update the local DSN directory and the global DSN directory when at least one of a directory update priority indicator indicates to update both and when a directory storage performance indicator compares unfavorably to a directory storage performance goal e.g. taking too long to access at least one of the local DSN directory in the global DSN directory .

When the one or more of the local DSN directory and the global DSN directory is to be updated the update directory module is operable to update the one or more of the local DSN directory and the global DSN directory in accordance with the accessing the DSN memory. The update directory module further functions to update the one or more of the local DSN directory and the global DSN directory by deleting the entry from the local DSN directory and the global DSN directory when the access type is a delete request. The store directory module is operable to store the local DSN directory in the cache memory of a computing device executing the method e.g. may or may not be dispersed storage error encoded and to store the global DSN directory in the DSN memory as a set of encoded directory slices.

The method continues at step where the processing module identifies an entry of the selected DSN directory regarding the set of encoded data slices to produce an identified entry. The identifying the entry of the selected DSN directory includes generating the entry when an access type is a write request wherein the entry includes a data identifier and a source name. The identifying further includes accessing the selected DSN directory. The accessing the selected DSN directory includes retrieving the selected DSN directory from a local cache memory when the selected DSN directory is the local DSN directory. When the selected directory is the global DSN directory the accessing the selected DSN directory includes generating at least one set of read slice requests wherein each request includes a source name of the global DSN directory sending the at least one set of read slice requests to the DSN memory receiving at least a decode threshold number of read slice responses to produce at least a decode threshold number of encoded global DSN directory slices and dispersed storage error decoding the at least a decode threshold number of encoded global DSN directory slices to reproduce the at least a portion of the selected DSN directory.

The method continues at step where the processing module accesses the DSN memory regarding the set of encoded data slices based on information within the identified entry. The information within the identified entry includes one or more of a data identifier a pathname a source name a set of slice names corresponding to the set of encoded data slices and a revision identifier. The accessing the DSN memory further includes performing a concurrency test between the entry of the local DSN directory and the entry of the global DSN directory and when a result of the concurrency test is unfavorable accessing the DSN memory based on the information of the entry in the global DSN directory. For example when the access type is a read request the processing module generates a set of read slice requests wherein each read slice request includes a source name of the information within the identified entry sends the set of read slice requests to the DSN memory receives at least a decode threshold number of read slice responses to produce at least a decode threshold number of encoded data slices of the set of encoded data slices and dispersed storage error decodes the at least a decode threshold number of encoded data slices to reproduce a data segment corresponding to the set of encoded data slices. As another example when the access type is a write request the processing module dispersed storage error encodes a data segment of the DSN access request to produce the set of encoded data slices generates a set of write slice requests wherein the set of write slice requests includes the set of encoded data slices and wherein each write slice request includes the source name and sends the set of write slice requests to the DSN memory.

The method continues at step where the processing module determines whether to update one or more of the local DSN directory and the global DSN directory based on the accessing the DSN memory. The determining whether to update the one or more of the local DSN directory and the global DSN directory includes at least one of updating the global DSN directory when the access type is a write access request or a delete access request updating the global DSN directory and the local DSN directory when the access type is a write access request or a delete access request and updating the entry within the local DSN directory when a concurrency issues exists with a corresponding entry with the global DSN directory.

When the one or more of the local DSN directory and the global DSN directory is to be updated the method continues at step where the processing module updates the one or more of the local DSN directory and the global DSN directory in accordance with the accessing the DSN memory. The updating the one or more of the local DSN directory and the global DSN directory further includes deleting the entry from the local DSN directory and the global DSN directory when the access type is a delete request. When the local DSN directory is to be updated the method continues at step where the processing module stores at least a portion e.g. an entry a directory file including an updated portion of the local DSN directory in cache memory of a computing device executing the method e.g. as a data file as encoded directory slices . When the global DSN directory is to be updated the method continues at step where the processing module stores at least a portion e.g. a directory file of a set of directory files that comprise the global DSN directory wherein the directory file includes an updated portion of the global DSN directory of the global DSN directory in the DSN memory as a set of encoded directory slices.

In response to the DSN access request the determine directory state module is operable to determine state of a shared global DSN directory . The shared global DSN directory may be shared by a plurality of associated DSN access devices e.g. devices and or modules associated with a common vault including a user device a DS processing unit a DS processing module as a common DSN directory for the data stored in the DSN memory . The state includes at least a ready for modification state and a modification state. For example the state of the shared global DSN directory is in the modification state when another associated DSN access device is updating the shared global DSN directory as a result of writing new data to the DSN memory . As another example the state of the shared global DSN directory is in the ready for modification state when no other associated DSN access device is updating the shared global DSN directory .

The determine directory state module functions to determine state of the shared global DSN directory by at least one of receiving an indication of the state of the shared global DSN directory e.g. from at least one of the associated DSN access devices detecting the modification state when an open shared global DSN directory update request for another DSN access request exists e.g. not yet at finalize state amongst a write state a commit state and the finalize state detecting the state of the shared global DSN directory based on an indication within the shared global DSN directory e.g. retrieving the shared global DSN directory and extracting the state .

When the shared global DSN directory is in a ready for modification state the update directory state module is operable to update state of the shared global DSN directory to the modification state. The update directory state module is further operable to identify one or more associated DSN access devices and send state updates of the shared global DSN directory to the one or more associated DSN access devices . For example the update directory state module identifies the one or more associated DSN access devices based on a vault lookup for devices of a common vault associated with the data sends a state update to the one or more associated DSN access devices wherein the state update includes an indication of the modification state. Alternatively the update directory state module modifies the shared global DSN directory to include an indication of the modification state.

The execute DSN access request module is operable to execute the DSN access request in accordance with at least one of a non shared local DSN directory and the shared global DSN directory . Each associated DSN access device of the one or more associated DSN access devices may include an associated non shared local DSN directory . The update directory module is operable to update the non shared local DSN directory and the shared global DSN directory in accordance with execution of the DSN access request . When the DSN access request is the write function the execute DSN access request module is operable to execute the DSN access request by generating information regarding storing data into the DSN memory and the update directory module is operable to update the non shared local DSN directory by creating an entry in the non shared local DSN directory to include the information regarding storing the data and is operable to update the shared global DSN directory by creating an entry in the shared global DSN directory to include the information regarding storing the data .

When the DSN access request is the modify function the execute DSN access request module is operable to execute the DSN access request by identifying an entry in the non shared local DSN directory or the shared global DSN directory to retrieve storage information and to execute the DSN access request in accordance with the storage information and the update directory module is operable to update the entry of the non shared local DSN directory in accordance with the execution of the DSN access request e.g. adding a new revision number and to update the entry of the shared global DSN directory in accordance with the execution of the DSN access request .

When the DSN access request is the delete function the execute DSN access request module is operable to execute the DSN access request by identifying an entry in the non shared local DSN directory or the shared global DSN directory to retrieve storage information and executing the DSN access request in accordance with the storage information and the update directory module is operable to delete the entry of the non shared local DSN directory in accordance with the execution of the DSN access request and to delete the entry of the shared global DSN directory in accordance with the execution of the DSN access request . After updating the shared global DSN directory the update directory state module is operable to change the state of the shared global DSN directory to the ready for modification state e.g. send a ready for modification state indicator to one or more of the associated DSN access devices and or include the ready for modification state indicator in the shared global DSN directory .

When the shared global DSN directory is in the modification state the execute DSN access request module is operable to execute the DSN access request in accordance with the non shared local DSN directory . For example the execute DSN access request module utilizes a source name extracted from the non shared local DSN directory wherein the source name corresponds to the data to access the data in the DSN memory . The deferred update directory module is operable to execute generating a shared global DSN directory update request e.g. pending updates for the shared global DSN directory in response to the execution of the DSN access request update the non shared local DSN directory in accordance with execution of the DSN access request and when the shared global DSN directory is in the ready for modification state coordinating updating of the shared global DSN directory in accordance with the shared global DSN directory update request .

The deferred update directory module functions to coordinate updating of the shared global DSN directory by when the shared global DSN directory is in the ready for modification state updating state of the shared global DSN directory to the modification state updating the shared global DSN directory in accordance with the shared global DSN directory update request e.g. implementing pending updates from one or more associated DSN access devices and after updating the shared global DSN directory changing the state of the shared global DSN directory to the ready for modification state. The deferred update directory module further functions to coordinate updating of the shared global DSN directory by identifying one or more associated DSN access devices and sending the shared global DSN directory update request to at least one of the one or more associated DSN access devices .

The method branches to step when the shared global DSN directory is in the modification state. The method continues at step where the processing module updates state of the shared global DSN directory to a modification state when the shared global DSN directory is in a ready for modification state. The updating includes identifying one or more associated DSN access devices and sending state updates of the shared global DSN directory to the one or more associated DSN access devices.

The method continues at step where the processing module executes the DSN access request in accordance with at least one of a non shared local DSN directory and the shared global DSN directory. When the DSN access request is the write function the executing the DSN access request includes generating information regarding storing data into the DSN memory. When the DSN access request is the modify function the executing the DSN access request includes identifying an entry in the non shared local DSN directory or the shared global DSN directory to retrieve storage information and executing the DSN access request in accordance with the storage information. When the DSN access request is the delete function the executing the DSN access request includes identifying an entry in the non shared local DSN directory or the shared global DSN directory to retrieve storage information and executing the DSN access request in accordance with the storage information.

The method continues at step where the processing module updates the non shared local DSN directory and the shared global DSN directory in accordance with execution of the DSN access request. The updating includes updating the non shared local DSN directory by creating an entry in the non shared local DSN directory to include the information regarding storing the data when the DSN access request is the write function. The updating further includes updating the entry of the non shared local DSN directory in accordance with the execution of the DSN access request when the DSN access request is the modify function. The updating further includes deleting the entry of the non shared local DSN directory in accordance with the execution of the DSN access request when the DSN access request is the delete function. The updating further includes updating the shared global DSN directory by creating an entry in the shared global DSN directory to include the information regarding storing the data when the DSN access request is the write function. The updating further includes updating the entry of the shared global DSN directory in accordance with the execution of the DSN access request when the DSN access request is the modify function. The updating further includes deleting the entry of the shared global DSN directory in accordance with the execution of the DSN access request when the DSN access request is the delete function. The method continues at step where the processing module changes the state of the shared global DSN directory to the ready for modification state after updating the shared global DSN directory.

The method continues at step where the processing module executes the DSN access request in accordance with the non shared local DSN directory when the shared global DSN directory is in the modification state. The method continues at step where the processing module generates a shared global DSN directory update request in response to the execution of the DSN access request the method continues at step where the processing module updates the non shared local DSN directory in accordance with execution of the DSN access request.

When the shared global DSN directory is in the ready for modification state the method continues at step where the processing module coordinates updating of the shared global DSN directory in accordance with the shared global DSN directory update request. The coordinating updating of the shared global DSN directory includes when the shared global DSN directory is the ready for modification state updating state of the shared global DSN directory to the modification state updating the shared global DSN directory in accordance with the shared global DSN directory update request and after updating the shared global DSN directory changing the state of the shared global DSN directory to the ready for modification state. The coordinating updating of the shared global DSN directory further includes identifying one or more associated DSN access devices and sending the shared global DSN directory update request to at least one of the one or more associated DSN access devices.

The method continues at step where the process module determines whether the SQL command type is the extract command. The method branches to step when the processing module determines that the SQL command type is the extract command. The method continues to step when the processing module determines that the SQL command type is not the extract command. The method continues at step where the processing module determines whether the SQL command type is the update command. The method branches to step when the processing module determines that the SQL command type is the update command. The method ends at step when the processing module determines that the SQL command type is not the update command.

The method continues at step where the processing module determines a file identifier ID to write. The determination may be based on one or more of a user ID associated with the SQL command the received SQL command the SQL command type a query a message and a look up. For example the processing module determines the file ID based on parameters of the SQL update command by looking up the file ID utilizing the parameters as an index. The method continues at step where the processing module generates a source name corresponding to the file ID. For example the processing module determines a vault ID of the source name based on the user ID and generates an object number associated with the source name as a random number. The processing module updates a directory to associate the source name and the file ID in a new directory entry of the directory.

The method continues at step where the processing module dispersed storage error encodes data associated with the received SQL command to produce a plurality of sets of encoded data slices. The method continues at step where the processing module sends at least some of the plurality of sets of encoded data slices to a dispersed storage network DSN memory utilizing the source name for storage therein.

The method continues at step where the processing module determines whether requested data is in a local cache when the processing module determines that the SQL command type is the extract command. The determination may be based on one or more of a file ID associated with the requested data a message and a query of the local cache. The method branches to step when processing module determines that the requested data is not in the local cache. The method ends at step where the processing module retrieves the requested data from the local cache when the processing module determines that the requested data is in the local cache.

The method continues at step where the processing module determines one or more file IDs corresponding to the requested data. The determination may be based on one or more of the user ID associated with the SQL command the SQL command the SQL command type a query a message and a lookup. The processing module determines two or more file IDs corresponding to the requested data when the extract command references data stored in two or more data files associated with the two or more file IDs. The method continues at step where the processing module determines one or more source name corresponding to the one or more file IDs. The determination may be based on a directory file lookup utilizing the one or more file IDs.

The method continues at step where the processing module retrieves at least some of one or more pluralities of sets of encoded data slices utilizing the one or more source names from the DSN memory. The method continues at step where the processing module dispersed storage error decodes the at least some of the one or more pluralities of sets of encoded data slices to produce the requested data.

Such a list API includes information wherein such information includes a list send part 1 API generated by a client of the client side and received by the DSN of the DSN side and includes a list receive part 1 API generated by the DSN and received by the client . The list send part 1 API includes a snapshot identifier ID and a path associated with the snapshot ID. The snapshot ID references entries of a directory structure when the snapshot ID was created e.g. revisions of files associated with the directory structure at the time of the snapshot . The path includes at least a portion of a file name path of a file system. The list receive part 1 API includes one or more directory entries corresponding to directory structure entries associated with the path and snapshot ID six of the eight. For example a directory entry of the one or more directory entries may include a folder subpath under the path or a subpath that includes a file name under the path .

The list API includes a method wherein in order information regarding the list send part 1 API is generated and output by the client side the information regarding the list send part 1 API is received by the DSN side information regarding the list receive part 1 API is generated and output by the DSN side and the information regarding the list receive part 1 API is received by the client side .

The write send part 1 API includes a snapshot identifier ID and a path associated with the snapshot ID and data to be written to the DSN. The write receive part 1 API includes an object ID and a write channel associated with the snapshot ID and the path . The object ID provides a unique identifier within the DSN associating the snapshot ID the path and the data to be written. For example the object ID is generated by the DSN as a random number. The object ID in combination with a vault ID and a generation ID form a source name utilized within the DSN. The write channel provides connectivity for an information transfer from the DSN two the client such that the client will accept data of the information transfer. The write send part 2 API includes a write channel and the data wherein the data is organized sequentially from a data start to a data end .

The write API includes a method wherein in order information regarding the write send part 1 API is generated and output by the client side the information regarding the write send part 1 API is received by the DSN side information regarding the write receive part 1 API is generated and output by the DSN side the information regarding the write receive part 1 API is received by the client side information regarding the write send part 2 API is generated and output by the client side and the information regarding the write send part 2 API is received by the DSN side .

The read all send part 1 API includes a snapshot identifier ID a path associated with the snapshot ID and a selectable read channel . The selectable read channel provides connectivity for an information transfer from the DSN to the client such that the client will accept data of the information transfer. The read all receive part 1 API includes a read channel data associated with the snapshot ID and the path e.g. one or more data files wherein the data is organized sequentially from a data start to a data end and a complete indicator denoting information transfer is complete.

The read all API includes a method wherein in order information regarding the read all send part 1 API is generated and output by the client side the information regarding the read all send part 1 API is received by the DSN side information regarding the read all receive part 1 API is generated and output by the DSN side and the information regarding the read all receive part 1 API is received by the client side .

The read portion send part 1 API includes a snapshot identifier ID a path associated with the snapshot ID a start position a length and a selectable read channel . The start position indicates an addressing reference to a data portion start wherein the data portion start includes intermediate data associated with data. For example the start position may indicate to read data starting at a 20 of the way into a data file of the data. The length indicates a maximum amount of intermediate data to be retrieved. For example a length of 1 000 000 indicates that at most 1 000 000 bytes of intermediate data are to be retrieved. The read portion receive part 1 API includes a read channel data associated with the snapshot ID wherein the data is organized sequentially from a data portion start to a data portion end and a complete indicator denoting information transfer is complete.

The read portion API includes a method wherein in order information regarding the read portion send part 1 API is generated and output by the client side the information regarding the read portion send part 1 API is received by the DSN side information regarding the read portion receive part 1 API is generated and output by the DSN side and the information regarding the read portion receive part 1 API is received by the client side .

The set put attribute send part 1 API includes a snapshot identifier ID a path associated with the snapshot ID and a map . The map includes one or more attribute names and one or more corresponding attribute values . Each attribute name of the one or more attribute names may be utilized to denote an attribute type of a corresponding attribute value to be stored. For example attribute name includes a creator attribute and attribute value includes Jason when the map is utilized to store metadata associated with data stored in the DSN.

The set put attribute API includes a method wherein in order information regarding the set put attribute send part 1 API is generated and output by the client side and the information regarding the set put attribute send part 1 API is received and processed by the DSN side . The processing may include at least one of modifying one or more associated attribute values of attributes stored in the DSN when the set put attribute information indicates a set and overwriting all attribute values and attribute names stored in the DSN when the set put attribute information indicates a put.

The get attribute API includes a method wherein in order information regarding the get attribute send part 1 API is generated and output by the client side and the information regarding the get attribute send part 1 API is received and processed by the DSN side information regarding the get attribute receive part 1 API is generated and output by the DSN side and the information regarding the get attribute receive part 1 API is received by the client side .

The create snapshot API includes a method wherein in order information regarding the create snapshot send part 1 API is generated and output by the client side and the information regarding the create snapshot send part 1 API is received and processed by the DSN side information regarding the create snapshot receive part 1 API is generated and output by the DSN side when the DSN detects the error condition and the information regarding the create snapshot receive part 1 API is received by the client side when the DSN outputs the information regarding the create snapshot receive part 1 API . Alternatively the DSN may always generate and output the information regarding the create snapshot receive part 1 API e.g. including when the DSN does not detect the error condition . In such a scenario the DSN may generate information regarding the create snapshot receive part 1 API to include the exception indicator indicating that the error condition was not detected.

The delete snapshot API includes a method wherein in order information regarding the delete snapshot send part 1 API is generated and output by the client side and the information regarding the delete snapshot send part 1 API is received and processed by the DSN side . The processing includes deleting the snapshot from the DSN.

The make directory API includes a method wherein in order information regarding the make directory send part 1 API is generated and output by the client side and the information regarding the make directory send part 1 API is received and processed by the DSN side information regarding the make directory receive part 1 API is generated and output by the DSN side and the information regarding the make directory receive part 1 API is received by the client side . The processing by the DSN side includes the make directory operational function.

As may be used herein the terms substantially and approximately provides an industry accepted tolerance for its corresponding term and or relativity between items. Such an industry accepted tolerance ranges from less than one percent to fifty percent and corresponds to but is not limited to component values integrated circuit process variations temperature variations rise and fall times and or thermal noise. Such relativity between items ranges from a difference of a few percent to magnitude differences. As may also be used herein the term s operably coupled to coupled to and or coupling includes direct coupling between items and or indirect coupling between items via an intervening item e.g. an item includes but is not limited to a component an element a circuit and or a module where for indirect coupling the intervening item does not modify the information of a signal but may adjust its current level voltage level and or power level. As may further be used herein inferred coupling i.e. where one element is coupled to another element by inference includes direct and indirect coupling between two items in the same manner as coupled to . As may even further be used herein the term operable to or operably coupled to indicates that an item includes one or more of power connections input s output s etc. to perform when activated one or more its corresponding functions and may further include inferred coupling to one or more other items. As may still further be used herein the term associated with includes direct and or indirect coupling of separate items and or one item being embedded within another item. As may be used herein the term compares favorably indicates that a comparison between two or more items signals etc. provides a desired relationship. For example when the desired relationship is that signal has a greater magnitude than signal a favorable comparison may be achieved when the magnitude of signal is greater than that of signal or when the magnitude of signal is less than that of signal .

As may also be used herein the terms processing module processing circuit and or processing unit may be a single processing device or a plurality of processing devices. Such a processing device may be a microprocessor micro controller digital signal processor microcomputer central processing unit field programmable gate array programmable logic device state machine logic circuitry analog circuitry digital circuitry and or any device that manipulates signals analog and or digital based on hard coding of the circuitry and or operational instructions. The processing module module processing circuit and or processing unit may be or further include memory and or an integrated memory element which may be a single memory device a plurality of memory devices and or embedded circuitry of another processing module module processing circuit and or processing unit. Such a memory device may be a read only memory random access memory volatile memory non volatile memory static memory dynamic memory flash memory cache memory and or any device that stores digital information. Note that if the processing module module processing circuit and or processing unit includes more than one processing device the processing devices may be centrally located e.g. directly coupled together via a wired and or wireless bus structure or may be distributedly located e.g. cloud computing via indirect coupling via a local area network and or a wide area network . Further note that if the processing module module processing circuit and or processing unit implements one or more of its functions via a state machine analog circuitry digital circuitry and or logic circuitry the memory and or memory element storing the corresponding operational instructions may be embedded within or external to the circuitry comprising the state machine analog circuitry digital circuitry and or logic circuitry. Still further note that the memory element may store and the processing module module processing circuit and or processing unit executes hard coded and or operational instructions corresponding to at least some of the steps and or functions illustrated in one or more of the Figures. Such a memory device or memory element can be included in an article of manufacture.

The present invention has been described above with the aid of method steps illustrating the performance of specified functions and relationships thereof. The boundaries and sequence of these functional building blocks and method steps have been arbitrarily defined herein for convenience of description. Alternate boundaries and sequences can be defined so long as the specified functions and relationships are appropriately performed. Any such alternate boundaries or sequences are thus within the scope and spirit of the claimed invention. Further the boundaries of these functional building blocks have been arbitrarily defined for convenience of description. Alternate boundaries could be defined as long as the certain significant functions are appropriately performed. Similarly flow diagram blocks may also have been arbitrarily defined herein to illustrate certain significant functionality. To the extent used the flow diagram block boundaries and sequence could have been defined otherwise and still perform the certain significant functionality. Such alternate definitions of both functional building blocks and flow diagram blocks and sequences are thus within the scope and spirit of the claimed invention. One of average skill in the art will also recognize that the functional building blocks and other illustrative blocks modules and components herein can be implemented as illustrated or by discrete components application specific integrated circuits processors executing appropriate software and the like or any combination thereof.

The present invention may have also been described at least in part in terms of one or more embodiments. An embodiment of the present invention is used herein to illustrate the present invention an aspect thereof a feature thereof a concept thereof and or an example thereof. A physical embodiment of an apparatus an article of manufacture a machine and or of a process that embodies the present invention may include one or more of the aspects features concepts examples etc. described with reference to one or more of the embodiments discussed herein. Further from figure to figure the embodiments may incorporate the same or similarly named functions steps modules etc. that may use the same or different reference numbers and as such the functions steps modules etc. may be the same or similar functions steps modules etc. or different ones.

Unless specifically stated to the contra signals to from and or between elements in a figure of any of the figures presented herein may be analog or digital continuous time or discrete time and single ended or differential. For instance if a signal path is shown as a single ended path it also represents a differential signal path. Similarly if a signal path is shown as a differential path it also represents a single ended signal path. While one or more particular architectures are described herein other architectures can likewise be implemented that use one or more data buses not expressly shown direct connectivity between elements and or indirect coupling between other elements as recognized by one of average skill in the art.

The term module is used in the description of the various embodiments of the present invention. A module includes a processing module a functional block hardware and or software stored on memory for performing one or more functions as may be described herein. Note that if the module is implemented via hardware the hardware may operate independently and or in conjunction software and or firmware. As used herein a module may contain one or more sub modules each of which may be one or more modules.

While particular combinations of various functions and features of the present invention have been expressly described herein other combinations of these features and functions are likewise possible. The present invention is not limited by the particular examples disclosed herein and expressly incorporates these other combinations.

