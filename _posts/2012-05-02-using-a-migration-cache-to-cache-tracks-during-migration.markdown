---

title: Using a migration cache to cache tracks during migration
abstract: Provided are a method, system, and computer program product for using a migration cache to cache tracks during migration. In response to a migration operation, a determination is made of a first set of tracks in the source storage indicated in an extent list and of a second set of tracks in the extent. The tracks in the source storage in the first set are copied to a migration cache. The tracks in the second set are copied directly from the source storage to the destination storage without buffering in the migration cache. The tracks in the first set are copied from the migration cache to the destination storage. The migration operation is completed in response to copying the first set of tracks from the migration cache to the destination storage and copying the second set of tracks from the source storage to the destination storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566547&OS=08566547&RS=08566547
owner: International Business Machines Corporation
number: 08566547
owner_city: Armonk
owner_country: US
publication_date: 20120502
---
This application is a continuation of U.S. patent application Ser. No. 12 877 956 filed Sep. 8 2010 which application is incorporated herein by reference in its entirety.

The present invention relates to a method system and computer program product for using a migration cache to cache tracks during migration.

In a hierarchical storage environment extents of tracks may be migrated between different tiers of storage devices such as hard disk drives solid state storage devices etc. depending on the characteristics of the storage devices and the frequency of access and priority of data. For instance more frequently accessed extents and or higher priority extents may be migrated to a faster access tier from a slower access tier and less frequently accessed extents and or lower priority extents may be migrated to a slower access tier. When migrating extents all the data from the extent may be copied over from one storage device to another. During the migration process the extent may be locked so that Input Output I O requests from hosts directed to the extent are quiesced and queued until migration has completed.

There is a need in the art for improved techniques for migrating extents of tracks between storage devices.

Provided are a method system and computer program product for using a migration cache to cache tracks during migration. Indication is made in an extent list of tracks in an extent in a source storage subject to Input Output I O requests. A migration operation is initiated to migrate the extent from the source storage to a destination storage. In response to initiating the migration operation a determination is made of a first set of tracks in the extent in the source storage indicated in the extent list. A determination is also made of a second set of tracks in the extent. The tracks in the source storage in the first set are copied to a migration cache wherein updates to the tracks in the migration cache during the migration operation are applied to the migration cache. The tracks in the second set are copied directly from the source storage to the destination storage without buffering in the migration cache. The tracks in the first set are copied from the migration cache to the destination storage. The migration operation is completed in response to copying the first set of tracks from the migration cache to the destination storage and copying the second set of tracks from the source storage to the destination storage wherein after the migration the tracks in the extent are located in the destination storage.

The memory further includes elements and . A source cache caches writes and read data for the source storage . A destination cache caches writes and read data for the destination storage and a migration cache caches a subset of the tracks in the source storage subject to migration to the destination storage . An extent list comprises a data structure such as a stack e.g. last in first out ordering a queue first in first out ordering etc. indicating tracks in an extent subject to read and or write requests. In one embodiment the extent list may indicate tracks subject to reads and write and in another embodiment may only indicate tracks subject to write operations. An extent object provides information on extents configured in the storages . A migration data structure indicates tracks in an extent subject to a migration operation and for each track information such as a bit indicating whether that track in the extent in the source storage was successfully copied to the destination storage . A migration of an extent completes when the migration data structure indicates that all tracks in the extent have been migrated or copied to the destination storage .

In one embodiment there may be a separate dedicated cache e.g. the source cache and destination cache maintained for each storage managed by the server where the server may manage more than the two storages as shown in . Further there may be one migration cache maintained for each separate migration operation or the migration cache may store a subset of tracks in the source storages involved in multiple migration operations.

In certain embodiments the extent object identifies tracks stored contiguously in an extent which is advantageous in embodiments where the storage storing the track comprises a storage device that has improved read write access for tracks stored contiguously in the media such as a hard disk drive and a tape drive. However the data for the tracks in the extent may not be contiguously stored in the storage which may comprise a storage device that does not experience improved access for contiguously stored tracks such as the case with a solid state storage device SSD or Random Access Memory RAM drive. The extent object includes entries for each track managed in one extent. Each track may comprise a same size single unit of data. The server may maintain multiple extent objects for each separate extent the server manages in the source and destination storages. Further there may be additional storage devices such that the server may manage the migration of an extent of tracks among more than two storages where the different storages may have different I O access profiles.

The server may communicate with the source and destination storages over a network via separate cables through a storage interface in a loop architecture etc. The source and destination storages may comprise different types of storage devices such as a solid state storage device SSD comprised of solid state electronics such as a EEPROM Electrically Erasable Programmable Read Only Memory flash memory flash disk Random Access Memory RAM drive storage class memory SCM etc. magnetic storage disk optical disk tape etc. The memory may comprise one or more volatile or non volatile memory devices. The migration manager may alternatively be implemented as application code external to the operating system or may be implemented with hardware logic such as an Application Specific Integrated Circuit ASIC or as a programmable processor executing code in a computer readable storage medium.

In one embodiment the source and destination storages may comprise storage tiers in a hierarchical arrangement of storage devices where tiers define storage based on characteristics such as speed of their Input Output I O access profile redundancy etc. For instance the destination storage may comprise a high speed storage such as an SSD or RAM drive and the source storage may comprise a slower access storage such as a hard disk drive or tape medium. If the source storage includes extents that are not frequently accessed and or having lower priority then the operating system may call the migration manager to migrate such extents to a slower access destination storage . if the source storage includes extents that are frequently accessed and or higher priority then the operating system may call the migration manager to migrate such extents to a faster access destination storage . Data characteristics other than or in addition to the frequency of data access and priority of the data may be used to determine whether to migrate extents between higher and lower tier storage devices in the storage hierarchy.

In certain embodiments the extent list may be updated with respect to I O activity to the extent prior to migration. During migration the extent list is used to determine tracks to add to the migration cache and may not be updated during the migration.

The migration manager copies at block the tracks in the source storage or source cache that are in the first set to the migration cache and removes tracks added to the migration cache from the source cache . During migration updates to tracks maintained in the migration cache are performed directly to the migration cache thereby bypassing the source cache and source storage . This avoids the cost of managing writes in the source cache and destaging to the source storage . The migration manager initiates at block the migration to copy the tracks in the second set from the source storage to the destination storage and copy the tracks in the first set from the migration cache to the destination storage . In one embodiment the migration manager may copy the tracks in the extent from the migration cache and source storage in parallel keeping track of which tracks are updated during migration e.g. dirty and subsequently copying those updated or dirty tracks to the destination storage . In one embodiment the migration manager may wait to copy all the tracks in the first set to the migration cache before initiating the operation to copy the tracks in the migration cache to the destination storage . Alternatively the migration manager may first copy tracks not in the migration cache i.e. in the second set to the destination storage and write updates to tracks in the first set to the migration cache and then copy the tracks in the migration cache to the destination storage after copying the tracks not in the migration cache i.e. tracks in the source storage or source cache . The migration manager may further throttle the copying of tracks to the destination storage to manage throughput through the source and destination storages to optimize data migration.

In embodiments where the destination storage comprises a solid state storage device that deteriorates as a result of continued write requests buffering frequently written tracks in the migration cache during migration avoids degradation of the solid state storage device where continual writing to the same physical location of a solid state device can wear out the storage blocks in the solid state storage device. In further embodiments the extent list may only indicate write requests and the migration cache may only cache frequently written tracks not frequently read tracks to maximize the number of write tracks buffered in the migration cache thereby reducing the number of writes to destage to the source storage or migrate to the destination storage during migration.

With the described embodiments of hosts and applications may continue to write to the extent at the source storage during migration because such writes received during migration are written to the caches or . This avoids the need to lock the extent during migration.

Described embodiments provide techniques for using a migration cache during migration to buffer tracks that are more frequently accessed. During migration the source storage may continue to receive reads and writes and frequently accessed tracks are updated in the migration cache so they do not need to be continually staged or destaged with respect to the source storage or copied over to the destination storage during the migration. This conserves the server and storage resources by avoiding continual destaging and staging to the storages during migration.

The described operations may be implemented as a method apparatus or computer program product using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof. Accordingly aspects of the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the embodiments may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

In certain embodiments the server of may be implemented as a cloud component part in a cloud computing environment. In the cloud computing environment the systems architecture of the hardware and software components involved in the delivery of cloud computing may comprise a plurality of cloud components communicating with each other over a network such as the Internet. For example in certain embodiments the server of may provide clients and other servers and software and or hardware components in the networked cloud with storage and data processing services including migration services. The server may provide reliable storage and migration services and access to the storages and to meet quality of service requirements for customers in the cloud including clients requiring storage and other servers providing storage services to clients. The server may communicate with clients to provide storage services for the storages and through a web interface or other application programming interface.

The terms an embodiment embodiment embodiments the embodiment the embodiments one or more embodiments some embodiments and one embodiment mean one or more but not all embodiments of the present invention s unless expressly specified otherwise.

The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise.

The enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments of the present invention.

Further although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further some steps may be performed simultaneously.

When a single device or article is described herein it will be readily apparent that more than one device article whether or not they cooperate may be used in place of a single device article. Similarly where more than one device or article is described herein whether or not they cooperate it will be readily apparent that a single device article may be used in place of the more than one device or article or a different number of devices articles may be used instead of the shown number of devices or programs. The functionality and or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality features. Thus other embodiments of the present invention need not include the device itself.

The illustrated operations of show certain events occurring in a certain order. In alternative embodiments certain operations may be performed in a different order modified or removed. Moreover steps may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further operations may be performed by a single processing unit or by distributed processing units.

The foregoing description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

