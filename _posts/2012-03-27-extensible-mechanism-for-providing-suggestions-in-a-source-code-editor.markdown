---

title: Extensible mechanism for providing suggestions in a source code editor
abstract: An extensible editor for editing program source code can customize a default display provided by a language service in an IDE. The default display can be modified using source code-specific extension code. The extension code can be provided by a third party. The extension code can reside in the source code file to which it applies. The extension code can reside in a separate file from the file in which the source code resides. A naming convention can be used to enable the extensible editor to locate the extension code. Display entries can be filtered, added, removed, or modified using an API provided by the extensible editor. The API can allow the extension code to register for one or more events including but not limited to a completion hint event, a completion list event, and a function help event. User-provided extensions can be used to customize default display results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170782&OS=09170782&RS=09170782
owner: Microsoft Technology Licensing, LLC
number: 09170782
owner_city: Redmond
owner_country: US
publication_date: 20120327
---
A dynamic programming language is one that at runtime executes behaviors that a static language typically either does not perform at all or performs during compilation. The behaviors executed at runtime by a dynamic language can include extension of the program by adding new code extension of the program by extending objects and definitions or by modifying the type system. In a dynamic programming language information not available at compile time can significantly alter how the program executes. For example in a static program when a variable is declared in the source code the declaration specifies the type of the variable variable x is an integer or variable x is a string etc. If variable x is an integer adding x to an integer constant will invoke an arithmetic add. If variable x is a string adding x to a constant that is a string will invoke a concatenation of the constant and x. In a dynamic programming language the type of the variable is not known until the program executes so additional code paths are needed to handle the different types of add operations adding overhead to program execution.

Examples of languages generally considered to be dynamic languages include but are not limited to ActionScript BASIC BeanShell ColdFusion Common Lisp and some other Lisp languages Groovy E programming languages JavaScript VBScript MATLAB Lua Objective C Perl PHP Powershell Python Ruby Smalltalk Tcl and Dolphin Smalltalk.

An extensible editor for editing program source code can customize editor suggestions comprising a collection of one or more entries using source code specific extension code associated with program source code loaded into the extensible editor. The extension code can be provided by a third party. The extension code can reside in the source code file to which it applies. The extension code can reside in a separate file from the file in which the source code resides. A naming convention can be used to enable the extensible editor to locate the extension code. The extension code can be written in the same programming language as is the source code. The extension code can be written in a different programming language than the source code. Completion list items can be filtered added removed or modified using an application programming interface API provided by the extensible editor. The API can allow the extension code to register for one or more events including but not limited to a completion hint event a completion list event and a function help event. User provided extension code can be used to customize default completion list results completion hint information and or function help information.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A source code editor as described herein is able to provide suggestions for user selection as a software developer inputs source code. For example a completion list function such as a member completion feature can display a list of object members when a user enters the object name. For example suppose an object point is defined as 

A completion list feature can display a list of variables functions or arguments that are valid in the scope. A list of keywords can also be displayed. A completion list display can be automatically triggered by typing a character. The completion list display can be requested explicitly for example by typing Ctrl Space in Microsoft Corporation s Visual Studio .

A source code editor as described herein can include a function help feature. A function help feature may be triggered when a user inputs a call to a function. The function help may be displayed when a triggering character such as opening bracket e.g. is input.

A source code editor as described herein can include a completion hint feature. A completion hint can comprise information that describes what an entry is e.g. the entry is a method a field etc. what the type of the item is e.g. the item is a number string object function etc. . A completion hint can show summary text for an item its lexical scope global local argument etc. and so on.

For dynamic languages the suggestions provided may include names of variables functions and arguments valid in the scope language keywords or a list of object members. The suggestions are typically displayed as a list from which a user can select an entry. For example a completion list entry may represent a global variable a local variable a function a function argument an object member or a keyword. A user can highlight any list entry to get more information e.g. to trigger display of a completion hint . A completion hint may include function help information when an entry is a function. Highlighting an entry may return information concerning the nature of the entry such as the highlighted entry is a function or the highlighted entry is a variable etc. Highlighting an entry that is a variable or an argument can return the runtime type of the variable or argument. Highlighting a function can return function signature help and so on.

Dynamic languages including but not limited to JavaScript are typically not strongly typed. Some source code editors that operate within an integrated development environment determine type information for dynamic languages by executing the code e.g. in the background and checking the runtime type of the variable or argument as the program executes. Type information and human readable descriptive annotations can also be specified for variables fields functions and arguments via documentation comments in the source code. This information can also be displayed to the user as part of the displayed suggestions. Traditionally the logic that populates a display with suggestions does not provide source specific information. That is the information provided uses programming language features rather than particular aspects of the source file being edited or referenced such as author conventions and concepts.

In accordance with aspects of the subject matter disclosed herein user provided extension code can be used to customize default display results including but not limited to completion list results completion hint results and or function help results. The extension code can be written in a dynamic programming language such as but not limited to JavaScript or can be written in any other programming language. The extension code may reside in the same source file to which it applies. The extension code may reside in a separate file than the file in which the source code resides. The extension code may use an extensibility application programming interface API implemented by the IDE. The extension code can filter displayed items based on item name kind field function variable etc. runtime type or runtime value. The extension code can add remove or modify display entries. Displayed icons can be added removed or modified in the display for different types of entries. Extension code may change an entry icon. The type and description information that is displayed to the user can be modified. The API can be implemented in the dynamic language in which the source code is written e.g. the source code file and the extension file can be written in the same programming language such as dynamic scripting languages such as but not limited to JavaScript . In some cases the extension code does not need to be installed. For example extension code can be added to a project in the integrated development environment IDE as files with specified extensions e.g. as .js files . Extension code can reside in a directory in which an IDE looks for extension files. When the source code file and the extension code are written in the same language the developer does not need to learn a new programming language to take advantage of the extension capabilities.

One example of a source specific aspect of the source code concerns the way particular members or variables are prevented from appearing in a display. Some programming languages including but not limited to JavaScript do not provide built in access control support. That is there is no concept of private and public entities in the JavaScript language. Commonly by developer decided convention members that are private are prefixed with an underscore or some other prefix such as a dollar sign. Because conventions between different libraries code modules projects applications etc. differ to prevent members considered private from appearing in the completion list source specific logic can be applied.

Another example of a source specific aspect of the source code is using type information and human readable descriptive annotations provided as comments in a library specific format. Currently there is no single standard for annotating variables fields arguments and functions with type and description information in a particular format. Known IDEs support an XML format for annotations but other commonly used annotations such as but not limited to JSDoc are also known.

An example of a library specific concept concerns displaying an icon adjacent to a display entry to reflect its classification such as function field variable argument etc. . Some libraries utilize higher level concepts such as classes components etc. which are not part of the programming language in which the source code is written.

Extension code can provide completion list completion hint and function help information based on data retrieved from a network by the extension code. For example extension code associated with a particular library may access a Web Server where an XML file including annotation information resides. The retrieved data can be used to populate a completion list completion hint or function help display.

It will be appreciated that while described within the context of a dynamic programming language the subject matter described herein is applicable to any programming language whether dynamic or static strongly or weakly typed.

Computing device can be any type of stationary or mobile computing device including a desktop computer e.g. a personal computer etc. a mobile computer or computing device e.g. a Palm device a RIM Blackberry device a personal digital assistant PDA a laptop computer a notebook computer a tablet computer e.g. an Apple iPad a netbook etc. a mobile phone e.g. a cell phone a smart phone such as an Apple iPhone a Google Android phone a Microsoft Windows phone etc. or other type of mobile device. Server may be implemented in one or more computer systems including one or more servers which may be any type of computing device described herein or otherwise known that is capable of enabling the corresponding functionality described herein.

Computing device and server can be communicatively coupled by network . Network can include one or more communication links and or communication networks such as a PAN personal area network a LAN local area network a WAN wide area network or a combination of networks such as the Internet. Computing device and server may be communicatively coupled to network using various links including wired and or wireless links such as IEEE 802.11 wireless LAN WLAN wireless links Worldwide Interoperability for Microwave Access Wi MAX links cellular network links wireless personal area network PAN links e.g. Bluetooth links Ethernet links USB links etc.

Browser application can be a program that can execute on computing device . Browser application can enable network information resources to be retrieved presented and traversed. An information resource or object can be retrieved by browser application using a network address such as a uniform resource identifier URI . Examples of information resources include web pages images videos and other forms of content. Hyperlinks that are present in information resources enable users easily to navigate their browsers to related resources. Examples of browser application include Internet Explorer developed by Microsoft Corp. of Redmond Wash. Mozilla Firefox developed by Mozilla Corp. of Mountain View Calif. Safari developed by Apple Inc. of Cupertino Calif. and Google Chrome of Mountain View Calif.

Browser application can retrieve a document from a server through network . Document can be a web document that includes code of a markup language such as Hyper Text Markup Language HTML dynamic HTML DHTML extensible HTML XHTML extensible markup language XML etc. Document can include DOM document object model objects and one or more scripts . DOM objects can include one or more objects represented in document according to the DOM convention which is a cross platform and language independent convention for representing and interacting with objects. DOM objects may include objects that are directly included in document and or are referenced by document and separately retrieved from server or other server. Script s include code formatted according to a dynamic language e.g. JavaScript VBScript AJAX Python Perl etc. that enables changes to be made to DOM objects including changes based on factors such as user input environmental conditions e.g. the time of day or other variables etc. The code of script s can access and modify objects of DOM objects on the fly without returning to server .

Browser application can receive e.g. load document . Browser application can include a browser engine e.g. a layout engine or rendering engine that formats information of document and displays the formatted information. For example as shown in browser application can generate a page based on document that is displayed by a display of computing device . Browser application can be configured to execute one or more scripts that are embedded in document or separate from but associated with document .

System may include one or more computing devices or computers such as computing device including one or more processors such as processor etc. a memory such as memory and one or more modules comprising an extensible program source code editor such as extensible program source code editor as described herein. It will be appreciated that one or more modules such as extensible program source code editor etc. can be loaded into memory to cause one or more processors such as processor etc. to perform the actions attributed to the one extensible program source code editor . Other components well known in the arts may also be included in system but are not here shown.

Extensible program source code editor can be a source code editor for a static or dynamic programming language. Extensible program source code editor can be a source code editor for a strongly or weakly typed programming language. Extensible program source code editor can be but is not limited to being a script editor. Extensible program source code editor can be but is not limited to being an editor for a language that is not compiled. Extensible program source code editor can be but is not limited to being a JavaScript editor.

Extensible program source code editor can receive a program source code file such as source code file and a corresponding program source code extension file such as extension code . The corresponding program source code extension file can include extension program source code. Extensible program source code editor can receive a program source code file such as source code file that includes program source code such as source code and extension code such as extension code . Extensible program source code editor can implement an application programming interface API such as extension API to which extension code can apply to subscribe to events. The events to which the extension code can apply and include but are not limited to a display completion list event a display completion hint event and a display function help event.

Suggestions may be provided to a user as a user edits or enters program source code in the extensible program source code editor . The suggestions provided may be in the form of function help. The suggestions provided may be in the form of completion hints. The suggestions provided may be in the form of an automatic completion list or an autocomplete function e.g. such as but not limited to Microsoft Corporation s Intellisense in which the editor provides suggestions for completing a word or phrase that the user wants to enter without the user actually typing the word or phrase in completely. For example a list of previously defined variables a list of previously defined functions a list of applicable arguments and so on can be displayed. The information provided by the autocomplete function may be based on an execution model. The information provided by the autocomplete function may be based on information available at compilation time. The information provided by the autocomplete function may be based on analysis of the abstract syntax tree of the source code loaded into the editor corresponding to a user location or any combination thereof.

While default suggestions are often quite accurate there can be situations in which the default suggestions leave something to be desired. For dynamic languages for example because of the execution based nature of some language services traditional display results for libraries including third party libraries can be misleading incomplete or include items that should not be included. Sometimes the language service cannot derive the information it needs to provide display results because of the runtime behavior of the language.

One such scenario occurs when the run time behavior of the library inhibits the ability of the language service to provide results because a library wraps a user defined function in another function that does not have the same statically defined signature preventing the suggestion providing feature from showing the expected parameters.

An example of when this scenario can occur is when for example a programming language e.g. JavaScript lacks the concept of classes. A class emulating library can be written in a programming language that lacks the concept of a class. An outer generic wrapping function can be written that returns a result from an inner wrapped function whose arguments represents the type of the class using a parameter. The suggestion providing function will not show the appropriate parameter for the inner wrapped function because the outer function in which the class emulating function is wrapped does not have a parameter. The author of the nested function can provide the parameter for the inner function by providing extension code that displays the parameter for the inner function.

Another scenario can occur when a library includes an event where calling the event s event handler may result in relevant display results but the event is not triggered before the point at which the display is requested. In this case the execution code can trigger the event so that the relevant display results are included in the display. Another scenario can occur when a library includes throttling or timing behavior that is available at run time but that prevents the language service from being able to retrieve the structural type information needed to provide more complete information. The extension code can include logic that disregards time components at design time and returns the function as if it were not wrapped in the throttle. The execution code can replace one function with another function. Extension code does not necessitate using an editor implemented API in this scenario.

Sometimes the language service cannot derive the information it needs because the context available at runtime cannot be predicted. One such scenario can occur when a library allows a function definition to be passed as an argument to one of its functions. When a suggestion display is requested within the user defined function the values for the function or any of the function s parameters are not available. In this case the expected values for a function and its parameters may not be provided. An extension can be written that points the function to a different function at runtime. Extension code does not necessitate using an editor implemented API in this scenario.

Another scenario can occur when the library includes semantics that the language service is not aware of that would be useful to expose to consumers through the display. Examples of this scenario include a library that includes members that are not meant to be exposed to users. Some programming languages such as but not limited to JavaScript do not include the concept of public and private entities preventing the language service from filtering out entries in the display. A second example can occur when a library includes or creates objects that can be accompanied by a glyph or icon. The glyph or icon can be a customized entity. The glyph can override information. For example the name of a function object may be accompanied by a class icon because that is how a user typically perceives it.

Another scenario can occur when the library s API would benefit from user provided documentation but annotating the API is difficult. Sometimes it is problematic to include comments in library code because the person who provides the comments or annotations is not the person who develops or owns the library and therefore cannot add comments annotations to the library code. It may be undesirable to add comments to library code because it increases the library size and as a result increases download time and execution time. Another example can be a library that defines members using an approach that is not supported by the language service. For example in some known language services comments are only parsed when they appear in a certain location with respect to service supported entities. The extension code can provide the user the opportunity to provide additional comments and documentation. The extension code can provide the user an opportunity to read the annotations which the language service does not support or understand and provide a more complete completion hint and or function help information based on the annotations.

In accordance with some aspects of the subject matter disclosed herein the language service providing suggestions is unaware of user specific source specific library application project specific concepts. For example some programming languages such as but not limited to JavaScript do not provide built in access control. In languages in which there is no built in access control there is no concept of public and private entities. For example each field of an object is treated as a public field. Consequently each field of the object will appear in a suggestion display. A user may by individual convention indicate that an entity is private by preceding the name or identifier with a particular character or series of characters such as dollar sign underscore   private or the like but these personal conventions will not be respected by the language service which will still display the private entities because the concept of private and public entities is not a feature of the programming language. A user s preference may be to have these private entities filtered out from the display but the language service cannot respect these changes because the convention is not standardized across the universe of all developers.

In accordance with some aspects of the subject matter disclosed herein the extension code can filter out the user designated private entities from the suggestions display. The extension code can tell the language service and editor how to hide private entities by implementing extension code. The extension code can remove entries from the display. The extension code can add entries to the display. The extension code can change entries in the display.

A semantic meaning of entities displayed can include concepts that are not part of the programming language. For example the JavaScript script language does not include the concept of component or class . The semantic meaning of the entities may be a higher level concept that those appreciated by the programming language in which the source code or source code extension code is written. The semantic meaning of the entities can be library or application specific. The semantic meaning of the entities can be indicated by indicators such as but not limited to icons etc. Information concerning these language independent concepts can be provided by the extension code by displaying the indicator in the suggestions display. These indicators can be filtered added changed or removed by the extension code.

The extensible program source code editor can implement an extension API . The extension code can apply to this API to subscribe to events such as but not limited to show completion list show completion hint and show function help. In response to subscribing to an event the default contents e.g. default suggestions generated by a language service such as language service can be returned to the extension code loaded into the extensible program source code editor . The default list can include a collection of list entries. An event can be fired to notify the extension code that a default display has been received by the editor. Firing an event means to call all event handlers which are registered to that event. The extension code can then change the contents of the display by providing additional extension suggestions changing suggestion entries removing suggestion entries and so on cumulatively extension suggestions . For each item the extension code can provide an event handler which provides or modifies the information that is displayed in completion lists completion hints function help etc. displayed by the editor. The content of this descriptive information can be changed in the extension code based on information known because of an application specific convention. For example summary text can be obtained from a language service or other source and the summary text can be displayed. The edited information can provide more information about the displayed information. Thus the information that is displayed to the user e.g. suggestions display which can be displayed on a display device of the computing device can provide domain specific information that is not based on characteristics of the programming language but instead is based on the user s particular source code. A higher level semantic can be exposed to the user.

The contents of comments in the code can be provided in a display as a completion hint. Additional documentation comment formats can be supported including XML and JSDoc and so on.

At editing operations in an extensible source code editor may occur. At a function can be initiated within the extensible editor as described more fully above. The function requested can be a completion list function help or completion hint function. Such a request can be initiated by a user inputting some character or series of characters followed by a particular character e.g. a dot . that triggers the request. The request can be made explicitly via UI menu command or via a keyboard shortcut. Any typed character may trigger display of a completion list as the user types. For example if a user types a an auto complete function can be triggered that shows all available items in the scope that begin with a .

The request can be sent to a language service. At the language service can return a default display to the extensible editor. The default display can include items discernible from features of the programming language. At the extensible editor can determine if there are any extensions that apply to the default completion list by for example checking to see if there are any event subscribers to events including but not limited to show completion list function help and completion hint. If there are no event subscribers the default display can be displayed on a display device of the computer or computing device at . At if the programming language in which the extension code is written is based on an object model the default display results can be wrapped into an object model of the appropriate programming language e.g. JavaScript . At the default display results can be sent to the extension code associated with the part of the code in which the request was triggered by firing an appropriate event. At the extension code associated with the request can be executed. At the extension code may determine that the editor should not display the results and processing may resume normal editing operations at . If the extension code determines at that the results are to be displayed the extension code involved with the interaction can apply changes as described more fully above to the default display at . The potentially modified display can be displayed at . Processing can resume with normal editing functions at .

In order to provide context for various aspects of the subject matter disclosed herein and the following discussion are intended to provide a brief general description of a suitable computing environment in which various embodiments of the subject matter disclosed herein may be implemented. While the subject matter disclosed herein is described in the general context of computer executable instructions such as program modules executed by one or more computers or other computing devices those skilled in the art will recognize that portions of the subject matter disclosed herein can also be implemented in combination with other program modules and or a combination of hardware and software. Generally program modules include routines programs objects physical artifacts data structures etc. that perform particular tasks or implement particular data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. The computing environment is only one example of a suitable operating environment and is not intended to limit the scope of use or functionality of the subject matter disclosed herein.

With reference to a computing device in the form of a computer is described. Computer may include at least one processing unit a system memory and a system bus . The at least one processing unit can execute instructions that are stored in a memory such as but not limited to system memory . The processing unit can be any of various available processors. For example the processing unit can be a GPU. The instructions can be instructions for implementing functionality carried out by one or more components or modules discussed above or instructions for implementing one or more of the methods described above. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit . The computer may be used in a system that supports rendering graphics on a display screen. In another example at least a portion of the computing device can be used in a system that comprises a graphical processing unit. The system memory may include volatile memory and nonvolatile memory . Nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM or flash memory. Volatile memory may include random access memory RAM which may act as external cache memory. The system bus couples system physical artifacts including the system memory to the processing unit . The system bus can be any of several types including a memory bus memory controller peripheral bus external bus or local bus and may use any variety of available bus architectures. Computer may include a data store accessible by the processing unit by way of the system bus . The data store may include executable instructions 3D models materials textures and so on for graphics rendering.

Computer typically includes a variety of computer readable media such as volatile and nonvolatile media removable and non removable media. Computer storage media may be implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other transitory or non transitory medium which can be used to store the desired information and which can be accessed by computer .

It will be appreciated that describes software that can act as an intermediary between users and computer resources. This software may include an operating system which can be stored on disk storage and which can allocate resources of the computer . Disk storage may be a hard disk drive connected to the system bus through a non removable memory interface such as interface . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It will be appreciated that computers can be implemented with various operating systems or combinations of operating systems.

A user can enter commands or information into the computer through an input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone voice and gesture input systems and the like. These and other input devices connect to the processing unit through the system bus via interface port s . An interface port s may represent a serial port parallel port universal serial bus USB and the like. Output devices s may use the same type of ports as do the input devices. Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers that require particular adapters. Output adapters include but are not limited to video and sound cards that provide a connection between the output device and the system bus . Other devices and or systems or devices such as remote computer s may provide both input and output capabilities.

Computer can operate in a networked environment using logical connections to one or more remote computers such as a remote computer s . The remote computer can be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . Remote computer s can be logically connected via communication connection s . Network interface encompasses communication networks such as local area networks LANs and wide area networks WANs but may also include other networks. Communication connection s refers to the hardware software employed to connect the network interface to the bus . Communication connection s may be internal to or external to computer and include internal and external technologies such as modems telephone cable DSL and wireless and ISDN adapters Ethernet cards and so on.

It will be appreciated that the network connections shown are examples only and other means of establishing a communications link between the computers may be used. One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the subject matter disclosed herein may pertain to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. Aspects of the subject matter disclosed herein may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. Aspects of the subject matter disclosed herein may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

A user can create and or edit the source code component according to known software programming techniques and the specific logical and syntactical rules associated with a particular source language via a user interface and a source code editor in the IDE . Thereafter the source code component can be compiled via a source compiler whereby an intermediate language representation of the program may be created such as assembly . The assembly may comprise the intermediate language component and metadata . Application designs may be able to be validated before deployment.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus described herein or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing aspects of the subject matter disclosed herein. As used herein the term machine readable medium shall be taken to exclude any mechanism that provides i.e. stores and or transmits any form of propagated signals. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects e.g. through the use of a data processing API or the like may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

