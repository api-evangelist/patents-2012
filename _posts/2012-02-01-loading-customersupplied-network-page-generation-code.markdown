---

title: Loading customer-supplied network page generation code
abstract: Disclosed are various embodiments for loading page generation code supplied by customers into a memory. A request for a network page is obtained from a client. The network page is associated with a network site hosted by a hosting provider on behalf of a customer. It is determined whether page generation code configured to generate at least a portion of the network page is preloaded into a memory. Such page generation code is customer supplied. The page generation code is loaded into the memory in response to the request and in response to determining that the page generation code is not preloaded into the memory. The page generation code is executed to generate the at least a portion of the network page in response to the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959426&OS=08959426&RS=08959426
owner: Amazon Technologies, Inc.
number: 08959426
owner_city: Seattle
owner_country: US
publication_date: 20120201
---
Network pages are becoming increasingly complex. While in the past network pages may have been static files network pages now are typically dynamically generated by complex applications using data obtained from many different sources. As a non limiting example a network page for an online retailer may include information obtained from a product catalog application a user information application a shopping cart application and or other sources.

The present disclosure relates to loading customer supplied network page generation code. A hosting provider may offer network site hosting for a plurality of customers. Such hosting may include access to an electronic commerce platform or other hosted application. For security and other various reasons customer supplied network page generation code may be executed under a framework that restricts the operations permitted in the code. Also the page generation code may be restricted from directly accessing data sources of the electronic commerce platform. To provide access data from the electronic commerce platform that is used by the page generation code may be aggregated from one or more data sources in advance for use by the page generation code.

Various techniques relating to a data aggregation framework are provided in U.S. patent application Ser. No. 13 348 051 entitled GENERATING NETWORK PAGES USING CUSTOMER SUPPLIED GENERATION CODE and filed on Jan. 11 2012 and in U.S. patent application Ser. No. 13 348 059 entitled GENERATING NETWORK PAGES USING CUSTOMER GENERATED NETWORK PAGE PORTIONS and filed on Jan. 11 2012 both of which are incorporated herein by reference in their entirety.

Various embodiments of the present disclosure provide an efficient approach to loading customer supplied page generation code into memory. Instead of loading the page generation code into memory in response to the code being initially submitted or uploaded by the customer and instead of loading the page generation code after each network page request the page generation code is loaded into memory in response to a first network page request. Although an end user may see diminished performance in response to the first network page request relative to subsequent requests the first request may be a relatively rare event making the diminished first request performance an acceptable tradeoff. In one embodiment where the page generation code is part of a customer supplied web application the entire customer supplied web application may be loaded into memory responsive to the first network page request. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments relating to customer supplied page generation code. The networked environment includes a computing environment in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. The computing environment may be operated by a hosting provider to host network sites for various customers.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below. The data stores may include mounted drives network file systems cloud storage systems and so on which correspond to file systems associated or linked with customer network sites. Where a cloud storage system is employed it is understood that a file system may correspond to a storage bucket that is used to store and obtain data from the cloud storage system.

The components executed by the computing environment for example include a network page generation environment a network page server application a network site configuration application and other applications services processes systems engines or functionality not discussed in detail herein. The network page generation environment is executed to generate the network pages in response to page requests obtained from clients . The network pages may correspond to web pages gopher pages mobile application screens and or other forms of network content. Where the customer is a merchant the network pages may correspond to home pages catalog pages item detail pages shopping cart pages checkout pages order confirmation pages and so on. Such network pages may facilitate selecting items for purchase rental download lease or other form of consumption. In addition where the customer is a merchant the network page generation environment may include or be in communication with an electronic commerce system that performs various backend functions in order to facilitate the online purchase of items.

The network page generation environment may execute page generation code from web applications in order to generate the network pages . The page generation code may correspond to a default version supplied by the hosting provider or may correspond to a customized version supplied by the customer. In some cases the page generation code may be transformed or compiled from one code format to another and or may be interpreted. As a non limiting example the page generation code may correspond to JavaServer Pages JSPs which may be compiled into JAVA servlets which in turn may be compiled into bytecode which may be executable by the network page generation environment .

The page generation code may be packaged into web applications . A web application may include multiple different page generation codes for generating different network pages or different portions of network pages . In one embodiment a web application corresponds to a web application archive WAR file. The web application may include a version identifier identifying the specific version of the web application . In some embodiments each page generation code may have a respective version identifier . In one embodiment the web application loaded by the network page generation environment includes compiled versions of the page generation code e.g. compiled servlets class files etc.

The network page generation environment may include a JAVA Virtual Machine JVM and a servlet container or web application container such as APACHE TOMCAT or another servlet container. The network page generation environment may be configured to obtain and provide aggregated data to the page generation code for example as a set of predefined implicit variables or by another approach. The network page generation environment may act as a sandbox for the page generation code to enforce restrictions on application programming interface API calls access to data sources and or other resources in the computing environment . As a non limiting example where the network page generation environment includes a JVM a security manager may be installed in the JVM to deny access by the page generation code to system data data of other customers and so on. As will be described the network page generation environment is configured to load a web application into memory from web application code stored by the data store responsive to receiving the first page request for a network page that is generated at least in part by the web application .

The network page server application is configured to obtain the page requests from the client over the network to generate network pages in response to the page requests using the network page generation environment and to return the network pages to the client by way of the network . The network page server application may also serve up other files and resources in response to requests over the network . The network page server application may correspond to a commercially available hypertext transfer protocol HTTP server such as for example APACHE HTTP Server APACHE TOMCAT MICROSOFT Internet Information Services IIS and or other servers.

The network site configuration application is executed to facilitate customer configuration of network sites. To this end the network site configuration application may enable uploading and configuration of the page generation code configuration of various parameters associated with the operation of the network site order fulfillment management item catalog management and or other functionality. The network site configuration application may implement an HTTP server a web based distributed authoring and versioning WebDAV server a file transfer protocol FTP server and or other servers. The network site configuration application may include various components and or may invoke various components of the network page generation environment to enforce compile time restrictions on the page generation code . The network site configuration application may be configured to compile the page generation code and or to package the page generation code into web applications . The network site configuration application stores the compiled code in the data store .

The data stored in the data store includes for example network site files network site configuration files customized page generation code default page generation code file validation rules and potentially other data. The network site files correspond to files and other data used in the generation of the network pages for the hosted network sites of the merchants or other customers. The network site files may also correspond to other network resources besides network pages . Such files may include for example templates hypertext markup language HTML text extensible markup language XML cascading style sheets CSS images audio video animations and or other data.

The network site configuration files may store parameters and or other data for controlling the operation and appearance of the hosted network site. Such data may control various electronic commerce functionality such as for example item catalogs item taxonomies item searching item recommendations shopping carts checkout order fulfillment and or other functionality. The customized page generation code corresponds to page generation code and or web applications which are created or customized by merchants or other customers. The default page generation code may correspond to a default set of page generation code or web application for a merchant or other customer to use for a base functionality for a network site. The default page generation code may generate network pages having for example a default appearance and behavior for a generic electronic commerce site.

The file validation rules may configure various restrictions to be placed on the page generation code by the network page generation environment . As a non limiting example where the page generation code corresponds to JSP code the network page generation environment may restrict the JSP code from including scriptlets and or various API calls. Various functionalities may be whitelisted or blacklisted as the case may be. The file validation rules may also be used to validate network site configuration files . The file validation rules may also configure restrictions on writing to certain files or portions of files.

The client is representative of a plurality of client devices that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as a browser and or other applications. The browser may be executed in a client for example to access and render network pages served up by the computing environment and or other servers thereby generating a rendered network page on the display . The client when controlled by a hosting customer may include applications that interact with the network site configuration application to facilitate control of the network site. The client may be configured to execute applications beyond the browser such as for example code development applications file transfer applications mobile applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a merchant or other customer of a hosting provider associated with the computing environment configures a network site to be hosted through the computing environment . The network site may have a common domain that is shared by multiple customers of the hosting provider or the network site may correspond to a unique domain for each customer. The merchant or other customer may adopt default page generation code for various network pages accessible through the network site. Alternatively or additionally the merchant or other customer may create customized page generation code for generating some or all of the network pages accessible through the network site.

The merchant or other customer may interact with the network site configuration application to customize or make changes to the network site. In various cases the customer may edit the page generation code directly through the network site configuration application or the customer may upload replacement page generation code . Through this system customers are able to control generation of network pages for their network sites despite using a hosted infrastructure and potentially a hosted electronic commerce platform.

When a customer uploads or edits page generation code the network site configuration application and or other applications may perform various verifications on the static code. Such verifications may be referred to as compile time checks but need not occur at the same time the page generation code is compiled and in some cases the page generation code may be interpreted rather than compiled. Such verifications may be performed as configured by the file validation rules . If applicable the resulting compiled code is stored in the data store and may correspond to the customized page generation code and or the default page generation code . Version identifiers associated with the page generation code may be updated when the page generation code is modified.

With respect to operation of the network site the client sends a page request to the network page server application for some network page from the network site of a customer. The network site is hosted on behalf of the customer by the hosting provider who operates the computing environment . Where the customer is a merchant the hosting provider may operate a hosted electronic commerce platform in conjunction with the computing environment . The page request is provided to the network page generation environment .

The network page generation environment determines whether the page generation code and or the web application containing the page generation code has been loaded. It may be desirable not to load the web applications into the network page generation environment until the first page request associated with the corresponding page generation code is received. This delayed loading may result in increased latency for servicing the first page request but the delayed loading may be an acceptable tradeoff. Similarly an updated version of the page generation code and or web application may be loaded responsive to the first page request obtained after the updated version has become available. Although the loading herein may refer to loading into a memory accessible to the network page generation environment the loading may also encompass any form of runtime configuration of the components of the network page generation environment that may be necessary in order to execute the page generation code and service the page request .

In some embodiments the entirety of the web application may be loaded by the network page generation environment responsive to a page request that invokes only a portion of the page generation code in the web application . In other words other page generation code that is used to generate at least a portion of other network pages may be loaded concurrently with the page generation code that is used to service the initial page request . The page generation code and or the web application may persist in the memory indefinitely. In some cases the page generation code and or the web application may be purged after a predefined time period or according to a least recently used approach or another approach.

The page generation code for the requested network page is executed by the network page generation environment . The network page generation environment facilitates access to various data by the page generation code . The page generation code generates the network page and the network page server application serves up the network page to the client in response to the page request . It is noted that subsequent page requests for the same network page or other network pages of the hosted network site may see increased performance because the page generation code and or the entire web application has already been loaded by the network page generation environment .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the network site configuration application according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network site configuration application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network site configuration application obtains page generation code from a customer whose network site is hosted by the hosting provider who operates the computing environment . The network site configuration application may be configured to authenticate a client associated with the customer. In box the network site configuration application determines whether the page generation code is valid. If the page generation code is not valid the network site configuration application rejects the page generation code in box . An error may be presented to the customer. Thereafter the portion of the network site configuration application ends.

If the page generation code is valid the network site configuration application proceeds from box to box . Even assuming that the page generation code is determined to be valid by the network site configuration application validity checks may still need to be performed by the network page generation environment at runtime. In box the network site configuration application compiles the page generation code . For example the network site configuration application may compile the page generation code from a JSP into a servlet. The resulting servlet code may also be compiled into bytecode for execution by a JAVA Virtual Machine JVM or directly by a processor circuit of the computing environment .

In box the network site configuration application determines whether additional page generation code is to be obtained from the customer. If additional page generation code is to be obtained the network site configuration application returns to box . If additional page generation code is not to be obtained the network site configuration application proceeds to box . In box the network site configuration application creates an archive file for a web application containing the page generation code . In other embodiments the customer may upload the web application directly or the page generation code might not be packaged into a particular file or grouping.

In box the network site configuration application configures the network page generation environment to execute the compiled page generation code from the web application for one or more network pages for the network site of the customer. Thereafter the portion of the network site configuration application ends.

Turning now to shown is a flowchart that provides one example of the operation of a portion of the network page generation environment according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network page generation environment as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network page generation environment obtains a first page request for a network page from a client . In box the network page generation environment determines the page generation code or web application which is configured to generate at least a portion of the requested network page . In box the network page generation environment determines the current version of the page generation code . In box the network page generation environment determines whether the current version of the page generation code has been loaded into memory. It may be that no version of the page generation code has been loaded into memory or it may be that a previous version of the page generation code has been loaded into memory.

If the current version of the page generation code has not been loaded into memory the network page generation environment moves from box to box and loads the current version of the web application including the page generation code from the data store . Meanwhile the network page generation environment may in some embodiments opportunistically fetch data to be provided to the page generation code . The network page generation environment then continues to box . If instead the page generation code does correspond to the current version the network page generation environment proceeds directly from box to box .

In box the network page generation environment executes the page generation code to generate at least a portion of the network page . In box the network page generation environment sends the network page to the client in response to the page request . In box the network page generation environment determines whether another page request is received. If another page request is received the network page generation environment returns to box and obtains the next page request . If another page request is not received the portion of the network page generation environment ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment comprises one or more computing devices . The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the network page generation environment the network page server application the network site configuration application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C JAVA JAVASCRIPT Perl PHP VISUAL BASIC PYTHON Ruby DELPHI FLASH or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the network page generation environment the network page server application the network site configuration application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the network site configuration application and the network page generation environment . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the network page generation environment the network page server application and the network site configuration application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

