---

title: Facilitating application compatibility across devices
abstract: Disclosed are various embodiments that facilitate compatibility of applications across multiple different devices. It is determined whether an application is compatible with a client device. If the application is not compatible, an application wrapper to facilitate execution of the application by the client device is encoded. The application wrapper is then provided for transfer to the client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09392047&OS=09392047&RS=09392047
owner: Amazon Technologies, Inc.
number: 09392047
owner_city: Seattle
owner_country: US
publication_date: 20120913
---
Mobile computing has recently emerged as a new direction for computing architecture. With mobile computing the human computer interface has migrated away from traditional keyboard and mouse input devices and toward touch audio and video input devices. Applications developed for mobile computing may be specially designed to be compatible with the smaller displays often employed in mobile devices. Currently there is a proliferation of different kinds of mobile devices e.g. smartphones tablets electronic book readers etc. having different hardware configurations and different operating systems. Unfortunately applications developed for one kind of mobile device may not be compatible with another kind of mobile device.

The present disclosure relates to facilitating compatibility of applications across multiple different devices. The proliferation and rapid advancements regarding mobile devices often cause user frustration. Mobile applications written for one operating system e.g. Android may be incompatible with another operating system e.g. iOS Windows Phone etc. . Incompatibilities may also arise among different versions of the same operating system devices made by different manufacturers devices having different hardware characteristics and so on. Particular mobile devices may quickly become obsolete in view of rapid technological advancement and increasing hardware requirements of applications.

Various embodiments of the present disclosure facilitate compatibility of applications across different devices through emulation and or remote execution. With reference to shown is one example of a networked environment according to various embodiments. The networked environment includes an application marketplace a compatible client and an incompatible client . The application marketplace offers a multitude of applications from a multitude of developers.

Suppose that a game or other application is available through the application marketplace . The application may be compatible only with a specific mobile device platform. The compatible client represents a mobile device having this specific mobile device platform. The compatible client is able to obtain the application from the application marketplace and then natively execute it within an operating system environment. The incompatible client however cannot natively execute the application .

To facilitate use of the application through the incompatible client the application marketplace is configured to encode the application using a wrapper thereby producing a wrapped application . The wrapped application is compatible with the incompatible client . As a non limiting example the wrapped application may include an emulator for the specific mobile device platform. Alternatively the wrapped application may facilitate communication with a remotely executed instance of the application . As shown in users of the compatible client and the incompatible client are both able to obtain and use the application with similar experiences.

Various techniques relevant to remote execution of applications and application compatibility are described in U.S. patent application Ser. No. 13 099 753 entitled REDUCING LATENCY FOR REMOTELY EXECUTED APPLICATIONS and filed on May 3 2011 U.S. patent application Ser. No. 13 114 534 entitled REMOTELY EMULATING COMPUTING DEVICES and filed on May 24 2011 U.S. patent application Ser. No. 13 172 500 entitled REMOTE ACCESS TO MOBILE COMMUNICATION DEVICES and filed on Jun. 29 2011 U.S. patent application Ser. No. 13 172 503 entitled APPLICATION CONTROL TRANSLATION and filed on Jun. 29 2011 U.S. patent application Ser. No. 13 174 995 entitled EXECUTING APPLICATIONS IN REMOTELY EMULATED COMPUTING DEVICES and filed on Jul. 1 2011 U.S. patent application Ser. No. 13 191 585 entitled REMOTELY PRECONFIGURING A COMPUTING DEVICE and filed on Jul. 27 2011 U.S. patent application Ser. No. 13 407 919 entitled REDUCING INPUT PROCESSING LATENCY FOR REMOTELY EXECUTED APPLICATIONS and filed on Feb. 29 2012 U.S. patent application Ser. No. 13 529 095 entitled HOSTED MOBILE DEVICE INFRASTRUCTURE and filed on Jun. 21 2012 and U.S. patent application Ser. No. 13 540 045 entitled EVALUATING APPLICATION COMPATIBILITY and filed on Jul. 2 2012 which are all incorporated herein by reference in their entirety. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a detail view of the networked environment of according to various embodiments. The networked environment includes a computing environment one or more compatible clients and one or more incompatible clients in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include an application marketplace system that includes a wrapper generation service and an application ingestion service a hosted application server a plurality of wrapper instances . . . N executing a plurality of instances of applications . . . N a plurality of media encoders . . . N and other applications services processes systems engines or functionality not discussed in detail herein. The application marketplace system is executed to provide functionality e.g. generating user interface facilitating electronic commerce transactions providing other backend functionality etc. for the application marketplace where developers are able to offer applications for sale lease download and or other forms of consumption.

An application marketplace facilitates user acquisition of applications . The applications may be provided by many different developers. Such acquisition may include purchases and downloads free downloads trial downloads upgrades unlocking and or other types of acquisitions. The application marketplace system may facilitate user searching of available applications and or browsing of applications according to genre category title release date and so on. The application marketplace system may perform user authentication and charging of various payment instruments such as credit cards electronic checks lines of credit gift cards etc. to facilitate electronic payment for applications .

The application marketplace system may comprise commercially available hypertext transfer protocol HTTP server applications such as Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and or other servers. The application marketplace system may employ HTTP simple object access protocol SOAP representational state transfer REST and or other networking protocols.

The application ingestion service is executed to generate user interfaces and perform functionality related to maintaining the presence of a developer in an application marketplace . A developer as used herein may correspond to a user or business entity corresponding to a source or distributor of an application . The application ingestion service may allow a developer at a developer client to submit or upload applications establish pricing for applications establish metadata for applications customize merchandising for the applications in the application marketplace and or perform other functions.

Once a developer provides an application the application ingestion service may then add the application to the application marketplace . The application ingestion service may perform various tasks relating to configuring the application marketplace to offer the application . For example the application ingestion service may determine various requirements of the application such as supported operating systems supported display resolutions or sizes supported wireless carriers processor requirements memory requirements and so on. As will be described the application ingestion service may add a wrapped version of the application to the application marketplace to facilitate compatibility of the application with other target device platforms.

The wrapper generation service generates wrapped versions of the application to facilitate application compatibility. In one embodiment the wrapper generation service may bundle a wrapper or emulator with the application such that the application is configured to execute in incompatible clients . In another embodiment the wrapper generation service may generate a wrapped application that communicates with a wrapper instance executed in a hosted environment of the computing environment .

The hosted application server is executed to launch wrapper instances . The hosted application server may correspond to a hypervisor for the wrapper instances in some embodiments. The hosted application server is also executed to obtain input data from the incompatible clients and provide the input data to the respective wrapper instance .

The hosted application server is also executed to send output data that is captured from the application through the wrapper instance to the incompatible clients . The hosted application server may communicate with the incompatible client over various protocols such as for example HTTP SOAP REST real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network .

In some embodiments the hosted application server may be configured to perform various processing on the input data obtained from the incompatible client . Such processing may involve performing gesture recognition on raw gesture data captured for example by a touch screen of the incompatible client . The raw gesture data may also include user input data captured from other input devices of the incompatible client . In another embodiment the incompatible client may be configured to perform this processing instead.

In various scenarios the processing may include applying a high pass filter applying a low pass filter performing an interpolation and or performing other signal processing techniques. Further the hosted application server may perform forward prediction to estimate missing or delayed user input data. The hosted application server may also correct or adjust previous predictions in response to additional user input data being obtained. Once the user input data is processed e.g. to identify a gesture the processed result is provided to the respective wrapper instance for example by way of an application programming interface API or other interface. Alternatively the user input data may be provided directly to the wrapper instance without processing.

The applications may correspond to mobile phone applications gaming applications social networking applications computer aided design CAD applications computer aided manufacturing CAM applications photo manipulation applications video editing applications office productivity applications operating systems and associated applications emulators for operating systems architectures and capabilities not present on a consumer device and other applications and combinations of applications. The application may expect to access one or more resources of the device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources.

The wrapper instance provides a hosted environment for execution of the application . In various embodiments the wrapper instance may be configured to provide a virtualized or emulated environment for the application by virtualizing one or more of the resources that the application expects to access. Such resources may include a touchscreen a keypad a mouse a joystick a video device a sound device etc. In this way the wrapper instance is able to provide input commands to the application as if the wrapper instance emulates a keyboard a mouse an accelerometer a touch screen or another type of input device.

Further the wrapper instance may be able to obtain a video signal generated by the application as if the wrapper instance emulates a display device an audio device or another type of output device. The wrapper instance is able to encode the video signal and or audio signal by way of a media encoder into a media stream. To this end the wrapper instance may include various types of media encoders such as for example Moving Pictures Experts Group MPEG encoders H.264 encoders Flash media encoders etc. Such media encoders may be selected according to factors such as for example data reduction encoding quality latency etc.

In some embodiments the wrapper instance may communicate directly with the incompatible clients to obtain the input data and to serve up the output data . Also in some cases the draw commands or other video rendering commands may be intercepted from the wrapper instance and transmitted to the incompatible client in the media stream for rendering by the incompatible client . Thus instead of video being encoded the commands used to render the video may be encoded and transmitted to the incompatible client .

Different types of wrapper instances may be provided for different applications or classes of applications . Where the application is configured for execution in a specialized mobile computing device or another type of computing device the wrapper instance may include an emulation application that emulates the device. In some embodiments the output of the application may be captured by the wrapper instance at a device level. For example the application may be executed in a physical mobile device and the video output may be captured by way of a video graphics array VGA connection a high definition multimedia interface HDMI connection a component video connection a national television system committee NTSC television connection and or other connections.

The data stored in the data store includes for example applications media encoders wrappers user data security data input mapping configurations application marketplace data compatibility data and potentially other data. The applications correspond to a library of different applications from the application marketplace . The applications may correspond to executable code within one or more of the wrapper instances . A particular application may be executed in multiple wrapper instances for multiple application sessions. In some cases applications may be available on demand as a service. Fees for use of the application provided as a service may be assessed based on time usage instance usage or other factors.

The media encoders correspond to the various types of media encoders that may be employed in the computing environment . Some media encoders may correspond to specific formats such as for example H.264 MPEG 4 MPEG 2 and or other formats. The wrappers correspond to the executable code and data that implements the various types of wrapper instances and client side code that is packaged with an application in a wrapped application . In one embodiment the wrappers include file system images.

The user data includes various data related to the users of the application marketplace . Such user data may include modified mobile device instance images file data generated through the use of a wrapped application configuration data billing data contact data and or other data. The user data may indicate which applications that the user has acquired a right to use or access. The user data may also include browsing history order history identifiers for registered devices and or other information. The security data may define users who are permitted to access particular wrapper instances security credentials file permissions password policies security policies firewall configurations encryption policies and or other data. Where a user employs an enterprise account the security data may enforce various policies on the user as desired by the enterprise.

The input mapping configuration may define mappings of gestures or other forms of input from client input devices to actual or virtual input devices of wrapper instances . As a non limiting example a voice gesture detected by an incompatible client may be mapped by the input mapping configuration to a touchscreen swipe gesture provided to a wrapper instance . The input mapping configuration may configure mapping of devices under one mobile device platform to devices under another mobile device platform.

The application marketplace data may include data related to various applications offered in the application marketplace . The application marketplace data may include licensing restrictions access restrictions pricing information order information metadata for applications information pages category and taxonomy structures reviews ratings screenshots and or other data that may be employed in merchandising applications in the application marketplace .

The compatibility data may be employed to determine whether a given application is compatible with a target client device platform. The compatibility data may include device capability data pertaining to each client device. The device capability data may specify for example an operating system version a wireless carrier installed applications and libraries whether the device has a global positioning system GPS device whether the device has a camera the processor the memory and so on. The compatibility data may also include application requirements data obtained from the application . The application requirements data may include security requirements feature requirements and or other requirements for the client devices to meet before an application may be downloaded and or installed onto the client devices. Such requirements may be determined from a manifest or other file included in the application . Additionally such requirements may be ascertained by way of analyzing the code of the application executing the code of the application and determining which features are accessed and or by other approaches. In some cases the requirements may be manually specified by a developer through a user interface generated by the application ingestion service .

The incompatible clients and compatible clients are representative of a plurality of client devices that may be coupled to the network . Each of the incompatible clients and compatible clients may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game devices electronic book readers or other devices with like capability. Although the incompatible clients and compatible clients may correspond to mobile devices the incompatible clients and compatible clients may correspond to desktops or fixed computing devices in some instances.

Each of the incompatible clients and compatible clients may include a display . The display may comprise for example one or more devices such as liquid crystal display LCD screens gas plasma based flat panel displays or other types of display devices etc. Each of the incompatible clients and compatible clients may include one or more input devices . The input devices may comprise for example devices such as accelerometers light guns game controllers touch pads touch sticks touch screens push buttons optical sensors microphones webcams keyboards mice joysticks and or any other devices that can provide user input. Additionally various input devices may incorporate haptic technologies in order to provide feedback to the user. The output devices may correspond to the output sections of haptic input devices vibration devices buzzing devices audio devices indicator lights seven segment display devices and so on.

The incompatible client may be configured to execute various applications such as a wrapped application and or other applications. The incompatible client may be configured to execute applications beyond the wrapped application such as for example mobile applications browser applications email applications instant message applications and or other applications.

In a first embodiment a wrapped application is executed to allow a user to launch and interact with wrapper instances executed in the computing environment . To this end the wrapped application is configured to capture input data provided by the user through one or more of the input devices and send this input over the network to the computing environment as input data . The incompatible client may correspond to a thin client or a thick client depending the processing to be performed at the client side versus by the computing environment for the wrapper instance . For example normal processing of the input data by the incompatible client may be bypassed in favor of server side processing in various embodiments.

The wrapped application is also configured to obtain output data over the network from the computing environment and render a screen on the display . To this end the wrapped application may include one or more video and audio players to play out a media stream generated by an application . In one embodiment the wrapped application comprises a plug in within a browser application. It is noted that different types of wrapped applications may be employed for different types of wrapper instances . Further some wrapped applications may support multiple types of wrapper instances .

In a second embodiment the wrapped application includes an emulator that is configured to emulate a compatible environment for an application . In other words the wrapped application may include the code for the application and may be able to emulate the compatible environment without interacting with wrapper instances .

The compatible client may be configured to execute various applications such as an application and or other applications. In contrast to the incompatible client the compatible client is configured to execute the application natively without an emulator and without interacting with wrapper instances . The compatible client may be configured to execute applications beyond the application such as for example mobile applications browser applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a developer provides an application to the application marketplace system . The application ingestion service adds the application to the application marketplace . The application ingestion service stores the application in the data store and updates the application marketplace data . One or more target client device platforms may be configured for the application marketplace . The application ingestion service may evaluate whether the application is compatible with the target client device platforms. If not compatible the application marketplace system may employ the wrapper generation service to generate a wrapped version of the application to facilitate compatibility.

The wrapper generation service may package the application as a wrapped application by including a standalone emulator that provides a compatible environment within the otherwise incompatible target client device platform. Alternatively the wrapper generation service may configure instances of the application to be executed by wrapper instances in the computing environment . The wrapper generation service may then generate a wrapped application that corresponds to a client application for the hosted application server . The wrapped version of the application may be added to the application marketplace and may be advertised as being compatible with the target client device platform e.g. a specific device operating system version etc. .

When an end user interacts with the application marketplace system the user may request a particular application . If the user has rights to the application access to obtain the application may be granted. If the user does not have rights the application marketplace system may facilitate acquisition of such rights. In some embodiments the application marketplace system may generate wrapped versions of applications on demand as needed according to the capabilities of client devices associated with application requests.

If the client device of the end user is a compatible client the application marketplace system may merely send the application to the compatible client . By contrast if the client device of the end user is an incompatible client the application marketplace system may generate and or send the wrapped application for the application to the incompatible client . Depending on the implementation and resources available to the incompatible clients execution of the wrapped application may appear to be the same as or at least similar to execution of the application by the compatible client .

Turning now to shown is a flowchart that provides one example of the operation of a portion of the application ingestion service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application ingestion service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application ingestion service obtains an application from a developer. In box the application ingestion service determines whether the application is compatible with one of potentially multiple target client device platforms according to the compatibility data . In box if the application is compatible with the platform the application ingestion service proceeds to box . In box the application ingestion service adds the application to the application marketplace for the platform . In so doing the application ingestion service may configure the application marketplace data for the application marketplace so that the application marketplace advertises the compatibility of the application with the target client device platforms. Thereafter the application ingestion service proceeds to box .

If the application is not compatible in box the application ingestion service instead proceeds to box . In box the application ingestion service uses the wrapper generation service to generate a wrapped application that is compatible with the target client device platform. In some cases the wrapped application may include an emulator that facilitates compatibility of the application with the target client device platform. In other cases the wrapped application may include a client application that communicates with a wrapper instance executed in the computing environment . The client application may be configured to render a user interface corresponding to the application based at least in part on a media stream generated by the wrapper instance or a media encoder coupled to a wrapper instance .

In box the application ingestion service adds the wrapped application s to the application marketplace for the platform. In so doing the application ingestion service may configure the application marketplace data for the application marketplace so that the application marketplace advertises the compatibility of the wrapped application with the target client device platform s . Also the application ingestion service may configure the hosted environment of the computing environment for executing wrapper instances for the application . In box the application ingestion service determines whether there is another target client device platform to be processed for the instant application . If another platform remains to be processed the application ingestion service returns to box and determines whether the application is compatible with the next platform. Otherwise the portion of the application ingestion service ends.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the application marketplace system according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application marketplace system as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application marketplace system obtains a request for an application from a client device i.e. a compatible client or an incompatible client associated with a user. In box the application marketplace system determines whether the user has a right to obtain the application . For example the user may have previously purchased the application for use on another client device owned by the user and licensing terms may permit the right. If the user does not have the right the application marketplace system moves to box and facilitates an acquisition of the right to obtain the application by the user. Thereafter the portion of the application marketplace system ends.

If the user does have the right to obtain the application the application marketplace system continues from box to box . In box the application marketplace system determines whether the application is compatible with the client device. In box if the application is compatible the client device is a compatible client and the application marketplace system moves to box . In box the application marketplace system sends the application to the user. The application may be sent directly to the client device or the application may be provided to another client device for transfer to the target client device. Thereafter the portion of the application marketplace system ends.

If the application is not compatible in box the client device is an incompatible client and the application marketplace system continues to box . In box the application marketplace system generates a wrapped application using the wrapper generation service where the wrapped application is compatible with the incompatible client . The wrapped application may include an emulator or may be a client application for the hosted application server . The application marketplace system then sends the wrapped application to the incompatible client in box . Thereafter the portion of the application marketplace system ends.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the hosted application server according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the hosted application server as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the hosted application server obtains a request from a wrapped application executed in an incompatible client to connect to a wrapper instance for an application . The incompatible client may be located remotely from the computing environment and the request may be obtained via a network . In some cases the request may be to reload a stored version of the wrapper instance .

In box the hosted application server executes the wrapper instance in a hosted environment. The wrapper instance may correspond to a virtualized or emulated environment in the hosted environment. Alternatively the requested wrapper instance may correspond to a physical mobile device in the computing environment . In box the hosted application server provides a connection between the wrapped application and the wrapper instance via the network . The connection facilitates control of a graphical user interface of the application of the wrapper instance by a user at the incompatible client . The graphical user interface may correspond to a virtualized touch sensitive interface of the wrapper instance . Such applications may be obtained from an application server in the computing environment in some cases. The operating system of the wrapper instance may differ from the operating system of the incompatible client .

In box the hosted application server obtains the graphical output the audio output and or other output from the wrapper instance . Such outputs may be encoded via a media encoder . The graphical output may correspond to a video representation or other representation of a graphical user interface of the wrapper instance . In box the hosted application server sends the graphical output the audio output and or other outputs to the wrapped application through the connection.

In box the hosted application server obtains input from the wrapped application through the connection. The input may correspond to sensor input user input etc. The input may include input commands such as a gesture relative to the graphical output. The gesture may be captured by touch sensitive hardware of the incompatible client e.g. one or more input devices . Alternatively the gesture may correspond to a voice gesture a video gesture and or other gestures. A video gesture may correspond to video input capturing users manipulating their hands faces etc. to express a command or other type of input. The hosted application server may potentially process the input. In box the hosted application server provides the input to the wrapper instance .

In box the hosted application server determines whether the connection has ended. For example the incompatible client may explicitly request to end the connection or may lose connectivity. Alternatively the hosted application server may choose to end the connection. If the connection has not ended the hosted application server returns to box and continues obtaining the output of the wrapper instance . In some cases other incompatible clients may connect concurrently to the same wrapper instance via another connection.

Otherwise if the connection is to end the portion of the hosted application server ends. In some cases the wrapper instance may continue executing without the connection while in other cases the wrapper instance may hibernate or terminate potentially after persisting for at least a predetermined time period. The hosted application server may store an image of the wrapper instance in the data store in some cases.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. In one embodiment one or more of the computing devices in the computing environment may correspond to physical mobile devices in which the instances of the applications may be executed. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the wrapper instances the applications the hosted application server the media encoders the application marketplace system the wrapper generation service the application ingestion service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the wrapper instances the applications the hosted application server the media encoders the application marketplace system the wrapper generation service the application ingestion service and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the hosted application server the application marketplace system and the application ingestion service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the wrapper instances the applications the hosted application server the media encoders the application marketplace system the wrapper generation service and the application ingestion service that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

