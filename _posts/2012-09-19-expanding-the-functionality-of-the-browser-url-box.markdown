---

title: Expanding the functionality of the browser URL box
abstract: Systems and methods for expanding the functionality of a browser URL input box are provided. A first input is received from a navigation field at a browser. An input type of the first input is determined. A plurality of repositories are searched for one or more browser extensions based on the input type. A set of browser extension results are displayed within the navigation field based on a confidence score associated with each repository of the plurality of repositories. The confidence score indicates a probability of a user's intent to use a browser extension included in the browser extension results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098174&OS=09098174&RS=09098174
owner: Google Inc.
number: 09098174
owner_city: Mountain View
owner_country: US
publication_date: 20120919
---
Embodiments are generally related to an application or service that expands the functionality of the navigation field of a browser.

The navigation field of a browser is generally used to generate a URL request or a search query. Typically within the navigation field a user enters the name of a website that they would like to display. In response a request message is generated and sent to a server storing the contents of the website. The server sends back a response message which includes the contents of the website. Upon receipt of the response message the browser reads the contents of the response message and formats the content of the website for display. Alternatively a user may enter a string of text for which they would like a set of search results returned. In response a list of suggested URLs may be displayed. The user may select one of the suggested URLs which will result in the display of a website.

Embodiments described herein relate to methods and systems for expanding the functionality of a navigation field of a browser. A first input is received from a navigation field of a browser. An input type of the first input is determined. A plurality of repositories are searched for one or more browser extensions based on the input type. A set of browser extension results are displayed within the navigation field based on a confidence score associated with each repository of the plurality of repositories. The confidence score indicates a probability of a user s intent to use a browser extension included in the browser extension results.

Further embodiments features and advantages of the invention as well as the structure and operation of the various embodiments of the invention are described in detail below with reference to accompanying drawings.

The drawing in which an element first appears is typically indicated by the leftmost digit or digits in the corresponding reference number. In the drawings like reference numbers may indicate identical or functionally similar elements.

In the detailed description of embodiments that follows references to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

While the navigation field of a browser is useful for performing the functionality discussed above users could benefit from increased functionality of the navigation field. For example in order to perform different tasks such as updating a web based calendar or updating a social networking profile a user typically has to navigate to the specific website and perform these tasks. This normally requires the user to open additional browser tabs or browser windows in order to navigate to different websites. A system is provided that allows a user to perform tasks other than search queries or URL requests from a navigation field of browser. Such a system allows a user to efficiently interact with a website without having to navigate to the website.

Such a system or application as described herein allows its users to expand the functionality of the navigation field of a browser. In an example use of such an application a user may begin to enter a first input in the navigation field of the browser. The first input can be a string of text or characters. In response the browser is configured to determine an input type of the first input. The browser can first determine for example whether the input type is related to a general URL request or search query.

In an example the user does not intend to generate a URL request or search query. Rather the user may want to launch a browser extension which can add the first input entered within the navigation field to a status section of their profile on a social networking website along with a link to the page they are viewing.

A browser extension is an application that extends a functionality of a browser by for example adding a user interface for a particular resource or website. Browser extensions are also known as browser plug ins or browser add ons. Additional features can be added to web browsers using browser extensions. Generally browser extensions are treated as client side software installed on the local browser. Example browser extensions may include extensions for resources that provide an online dictionary online photo sharing sites online email and online translator on a client computing device. Browser extensions may be downloaded from a web server or an application server and installed on a client computing device as part of the browser. While embodiments will be described with respect to browser extensions one of ordinary skill in the art will recognize that alternatives such as web based applications may be used in conjunction with the system. Such web based applications may be incorporated into the system through use of an application programming interface API .

When the first input type is determined not to be a URL request or search query a plurality of repositories are searched for one or more browser extensions based on the first input type. For example the browser may determine that the first input is a predefined keyword trigger. The predefined keyword trigger can be a series of characters that have been associated with a browser extension. When the series of characters are at the beginning of the first input the browser is configured to launch the associated browser extension. In the example above an application related to the social networking website may be associated with a keyword trigger. The application may provide the user the ability to update the status section of their social networking profile without having to navigate to the actual social networking website.

In response to identifying the first input as a keyword trigger the browser can search the plurality of repositories for applications associated with keyword triggers according to an embodiment. According to an embodiment the searching of the plurality of repositories is triggered by a user pressing one or more shortcut keys of an input device before or after entering the first input in the input field. For example a user may press one or more keys such as an alt key command key or option key along with any other key of an input device which will trigger a search of the plurality of repositories. The one or more short cut keys may be pre configured by a user or a developer of a browser extension according to an embodiment.

In another embodiment the plurality of repositories can be searched during the receipt of the first input. In this way the identification of the first input and the searching of a plurality of repositories can occur with minimal user instruction. A plurality of repositories may reside on the client computing device running the browser. Each of the repositories includes a set of browser extensions with common characteristics. For example one of the repositories may be a keyword trigger repository. The keyword trigger repository can include all of the browser extensions installed on the client computing device which are associated with a keyword trigger. A set of browser extension results is displayed based on a confidence score associated with each extension within a repository. The set of browser extension results includes names or labels associated with browser extensions retrieved from the plurality of searched repositories. The confidence score is a value which indicates a probability of a user s intent to use a browser extension included in the browser extension results. The browser extension results are a suggested list of browser extensions based on the first input.

In this example the browser extension associated with the social networking website can be assigned a confidence score in the range of 0.9 and 1.0 and can be displayed near or at the top of the suggested browser extension results. Such a confidence score indicates a 90 to 100 probability that the user intends to use the browser extension associated with the social networking website. Confidence score generation will be described in further detail below. Once the first input is completely entered the user may select one of the suggested browser extensions from the browser extensions results. For example the user may select the social networking website browser extension. In response an instance of the browser extension is launched and the string of text entered as the first input is sent to the browser extension. The browser extension then sends the first input to the social networking profile of the user in order to update the status portion. In this way a user is able to perform functions other than URL requests or search queries using the navigation field of a browser. Additionally a user is provided the ability to interact with websites without navigating to the website.

It is noted that the embodiments are not limited to this example application but are instead applicable to other applications as would be apparent to persons skilled in the art based on the teachings provided herein. Those skilled in the art with access to the teachings provided herein will recognize additional modifications applications and embodiments within the scope thereof and additional fields in which the embodiments would be of significant utility. For example an individual may launch other browser extensions or may have the first input entered into a navigation field of a browser sent to other kinds of websites. Additionally the input may be fed into an application programming interface which may process the input and perform many different kinds of actions such as updating a calendar creating tasks or creating notes.

It would also be apparent to one of skill in the relevant art that the embodiments as described herein can be implemented in many different embodiments of software hardware firmware and or the entities illustrated in the figures. Any actual software code with the specialized control of hardware to implement embodiments is not limiting of the detailed description. Thus the operational behavior of embodiments will be described with the understanding that modifications and variations of the embodiments are possible given the level of detail presented herein.

Client computing device can include one or more browser extensions. A browser extension is a program downloaded by a user or installed by a developer on client computing device . As discussed previously a browser extension is a program that expands the functionality of browser . In an embodiment each browser extension is associated with an external website or program. For example a user may install a social networking or task scheduling browser extension on client computing device . The social networking browser extension can be used to interact with a social networking website or program stored on one of web servers . . . N while the task scheduling browser extension can be used to interact with a task scheduling website or program also stored on one of web servers . . . N. When a user utilizes one of the browser extensions on client computing device the user can send information to the associated external website or program. For example a user may update a social networking profile on the social networking website or add a task to a calendar on the task scheduling website.

In general browser navigation expansion system operates as follows. A first input is received via navigation component . Navigation component can be an omnibox in an embodiment. An omnibox is a user interface element in a web browser. The omnibox receives input from a user and allows a user to navigate the World Wide Web or simply the Web . According to an embodiment navigation component is embedded into browser . In another embodiment navigation component is downloaded from one of web servers . . . N and installed as a plug in to browser . Once installed as a plug in on browser navigation component has access to the hardware and software resources available to browser on client computing device . In another embodiment navigation component is a browser extension that is downloaded and or installed on browser .

The first input received via navigation component may be generated in response to a user entering a string of characters. Browser input expander module is configured to determine an input type of the first input. According to an embodiment browser input expander module parses the string of characters associated with the first input and determines if the parsed data is related to a search query. In an example a search query is one in which a user intends to generate a Uniform Resource Locator URL request or perform a web search using the first input as one or more keywords. A URL request will fetch the contents associated with a webpage from web servers . . . N and display the web page within a display area of browser . A web search takes the first input and performs a search of the Web for URLs related to web pages that include information related to the first input. In an example a user enters a search query into navigation component and in response receives a list of URL entries each URL associated with a path to a webpage. In another example in response to a user entering or beginning to enter a URL entry navigation module presents a user with a drop down menu that includes a listing of URL entries that were previously entered into the navigation component or accessed by the user.

Browser input expander module determines whether the first input is related to a search query by analyzing the first input and comparing it to known search query characteristics. For example if the parsed first input includes a domain protocol such as http or a server name such as website.com this can be an indication that the first input type is a search query. In another example the parsed first input may be compared with previous entries that were entered in the navigation component . If the first input matches a particular string of characters that were previously generated by the user in order to perform a search or website retrieval this is an indication that the first input is related to a search query. In yet another example the first input may be compared with a list of URLs either cached at client computing device or saved in a Favorites section of browser . If a match is determined this is also an indication that the first input type is a search query. In all of the above examples if the first input type is determined to be a search query navigation component is configured to perform standard operations such as requesting contents of a URL or retrieving a list of search results for display.

When the parsed first input is determined not to be related to a search query browser input expander module is configured to identify a query type of the first input according to an embodiment. In an embodiment a query type of the first input is a keyword trigger. A keyword trigger is a string of characters that have been assigned to a particular browser extension. For example a developer of a browser extension utilizing system can assign a keyword trigger to the browser extension utilizing an application programming interface API . An application programming interface API is a specification intended to be used as an interface by software components to communicate with each other. An API may include specifications for routines data structures object classes and variables that can all be used to allow communication between navigation component and a browser extension. In an embodiment exchange of data between navigation component and a browser extension is enabled via a browser supported API. For example a developer would utilize a browser supported API to assign a keyword trigger to a browser extension. When a user enters the keyword trigger into navigation component this can be an indication that the user intends to use the browser extension. For example a developer may develop a social networking browser extension as described previously. The developer may assign the string of characters snw as a keyword trigger for the social networking browser extension. Thus when a user provides as first input snw followed by an additional string of characters this can be an indication that the user wants to use the social networking browser extension. Browser input expander module is configured to identify the query type as a keyword trigger and any text entered after the keyword trigger can be passed to the social networking application once the user completes entry of the first input.

In another embodiment a query type of the first input is a regular expression trigger. A regular expression trigger is a series of characters entered by the user indicating that the user does not intend to generate a URL request. For example the parsed first input can be analyzed and if the string of characters entered by the user does not include a domain protocol or sever name then the first input can be designated as a regular expression trigger. Additionally browser input expander module is configured to keep a query log of all entries made via navigation component that are not search queries. The first input may be compared with the log entries of query log to determine whether the first input matches any of the log entries. If the first input matches any entries of query log then the first input is designated as a regular expression trigger.

In another example the first input may be compared to a log of browser extensions stored on client computing device . For example a user may download and install a plurality of browser extensions on client computing device . As a browser extension is either installed or executed at client computing device browser can maintain a log of available browser extensions on client computing device not illustrated . The log of all available browser extensions can include a name category and a list of words related to each browser extension installed on client computing device . For example the social networking browser extension discussed above may have its category designated as social networking and or entertainment. Additionally the social networking application may be associated with words such as the acronym LOL . The acronym LOL is often used in communication in a social networking website. The words related to the browser extensions can be updated in the log based on user interaction with the application. For example browser input expander module can monitor the usage of each application via navigation component and determine which words are frequently used in conjunction with a particular browser extension. Frequently used words or phrases may be stored in the log of available browser extensions and associated with the browser extension.

When a user enters a regular expression trigger as a first input browser input expander module is configured to determine whether the string of characters is related to one of the browser extensions in the log of browser extensions according to an embodiment. For example if the user enters the string of characters LOL as part of the first input this can be an indication that the user intends to use the social networking browser extension discussed above.

According to an embodiment browser input expander module is configured to search a plurality of repositories for one or more browser extensions based on the input type. A repository is a collection of browser extensions that are grouped together based on similarities between the browser extensions. For example a repository of browser extensions can be grouped based on among other things the category of the browser extension frequency of use by a user or how the browser extension is utilized by a user. The search of the plurality of repositories is based on a model. According to an embodiment a model determines a confidence score associated with a probability that a user intends to use a browser extension from a repository when the user provides a first input. Based on the model a confidence score for each extension within the plurality of repositories is determined and browser extensions are retrieved for display within navigation component based on the confidence score. A standard machine learning or statistical technique may be used to generate a confidence score or the probability that a user intends to a use a browser extension from a repository. Generation of the model and confidence scores are discussed in greater detail below.

According to an embodiment browser input expander module is configured to generate a model based on a set of criteria. Criteria are generated for a model based on at least one of the following i information related to user activity of the browser extensions ii information related to the first input and iii information related to the plurality of repositories. The model assigns a confidence score for each extension within a repository according to an embodiment.

Query log can include one or more logical or physical memory devices that are configured to store data associated with prior non search query related inputs by a user within navigation component . For example query log can include data such as user activity or user information information related to the first input and information related to the repositories. Browser input expander module uses the information within query log as criteria to generate a model. Once generated browser input expander module configures the model to learn from the information within query log . In this way browser input expander module can provide the user with a set of browser extension results that have the highest probability of being used by the user. In an example the model may determine the probability of a user s intent to use a browser extension within a particular repository when the user provides a certain first input.

Browser input expander module is configured to monitor user activity of all browser extensions installed on client computing device in order to create criteria for the model according to an embodiment. For example browser input expander module can monitor among other things how often a browser extension is used specific times of day a browser extension is used or when the browser extension is accessed via navigation component . All of the information monitored by browser input expander module is stored in query log according to an embodiment.

Browser input expander module monitors the frequency of browser extension usage to determine which browser extensions are among the most popular to the user. For example browser input expander module may determine that the social networking application discussed above is among one of the user s favorite browser extensions if the user executes the browser extension every few hours or once a day. Thus browser input expander module can maintain a counter of when each browser extension is utilized by the user and use the counter to update information within query log .

The time of day week or month can also be used to determine when a user is most likely to use a particular browser extension according to an embodiment. In an example browser input expander module may identify that the user primarily executes certain browser extensions during the morning while other browser extensions are accessed primarily during the evening. For instance a user may have a calendar browser extension installed on client computing device . If the user regularly uses the calendar browser extension during the morning hours e.g. for managing and updating schedules browser input expander module identifies such usage and stores it in query log .

Browser input expander module is also configured to monitor when and how a browser extension is accessed via the navigation component . Thus when a user provides a first input to navigation component and subsequently executes a browser extension browser input expander module monitors and identifies characteristics of the input. For example browser input expander module can monitor the input to navigation component to determine which words or phrases are commonly used with a browser extension. These words or phrases are then associated with the browser extension in query log .

Browser input expander module is configured to monitor the first input entered into navigation component in order to generate criteria for a model according to an embodiment. As discussed previously a first input type can be identified as a keyword trigger or a regular expression trigger. According to an embodiment repositories can be generated based on the first input type. For example a keyword repository and a regular expression repository can be generated. The keyword repository can include all browser extensions that are associated with keyword triggers. A regular expression repository can include all browser extensions that are frequently executed with a regular expression trigger. Thus browser input expander module can monitor the usage of the navigation component to associate the browser extensions with keywords or regular expressions and group the browser extensions accordingly.

Based on the examples discussed above browser input expander module can generate repositories such as a frequently used repository a morning repository an evening repository or a commonly used terms repository. Browser extensions can be grouped based on these repositories. According to an embodiment a browser extension can be included in a plurality of repositories. For example if usage of a browser extension occurs every day during the morning hours and is associated with a user inputting similar phrases in navigation component then said browser extension can be included in the frequently used repository morning repository and the commonly used terms repository discussed above.

Additional types of browser repositories can include among other things an entertainment repository a task repository a sharing repository or security authenticating repositories. For example an entertainment repository can include browser extensions related to entertainment such as the social networking application discussed above. A task repository can include browser extensions used by a user to manage activities or schedules such as a calendar browser extension or a notes browser extension. A sharing repository can include browser extensions that are used to share information with other users. For example such browser extensions can enable functionality such as posting information to a third party website or sending an email or instant message to another user. A security authenticating repository can include browser extensions associated with websites that require a user name or password for access. The social networking application discussed above is an example of a browser extension that can be included in the security authenticating repository. In order to post information to a profile on social networking website a user has to be granted permission to the website by submitting a correct username password combination.

Query log can include a plurality of combinations of the data discussed above according to an embodiment. Each combination may include a triplet of data u f r where u refers to user information f refers to the first input provided by the user and r refers to the repository from which browser extension results were provided in response to first input f. For example query log may include triplets of data u f r where u refers to a user s desire to utilize a repository r when the user provided first input f. In such an example the user s intent to use a browser extension can be measured by determining whether the user selected and executed a browser extension from the repository.

The triplets of data are used as criteria by browser input expansion module in order to generate a model. As will be described in more detail below the output of the model may be used to determine whether to search a repository whether to include a browser extension from a repository in a set of browser extension results and or how the set of browser extension results are displayed within the navigation component .

During the generation of a model a standard machine learning or statistical technique may be used to determine a confidence score or the probability that user u intends to a use a browser extension from repository r when user u provides first input f 

In an embodiment browser input expander module performs a search on each of the repositories based on the first input entered by a user. In response browser input expander module retrieves browser extensions and generates a set of browser extension results for display within navigation component . As discussed above browser extension results are a suggested list of browser extensions that the user may intend on executing. According to an embodiment browser input expander module can determine how the browser extension results are displayed based on the model. For example information relating to the user the first input provided by the user and each of the repositories may be used as inputs to the model. The model may be applied to each repository and the confidence score output by the model can be used to determine whether to provide browser extension results associated with a specific repository. It can be determined for example that browser extension results from two repositories with the highest associated confidence score should be displayed according to an embodiment. In another embodiment it may be determined that browser extension results from some repositories should always be provided while browser extension results from other repositories should only be provided if the associated confidence score satisfies a predefined threshold. One of skill in the art will understand that other rules for providing browser extension results from a particular repository may be used. For example it may be determined that browser extension results from repositories with associated confidence scores above a certain threshold should be retrieved and if none of the scores are above the threshold then browser extension results from the repository with the highest associated confidence score are retrieved.

According to an embodiment navigation component is configured to receive a second input. The second input indicates a user s selection of a browser extension included in the set of browser extension results. For example in response to receiving a set of browser extension results a user may select one of the suggested browser extensions. In response to receipt of the second input browser input expander module is configured to execute an operation of the selected browser extension. For example if a user selects the social networking browser extension discussed above an executable of the browser extension is launched.

In an embodiment an authentication request is received from a server hosting an external website or program. For example when a browser extension is selected in order to pass contents of the first input or browser to an external website the user s information must be authenticated. Authentication provides a level of security in order to verify that the user has permission to update or send contents to the external website. Upon receipt of the authentication request browser input expander module sends user information to the website. For example browser input expander module can send user information such as but not limited to user name information password information or information related to the client computing device . According to an embodiment authenticating establishes a communication channel between the selected browser extension and the external website or program. For example a communication channel can be established between client computing device and one of web servers . . . N hosting the external application. The communication channel enables the exchange of information from the selected browser extension and the web server . . . N hosting the external website or program. According to an embodiment the communication channel is a bidirectional communication channel. A bidirectional communication channel such as a websocket may be a full duplex communication channel between client computing device and web servers . . . N that operates through a single socket on network . In an exemplary embodiment browser implements an HTML5 protocol and includes support for a bidirectional communication protocol such as the WebSocket protocol.

The first input or content displayed by the browser can be passed to the external website or program according to an embodiment. For example upon selecting a browser extension from the displayed browser extension results the first input entered into navigation component can be passed to the browser extension which will send the information to the associated external website or program over the established communication channel. In another embodiment the contents displayed by browser can be sent to the external website or program. For example a user may select a browser extension which enables the sharing of contents from a website or the URL associated with the website to another user. Thus any content currently displayed by the browser when a user utilizes system can be shared with another individual via navigation component .

Browser may be any kind of browser. Although illustrated separately browser may also include a browser expander module . Browser input expander module may extend the functionality of browser and can be configured to provide a suggested list of browser extensions within navigation component . For example browser input expander module may be a browser extension downloaded from a web server not shown and installed on client computing device as part of browser . Browser input expander module may be developed by an application developer for use on client computing device or any other computing device. A programming language such as JavaScript may be used to develop browser input expander module . Browser input expander module may then be stored locally on client computing device . Alternatively browser input expander module may be uploaded to a browser expansion manager server not shown . Browser expansion manager server may distribute browser input expander module to additional client computing devices due to a request from a user.

Browser input expander module or any combination of its components may be part of or may be implemented with a computing device. Examples of computing devices include but are not limited to a computer workstation distributed computing system computer cluster embedded system standalone electronic device networked device mobile device e.g. mobile phone smart phone navigation device tablet or mobile computing device rack server set top box or other type of computer system having at least one processor and memory. Such a computing device may include software firmware hardware or a combination thereof. Software may include one or more applications and an operating system. Hardware can include but is not limited to a processor memory and user interface display.

Network may be any network or combination of networks that can carry data communications. Such a network may include but is not limited to a local area network metropolitan area network and or wide area network such as the Internet Network can support protocols and technology including but not limited to World Wide Web or simply the Web protocols such as a Hypertext Transfer Protocol HTTP protocols and or services. Intermediate web servers gateways or other servers may be provided between components of the system shown in depending upon a particular application or environment.

Web servers . . . N are computing devices or applications executing on computing devices that host resource databases . . . N. Each resource database . . . N is associated with a domain name and hosted by one or more web servers . . . N. Web servers . . . N deliver content from resource databases . . . N to browser on client computing device . Content included in resource databases . . . N includes any data that that can be provided over network . Content within resource databases . . . N is identified by a resource address that is associated with each web server . . . N. Content in resource databases . . . N may include for example hypertext markup language HTML pages word processing documents portable document format PDF documents images video and feed sources. Content in resource databases . . . N can include content such as words phrases images and sounds that has embedded information such as meta information in hyperlinks and or embedded instructions such as JavaScript scripts .

Client computing device is a processor based electronic device that is manipulated by a user and is capable of requesting and receiving data from web servers . . . N over network . Examples of client computing device include personal computers mobile communication devices and tablet computers. Client computing device typically includes an application such as browser . A user may utilize browser to request data from web servers . . . N such as web page contents over network . For example a request for data from web servers . . . N may be sent by browser of client computing device in response to a URL request from a user. In response to the request web servers . . . N deliver data within resource databases . . . N to client computing device . When client computing device receives data from web servers . . . N client computing device uses browser to display the data to the user.

In an embodiment each of the constituent parts of browser notifications system may be implemented in hardware software firmware or any combination thereof. Likewise modules or instructions that constitute operative parts of embodiments may utilize any type of structured memory including a persistent memory. In examples each data storage infrastructure may be implemented as a relational database.

It should be noted that computer readable medium storage embodiments may include any physical medium which is capable of having instructions encoded thereon that may subsequently be used by one or more processors to implement methods described herein. Example physical media may include floppy discs optical discs e.g. CDs mini CDs DVDs HD DVD Blu ray hard drives punch cards tape drives flash memory and memory chips. However any other type of tangible storage medium that can serve in the role of providing instructions to one or more processors may be used to store the instructions in these embodiments.

Repository bank may be any temporary and or permanent storage location associated with browser such as but not limited to a relational database. Repository bank may include a plurality of repositories . . . N. Each repository . . . N can include one or more browser extensions which share common characteristics. As discussed previously a repository . . . N may be generated by browser input expander module . Browser input expander module may retrieve certain criteria related to the user activity of the browser extensions and input the criteria into a model. The model can group browser extensions based on shared features. In an example repository may be a frequently used repository while repository may be a keyword trigger repository. A frequently used repository can include all browser extensions that are used by a user above a certain threshold. For example if a user executes a browser extension more than 3 times in a day that particular browser extension may be included in repository along with other browser extensions that were utilized with at least the same frequency.

A keyword trigger repository may include all browser extensions installed on client computing device which are associated with a keyword. Thus any browser extensions that may be launched by a user entering a particular set of characters may be included in repository . In this way when a user enters a first input within a navigation field of browser browser extensions may be retrieved from any of the plurality of repositories . . . N of repository bank based on the first input. The browser extensions are displayed to the user as a list of suggested browser extensions. and illustrate how a user may interact with a browser in order to retrieve browser extensions from repository bank according to embodiments.

Navigation toggle can be configured to change the functionality of navigation field according to an embodiment. Any browser extensions installed on the computing device running browser can be linked to navigation toggle . For example each browser extension can have an icon associated with it. When a user selects navigation toggle a drop down menu of browser extensions can be presented displaying each browser extension icon. A user may select one of the browser extension icons. In response the associated browser extension is launched as a background process and browser is configured to pass any information within navigation field to the selected browser extension.

In response to determining that first input is a regular expression trigger a set of browser extension results are presented to the user. The set of browser extension results includes a list of browser extensions that a user may intend to use. The set of browser extension results are retrieved from repository bank based on a model according to an embodiment. A model determines a confidence score associated with a probability that a user desires to a use a browser extension from a repository of the plurality of repositories . . . N. Based on the model a confidence score for each extension within the plurality of repositories . . . N is determined and a set of browser extension results are displayed within navigation field . In this example one of the repositories . . . N can be a regular expression repository which includes all browser extensions associated with a regular expression. Based on the model the regular expression repository can be assigned the highest confidence score and browser extensions from the regular expression repository can be presented to the user.

In an example a user may begin to enter a regular expression trigger as a first input which results in browser extensions within the regular expression repository being assigned a confidence score in the range of 0.9 to 1.0. The assigned confidence score indicates that there is a 90 to 100 chance that a user intends to use one of the browser extensions within the regular expression repository. The set of browser extension results is populated based on many factors such as the text included in the first input and prior user usage of browser extensions installed on the client computing device . These factors are used as criteria for the model and produce a subsequent confidence score for each of the repositories . . . N. In this example the first input is text that the user would like to send to a task scheduling browser extension. The task scheduling browser extension is retrieved from one of the repositories . . . N with the highest confidence score e.g. regular expression repository . The task scheduling browser extension is then presented to the user with the label Add to my tasks . A user may select the displayed label and in response first input is sent to the task scheduling browser extension. The task scheduling browser extension then passes the first input to an external website or application. In this way a user may update items such as a web based calendar via navigation field without having to navigate to the website of the web based calendar.

In stage a first input from a navigation field of a browser is received. For example a first input is received from navigation component of browser on client computing device . The first input received may be received in response to a user entering a string of characters in the navigation component .

In stage an input type of the first input is determined. For example an input type of the first input is determined by browser input expander module of browser . While a user is entering a first input into the navigation field the first input is parsed and a determination is made whether the first input is related to a search query. A search query is an entry by a user with the purpose of generating a URL request or performing a web search of the first input. Browser input expander module determines whether the first input is related to a search query by analyzing the first input and comparing it to known search query characteristics. For example if the parsed first input includes a domain protocol or a server name this is an indication that the first input type is a search query. When the parsed first input is determined not to be related to a search query browser input expander module is configured to identify a query type of the first input according to an embodiment. In an embodiment a query type of the first input is one of a keyword trigger or a regular expression trigger. A keyword trigger is a string of characters that have been assigned to a particular browser extension. A regular expression trigger is a string of characters or a series of words that have been associated with a particular browser extension based on prior user activity. When a user enters a first input not related to a search query the first input can be compared against preconfigured keyword triggers or a log of previous regular expression entries in order to find a match according to an embodiment.

In stage a plurality of repositories are searched for one or more browser extensions based on the input type. For example a plurality of repositories can be searched by browser input expander module of browser . As discussed previously a repository is a collection of browser extensions that are grouped together based on similarities between the browser extensions. For example repositories of browser extensions can be grouped based on among other things the category of the browser extension frequency of use by a user or how a user utilizes the browser extensions. Once the input type of the first input is determined in stage the input type along with other information may be used to search a plurality of repositories for one or more browser extensions. Other information that may be used in the search includes among other things i information related to user activity of the browser extensions ii information related to the first input and iii information related to the plurality of repositories. All of this information along with the input type is used as criteria for a model. Once the criteria are passed to the model a confidence score is generated for each of the repositories.

The confidence score indicates the probability that a user desires to use a browser extension included in the repository. For example the repository with the highest confidence score is the repository that includes browser extensions that the user has a high probability of using based on the first input entered. In an example a probabilistic algorithm such as P intent u f show r can be used to generate different confidence scores for each browser extension within the plurality of repositories where show r indicates that browser extensions from repository r are displayed in response to user activity u and first input 1 . The algorithm can assign confidence score values in the range of 0.0 to 1.0 where 0.0 indicates a 0 probability that a user intends to user a browser extension and 1.0 indicates a 100 probability that a user intends to use a browser extension. The assignment of confidence scores for browser extensions can be based on but not limited to user activity of the browser extensions and characteristics of the first input. Thus the manner in which a user interacts with a browser extension along with the input type of the first input are used in determining confidence scores. For example these factors can be used within a decision tree which will determine the confidence score associated with a browser extension. Since generation of a confidence score is associated with user activity the confidence score associated with a browser extension can change as use of the browser extension or other dependencies change. For example a user may utilize one or more browser extensions primarily during the morning hours. Thus on any given day the one or more browser extensions can be assigned a higher confidence score e.g. 0.9 to 1.0 in the morning and assigned a lower confidence at all other times of day e.g. 0.1 to 0.5 .

In stage a set of browser extension results is displayed with the navigation field based on a confidence score associated with each repository of the plurality of repositories. For example the set of browser extension results can be displayed by browser input expander module of browser . Once the plurality of repositories are searched in stage the browser extensions from the repositories with the highest confidence scores are retrieved. The browser extensions are presented to the user as a list of browser extension results with each browser extension having a label indicating a description of the browser extension. In this way a user is provided with a list of suggested browser extensions to use based on the first input that was entered. A user may subsequently choose to select one of the browser extensions from the browser extension results which will launch the browser extension. The first input may then be passed to the browser extension to perform any of a number of actions intended by the user such as updating a web based calendar. Alternatively upon selection of a browser extension a user may share a currently viewed URL or its contents with another user.

Various aspects of the present invention can be implemented by software firmware hardware or a combination thereof. illustrates an example computer system in which the embodiments or portions thereof can be implemented as computer readable code. For example browser notification system carrying out method of can be implemented in system . Various embodiments of the invention are described in terms of this example computer system .

Computer system includes one or more processors such as processor . Processor is connected to a communication infrastructure for example a bus or network .

Computer system also includes a main memory preferably random access memory RAM and may also include a secondary memory . Secondary memory may include for example a hard disk drive and or a removable storage drive. Removable storage drive may include a floppy disk drive a magnetic tape drive an optical disk drive a flash memory or the like. The removable storage drive reads from and or writes to removable storage unit in a well known manner. Removable storage unit may include a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art s removable storage unit includes a computer readable storage medium having stored therein computer software and or data.

In alternative implementations secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface . Examples of such means may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system may also include a communications interface . Communications interface allows software and data to be transferred between computer system and external devices. Communications interface may include a modem a network interface such as an Ethernet card a communications port a PCMCIA slot and card or the like. Software and data transferred via communications interface are in the form of non storage signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via a communications path . Communications path carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link an RF link or other communications channels.

In this document the term computer readable storage medium is used to generally refer to media such as removable storage unit removable storage unit and a hard disk installed in hard disk drive . Computer readable storage medium can also refer to one or more memories such as main memory and secondary memory which can be memory semiconductors e.g. DRAMs etc. . These computer program products are means for providing software to computer system .

Computer programs also called computer control logic are stored in main memory and or secondary memory . Computer programs may also be received via communications interface . Such computer programs when executed enable computer system to implement the embodiments as discussed herein. In particular the computer programs when executed enable processor to implement the processes of embodiments of the present invention such as the steps in the methods discussed above. Accordingly such computer programs represent controllers of the computer system . Where embodiments are implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive interface or hard drive .

Embodiments may be directed to computer products comprising software stored on any computer readable storage medium. Such software when executed in one or more data processing devices causes a data processing device s to operate as described herein.

The Summary and Abstract sections may set forth one or more but not all example embodiments of the present invention as contemplated by the inventor s and thus are not intended to limit the present invention and the appended claims in any way.

Embodiments have been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.

The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can by applying knowledge within the skill of the art readily modify and or adapt for various applications such specific embodiments without undue experimentation without departing from the general concept of the present invention. Therefore such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.

The breadth and scope of the present invention should not be limited by any of the above described example embodiments but should be defined only in accordance with the following claims and their equivalents.

