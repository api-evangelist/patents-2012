---

title: Sharing and synchronizing electronically stored files
abstract: Aspects of the present disclosure are directed to architectures, methods and systems and structures that facilitate the sharing and synchronization of electronically stored files among and between cloud entities and a number of computers, systems, devices and/or users. One particular exemplary architectural aspect includes the concurrent determination of file system changes within a cloud file system and a client file system, the serial ordering of necessary file system operations in response to the determined file system changes, and the concurrent execution of file system operations such that the cloud file system and the client computer file system are synchronized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529818&OS=09529818&RS=09529818
owner: GOOGLE INC.
number: 09529818
owner_city: Mountain View
owner_country: US
publication_date: 20120423
---
The following U.S. patent applications are filed on even date herewith are assigned to the same assignee and contain subject matter related in certain respects to the subject matter of the present application. These patent applications are incorporated by reference herein.

This disclosure relates generally to the sharing and synchronization of electronically stored files among and between Cloud entities server computers desktop computers personal computers portable computers mobile computers web enabled computers and other computers including tablet computers personal digital assistants PDAs and smartphones.

The networked and mobile computing environment that defines much of contemporary society has provided innumerable convenience and productivity benefits. Notwithstanding the benefits it has become increasingly difficult to manage electronically stored files that may simultaneously reside on numerous computers systems and devices. For example keeping track of and accessing a most current version or revision of an electronically stored file which may be stored on or across one or more office computers laptop computers home computers mobile computers and removable disks is oftentimes difficult for even the most sophisticated user. Compounding this difficulty is the fact that such an electronically stored file may be globally accessed and used or changed by a number of different users oftentimes simultaneously.

Briefly aspects of the present disclosure are directed to architectures methods systems and structures that facilitate the sharing and synchronization of electronically stored files among and between Cloud entities and a number of computers systems devices and or users.

According to an aspect of the present disclosure electronically stored files are initially generated within Cloud entities and are subsequently replicated and synchronized with one or more client computing systems. Similarly electronically stored files that are generated within client computing systems are subsequently replicated and synchronized with Cloud entities and other client computing systems.

According to an aspect of the present disclosure a client determination is made during a synchronization operation whether or not to download copy a file electronically stored in the Cloud to the client. If the file is of a particular type of file then it is not downloaded copied to the client. Instead a file is created locally at the client comprising a link to the file electronically stored in the Cloud. Advantageously the local electronically stored file may be made a type indicative of its Cloud origination. Of further advantage the local file may be used to invoke a browser to access the file electronically stored in the cloud which may further utilize cloud computing services to access the file.

Advantageously and according to another aspect of the present disclosure such sharing and synchronization is user administrable thereby permitting the formation of sharing and synchronization groups and or systems.

According to another aspect of the present disclosure client computing systems include a Local WATCHER and a Cloud WATCHER which concurrently monitor and detect changes to watched Local File Systems and Cloud File Systems respectively. Detected changes are used to generate work items that are ordered and selectively sent to a number of WORKERS for concurrent processing.

According to one aspect of the present disclosure electronically stored files placed into a shared folder are automatically shared and synchronized with any authorized users of that shared folder.

According to another aspect of the present disclosure electronically stored files placed into a shared folder are automatically stored within a Cloud Storage System.

According to another aspect of the present disclosure electronically stored files placed into a shared folder automatically follow a user online and offline across multiple systems devices and the Net. Any changes made to an electronically stored files placed into the shared folder are automatically updated and synchronized to the Cloud and other computers and devices.

This SUMMARY is provided to briefly identify some aspects of the present disclosure that are further described below in the DESCRIPTION. This SUMMARY is not intended to identify key or essential features of the present disclosure nor is it intended to limit the scope of any claims.

The term aspects is to be read as at least one aspect . The aspects described above and other aspects of the present disclosure described herein are illustrated by way of example s and not limited in the accompanying drawing.

The illustrative embodiments are described more fully by the Figures and detailed description. The inventions may however be embodied in various forms and are not limited to specific embodiments described in the Figures and detailed description

The following merely illustrates the principles of the disclosure. It will thus be appreciated that those skilled in the art will be able to devise various arrangements which although not explicitly described or shown herein embody the principles of the disclosure and are included within its spirit and scope.

Furthermore all examples and conditional language recited herein are principally intended expressly to be only for pedagogical purposes to aid the reader in understanding the principles of the disclosure and the concepts contributed by the inventor s to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions.

Moreover all statements herein reciting principles aspects and embodiments of the disclosure as well as specific examples thereof are intended to encompass both structural and functional equivalents thereof. Additionally it is intended that such equivalents include both currently known equivalents as well as equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure.

Thus for example it will be appreciated by those skilled in the art that any block diagrams herein represent conceptual views of illustrative circuitry embodying the principles of the disclosure. Similarly it will be appreciated that any flow charts flow diagrams state transition diagrams pseudo code and the like represent various processes which may be substantially represented in computer readable medium and so executed by a computer or processor whether or not such computer or processor is explicitly shown.

The functions of the various elements shown in the Figures including any functional blocks labeled as processors may be provided through the use of dedicated hardware as well as hardware capable of executing software in association with appropriate software. When provided by a processor the functions may be provided by a single dedicated processor by a single shared processor or by a plurality of individual processors some of which may be shared. Moreover explicit use of the term processor or controller should not be construed to refer exclusively to hardware capable of executing software and may implicitly include without limitation digital signal processor DSP hardware network processor application specific integrated circuit ASIC field programmable gate array FPGA read only memory ROM for storing software random access memory RAM and non volatile storage. Other hardware conventional and or custom may also be included.

Software modules or simply modules which are implied to be software may be represented herein as any combination of flowchart elements or other elements indicating performance of process steps and or textual description. Such modules may be executed by hardware that is expressly or implicitly shown.

We now provide some non limiting illustrative examples that illustrate several operational aspects of various arrangements and alternative embodiments of the present disclosure.

Generally and as used herein an electronically stored file is a type of abstraction. It provides a convenient way of bundling a set of data into identifiable units that in turn can be managed stored retrieved and operated upon by computer systems. With initial reference to there is shown a schematic diagram depicting an exemplary arrangement for sharing and synchronizing electronically stored files according to an aspect of the present disclosure.

Depicted in are a personal computer and a Cloud with which the personal computer interacts via one or more known networking technologies .

As will be readily appreciated by those skilled in the art a Cloud is a model of networked resources such as storage computing and applications. For example Cloud computing generally refers to the delivery of computing as a service whereby shared resources applications software data and information are provided to computers and other devices as a service over a network such as the Internet. Similarly Cloud storage generally refers to electronic storage resources for example electronic FileSystems provided by the Cloud via a network.

Advantageously Cloud computing and or Cloud storage may provide individual users only those resources needed for a particular task thereby eliminating payment for idle or unused resources. Of further advantage users may be provided access to any latest software and infrastructure offering s thereby fostering compatibility and productivity.

Finally where the Internet is used for access to the Cloud Cloud computing and or Cloud storage generally provides users with access to Cloud resources from anywhere that Internet access mechanisms are available.

Networking technologies depicted in may advantageously provide Internet access to Cloud either directly or via an internet service provider. Representative networking technologies for Cloud access include but are not limited to dial up leased line ISDN optical broadband broadband over power lines fiber to the home DSL ADSL SDSL WiFi WiMax Cable Satellite Mobile Phone and T carrier among others. Known internetworking protocols i.e. TCP IP may be used in conjunction with such technologies along with higher level protocols i.e. HTTP to effect desirable communications with Cloud or other network resources.

Depicted further in are a number of electronic folders that are resident in a storage system of personal computer . As will be readily appreciated by those skilled in the art electronic folders such as those depicted in are a type of virtual container in which groups of electronically stored files may be kept and organized.

As may be further appreciated a contemporary computer operating system such as that which may execute on personal computer i.e. Windows OS X LINUX etc. will generally include support for electronic file systems that may contain many thousands of folders. Electronically stored files may be conveniently organized by storing related files in a common folder. A folder contained within another folder is called a subfolder.

As may be readily understood by those skilled in the art the name folder presents an analogy to a file folder used in offices and is used in almost all contemporary operating systems desktop environments.

Folders too are a type of abstraction which provide a convenient way of bundling a set of electronically stored files into identifiable units that in turn can be managed stored retrieved and operated upon by computer systems. Folders are often depicted by computing systems as icons that visually resemble physical file folders.

With these principles in place we may now describe certain operational aspects of sharing and synchronization of electronically stored files according to an aspect of the present disclosure. More particularly and as depicted in personal computer executes client synchronization and sharing program or set of services which for our purposes herein we generally call SyncCLIENT .

Generally speaking a client program executes on a particular computer and accesses one or more services made available by a complementary server program. The server program is oftentimes but not always on another computer system in which case the client program accesses the services by way of a network.

In the context of the present disclosure SyncCLIENT as depicted in executes on personal computer and interacts with complementary server services provided by Cloud via networking technologies . According to an aspect of the present disclosure one or more folders resident on personal computer are automatically replicated and synchronized with Cloud . As depicted in folder is replicated and synchronized with Cloud storage services which electronically store folder in a Cloud FileSystem.

As such any additions deletions changes made to folder on personal computer executing SyncCLIENT are reflected in folder in Cloud storage . Advantageously such operations result in an automatic backup of any files or folders within folder on personal computer to the Cloud storage . Similarly any additions deletions changes made to folder or its contents in Cloud will be reflected in folder or its contents in personal computer .

By way of further example and as noted previously exemplary Cloud may advantageously provide computing services in addition to Cloud storage services . For example any of a number of applications i.e. word processing spreadsheet presentation graphics calendaring personal management etc may be provided by Cloud and accessed via a World Wide Web interface for example by computing device or the personal computer i.e. using for example a Web Browser. Advantageously computing device may be a scaled down or thin client device or tablet device or Smartphone etc. to access to Cloud computing resources. As is known such thin clients generally depend on other computers i.e. Cloud computing to fulfill their computational role.

When provided within the exemplary arrangement depicted in computing device provides for example the ability to utilize Cloud computing resources to edit for example any editable documents which are stored within cloud storage and folder . Such editing may advantageously be made from any geographic location that computing device may access Cloud and its resources via networking technologies . Consequently a user may employ the computing device to create or edit or otherwise utilize Cloud computing resources to modify create folders or files contained within folder . According to an aspect of the present disclosure changes made to the folder or changes made to any files or folders contained therein are automatically synchronized with folder on personal computer .

Those skilled in the art will readily appreciate that contemporary computer systems such as the personal computer or other computing device depicted in may employ operating systems such as WINDOWS OS X LINUX or similar systems or derivatives thereof that provide one or more user interfaces that allow a user to conveniently perform file system operations. More particularly such user interfaces may allow a user to operate on files using familiar drag and drop clipboard and command line operations.

When file system operations are based on such drag and drop or other familiar metaphors users can conveniently select and copy move delete etc files directories folders etc to another place in the file system. Advantageously such familiar user interfaces may be used in conjunction with aspects of the present disclosure to for example move a file into folder on personal computer and then have it synchronized with Cloud folder 

At this point those skilled in the art will readily appreciate that the present disclosure is not limited to file operations via user interfaces. Operating system components services user applications etc. may also perform file operations. Accordingly changes made to folder or its contents by any of these mechanisms i.e. applications may precipitate a synchronization to Cloud folder as well.

As described in the context of this example depicted in synchronization and sharing according to an aspect of the present disclosure permits the automatic bi directional generation backup synchronization and sharing of files and folders between a personal computers and a Cloud .

Turning now to there is shown another exemplary arrangement depicting electronic file sharing and synchronization according to an aspect of the present disclosure. Depicted in are a number of computing systems namely computers and which are labeled in as home laptop and work respectively. Each of the computers and employ known network access technologies and such as those previously described to access Cloud and in particular Cloud storage services FileSystem.

Depicted in each of the computers and executes an instance of SyncCLIENT and . According to an aspect of the present disclosure one or more folders resident on home computer are automatically replicated and synchronized with Cloud storage services FileSystem through the effect of the executing SyncCLIENT . In this example depicted in folder which is resident on home computer is replicated and synchronized with Cloud storage services FileSystem which electronically stores folder and its electronic contents.

As previously noted with respect to this example depicted in laptop computer and work computer are depicted as executing instances of SyncCLIENT and respectively. Consequently and according to yet another aspect of the present disclosure each of the executing instances of SyncCLIENT and may replicate and synchronize folder locally on computers and as folders and respectively. As a result folder which is resident on home computer is replicated and synchronized with folder electronically stored by Cloud storage services FileSystem as well as folders and which are resident on laptop computer and work computer respectively.

Accordingly sharing and synchronization of electronically stored files according to yet another aspect of the present disclosure permits a user to make create modify electronically stored files on one computer i.e. files in folder on work computer and have those created modified electronically stored files automatically replicated synchronized on other computers i.e. home computer and laptop computer . As such electronically stored files effectively follow a user from one computer to another without any additional user effort.

Notably and as depicted in this each of the computers depicted therein include a number of folders that are not replicated synchronized shared with the Cloud or other computers. More particularly home computer is depicted as including folders and which are not shared and or synchronized. Similarly laptop computer is depicted as including folders and which are not shared and or synchronized. Finally work computer is depicted as including folder which is not shared and or synchronized.

Advantageously and according to an aspect of the present disclosure the particular folders that are shared synchronized through the operation of SyncCLIENT with the Cloud and or other computing devices and or users is user administrable.

As previously noted Cloud may provide Cloud computing resources in addition to any Cloud storage resources . Consequently a user may also create modify electronically stored files through the effect of cloud computing resources accessed by for example a web browser executing on computing device a tablet or other portable computing device i.e. Smartphone . With such operations a user may advantageously create modify electronically stored files within folder maintained within Cloud storage services FileSystem and those created modified electronically stored files are replicated synchronized to folders resident on home computer laptop computer and work computer respectively. In this manner electronically stored files may be created in the Cloud and replicated synchronized out to client computing devices i.e. home computer laptop computer work computer or other computing device which may advantageously employ browser applications and technologies.

We note that we have used the term create to describe the generation of electronically stored files through the effect of cloud computing services. Those skilled in the art will appreciate that our particular vocabulary as used herein is not intended to be limiting. For example an electronically stored file may also be generated or originated in the Cloud through the effect of Cloud computing services. Similarly an electronically stored file may be converted or recognized by Cloud computing services as being operable upon by those Cloud computing services. As such these electronically stored files may be viewed as originated or generated or created as well for our purposes herein as we shall show and describe in somewhat greater detail.

Additionally while we have so far described sharing and synchronization of electronically stored files among a number of computers used by for example a single person the disclosure is not so limited. Advantageously and according to another aspect of the present disclosure synchronization and sharing of electronically stored files is performed among and between a number of computers and users.

With reference now to there is shown another exemplary arrangement depicting electronic file sharing and synchronization according to an aspect of the present disclosure. Depicted in that are a number of computing systems namely personal computers and that are used by different individual users and labeled in as User User and User respectively. Each of the computers depicted and employ network access technologies and such as those previously described to access Cloud and in particular Cloud storage services FileSystem.

According to an aspect of the present disclosure one or more folders resident on any of the computers for example computer are automatically replicated and synchronized with Cloud storage services FileSystem through the effect of the executing SyncCLIENT software . In this example depicted in folder which is resident on User computer is replicated and synchronized with Cloud storage services FileSystem which electronically stores folder 

As may be further observed in User computer and User computer are each depicted as executing instances of SyncCLIENT software and respectively. Consequently and according to yet another aspect of the present disclosure each of the executing instances of SyncCLIENT software and may replicate and synchronize folder locally on User and User computers and as folders and respectively. As a result folder which is resident on User computer is replicated and synchronized with folder stored in Cloud storage services FileSystem as well as folders and which are resident on User computer and User computer respectively.

Accordingly sharing and synchronization of electronically stored files according to yet another aspect of the present disclosure permits multiple users to make create modify electronically stored files on one computer i.e. User computer and have those created modified electronically stored files automatically replicated synchronized on other user s computers i.e. User computer and User computer .

Still further these or additional authorized users may access any Cloud computing services via web browser for example to create modify any electronically stored files contained within folder stored in Cloud storage services FileSystem. Consequently any changes made to electronically stored files within folder are automatically replicated and or synchronized with folders on User computer systems and .

To this point we have shown certain aspects of sharing and synchronization of electronically stored files according to aspects of the present disclosure involving groups of users. Advantageously and according to another aspect of the present disclosure users may belong to multiple groups that share and synchronize electronically stored files.

With continued reference to it is noted that User User and User with added involvement of User were depicted as sharing and synchronizing electronically stored files associated with folder namely folder s and which reside in Cloud computers and respectively. In addition a sharing and synchronization group including User and User is depicted in as well.

More particularly while User and User are depicted as sharing and synchronizing folder which is shown as being resident on computer associated with User . That folder is shared and synchronized with Cloud as folder and computer as folder associated with User . Accordingly User and User are depicted as being part of two different sharing and synchronization groups. As previously noted the inclusion of additional users and or computers to sharing and synchronization groups such as those depicted is advantageously user administrable.

By way of an operational example depict a drag and drop operation and subsequent synchronization of electronically stored files according to an aspect of the present disclosure. As those skilled in the art will readily appreciate a drag and drop operation is an action whereby a virtual object such as an electronically stored file is grabbed by graphical user interface mechanisms i.e. mouse or touch sensitive screen and dragged to a different location on onto into another virtual object such as a folder . As may be further appreciated such an operation may be conveniently used to invoke many kinds of actions or to create various types of associations between two abstract objects.

In the context of this example a basic drag and drop sequence is accomplished by moving a pointer to the electronically stored file grabbing the file by pressing a mouse button or other selection mechanism dragging the file to the SyncDRIVE folder and dropping the file by releasing the button or other selection mechanism.

After performing such a drag and drop operation an examination of the contents of the SyncDRIVE folder as depicted in shows that copy of electronically stored file being synchronized with Cloud as indicated by changed icon which in this example is indicative of the electronically stored file undergoing synchronization. Upon completion of the synchronization operation and as depicted in the icon associated with the electronically stored file is updated to further reflect that the electronically stored file is synchronized.

As may be further appreciated the depiction of a synchronization status such as that shown may be performed by a variety of iconic or other mechanisms available in contemporary graphical user interfaces or computing systems. Examples include animated and or audible mechanisms. Still further while the example shown in depict the synchronization status associated with an exemplary SyncCLIENT and Cloud those skilled in the art will readily appreciate that this disclosure is not so limited and further enhancements may depict initial intermediate and subsequent downstream synchronizations as well for example with additional SyncCLIENT s that are part of a group such as those previously described.

With these particular functional aspects of the present disclosure understood we now reference which depicts a simplified functional block diagram of an exemplary SyncCLIENT according to an aspect of the present disclosure.

As depicted therein SyncCLIENT includes at least two functional elements namely a Cloud WATCHER and a Local WATCHER which result from the execution of SyncCLIENT software on a computing device. Briefly the Local WATCHER monitors and detects any changes to a watched local FileSystem while the Cloud WATCHER monitors and detects any relevant changes within Cloud FileSystem resident in Cloud . When any changes are detected in either watched Local FileSystem or Cloud FileSystem synchronization between the two systems results. Advantageously and according to an aspect of the present disclosure in a preferred embodiment the Cloud WATCHER and the Local WATCHER may operate concurrently or in parallel depending upon the hardware environment in which they operate.

At this point it is useful to discuss a particular exemplary synchronization according to an aspect of the present disclosure namely the synchronization that takes place between Cloud and SyncCLIENT when a document is originated in the Cloud. More particularly a document is originated in the cloud through the use of Cloud Computing resources electronically stored therein through the use of Cloud Storage Services and finally synchronized with one or more SyncCLIENT s .

With reference to there is shown a schematic diagram depicting the exemplary origination creation of a document within the Cloud by a user. As depicted therein the document is originated created via a mobile device. As may be readily appreciated and as previously noted any of a variety of known mobile devices may be suitable for interacting with Cloud Computing Services to originate a document which may be subsequently stored in the Cloud via Cloud Storage Services. Familiar devices include mobile telephones tablets and other portable computing devices. Notably this disclosure is not limited to mobile devices and such origination creation of a document within the Cloud may employ desktop or other computing devices as well. In particular any device that supports browser functionality may suffice for interacting with the exemplary Cloud Computing Services.

Additionally while we have use the term document to describe the particular electronic entity that is originated and stored within the Cloud the present disclosure is not so limited. More particularly word processing documents spreadsheet documents and graphics documents among others may advantageously be originated in the Cloud via Cloud Computing Services according to this disclosure.

Accordingly once a document is originated in the Cloud via Cloud Computing Services it is electronically stored therein via Cloud Storage Services. In an exemplary embodiment a document electronically stored via Cloud Storage Services will have associated with it a resourceID which uniquely identifies the electronically stored file in the Cloud Storage.

Once the document is electronically stored in the Cloud it is subsequently synchronized replicated with the SyncCLIENT. Notably in a preferred embodiment the electronically stored file which originated via Cloud Computing Services is not physically electronically replicated copied to the SyncCLIENT s . Instead and according to another aspect of the present disclosure electronically stored document files which are originated in the Cloud via Cloud Computing Services and are subsequently stored therein are subsequently synchronized with one or more SyncCLIENT s as LINK s to the electronically stored document file in the Cloud.

In this manner the electronically stored document that originated in the Cloud is advantageously not physically moved to the SyncCLIENT s . A LINK to the document file is propagated to the SyncCLIENT s where it is stored in the SyncCLIENT s local file system as an electronically stored file that comprises a LINK to the file in the Cloud. Of further advantage the electronically stored file that comprises the LINK to the file in the Cloud may locally exhibit a type that is indicative of its Cloud storage. More particularly such a locally stored file may be of a type .gdoc or any other pre determined type designation so indicative.

As such an electronically stored file is created in the SyncCLIENT file system in the watched file system that may advantageously appear to a user as a regular document or text or other file as appropriate. Instead of containing the electronic contents of the electronically stored file as stored in the Cloud the local electronic file contains a LINK to the Cloud file.

In a preferred embodiment and as exemplary depicted in such a LINK may identify the resource document a means for locating the resource and any particular access mechanism s . As shown in the example of the LINK may include components indicative of a Uniform Resource Locator URL protocol s i.e. HTTPS Services DOCS resourceID and TYPE. As those skilled in the art will appreciate additional components may be included in the LINK as necessary. When such a LINK is provided as shown an invocation of a web browser may advantageously provide access to the file electronically stored in the Cloud to a user of a SyncCLIENT whether mobile or stationary and advantageously not consume bandwidth unnecessarily.

While we have described the operations depicted in and as pertaining to those electronically stored files that originate in the Cloud we note once again that the teachings of the present disclosure are not so limited. More particularly the present disclosure may likewise pertain to those electronically stored files that originate on a SyncCLIENT and are subsequently synchronized replicated to the Cloud as previously described.

More specifically a user may originate an electronically stored file on a SyncCLIENT computer and subsequently have that electronically stored file synchronized replicated to the Cloud. Once it is electronically stored in the Cloud the electronically stored file may be converted and or modified if necessary to a format that may be conveniently operated on by one or more of the Cloud Computing Resource s and or Cloud applications. Thereafter that converted electronically stored file may be synchronized with one or more SyncCLIENT s as a LINK to the electronically stored file in the Cloud. Of course those skilled in the art will appreciate that with certain electronic file formats i.e. text files etc conversion and or modification is not necessary. Accordingly when files exhibiting such formats are electronically stored in the Cloud they may be advantageously synchronized with SyncCLIENTs via the LINK mechanism s described previously and subsequently accessed from the SyncCLIENTs as if they originated in the Cloud.

Notably a document or other object need not be generated via cloud computing services according to an aspect of the present disclosure. More particularly and with reference now to there is shown a schematic sequence of events whereby a document is originated via a third party application stored in the Cloud via Cloud Services and subsequently synchronized replicated with a SyncCLIENT as a LINK to the object in the CLOUD. Accordingly the SyncCLIENT recognizes that the document object in the CLOUD need not be copied to the SyncCLIENT and instead a LINK is generated to that object and stored locally as a file in the local file system of the SyncCLIENT. As before the document object may be accessed from the SyncCLIENT or other computing devices to which the document has been synchronized via a web browser for example. Still further additional alternative cloud sites may be referenced in the LINK such that the document or other resources may be accessed via that referenced cloud site as well.

At this point it is noteworthy that folders and files in the Cloud and folders and files in a local file system may exhibit somewhat different characteristics. With reference now to there is shown an exemplary Cloud file system and an exemplary SyncCLIENT file system including a number of folders and files which will be used to describe some of these characteristics.

In particular the exemplary Cloud file system depicted in exhibits a down up structure rather than a top down structure of the client file system that those skilled in the art will readily recognize. More specifically this down up structure exhibited by the Cloud file system results in multiple folders belonging to a single file.

As depicted in it may be observed that a single file File A as belonging to or contained within folder BAZ that in turn belongs to both folders FOO and BAR. Accordingly files electronically stored in the Cloud may have multiple parent folders which in turn may have multiple parent folders. In this regard folders are analogous to labels that are applied to files.

Furthermore as used in the Cloud names of folders and or files are generally not unique. Accordingly names are more accurately viewed as title attributes to files and folders. Consequently and as noted elsewhere in this disclosure files and folders in the Cloud have unique identifiers resource IDs resourceID which uniquely identify the file or folder to which it is associated.

As may be appreciated a local name of a file and or folder may be different from its name in the Cloud since there may be conflicts with other files folders having the same name in the local file system. Such conflicts may occur both among children and among parents. Accordingly and in an exemplary embodiment and according to an aspect of the present disclosure a mapping is made between a folder resourceID and its name in the Cloud and its local name as electronically stored on the SyncCLIENT.

An exemplary mapping between Cloud folders file and local folders file is depicted in . In an exemplary embodiment such mapping may be made through a FileMapping object which includes one or more LocalEntry objects and a CloudEntry object. As shown in local folder FOO is mapped to Cloud folder FOO local folder BAR is mapped to Cloud folder BAR two local folders BAZ are mapped to single Cloud folder BAZ and both FILE A files are mapped to single Cloud file FILE A.

Finally and with reference now to there is shown a schematic diagram depicting the synchronization of a single particular file File A that is electronically stored in the Cloud file system and is associated with contained in three separate folders namely FOO BAR and BAZ. Notably when this File A is synchronized replicated with a SyncCLIENT and electronically stored in a local file system on that client three individual folders namely FOO BAR and BAZ are created on the SyncCLIENT file system wherein each contain a separate copy of that replicated File A. Advantageously when any of the three files are modified locally subsequent synchronization with the Cloud takes place with the corresponding single File A that is resident in the Cloud file system.

Turning now to there is shown a schematic block diagram of a SyncCLIENT that may illustratively perform the operations described previously with respect to . As depicted in an illustrative SyncCLIENT includes Cloud WATCHER Local WATCHER i.e. Type 2 WATCHER or Type 1 WATCHER EVENT AGGREGATOR FETCHER WORKER s SNAPSHOT and BLACKLIST .

As noted previously Cloud WATCHER monitors and detects any relevant changes to Cloud FileSystem while Local WATCHER or monitors and detects any changes to watched Local FileSystem . With respect to the Cloud WATCHER if any relevant changes to Cloud FileSystem are detected FSChange notification s of those detected change s are sent to FETCHER . With respect to the Local WATCHER or if any Local FileSystem changes are detected notification is sent to EVENT AGGREGATOR .

According to an aspect of the present disclosure the EVENT AGGREGATOR receives change notifications from the Local WATCHER Type 1 or from the Local WATCHER Type 2 as appropriate. In a preferred embodiment the Local WATCHER Type 1 provides raw event file level change notifications to the EVENT AGGREGATOR while the Local WATCHER Type 2 provides FSChange notifications to the EVENT AGGREGATOR .

While we will describe the operation of the EVENT AGGREGATOR in more detail later we note that the EVENT AGGREGATOR generally will receive change notifications from the Local WATCHER and hold onto those notifications for some period of time. If during the hold period multiple changes are made to any related item s the EVENT AGGREGATOR will advantageously combine or otherwise modify those changes into higher level more coherent events which are then sent by the EVENT AGGREGATOR to the FETCHER .

FSChange items sent by Cloud WATCHER or EVENT AGGREGATOR to the FETCHER are received by the FETCHER which then checks to see if any of the received changes are included in the BLACKLIST . The BLACKLIST is a structure that lists those changes which have been previously sent to WORKERS but were not completed for one reason or another. Accordingly BLACKLIST serves as a list of changes that are not to be performed so long as those changes remain on the BLACKLIST .

Conversely changes received by the FETCHER that are not included in the BLACKLIST are sent by the FETCHER to the WORKER s as work items for subsequent processing. If a WORKER is unable to complete a work item an ERROR is declared and a record of the ERROR is added to the BLACKLIST . Conversely when a WORKER completes a work item any CHANGES that result are indicated in the SNAPSHOT which as we have already noted maintains the current synchronization state between the SyncCLIENT watched local FileSystem and the Cloud FileSystem .

As may be generally appreciated by those skilled in the art work items are generally those operations that are performed by the WORKERS to effect FSChanges. More particularly a particular work item will generally identify an object to which it applies i.e. a filename a direction i.e. download upload and an operation such as create rename delete move and modify.

As depicted in this the SNAPSHOT is locked when any changes updates are made to the SNAPSHOT by WORKER s . Such locking ensures that the SNAPSHOT does not change during updating and ensures coherence.

As shall be shown and described in more detail FETCHER generally serializes the flow of work items before subsequent parallel processing by WORKERS . In that regard and as we will describe in later detail later FETCHER acts as a manager lock that ensures that no two workers operate on conflicting and or overlapping changes.

As may be appreciated by those skilled in the art there exist a number of different operating systems on which exemplary SyncCLIENT software may execute. Well known examples of such operating systems include but not limited to Microsoft WINDOWS OS X and LINUX. As a result of the capabilities of such operating systems WORKER s may be implemented as multiple threads. Consequently multiple WORKERS may operate simultaneously on multiple processor or multiple core computing systems or operate concurrently on uniprocessor computing systems. As a result multiple WORKERS may be operating on a given work item concurrently with one another thereby enhancing the performance of sharing and synching operations.

Different operating systems such as those enumerated above provide different levels of detail with respect to changes that may occur within filesystems resident in such systems. For example UNIX derivatives such as OS X and LINUX provide folder level change notifications while Microsoft WINDOWS provides a more detailed file level change notification. More specifically OS X provides information about changes made to folders while Microsoft WINDOWS provides information about changes made to individual folders. Consequently at least two different Local WATCHER s are depicted in namely Local WATCHER Type 2 and Local WATCHER Type 1 . As further depicted in Local WATCHER Type 2 provides Folder Level Change Notifications while Local WATCHER Type 1 provides File Level Change Notifications .

More particularly Microsoft WINDOWS provides a ReadDirectoryChangesW Application Programming Interface API that provides notice of for example CHANGE FILE NAME Any file name change in the watched folder directory or subtree CHANGE DIR NAME Any directory name change in the watched directory or subtree CHANGE ATTRIBUTES Any attribute change in the watched directory CHANGE SIZE Any file size change in the watched directory or subtree when file is written CHANGE LAST ACCESS Any change to the last access time of file s in the watched directory or subtree CHANGE CREATION Any change to the creation time of files in the watched directory or subtree and CHANGE SECURITY Any security descriptor change in the watched directory or subtree to SyncCLIENT software accessing that API.

Since OS X does not provide this File Level change notification a local graph is used by Local WATCHER Type 2 to track the state of the watched local FileSystem . Similarly and according to an aspect of the present disclosure the Cloud WATCHER uses a cloud graph to track the state of the watched Cloud Filesystem .

Finally we note at this point that while depicts both a Local WATCHER Type 2 and Local WATCHER Type 1 as component parts of SyncCLIENT a particular instantiation of a SyncCLIENT advantageously does not require both.

With reference now to there is shown a schematic block diagram depicting a sequence of events associated with the saving of an electronically stored file N and the operation of the Local WATCHER and the EVENT AGGREGATOR . As those skilled in the art will recognize such a sequence may accompany the operation of any of a number of popular application programs or suites of programs.

More particularly the general sequence of events associated with these popular application programs or suites of programs while saving an electronically stored file N is to 

Accordingly during SyncCLIENT operation the watched local file system will exhibit the above sequence of events which will be detected by the Local WATCHER . If this sequence were to be forwarded by the Local WATCHER to the FETCHER not specifically shown then a number of unnecessary steps would be performed which would possibly negatively affect performance of the system. To preserve performance and avoid unnecessary redundant steps and according to another aspect of the present disclosure an exemplary SyncCLIENT includes an EVENT AGGREGATOR .

As noted previously the EVENT AGGREGATOR generally will receive change notifications from the Local WATCHER and hold onto those notifications for some period of time. If during the hold period multiple changes are made to any related item s the EVENT AGGREGATOR will advantageously combine or otherwise modify those changes into higher level more coherent events which are then sent by the EVENT AGGREGATOR to the FETCHER.

With continued reference to the EVENT AGGREGATOR is depicted as receiving the above sequence of events namely 1 Create Temp File N 1 2 Delete File N and 3 Move Temp File N 1 to N. As depicted in the EVENT AGGREGATOR holds and aggregates combines that sequence into a single work item namely Modify 1 which is subsequently forwarded to FETCHER for processing.

Prior to their insertion into the Change Event Queue a received Change Event is checked to see whether or not it may be combined with a Change Event already in the Change Event Queue. If so the received Change Event is combined with the Change Event in the Change Event Queue and the combined Change Event is reinserted into the Change Event Queue. If the received Change Event cannot be combined with a Change Event already in the Change Event Queue then the received Change Event is inserted into the Change Event Queue uncombined.

Periodically the Change Event Queue is examined and any Change Event that has been in the Change Event Queue for a predetermined period of time is dispatched to the FETCHER not specifically shown for processing.

If the received change event is combinable with a change event already in the Change Event Queue it is combined with the queued change event at block and the combined change event is enqueued in the Change Event Queue at block .

If the received change event is not combinable with a queued change event at block then the received change event is enqueued into the Change Event Queue at block uncombined.

Periodically at block the Change Event Queue is examined to determine whether any queued change events have been in the Change Event Queue for a period of time greater than some predetermined period. If so then that change event is dequeued and sent to the fetcher for processing at block .

Notably and according to another aspect of the present disclosure the EVENT AGGREGATOR may combine received events with events already in the Event Queue based on known learned patterns that are recognizable. More particularly the EVENT AGGREGATOR may recognize particular event combinations from known patterns of received change sequences observed file types detected executable programs executing processes etc. and from these data determine the particular changes being observed and use this information to make combinations.

Turning now to there is shown a schematic block diagram depicting the operation of a Cloud WATCHER and Local WATCHER Type 2 on a representative SyncCLIENT according to an aspect of the present disclosure. As depicted in Cloud WATCHER generates a Cloud Graph which is indicative of the current state of the watched Cloud FileSystem . After generating the Cloud Graph the Cloud WATCHER periodically generates a Current Cloud State representation and then determines any differences between the two. Upon detecting a difference between the Cloud Graph and the Current Cloud State representation the Cloud WATCHER generates an FSChange File System Change Notification and sends that FSChange to the FETCHER not specifically shown . As previously noted with respect to the discussion of the FSChange notifications are used by the FETCHER to generate Work Items to be sent to WORKERS not specifically shown .

In a preferred embodiment the Current Cloud State representation may be represented by an ordered list of changes made to objects within Cloud FileSystem as reported to the SyncCLIENT. The Cloud Graph may be preferably represented as a dictionary structure that includes a ResourceID key wherein dictionary entries include in addition to the ResourceID any filename s checksum s and timestamp s .

Similarly Local WATCHER Type 2 monitors Watched Local FileSystem via for example and FSEvents API which provides folder level change notifications. Upon receipt of any folder level change notifications Local WATCHER Type 2 generates a Current Local State representation which is indicative of the current state of the Watched Local FileSystem . The Local WATCHER Type 2 compares the Current Local State representation with a previously generated Local Graph and determines any differences between the two. Upon detecting a difference between the Current Local State representation and the Local Graph the Local WATCHER generates an FSChange and sends that FSChange to the EVENT AGGREGATOR not specifically shown . As previously described with respect to and The EVENT AGGREGATOR holds onto changes for a period of time and if multiple changes to related items or particular known patterns are detected then the EVENT AGGREGATOR may combine or otherwise modify those received FSChange events into higher level coherent events which are then sent to the FETCHER as Work Items to be performed.

Advantageously and according to an aspect of the present disclosure the ordered list of changes made to the Cloud File System included in the Change LOG is already aggregated upon receipt by the SyncCLIENT . Consequently the ordered list of changes received from the Cloud File System via the Change LOG does not require further aggregation as do the changes observed by the Local WATCHERs described previously.

In a particular exemplary embodiment the Change LOG includes for a particular account a number of entries including an indication of the current state of an item whether an item has been moved to trash and whether an item has been deleted from the trash. Note that this exemplary listing of entries included in the Change LOG is meant to be representative and not exhaustive. Consequently additional entries indicative of an item s status may be provided via the Change LOG. As may be appreciated by those skilled in the art these entries in the Change LOG may be used by the Cloud WATCHER to generate FSChange events that will be forwarded to the FETCHER.

Turning now to there is shown a schematic block diagram depicting the generation of Work Items and subsequent processing of those Work Items by representative SyncCLIENT according to an aspect of the present disclosure. As depicted therein and previously described one or more FSChange events are sent from Cloud WATCHER or EVENT AGGREGATOR to the FETCHER as Work Items where they are placed into an ordered Work Queue .

More particularly upon receipt of Work Items FETCHER arranges the received Work Items such that they are performed in a prescribed order. More specifically Work Items . . . are entered into a Work Queue ordered from Oldest to Newest. In this regard the FETCHER through the effect of the Work Queue serializes the Work Items . . . before distributing those Work Items to Workers . . . for concurrent processing.

At this point we note again that while we have described the processing of Work Items by WORKERS . . . n as being performed concurrently in a multiple processor or multiple core multiprocessor or multicore processing arrangement that is possible in contemporary computing systems the actual processing of multiple Work Items by multiple WORKERS . . . may advantageously proceed in parallel wherein each Worker thread may be executed by an individual processor or core. Accordingly significant sharing and synchronization throughput is achieved by this multiple WORKER arrangement when operated concurrently or in parallel. Similar performance benefits are advantageously realized as a result of the Cloud WATCHER and Local WATCHER operating concurrently or in parallel depending upon the particular computing system hardware and system software employed by SyncCLIENT .

With reference now to there is shown a schematic block diagram depicting the serialization of Work Items . . . by FETCHER . As depicted therein incoming Work Items . . . are arranged in a Work Queue in Oldest to Newest order.

Operationally FETCHER examines each of the Work Items in Work Queue and determines whether it is processable or not by WORKERS . . . . In this exemplary embodiment depicted in the FETCHER sequentially examines Work Items . . . in the Work Queue starting at the oldest and proceeding to the newest to determine what dependencies if any are exhibited by the particular Work Item under examination. If an examined Work Item . . . in the Work Queue is affected by any entries in the Dependency Map then it is determined to be unprocessable at that time.

As depicted in the Dependency Map includes a list of structures that may be affected by operations being performed by any of the plurality of workers . . . at a given time. Dependency Map entries of particular significance depicted in are inodes resource ID s and Filenames etc. . Additional dependencies not specifically shown in include Filenames of parents children and cousin objects.

Those skilled in the art will readily recall that an inode is a data structure used by contemporary operating systems to store information about a file s directory ies or other file system object s . Inodes store information about files and directories folders such as ownership mode and type. Files are associated with a particular inode which is identified by an integer number inode number .

Similarly a resourceID is an identifier that uniquely identifies Cloud objects for example files. Accordingly such a resourceID would uniquely identify a particular file stored within the Cloud filesystem.

Finally filenames are generally metadata about a file. Frequently filenames are strings used to identify preferably uniquely the file electronically stored in a filesystem. Oftentimes filenames include additional components namely a path associated with the file a name associated with the file a type associated with the file and a version associated with the file.

Advantageously and according to an aspect of the present disclosure the FETCHER maintains the Dependancy Map which identifies dependencies that are currently impacted by Work Items being acted on by any of the Workers . . . . Accordingly as the FETCHER examines Work Items . . . in the Work Queue it compares dependencies affected by the Work Item being examined with any dependencies in the Dependency Map . If any such dependencies affected by the examined Work Item are in Dependency Map then that Work Item is skipped and the FETCHER examines the next Work Item in the Work Queue .

Notably the ordering of Work Items . . . is preferably maintained even if a particular Work Item is skipped. Accordingly the Work Queue within FETCHER will always be in Oldest to Newest Order.

If a particular Work Item is determined to be processable that is to say its affected dependencies are not in the Dependency Map then that Work Item is passed on to a WORKER . . . for processing.

Each time a Work Item is passed on to a WORKER for processing any affected dependencies are indicated in the Dependency Map . Conversely each time that a WORKER finishes with a Work Item it updates the Dependency Map to indicate that it is no longer working on that particular set of dependencies.

Whenever a WORKER finishes with a particular Work Item FETCHER re examines the Work Queue starting from the Oldest Work Item in the Work Queue scanning to the Newest Work Item in the Work Queue .

As those skilled in the art will readily appreciate Work Items in Work Queue that were previously skipped due to dependency conflict for example will be rescanned and processed if such a determination is made by FETCHER . Of further advantage since FETCHER ensures that no two Work Items sent to WORKERS have dependency conflicts there is no need for locks and a high degree of concurrency and or parallelism is achieved in the WORKER operations.

Computer system includes processor memory storage device and input output structure . One or more input output devices may include a display . One or more busses typically interconnect the components and . Processor may be a single or multi core.

Processor executes instructions in which embodiments of the present disclosure may comprise steps described in one or more of the Figures. Such instructions may be stored in memory or storage device . Data and or information may be received and output using one or more input output devices.

Memory may store data and may be a computer readable medium such as volatile or non volatile memory. Storage device may provide storage for system including for example the previously described methods. In various aspects storage device may be a flash memory device a disk drive an optical disk device or a tape device employing magnetic optical or other recording technologies.

Input output structures may provide input output operations for system . Input output devices utilizing these structures may include for example keyboards displays pointing devices and microphones among others. As shown and may be readily appreciated by those skilled in the art computer system for use with the present disclosure may be implemented in a desktop computer package a laptop computer a hand held computer for example a tablet computer personal digital assistant or Smartphone or one or more server computers which may advantageously comprise a cloud computer .

At this point while we have presented this disclosure using some specific examples those skilled in the art will recognize that our teachings are not so limited. Accordingly this disclosure should be only limited by the scope of the claims attached hereto.

