---

title: Synchronization of data between systems
abstract: A computer hardware system for synchronization of data between a first data system and a second data system includes an event propagation processor. Both data systems are modeled as a collection of representation state transfer (REST) resources. The event propagation processor is configured to integrate data between the first and second data systems for events about data changes in the data systems. The processor includes an adaptation layer in the form of an HTTP (Hypertext Transfer Protocol) facade to represent REST resources. The adaptation layer includes a provider component configured to provide access to data resources in one of the data systems, and an initiator component configured to emit events corresponding to data changes in one of the data systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047358&OS=09047358&RS=09047358
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09047358
owner_city: Armonk
owner_country: US
publication_date: 20120201
---
This application claims the benefit of European Patent Application Number EP 11155814.4 filed on Feb. 24 2011 which is incorporated herein by reference in its entirety.

The present invention relates to synchronization of data between systems and more specifically to the use of REST Representational State Transfer resources to synchronize data between systems.

A common application integration scenario is the synchronization of data from one system to another or the propagation of business objects from one system to another. The usual issues with integration are protocol adaptation and data schema transformation.

A situation that is usually dealt with at the application or mediation level is primary key mapping between data stored in one system and the other i.e. how the data is known and indexed between systems. The usual mechanism for addressing this is for one system the controlled system to have data stored with a foreign key and this foreign key is the primary key on the other system the controlling system .

Typically an integration requires either some external key mapping technology to map between primary keys on each system or the controlled system is directly addressable using the foreign key. However in the latter case the controlled system will not have that foreign key when a record is originating in it and is to be propagated to the controlling system so a further update of the original record on the controlled system is required after it has been created on the controlling system to tie these two keys together at the controlled system.

The vagaries of these different approaches at the protocol formatting and key mapping levels all lead to complex integration processes that understand these specifics and encode the necessary approach in the mediation between the systems based on knowledge of these systems. This leads to system specific integration logic or very complex general purpose integration logic. The integration specifics become even more difficult when these issues are coupled with integrating systems that may reside on premise in a public or private cloud.

In certain aspects a computer hardware system for synchronization of data between a first data system and a second data system includes an event propagation processor. Both data systems are modeled as a collection of representation state transfer REST resources. The event propagation processor is configured to integrate data between the first and second data systems for events about data changes in the data systems. The processor includes an adaptation layer in the form of an HTTP Hypertext Transfer Protocol facade to represent REST resources. The adaptation layer includes a provider component configured to provide access to data resources in one of the data systems and an initiator component configured to emit events corresponding to data changes in one of the data systems.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware aspect an entirely software aspect including firmware resident software micro code etc. or an aspect combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied e.g. stored thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to aspects of the invention. Each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented using computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer other programmable data processing apparatus or other devices create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

REST is a well understood paradigm and design point for modeling resources using HTTP Hypertext Transfer Protocol as a protocol for interacting with those resources. Each resource is represented by a URL Uniform Resource Locator and the standard four verbs available via HTTP provide a means of creating reading updating and deleting CRUD operations these resources via POST GET PUT and DELETE respectively.

The described method and system apply the REST principal to business data and extend the notion to events about data changes in a system and not just about the explicit manipulation of data in a system to provide a hybrid data and messaging system to simplify integration and propagation of data between systems. This is achieved by providing a common syntax and semantics to resources in separate systems and providing a canonical means of addressing resources. This results in a trivial integration process in the most optimal scenarios and a much simpler integration in more complex scenario

The described method and system are particularly suited to hybrid cloud integration scenarios where the execution of this could be distributed across these topologies in a deployment agnostic way. A user would like to simply link two systems together regardless of which types they are and have data flow from one to the other with a standard well understood behavior and little or no mediation logic between them.

Each system is modeled as a RESTful collection of resources to represent the particular data objects that are to be integrated. For example if customer records are of interest in a database then these are exposed as a set of REST resources. The identifying part of the URL for each resource is the key of that record. If the database is the controlling repository in the integration relationship then the key is the Primary Key PK . If it were the controlled repository it would be the Foreign Key FK .

This is achieved by providing an adaptation layer to act as the HTTP facade to represent these REST resources. The adaptation layer is created for the particular data schema of the data in question. The adaptation layer is itself a REST resource that can be created by POSTing the schema to describe the data it is to represent.

The creation of an adaptation layer is achieved by exposing the metadata about the system data as REST resources that are exposed through a base metadata adaptation layer created with the schema for metadata representation e.g. XML eXtensible Markup Language Schema xml.xsd . An additional property may be set on the creation of an adaptation layer to specify the field in the schema that is to be used as the key identifier for the resource. Without specifying this the natural PK would be used otherwise the specified FK is used

Therefore metadata can be retrieved in a standard form over a standard protocol to describe the available types of resource and these resource instances can then be created and accessed.

The notion of initiator and provider adaptation layer components are introduced as particular roles that the adaptation layer is created to satisfy. A provider adaptation layer component is configured to provide access to data resources in the system it is for in a standard way. It consists of an HTTP listener that receives GET PUT POST DELETE requests for particular URLs and then performs the appropriate actions on the actual system in the native protocol to create read update and delete data objects. The identity part of the URL is the key by which the resource is being addressed.

An initiator adaptation layer component is configured to emit events that correspond to changes in data in the owning system using the same HTTP REST semantics. However the semantics will be applied based on the context of whether this initiating system is the controlling system or controlled system in the relationship.

If the initiating system is the controlling system when a record is created the record s primary key which is the identifying part of the URL scheme for the resource is already known when the event is propagated to the adaptation layer. Therefore the adaptation layer knows that a resource has been created at a known URL. The semantics of REST are that this maps to a PUT issued to that known URL.

However if the initiating system were the controlled system the record s foreign key which is being used as the identifying part of the URL scheme in this instance is blank because this must be supplied by the controlling system. The semantics of this in REST is that a resource is being created at an unknown URL and it is the responsibility of the target system to identify the resource when created this maps to a POST to the URL of a collection. More simply a retrieve or delete operation will directly map to the GET or DELETE verbs to specific URLs.

A manner of hooking these adaptation layer components together is provided by an additional property of the adaptation layer resource itself. When a provider adaptation layer is created a URL to the collection it represents is returned as the state of the adaptation layer resource. When creating an initiator adaptation layer no such URL is provided for obvious reasons. However a property to denote a destination for an initiator adaptation layer can be set to indicate where these emitted HTTP verbs should be targeted to. The URL of the provider adaptation layer s collection address can be set as the destination of the initiator adaptation layer. Hence when a data change event occurs on the originating system this has the result of a corresponding copy of the REST resource represented is mirrored to the destination collection.

For scenarios where the data schema for the resources are the same on both sides all protocol and operational semantics are automatically dealt with. However for scenarios involving different schema an additional intermediary adaptation layer component can be inserted that represents a mapping. This intermediary component is created by specifying the schema for the map e.g. XSLT eXtensible Stylesheet Language Transformations and presents a URL to represent a virtualized collection of resources on one side and a destination to the real resource collection being virtualized on the other side. The three forms of adaptation layer can then be streamed together and the HTTP messages and operations cascade automatically from the originating system to the target system.

A further aspects of the described system allows for multiple destinations on an initiating or intermediary adaptation layer component to facilitate multicasting of these events.

In the situations where a controlled system is the initiating adaptation layer component and a record is created in that system the resultant PK created by the controlling provider adaptation layer must be propagated back. REST stipulates that state is returned after the operation so this updated state will naturally propagate back in the HTTP response message of the initiator adaptation layer component. The adaptation layer then performs a subsequent update operation on the system to reflect this update to PK as FK into the record.

The adaptation layer can provide encapsulation of communication session management details for a resource requester or provider endpoint including isolation of adaptation layer integrations from actual changes in endpoint connectivity details. A common interface can also be provided to simplify integrations using the well understood REST protocol and operational semantics to manipulate a resource exposed by the adaptation layer. The concept of pipes involves encapsulating the relationship between at least two adaptation layer components and optionally a mediation in order to flow data from one adaptation layer component to another.

The following terminology is used in the description given below. The roles of the adaptation layer component includes Initiator Provider and Intermediary. The Initiator initiates an integration by propagating an initial message into SL. The Provider is used as a target for messages in an integration. The Intermediary acts as a forwarding proxy and can act as an Initiator and Provider.

An adaptation layer component status includes a read only entry aspect giving status details of the adaptation layer component instance. This includes the URL for where messages should be sent to that adaptation layer component the Req.in endpoint URL . An adaptation layer component destination includes a destination entry that encapsulates where messages should be forwarded on to Req.out URL by the adaptation layer component after receipt on the Req.in URL. An adaptation layer component type includes a logical grouping of resources provided by a common provider e.g. SaaS service database file etc . An adaptation layer component instance includes an instantiation of an adaptation layer component that exposes a RESTful endpoint for a particular resource on its Req.in URL and maps this to the appropriate interactions with the resource and potentially forwarding on to any destination endpoints.

A pipe is an integration between at least two adaptation layer components with an optional mediation between them. The pipe is a recording of this relationship. A resource is the thing being manipulated behind the adaptation layer component an object in a database a spreadsheet business object in a service etc.

Referring to a block diagram shows a system for a provider adaptation layer. An adaptation layer component A acting as a provider is provided in the form of an HTTP server which exposes REST resources over HTTP. The adaptation layer component A acting as a provider includes an HTTP listener for receiving operation requests for particular URLs. A resource modeling component in the form of an application type plugin models application resources as REST resources. An operation on a URL may be received by the adaptation layer component A acting as a provider. The adaptation layer component A sends the URL path information to the resource modelling component which sends an operation event with optional key to the relevant application resource A.

Referring to a block diagram shows a system for an initiator adaptation layer. An adaptation layer component B acting as an initiator is provided in the form of an HTTP server which exposes REST resources over HTTP. An event modelling component in the form of an application type plugin models application resource events as REST resource operations. An operation event with optional key is generated by an application resource B and sent to the event modelling component which provides the operation on URL to the adaptation layer component B acting as an initiator.

Referring to a block diagram shows a system with integrated initiator and provider adaptation layer. An adaptation layer component is provided in the form of an HTTP server acting as an initiator and a provider. An application resource B may generate an operation event with optional key and sends it to the event modelling component which provides the operation on URL to the adaptation layer component . The adaptation layer component sends the URL path information to the resource modelling component which sends an operation event with optional key to the application resource A.

In the following examples the adaptation layer is referred to as Touchpoint and this name is used in example URLs. Referring to a method of adaptation layer component creation is shown.

A POST operation is provided for POST Schema xxx Role Initiator Provider . An adaptation layer collection URL is provided for example http touchpoints.com TPs AppType1 .

An adaptation layer resource URL is created for example http touchpoints.com TPs AppType1 TP1 with Properties Resource Type Schema and Role Initiator Provider .

A POST operation is provided for POST Schema Customer.xsd Role Provider . An adaptation layer collection URL is provided for example http touchpoints.com TPs AppType1 .

An adaptation layer resource URL is created for example http touchpoints.com TPs AppType1 TP1 with Properties Resource Type Customer.xsd Role Provider Status http touchpoints.com TPs AppType1 TP1 status.

The adaptation layer resource URL contains an adaptation layer resource status URL for example http touchpoints.com TPs AppType1 TP1 status with Properties Request URL http touchpoints.com requests TP1.

A POST operation is provided for POST Schema Customer.xsd Role Initiator . An adaptation layer collection URL is provided for example http touchpoints.com TPs AppType2 .

An adaptation layer resource URL is created for example http touchpoints.com TPs AppType2 TP2 . with Properties Resource Type Customer.xsd Role Initiator Destination http touchpoints.com TPs AppType2 TP2 dest.

The adaptation layer resource URL contains an adaptation layer resource destination URL for example http touchpoints.com TPs AppType2 TP2 dest with Properties Request URL http touchpoints.com requests TP1.

A POST operation provided for Request http touchpoints.com requests TP1 is posted to the adaptation layer resource destination URL .

In a flow diagram shows a provider GET operation for example GET http touchpoints.com reqs TP1 1234 to an adaptation layer request URL for example http touchpoints.com reqs TP1 . An application protocol specific access is carried out to application resource with key 1234 . The application resource responds with an application protocol specific resource state to the adaptation layer request URL which returns the resource state representation.

In a flow diagram shows a provider DELETE operation for example DELETE http touchpoints.com reqs TP1 1234 to an adaptation request server URL for example http touchpoints.com reqs TP1 . An application protocol specific delete is carried out to resource with key 1234 . The application resource responds with an application protocol specific resource state to the adaptation request server URL .

In a flow diagram shows a provider POST operation for example POST http touchpoints.com reqs TP1 Resource State Representation to an adaptation request server URL for example http touchpoints.com reqs TP1 . An application protocol specific creation of resource is carried out to resource . The application resource responds with an application protocol specific resource state to the adaptation request server URL which returns the resource state representation for example http touchpoints.com reqs TP1 1234.

In a flow diagram shows a provider PUT operation to create or update and existing resource for example to PUT http touchpoints.com reqs TP1 1234 Resource State Representation to an adaptation request server URL for example http touchpoints.com reqs TP1 . An application protocol specific creation or update of resource with key 1234 is carried out to resource . The application resource responds with an application protocol specific resource state to the adaptation request server URL which returns the resource state representation.

Referring to flow diagrams are shown of integrated initiator and provider adaptation layer components.

In a flow diagram shows integrated initiator and provider components. An event is created of Customer 1234 at an application resource B referred to as Application2. An event modelling component is provided for an application Type 2 with a Destination of Request http touchpoints.com requests TP1 . A PUT operation for example PUT http touchpoints.com requests TP1 1234 is made from the event modelling component to an adaptation layer component acting as a provider and an initiator . The adaptation layer component sends Path information TP1 1234 to resource modelling component for an application Type 1 which has a Status of Request http touchpoints.com requests TP1 . A Create Customer 1234 operation is carried out at an application resource A referred to as Application1 to create a record for Customer 1234.

Referring to a flow diagram shows integrated initiator and provider components supporting controlling system to controlled system integration. The flow diagram is the same as in with the exception that the application resource B which creates event 1234 is controlling with a private key of 1234. The resource modelling component creates or updates Customer with foreign key 1234. Application resource A is controlled with Customer private key 0001 and foreign key 1234.

Referring to a flow diagram shows integrated initiator and provider components supporting controlled system to controlling system integration. The flow diagram is the same as in with the exception that the application resource B is a controlled system with a Customer private key of 0001 and foreign key . The application resource B creates an event of Customer 0001 with foreign key . A POST operation is made by the event modeling component to the adaptation layer component . The resource modelling component creates or updates a resource Customer. Application resource A is a controlling system which allocates a Customer private key 1234.

A return path is provided from the controlling application resource A to the controlled application resource B. Creation of Customer 1234 is returned via the resource modelling component to the adaptation layer component and to the event modelling component . The event modelling component updates Customer 0001 with foreign key 1234 at the controlled application resource B.

In data propagation at least one party must act as the controlling system i.e. own the primary key PK by which they will subsequently know the resource. The adaptation layer component will use that primary key as the resource identity key. The controlled system must have a foreign key FK identified within its native schema and this will be the resource identity key in REST terms. The adaptation layer component will use that foreign key as the resource identity key.

On an UPSERT event from its system an initiator adaptation layer component should look for a value for its resource identity key this may be PK or has been specified as FK for this component . If non null then this event is a PUT and if null then this event is a POST

If a controlling system acts as initiator it effectively always does a PUT PK. As the PK is known the adaptation layer component can see this should be a PUT. If a controlled system acts as initiator it does a POST and will have to PUT an updated copy of its source event afterwards to record the resource identity key. There is the danger of a race condition occurring for controlled system initiations where the creation of a record in the controlling system results in a trigger event. In this case the use of foreign keys on both the controlling system and the controlled system can remove the danger of replication errors.

Referring to example aspects of the described system are shown. In a first aspect shown in there is direct communication between resource systems. In this example aspect a system for synchronization is shown between a database provided on a first computer system wherein the database is an example aspect of a controlling resource repository and a spreadsheet provided on a second computer system wherein the spreadsheet is an example aspect of a controlled resource repository. Adaptation layers reside on each of the first and second computer systems and use an HTTP networking protocol for communication between the adaptation layers .

In the second aspect shown in a system is shown with a database provided on a first computer system wherein the database is an example aspect of a controlling resource repository and a spreadsheet provided on a second computer system wherein the spreadsheet is an example aspect of a controlled resource repository. A mapping intermediary component is provided on a third computer system hosting adaptation layers . In this aspect a native protocol exchange is carried out between an adaptation layer and its respective computer system .

Referring to an exemplary system for implementing aspects of the invention includes a data processing system suitable for storing and or executing program code including at least one processor coupled directly or indirectly to memory elements through a bus system . The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

The memory elements may include system memory in the form of read only memory ROM and random access memory RAM . A basic input output system BIOS may be stored in ROM . System software may be stored in RAM including operating system software . Software applications may also be stored in RAM .

The system may also include a primary storage means such as a magnetic hard disk drive and secondary storage means such as a magnetic disc drive and an optical disc drive. The drives and their associated computer readable media provide non volatile storage of computer executable instructions data structures program modules and other data for the system . Software applications may be stored on the primary and secondary storage means as well as the system memory .

The computing system may operate in a networked environment using logical connections to one or more remote computers via a network adapter . Input output devices can be coupled to the system either directly or through intervening I O controllers. A user may enter commands and information into the system through input devices such as a keyboard pointing device or other input devices for example microphone joy stick game pad satellite dish scanner or the like . Output devices may include speakers printers etc. A display device is also connected to system bus via an interface such as video adapter .

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various aspects of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. Each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular aspects only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. The terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The aspect was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various aspects with various modifications as are suited to the particular use contemplated.

