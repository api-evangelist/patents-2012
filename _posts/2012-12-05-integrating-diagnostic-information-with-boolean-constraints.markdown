---

title: Integrating diagnostic information with boolean constraints
abstract: A device receives code generated via a technical computing environment (TCE), where the code includes one or more values to be tested. The device receives Boolean constraints and diagnostic information, and generates a test based on the Boolean constraints and the diagnostic information. The device performs the test on the one or more values of the code to generate a result, and outputs or stores the result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09064053&OS=09064053&RS=09064053
owner: The MathWorks, Inc.
number: 09064053
owner_city: Natick
owner_country: US
publication_date: 20121205
---
The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

A technical computing environment TCE may provide a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that requires the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one example a TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

Code generated by the TCE may be tested to determine whether the code will function properly e.g. when executed . In a simple example the code may be tested to determine whether a value in the code satisfies a constraint e.g. is equal to a particular number . If the value satisfies the constraint i.e. passes diagnostic information may be generated that informs a programmer that the code functions properly. If the value does not satisfy the constraint i.e. fails diagnostic information may be generated that informs the programmer that the code does not function properly.

Systems and or methods described herein may integrate meaningful diagnostic information with a rich set of Boolean constraints. In one example the systems and or methods may generate a qualification application programming interface API that provides a set of constraints for determining whether a calculated value in code passes tests for ensuring correctness. The constraints may be used to determine whether or not the calculated value satisfies conditions e.g. is less than a number is greater than a number etc. and to provide meaningful diagnostic information that explains why the calculated value does or does not satisfy the conditions. The systems and or methods may enable the constraints to be combined using Boolean logic e.g. and or not etc. expressions and may enable the combination of constraints to produce meaningful diagnostic information. The meaningful diagnostic information may include the structure of the Boolean logic expressions language for when the constraints are satisfied language for when the constraints are not satisfied e.g. negated etc.

As further shown in the testing component may receive code generated by the TCE. The TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables etc. In one example the TCE code may include one or more calculated values e.g. actual value that may need to be tested by the testing component.

The testing component may receive Boolean constraints Boolean logic and or diagnostic information from a person testing e.g. a tester the TCE code. Each of the Boolean constraints may include a constraint with two possible outcomes i.e. true or false . The Boolean logic may include Boolean operators e.g. and or not etc. that may enable the Boolean constraints to be combined to form Boolean expressions. The diagnostic information may include information explaining why Boolean constraints and or Boolean expressions are or are not satisfied.

The testing component may generate a test for the TCE code based on the Boolean constraints the Boolean logic and or the diagnostic information. In one example the testing component may configure the Boolean constraints with the Boolean logic to generate one or more Boolean expressions. The testing component may combine the diagnostic information with the Boolean expression s to create one or more test APIs and may generate the test based on the test API s . The testing component may perform the test on the TCE code to generate a result. In one example the result may include diagnostics that are understandable to the tester such as the following example diagnostics 

The terms code and program code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code that may not require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices.

Server device may include one or more server devices or other types of computation and communication devices that gather process and or provide information in a manner described herein. Server device may include a device that is capable of communicating with client device e.g. via network . In one example server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. and or software e.g. a simulator executing on the aforementioned devices. In one example server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN an intranet the Internet or a combination of networks.

TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one implementation TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . Alternatively or additionally TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in other implementations environment may include fewer components different components differently arranged components and or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more other tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in other implementations device may include fewer components different components differently arranged components and or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more other tasks described as being performed by one or more other components of device .

Block diagram editor may include hardware or a combination of hardware and software that may be used to graphically specify models of dynamic systems. In one implementation block diagram editor may permit a user to perform actions such as construct edit display annotate save and or print a graphical model e.g. a block diagram that visually and or pictorially represents a dynamic system . In another implementation block diagram editor may permit a user to create and or store data relating to graphical entities .

A textual interface may be provided to permit interaction with block diagram editor . A user may write scripts that perform automatic editing operations on a model using the textual interface. For example the textual interface may provide a set of windows that may act as a canvas for the model and may permit user interaction with the model. A model may include one or more windows depending on whether the model is partitioned into multiple hierarchical levels.

Graphical entities may include hardware or a combination of hardware and software that may provide entities e.g. signal lines buses etc. that represent how data may be communicated between functional and or non functional units and blocks of a model. Blocks may include fundamental mathematical elements of a block diagram model.

Execution engine may include hardware or a combination of hardware and software that may process a graphical model to produce simulation results may convert the graphical model into executable code and or may perform other analyses and or related tasks. In one implementation for a block diagram graphical model execution engine may translate the block diagram into executable entities e.g. units of execution following the layout of the block diagram. The executable entities may be compiled and or executed on a device e.g. client device to implement the functionality specified by the model.

Graphical models may include entities with relationships between the entities and the relationships and or the entities may have attributes associated with them. The entities my include model elements such as blocks and ports. The relationships may include model elements such as lines e.g. connector lines and references. The attributes may include model elements such as value information and meta information for the model element associated with the attributes. Graphical models may be associated with configuration information. The configuration information may include information for the graphical model such as model execution information e.g. numerical integration schemes fundamental execution period etc. model diagnostic information e.g. whether an algebraic loop should be considered an error or result in a warning model optimization information e.g. whether model elements should share memory during execution model processing information e.g. whether common functionality should be shared in code that is generated for a model etc.

Additionally or alternatively a graphical model may have executable semantics and or may be executable. An executable graphical model may be a time based block diagram. A time based block diagram may consist for example of blocks e.g. blocks connected by lines e.g. connector lines . The blocks may consist of elemental dynamic systems such as a differential equation system e.g. to specify continuous time behavior a difference equation system e.g. to specify discrete time behavior an algebraic equation system e.g. to specify constraints a state transition system e.g. to specify finite state machine behavior an event based system e.g. to specify discrete event behavior etc. The lines may represent signals e.g. to specify input output relations between blocks or to specify execution dependencies between blocks variables e.g. to specify information shared between blocks physical connections e.g. to specify electrical wires pipes with volume flow rigid mechanical connections etc. etc. The attributes may consist of meta information such as sample times dimensions complexity whether there is an imaginary component to a value data type etc. associated with the model elements.

In a time based block diagram ports may be associated with blocks e.g. blocks . A relationship between two ports may be created by connecting a line e.g. a connector line between the two ports. Lines may also or alternatively be connected to other lines for example by creating branch points. For instance three or more ports can be connected by connecting a line to each of the ports and by connecting each of the lines to a common branch point for all of the lines. A common branch point for the lines that represent physical connections may be a dynamic system e.g. by summing all variables of a certain type to 0 or by equating all variables of a certain type . A port may be an input port an output port an enable port a trigger port a function call port a publish port a subscribe port an exception port an error port a physics port an entity flow port a data flow port a control flow port etc.

Relationships between blocks e.g. blocks may be causal and or non causal. For example a model may include a block that represents a continuous time integration block that may be causally related to a data logging block by using a line e.g. a connector line to connect an output port of the continuous time integration block to an input port of the data logging block. Further during execution of the model the value stored by the continuous time integrator may change as the current time of the execution progresses. The value of the state of the continuous time integrator may be available on the output port and the connection with the input port of the data logging block may make this value available to the data logging block.

A sample time may be associated with the elements of a graphical model. For example a graphical model may include a block e.g. block with a continuous sample time such as a continuous time integration block that may integrate an input value as time of execution progresses. This integration may be specified by a differential equation. During execution the continuous time behavior may be approximated by a numerical integration scheme that is part of a numerical solver. The numerical solver may take discrete steps to advance the execution time and these discrete steps may be constant during an execution e.g. fixed step integration or may be variable during an execution e.g. variable step integration .

Alternatively or additionally a graphical model may include a block e.g. block with a discrete sample time such as a unit delay block that may output values of a corresponding input after a specific delay. This delay may be a time interval and this interval may determine a sample time of the block. During execution the unit delay block may be evaluated each time the execution time has reached a point in time where an output of the unit delay block may change. These points in time may be statically determined based on a scheduling analysis of the graphical model before starting execution.

Alternatively or additionally a graphical model may include a block e.g. block with an asynchronous sample time such as a function call generator block that may schedule a connected block to be evaluated at a non periodic time. During execution a function call generator block may evaluate an input and when the input attains a specific value when the execution time has reached a point in time the function call generator block may schedule a connected block to be evaluated at this point in time and before advancing execution time.

Further the values of attributes of a graphical model may be inferred from other elements of the graphical model or attributes of the graphical model. For example the graphical model may include a block e.g. block such as a unit delay block that may have an attribute that specifies a sample time of the block. When a graphical model has an execution attribute that specifies a fundamental execution period the sample time of the unit delay block may be inferred from this fundamental execution period.

As another example the graphical model may include two unit delay blocks e.g. blocks where the output of the first of the two unit delay blocks is connected to the input of the second of the two unit delay block. The sample time of the first unit delay block may be inferred from the sample time of the second unit delay block. This inference may be performed by propagation of model element attributes such that after evaluating the sample time attribute of the second unit delay block a graph search proceeds by evaluating the sample time attribute of the first unit delay block since it is directly connected to the second unit delay block.

The values of attributes of a graphical model may be set to characteristics settings such as one or more inherited settings one or more default settings etc. For example the data type of a variable that is associated with a block e.g. block may be set to a default such as a double. Because of the default setting an alternate data type e.g. a single an integer a fixed point etc. may be inferred based on attributes of elements that the graphical model comprises e.g. the data type of a variable associated with a connected block and or attributes of the graphical model. As another example the sample time of a block may be set to be inherited. In case of an inherited sample time a specific sample time may be inferred based on attributes of elements that the graphical model comprises and or attributes of the graphical model e.g. a fundamental execution period .

Although shows example functional components of TCE in other implementations TCE may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of TCE may perform one or more other tasks described as being performed by one or more other functional components of TCE .

As further shown in testing component may receive code generated by TCE . TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables etc. In one example TCE code may include one or more calculated values e.g. actual value that may need to be tested by testing component .

Testing component may receive Boolean constraints Boolean logic and or diagnostic information from a tester of TCE code . Each of Boolean constraints may include a constraint with two possible outcomes i.e. true or false . Boolean logic may include Boolean operators e.g. and or not etc. that may enable Boolean constraints to be combined to form Boolean expressions. For example if Boolean constraints include constraints C C and C the tester may utilize Boolean logic to combine these constraints into a Boolean expression. For example the tester may specify that actual value meets constraint C AND does not meet constraint C OR meets constraint C. Testing component may determine a result of the Boolean expression by analyzing scalar logical values returned by Boolean constraints . Diagnostic information may include information explaining why Boolean constraints and or the Boolean expressions are or are not satisfied.

Testing component may generate a test for TCE code based on Boolean constraints Boolean logic and or diagnostic information . In one example testing component may configure Boolean constraints with Boolean logic to generate one or more Boolean expressions. Testing component may combine diagnostic information with the Boolean expression s to create one or more test APIs and may generate the test based on the test API s . Testing component may perform the test on TCE code to generate a result . In one example result may include diagnostics that are understandable to the tester as indicated by reference number such as the following example diagnostics 

In one example implementation testing component may provide to the tester a Boolean constraint interface that may produce diagnostic information. When a tester creates a constraint for testing TCE code the tester e.g. via testing component may specify a method for the constraint e.g. constraint.satisfiedBy value and a method for diagnostics of the constraint e.g. constraint.getDiagnosticFor value . Testing component may utilize these methods to determine whether the constraint e.g. satisfiedBy is satisfied and to produce diagnostic information e.g. provided by the getDiagnosticFor method detailing how and why the constraint is or is not satisfied.

The Boolean constraint interface may enable the tester to utilize Boolean operators e.g. and or not etc. with the Boolean constraints. In one example the Boolean operators may be provided by syntax e.g. AndConstraint OrConstraint NotConstraint etc. that operates on one or more constraints. Testing component may call getDiagnosticFor methods of constraints on which the Boolean operators operate and may present the Boolean operators in a natural manner e.g. indenting to show AND OR expression structure etc. . This may allow the natural language of the Boolean operators to be preserved during diagnostic analysis. For example an IsTrue constraint may include diagnostic verbiage such as 

Although shows example operations capable of being performed by TCE in other implementations TCE may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

Boolean expression component may receive Boolean constraints and Boolean logic and may combine Boolean constraints with Boolean logic to create one or more Boolean expressions . Boolean expression may include a single Boolean constraint more than one Boolean constraint and or more than one Boolean constraint combined with one or more Boolean logic . For example to test a value e.g. actual value of TCE code for Boolean constraints e.g. greater than five and less than fifty or greater than one hundred Boolean expression E may take the form of actual value 5 AND actual value100. Boolean expression component may provide Boolean expressions to API creator component .

API creator component may receive Boolean expressions and diagnostic information and may create one or more test APIs based on Boolean expressions and diagnostic information . For example API creator component may associate positive and negative diagnostic information with a Boolean expression to create a test API . The positive diagnostic information may include information explaining why Boolean expression is satisfied. The negative diagnostic information may include information explaining why Boolean expression is not satisfied. In one example implementation the negative diagnostic information may include language to describe why Boolean expression is not satisfied that is different than language used by the positive diagnostic information to describe why Boolean expression is satisfied. Alternatively or additionally the positive and or negative diagnostic information may include the syntax associated with Boolean expression which may aid a tester when TCE code is tested and experiences a failure.

In one example implementation Boolean constraints may include a negated constraint e.g. a value is not equal to ten and a non negated constraint e.g. the value is equal to ten . When the value is not equal to ten the non negated constraint may fail and a negated version of the negated constraint e.g. the value is not not equal to ten may also fail. In both situations a satisfiedBy method may be used. However the diagnostics for the two situations may be different so that the diagnostics may be provided to different methods and be in a proper language e.g. English Japanese Chinese etc. .

In one example diagnostic information associated with Boolean expressions may include a more natural diagnostic language than typical diagnostic systems that utilize concatenated description strings. Unlike typical diagnostic systems the concatenated description strings e.g. provided by the natural diagnostic language may be translated into other languages with different grammar semantics. This may result in a clearer understanding of causes of test failures of TCE code . Diagnostic information may include structures of Boolean expressions which may further aid in understanding causes of test failures of TCE code .

API creator component may implement a getDiagnosticFor method e.g. positive diagnostic information and a getNegativeDiagnosticFor method e.g. negative diagnostic information for each Boolean expression . This may enable a tester to combine the getDiagnosticFor and getNegativeDiagnosticFor methods into many different logical expressions. When Boolean expression is not satisfied the getDiagnosticFor method may be implemented to invoke the getNegativeDiagnosticFor method. The getNegativeDiagnosticFor method may state that a negated constraint passes e.g. is satisfied when a non negated constraint fails e.g. is not satisfied and may state that the negated constraint fails when the non negated constraint passes. The getNegativeDiagnosticFor method may provide diagnostics stating that Boolean expression incorrectly passes and reasons why Boolean expression passes.

When Boolean expression is satisfied the getDiagnosticFor method may be invoked. If Boolean expression is negated twice the getNegativeDiagnosticFor method may be implemented to invoke the getDiagnosticFor since negating a negated constraint may bring Boolean expression back to a normal non negated constraint. If two Boolean constraints are combined with an AND or an OR in Boolean expression API creator component may leverage diagnostic information associated with the two Boolean constraints . As further shown in API creator component may provide test APIs to code tester component .

Code tester component may receive test APIs and may generate a test based on test APIs . For example code tester component may combine one or more test APIs together to create the test. As further shown in code tester component may receive TCE code and may perform the test on TCE code to generate result . Code tester component may output e.g. display and or store result .

Although shows example functional components of testing component in other implementations testing component may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of testing component may perform one or more other tasks described as being performed by one or more other functional components of testing component .

Prior to receiving TCE code testing component may receive Boolean constraints Boolean logic and or diagnostic information from a tester of TCE code . Testing component may generate a test for TCE code based on Boolean constraints Boolean logic and or diagnostic information . In one example testing component may configure Boolean constraints with Boolean logic to generate one or more Boolean expressions. Testing component may combine diagnostic information with the Boolean expression s to create one or more test APIs and may generate test based on the test API s . In one example test may include the following syntax 

Testing component may perform test on TCE code to generate a result. When the IsEqualTo constraint is satisfied the getDiagnosticFor method may be invoked by testing component . For example as shown in when the actual value equals five the IsEqualTo constraint may be satisfied as indicated by reference number and an equal diagnostic may be output by testing component . Equal diagnostic may include diagnostic information provided by the getDiagnosticFor method and the structure of the IsEqualTo constraint. For example equal diagnostic may include the following information 

Alternatively or additionally when the actual value does not equal five the IsEqualTo constraint may not be satisfied and may produce diagnostic information describing why the actual value does not equal the expected value e.g. five . The IsEqualTo constraint may produce the diagnostic information when the getDiagnosticFor method is called for the IsEqualTo constraint. The diagnostic information provided by the getDiagnosticFor method may include the structure of the IsEqualTo constraint.

Alternatively or additionally if the IsEqualTo constraint is negated twice the getDiagnosticFor method may be invoked by testing component . Alternatively or additionally when the IsEqualTo constraint is satisfied the getNegativeDiagnosticFor method may be invoked by testing component . For example as shown in when the actual value does not equal five the IsEqualTo constraint may be satisfied as indicated by reference number and a not equal diagnostic may be output by testing component . Not equal diagnostic may include diagnostic information provided by the getNegativeDiagnosticFor method and the structure of the IsEqualTo constraint. For example not equal diagnostic may include the following information 

Alternatively or additionally when the actual value equals five the IsEqualTo constraint may not be satisfied and may produce diagnostic information describing why the actual value equals the expected value e.g. five . The IsEqualTo constraint may produce the diagnostic information when the getDiagnosticFor method is called for the IsEqualTo constraint and the getDiagnosticFor method calls the getNegativeDiagnosticFor method. The diagnostic information provided by the getNegativeDiagnosticFor method may include the structure of the IsEqualTo constraint.

Although shows example operations capable of being performed by testing component in other implementations testing component may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

Prior to receiving TCE code testing component may receive Boolean constraints Boolean logic and or diagnostic information from a tester of TCE code . Testing component may generate a test for TCE code based on Boolean constraints Boolean logic and or diagnostic information . In one example testing component may configure Boolean constraints with Boolean logic to generate one or more Boolean expressions. Testing component may combine diagnostic information with the Boolean expression s to create one or more test APIs and may generate test based on the test API s . In one example test may include the following syntax 

Testing component may perform test on TCE code to generate a result. When the IsGreaterThan and IsLessThan constraints are satisfied the getDiagnosticFor method may be invoked by testing component . For example as shown in when the actual value is greater than five and less than twenty the IsGreaterThan and IsLessThan constraints may be satisfied as indicated by reference number and a true diagnostic may be output by testing component . True diagnostic may include diagnostic information provided by the getDiagnosticFor method and the structure of the IsGreaterThan and IsLessThan constraints. For example true diagnostic may include the following information 

Alternatively or additionally if the IsGreaterThan and IsLessThan constraints are negated twice the getDiagnosticFor method may be invoked by testing component . Alternatively or additionally when the IsGreaterThan and IsLessThan constraints are not satisfied the getNegativeDiagnosticFor method may be invoked by testing component . For example as shown in when the actual value is less than five or greater than twenty the IsGreaterThan and IsLessThan constraints may not be satisfied as indicated by reference number and an untrue diagnostic may be output by testing component . Untrue diagnostic may include diagnostic information provided by the getNegativeDiagnosticFor method and the structure of the IsGreaterThan and IsLessThan constraints. For example untrue diagnostic may include the following information 

In one example implementation test may check the actual value to determine whether the actual value satisfies the syntax AndConstraint IsGreaterThan 5 IsLessThan 20 . Testing component may compare the actual value against the AndConstraint which may dispatch to the two constraints that are joined together with an AND expression. If a negation is added the syntax may include verifyThat actual value IsGreaterThan 5 IsInf . In such a situation the resulting constraint may include the syntax AndConstraint IsGreaterThan 5 NotConstraint IsInf .

Although shows example operations capable of being performed by testing component in other implementations testing component may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

As shown in process may include receiving code generated via a technical computing environment TCE block and receiving Boolean constraints Boolean logic and or diagnostic information block . For example in an implementation described above in connection with testing component may receive code generated by TCE . TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables etc. Testing component may receive Boolean constraints Boolean logic and or diagnostic information from a tester of TCE code . Each of Boolean constraints may include a constraint with two possible outcomes i.e. true or false . Boolean logic may include Boolean operators e.g. and or not etc. that may enable Boolean constraints to be combined to form Boolean expressions. Diagnostic information may include information explaining why Boolean constraints and or the Boolean expressions are or are not satisfied.

As further shown in process may include generating a test based on the Boolean constraints the Boolean logic and or the diagnostic information block performing the test on the code to generate a result block and outputting and or storing the result block . For example in an implementation described above in connection with testing component may generate a test for TCE code based on Boolean constraints Boolean logic and or diagnostic information . Testing component may perform the test on TCE code to generate result . In one example result may include diagnostics that are understandable to the tester as indicated by reference number . Testing component may output e.g. display to the tester and or may store result . In one example implementation result may include the Boolean expression s of the test diagnostics explaining why the Boolean expression s are or are not satisfied etc.

Process block may include the process blocks depicted in . As shown in process block may include configuring the Boolean constraints with the Boolean logic to generate Boolean expression s block combining the diagnostic information with the Boolean expression s to create test API s block and generating the test based on the test API s block . For example in an implementation described above in connection with testing component may configure Boolean constraints with Boolean logic to generate one or more Boolean expressions. Testing component may combine diagnostic information with the Boolean expression s to create one or more test APIs and may generate the test based on the test API s .

Systems and or methods described herein may integrate meaningful diagnostic information with a rich set of Boolean constraints. In one example the systems and or methods may generate a qualification API that provides a set of constraints for determining whether a calculated value in code passes tests for ensuring correctness. The constraints may be used to determine whether or not the calculated value satisfies conditions e.g. is less than a number is greater than a number etc. and to provide meaningful diagnostic information that explains why the calculated value does or does not satisfy the conditions. The systems and or methods may enable the constraints to be combined in Boolean logic expressions and may enable the combination of constraints to produce meaningful diagnostic information. The meaningful diagnostic information may include the structure of the Boolean logic expressions language for when the constraints are satisfied language for when the constraints are not satisfied etc.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

For example while series of blocks have been described with regard to the order of the blocks may be modified in other implementations. Further non dependent blocks may be performed in parallel.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an application specific integrated circuit ASIC or a field programmable gate array FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

