---

title: Generating a service-oriented architecture policy based on a context model
abstract: A solution for generating a Service-Oriented Architecture (SOA) policy based on a context model is provided, which generates an application scope of the SOA policy; generates a context model; generates an action list for the context model based on action semantic modules customized by a user; generates a condition part of the SOA policy according to the context module; generates an action part of the SOA policy according to the action list; and combines the condition part and the action part to generate the SOA policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08447788&OS=08447788&RS=08447788
owner: International Business Machines Corporation
number: 08447788
owner_city: Armonk
owner_country: US
publication_date: 20120501
---
The current application claims the benefit of co pending Chinese Patent Application No. 200710187088.2 titled Method and apparatus for generating a service oriented architecture policy based on a context model which was filed on 23 Nov. 2007 and which is hereby incorporated by reference. This application is a Continuation of U.S. application Ser. No. 12 268 553 filed on Nov. 11 2008 now U.S. Pat. No. 8 266 184.

The present invention relates to a Service Oriented Architecture SOA of a computer network system particularly to a method and apparatus of generating a context model for generating a SOA policy and a method and apparatus for generating a SOA policy based on the context model.

Service Oriented Architecture SOA is a software system architecture that is realized by connecting independent functional entities capable of completing specific tasks to meet requirements of business integration in an Internet environment. In other words the SOA is a component model that links different function units called services of an application through interfaces and contracts properly defined among these services wherein the definition of the interfaces is independent from the hardware platform operating system and programming language for realizing services. The SOA uses the service oriental modeling technique and WEB service technique to accomplish loose coupling between systems and thus realize integration and cooperation between the systems.

The SOA policy is an important component of the SOA system and is used for declarative description and execution of the SOA system behavior. In the SOA system the usage of the SOA policy spans different phases across the SOA lifecycle including design time validation deployment time policy publication and package and runtime service selection change management and impact analysis.

A main feature of SOA is that all the data and contexts are described in XML language and a document containing such data and the contexts is called a SOA metadata document. Generally the SOA metadata document can include a service metadata document for describing content relating to a service a runtime information document for describing content relating to the runtime information and a document for describing other business content. For example the service metadata document may use Web Service Description Language WSDL XML Schema Definition XSD Web Service Policy WS Policy Service Component Definition Language SCDL Business Process Execution Language BPEL Service Component Architecture SCA policy etc. The runtime information document may use Simple Object Access Protocol SOAP Representational State Transfer REST etc. The document for describing other business contents may use Service Data Object SDO Web Ontology Language OWL etc.

Several solutions for generating the SOA policy in the prior art will be briefly introduced as follows 

In general the business rule definition tools use a modeling language or a semi natural language to express the policies or rules. Additionally before the policies or rules are enforced they should be transformed into executable code such as Java .NET etc. Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both.

The business rule definition tools such as ILOG s JRule or Fair Isaac Blaze Advisor allow business analysts to author and manage the business rules representing business logic using structured English sentences and phrases compliant with Semantics of Business Vocabulary and Business Rules SBVR .

The policies or rules defined by the business rule definition tools are layered as different levels such as a business level platform independent level platform specific level etc. according to a complex model driven architecture.

WebSphere Business Modeler is a business process modeling tool provided by IBM Corporation and has a function of defining the business policies rules wherein the business rules can be inserted into the business process. However the tool is only in conceptual level and only generates an abstract rule framework and textual description.

WebSphere Integration Developer WID is an Eclipse based integrated development environment provided by IBM Corporation. It provides a development service for constructing and deploying standard based business process applications. With the WID tool a decision table and a rule object can be defined wherein the decision table is the simplest format for business rule definition and the rule object will be finally implemented in Java. So the flexibility of declarative policy is lost.

Web Ontology Language OWL is an ontology standard description language recommended by World Wide Web Consortium W3C . It is a conceptualization specification for one or more domains of knowledge related to specific industry including OWL Lite sublanguage OWL DL sublanguage and OWL Full sublanguage.

Semantics Web Rule Language SWRL is based on a combination of the OWL DL and OWL Lite sublanguages of the OWL with the Unitary Binary Datalog RuleML sublanguages of the Rule Markup Language RuleML . SWRL includes a high level abstract syntax for Horn like rules in both the OWL DL and OWL Lite sublanguages of the OWL. It provides model theoretic semantics to provide the formal meanings for OWL ontology of the policy rule written in this abstract syntax.

WebSphere Business Services Fabric WBSF is a tool provided by the IBM Corporation for supporting business domain service and service policy modeling development and runtime support. The tool provides a mechanism that provides a dynamic assembler with the acceptable rules for selecting service endpoints. The policy conceptually declares in IF condition THEN assertions format if the specified condition context and content is met then the specified contract in the form of combined assertions will be produced to match the capabilities defined in the available endpoints wherein these policies and policy assertions are expressed as the OWL elements.

SML is defined by IBM Microsoft BEA Intel etc. for XML based IT service management. It provides a rich set of constructs for describing models of complex IT services and systems. The SML model is a set of interrelated XML documents. The XML documents contain information about the parts of an IT service as well as the constraints which each part must satisfy for the IT service to function properly. The constraints can be described in two ways 

The XML Schema supports a number of built in grammar based constraints but it does not support a language for defining arbitrary rules for constraining the structures and contents of the documents. Schematron is an ISO standard for defining assertions concerning a set of XML documents. The SML uses a profile of the Schematron schema to add support for user defined constraints. The SML uses XPath 1.0 which is augmented with smlfn deref extension function as its constraint language. The user defined constraints can be specified using sch assert and sch report elements in the Schematron.

The Community Systems Management Open Source COSMOS resource modeling sub project is an open source project for SML modeling and aims to provide support for building a common model to represent the information shared in a system management scenario. The project is proposing to use SML as the XML schema language to define the common model. The Service Modeling Language Interchange Format SML IF will be used to share the model components between the tools involved in a system management activity.

However SML is only for validation of a XML document set and generate text reports. There is no powerful expression mechanism for an action part of the policy to describe and extend the system behavior. It is difficult for users to define the policy rule manually with SML especially for non IT users to define business related policy. In addition in both the specifications and the existing policy definition tools there is no linkage between SML and ontology.

Based on the above all the existing tools for defining the SOA policy have limitations. A new technical solution for generating a SOA policy is needed to solve the problems in the existing tools for defining the SOA policy.

The present invention is directed to the above technical problems and its objective is to provide a method and apparatus of generating a context model for generating a SOA policy which can extend knowledge domains for generating the policies. In addition the present invention also provides a method and apparatus for generating a SOA policy based on a context model which can keep the flexibility of declarative policy and improve the usability of policy generation. By using the present invention all types of SOA policies can be generated with semi natural language and the application domain knowledge of the SOA policy can be extended and the generated SOA policy can be enforced without complex ontology engine by generating the context module using the SOA metadata documents including the OWL documents. In addition the capability of describing policy behavior can be enhanced by using the action semantic modules customized by the user to generate the action part of the SOA policy. The SOA policy generated by using the present invention can comply with the standards completely and can be used repeatedly.

A first aspect of the present invention provides a method of generating a context model for generating a Service Oriented Architecture SOA policy which comprises collecting SOA metadata documents compliant with an application scope of the SOA policy establishing inter document references among the SOA metadata documents and aggregating the SOA metadata documents based on the inter document references to generate the context model.

A second aspect of the present invention provides a method of generating a Service Oriented Architecture SOA policy based on a context model which comprises generating an application scope of the SOA policy generating a context model by collecting SOA metadata documents compliant with an application scope of the SOA policy establishing inter document references among the SOA metadata documents and aggregating the SOA metadata documents based on the inter document references to generate the context model generating an action list for the context model based on action semantic modules customized by a user generating a condition part of the SOA policy generating an action part of the SOA policy according to the action list and combining the condition part and the action part of the SOA policy to generate the SOA policy.

A third aspect of the present invention provides an apparatus for generating a context model for generating a Service Oriented Architecture SOA policy which comprises a collector that collects SOA metadata documents compliant with an application scope of the SOA policy an inter document reference establishing module that establishes inter document references among the SOA metadata documents and an aggregator that aggregates the SOA metadata documents according to the inter document references to generate a context model.

A fourth aspect of the present invention provides an apparatus for generating a Service Oriented Architecture SOA policy based on a context model which comprises an application scope generating module that generates an application scope of the SOA policy an apparatus for generating a context model for generating a Service Oriented Architecture SOA policy which comprises a collector that collects SOA metadata documents compliant with an application scope of the SOA policy an inter document reference establishing module that establishes inter document references among the SOA metadata documents and an aggregator that aggregates the SOA metadata documents according to the inter document references to generate a context model an action list generator that generates an action list for the context model based on action semantic modules customized by a user a condition generator that generates a condition part of the SOA policy an action generator that generates an action part of the SOA policy according to the action list and a policy generator that combines the condition part and the action part to generate the SOA policy.

It is believed that the above and other objectives features and advantages of the present invention will become clearer through the following detailed description of the embodiments of the present invention in conjunction with the drawings.

As shown in at Step SOA metadata documents compliant with an application scope of the SOA policy are collected. As stated above the SOA metadata documents include service metadata documents runtime information documents or documents for describing other business contents such as OWL documents. In this embodiment the application scope of the policy is the domains to which the policy will be applied. The detailed content will be described later. According to the application scope of the SOA policy the related SOA metadata documents could be collected. Before these SOA metadata documents are collected a user can specify the eligible SOA metadata documents.

At Step the collected SOA metadata documents are processed i.e. inter document references among the SOA metadata documents are established. The XML schema does not support the inter document references. However this embodiment can extend the XML schema to build the references among the XML elements in the different SOA metadata documents for example add a new attribute or data type to illustrate the reference of one element to another element. In this embodiment the inter document references can be established by establishing a unique correspondence between a Uniform Resource Identifier URI of each SOA metadata document and a role that is taken by the SOA metadata document. Although there may be no relation between the collected SOA metadata documents for example the elements defined in the WSDL documents and the elements in the runtime SOAP message the inter document references of a root element of each document can be built by the operation of establishing the unique correspondence as stated above so that all the documents can be mutually referenced.

At Step the SOA metadata documents are aggregated according to the inter document references established in Step to generate a context model. The SOA metadata documents without inter document references are isolated from each other. After Step is performed all the SOA metadata documents with inter document references can form a context so that these SOA metadata documents can rely on each other and describe a context model for generating the policy.

In this embodiment the context model is represented as a XML document in the format of a document list. In the generated context model the URI the corresponding role and element representing the inter document reference of each SOA metadata document are listed.

In this example Document role represents the role taken by the document cm ref represents the inter document reference cm uri represents the URI of the document. In this way the context model includes four documents in which document 1 is External SampleService.wsdl whose role is role 0 document 2 is Internal SampleService.wsdl whose role is role 1 document 3 is RequesterSOAP1.xml whose role is role 2 and document 4 is SampleService.wsdl whose role is role 3. The references among these four documents are shown by cm ref true .

Of course those persons skilled in the art can understand that the context model can be based on the other executable languages which enable the SOA metadata documents to refer to each other and can describe the policies rules for validation of the structures and contents of the SOA metadata documents.

It can be seen from the above description that the method of generating a context model for generating a SOA policy can establish relations among the related SOA metadata documents and aggregate the SOA metadata documents according to a certain format to generate the context model thereby providing a basis of generating the SOA policy with a uniform format.

As stated above OWL is an ontology standard description language and describes relations between the objects with a predetermined format. OWL is developed based on XML. Compared with XML OWL can describe semantic information. An OWL document can be regarded as a XML document containing some business semantic information.

The basic components of OWL include class attribute and individual instance . The following is an example of an OWL document wherein some business terms are described for example Account Size Customer Type and Account Limit etc. In this example the class is represented as owl Class element.

Since the OWL document contains the business semantic information during the generation of the context model it is necessary to process the OWL document after collecting the related SOA metadata documents and before establishing the inter document reference of each SOA metadata document.

In this embodiment at Step it is checked whether there is at least one OWL document in the collected SOA metadata documents. If there is no OWL document Step is performed. If there exists the at least one OWL document at Step each of the at least one OWL document is parsed to obtain the OWL class in the OWL document i.e. defined by owl Class in the example of the OWL document. At Step based on the obtained OWL class the corresponding OWL individual is created. In the OWL the individual is the instance of the class. In this way the OWL individual can be obtained by instantiating the OWL class. At Step for each of the at least one OWL documents an ontology file which contains the OWL class and the corresponding OWL individual is generated. These ontology files as well as the non OWL documents in the SOA metadata documents will form the context model.

At Step the inter document references are established for the ontology files and the non OWL documents in the SOA metadata documents. At Step the ontology files and the non OWL documents in the SOA metadata documents are aggregated according to the inter document references to generate the context model.

It can be seen from the above description that the method of generating a context model for generating a SOA policy of this embodiment can further process the OWL documents describing the industry domains knowledge to extend the application domains knowledge of the SOA policy so that the more semantic and more complex policies can be generated.

Under the same inventive concept is a schematic block diagram showing an apparatus for generating a context model for generating a SOA policy according to one embodiment of the present invention. This embodiment will be described in detail as follows in conjunction with the figure wherein the descriptions of the portions that are same as those of the previous embodiments are omitted.

As shown in the apparatus for generating a context model for generating a SOA policy comprises a collector which collects SOA metadata documents compliant with an application scope of the SOA policy an inter document reference establishing module which establishes the inter document references among the SOA metadata documents collected by the collector and an aggregator which aggregates the SOA metadata documents according to the inter document references established by the inter document reference establishing module to generate a context model.

In this embodiment the collector collects the related SOA metadata documents according to the application scope of the SOA policy i.e. the domains to which the SOA policy is applied. Preferably these related SOA metadata documents can be specified by a user. Accordingly the apparatus for generating a context model of this embodiment can further comprise a specifying module that allows the user to specify the SOA metadata documents compliant with the application scope of the SOA policy. The specifying module can be implemented by providing an interaction interface to the user.

Then the collector collects these SOA metadata documents together. The collected SOA metadata documents are provided to the inter document reference establishing module in which the inter document references are established. In this embodiment the inter document reference establishing module can comprise a correspondence establishing unit which establishes a unique correspondence between the URI of each of the SOA metadata documents and the role taken by the SOA metadata document. The role of the SOA metadata document shows the function that the document has in the context model and provides the element for generating the policy. The inter document reference of the root element of each SOA metadata document can be established by establishing the unique correspondence. In addition other elements in the SOA metadata document can use the relative paths to the root element to describe their locations. In this way the mutual references among the elements in the SOA metadata document can be established so that the SOA metadata documents can be mutually referenced.

Then the aggregator aggregates the SOA metadata documents as the context model according to the established inter document references. In this embodiment the context model is represented as a XML document in the format of document list. In the generated context model the URI and the corresponding role of each SOA metadata document are listed.

Returning to the apparatus of generating a context model for generating a SOA policy of this embodiment also comprises a checking module which checks whether there is at least one OWL document in the SOA metadata documents collected by the collector an OWL parser which parses the at least one OWL document to obtain the OWL class of each of the at least one OWL document an OWL individual creator which creates a corresponding OWL individual according to the OWL class obtained by the OWL parser and an ontology file generator which generates an ontology file containing the OWL class and the corresponding OWL individual for each of the at least one OWL document.

In this way each OWL document is processed by the OWL parser the OWL individual creator and the ontology file generator to obtain the corresponding ontology file.

These ontology files are used to generate the context model together with the non OWL documents in the SOA metadata documents. In this embodiment the ontology files and the non OWL documents in the SOA metadata documents are provided to the inter document reference establishing module to establish the inter document references and then the aggregator aggregates the non OWL documents in the SOA metadata documents and the ontology files according to the established inter document references to generate the context model.

It should be noticed that the apparatus for generating a context model for generating a SOA policy and its components can be implemented by a hardware circuit such as Very Large Scale Integrated Circuit or gate array a semiconductor such as logic chips and transistors a programmable hardware device such as field programmable gate array a programmable logic device by software executed on various types of processors or by a combination of above hardware circuit and software. Also the apparatus for generating a context model for generating a SOA policy of this embodiment may operationally realize the method of generating a context model for generating a SOA policy of the embodiment shown in .

It can be seen from the above description that the apparatus for generating a context model for generating a SOA policy of this embodiment can establish relations among the related SOA metadata documents and aggregate them as the context model thereby providing a basis of generating the SOA policy with a uniform format. In addition the apparatus for generating a context model for generating a SOA policy of this embodiment can further process the OWL documents describing the industry domain knowledge to extend the application domain knowledge of the SOA policy so that the more semantic and more complex SOA policies can be generated.

Under the same inventive concept is a flowchart of a method of generating a SOA policy based on a context model according to one embodiment of the present invention wherein the descriptions of the portions that are the same as those of the previous embodiments are omitted. This embodiment will be described in detail as follows in conjunction with the figure.

As shown in at Step an application scope of the SOA policy to be generated is generated. As stated above the application scope of the SOA policy is the domains to which the SOA policy will be applied. The application scope of the SOA policy can be the type of the SOA policy i.e. the SOA policy can be a business policy application policy or governance policy. Also the application scope of the SOA policy can be the application scenario to which the SOA policy is applied for example account management etc. Also the application scope of the SOA policy can be combination of the policy type and the application scenario.

At Step according to the generated application scope of the SOA policy the SOA metadata documents compliant with the application scope of the SOA policy are aggregated as the context model by using the method of generating a context model for generating a SOA policy of the embodiments shown in or . In this embodiment XML is selected to implement the context model.

At Step an action list for the context model generated in Step is generated based on action semantic modules customized by a user.

In this embodiment the user can customize the required action semantic modules. These action semantic modules could be in any format. However for the action semantic modules in non XML format corresponding XML description files should be provided. The XML description file describes information about formats interfaces and invoking modes of the action semantic module. The user can store the customized action semantic modules in a specific location. The action semantics of the policy can be extended through the customization of the action semantic modules by the user.

Then the action semantic modules and their XML description files are obtained and the XML description files are read to obtain the related information of the action semantic modules. With the related information the action semantic modules are introduced into the action list.

After the context model and the corresponding action list are built at Step a condition part of the SOA policy is generated according to the structures and contents of the SOA metadata documents in the context model to construct the environment in which some actions are to be enforced. Generally the condition part is expressed as a logic expression or the composition of logic expressions. For example the logic expression as the condition part may be shown as follows 

In this embodiment condition terms and the relations among the conditions terms such as inheritance relation association relation etc. are extracted from the SOA metadata documents in the context model. These condition terms are candidates for Left Term and Right Term of the condition part. In addition the Right Term could be a value. Then these condition terms are displayed and the user selects the required condition terms and operators to construct the condition part.

At Step an action part of the SOA policy is generated according to the action list generated in Step . In this embodiment all the action semantic modules in the action list are displayed. The user can select the required action semantic modules according to the condition part of the policy and set parameters in the action semantic modules thus the action part is generated. The action part can be expressed as a formatted string or an executable framework to invoke the action semantic module.

Finally at Step the condition part and the action part generated in Steps and respectively are combined to generate the SOA policy. The generated SOA policy is a condition action policy in which the condition part represents the matching criteria of the structures and contents of the SOA metadata documents in the context model and the action part has the extendable action semantics. For example if the context model uses the XML syntax the SOA policy can use Schematron as the basic syntax.

In addition the method of generating a SOA policy based on a context model of this embodiment further comprises generating a context model template that includes the context model generated in Step and the SOA metadata documents in the context model. Further the context model template and the generated SOA policy are registered in a Policy Registry Repository of a SOA system for future policy enforcement.

Next an example of a supply chain ontology OWL document and runtime metadata and an example of the generated SOA policy are given.

The above example is an OWL document describing the business terms such as CustomerType Discount etc. wherein the OWL classes include CustomerType and Discount and the data type attribute of the CustomerType class is hasLiteralValue the CustomerType class and the Discount class have the object attribute hasDiscount and the data type attribute of the Discount class is hasDecimalValue .

The OWL individual defining the instance of different customer type and its discount is shown as follows. The OWL individual indicates that the Discount is 0.66 when the CustomerType is GOLDEN the Discount is 0.77 when the CustomerType is SILVER and the Discount is 0.88 when the CustomerType is BRONZE .

The following XML document is the runtime metadata that covers the customer information such as customer type customerType and customer name customerName .

The following XML document is the runtime metadata for defining the discount information according to the dynamic customer type.

The above OWL class OWL ontology and XML documents are aggregated as the context model. The following policy can be constructed based on the business semantics of the ontology terms wherein the condition part and the action part are shown in bold respectively and the action semantic module is value assignment action. The semantics of the policy describes that different discount value is assigned according to the customer type from the dynamic runtime context.

It can be seen from the above description that the method of generating a SOA policy based on a context model can generate all types of SOA policies with semi natural language and extend application domain knowledge of the SOA policy by extracting the condition terms for generating the SOA policy from the SOA metadata documents. This embodiment enables the generated SOA policy to be enforced without a complex ontology engine by processing the OWL documents. In addition the capability of describing the policy behavior can be enhanced by using the action semantic modules customized by the user to generate the action part of the SOA policy. The SOA policy generated using the method of this embodiment is compliant with the standards completely and can be used repeatedly.

Under the same inventive concept is a schematic block diagram showing an apparatus for generating a SOA policy based on a context model according to one embodiment of the present invention wherein the descriptions of the portions which are same as those of the previous embodiment are omitted properly. This embodiment will be described in detail as follows in conjunction with the figure.

As shown in the apparatus for generating a SOA policy based on a context model comprises an application scope generating module which generates an application scope of the SOA policy the apparatus for generating a context model for generating a SOA policy as shown in which generates the context model according to the application scope generated by the application scope generating module an action list generator which generates an action list for the context model based on action semantic modules customized by a user a condition generator which generates a condition part of the SOA policy according to the generated context model an action generator which generates an action part of the SOA policy according to the generated action list and a policy generator which combines the condition part and the action part of the SOA policy to generate the SOA policy.

In this embodiment the user who needs to generate a SOA policy uses the application scope generating module to generate the application scope of the SOA policy which includes the policy type and or application scenario. The application scope generating module can be implemented as a user interaction interface. Then the corresponding context model is generated in the apparatus for generating the context model according to the generated application scope of the SOA policy.

Then the user customizes the corresponding action semantic modules according to the requirements. As stated above the action semantic module can be in any format. For an action semantic module in non XML format the corresponding XML description file should be provided. The XML description file describes the related information of the action semantic module such as formats interfaces and invoking modes etc. The action semantic modules customized by the user can be stored into a specific location. Then the action list generator generates an action list according to the action semantic modules. In this embodiment in the action list generator first an obtaining unit obtains the customized action semantic modules and their XML description files then a reading unit reads the XML description files to obtain the related information and an introducing unit introduces the action semantic modules into the action list according to the information to generate the action list.

According to the generated context model the condition generator generates the condition part of the SOA policy. As stated above the condition part can be expressed as a logic expression or a composition of the logic expressions. In this embodiment in the condition generator an extracting unit extracts the condition terms and the relations between the conditions terms such as inheritance relation association relation etc. from the SOA metadata documents in the context model. The condition terms are candidates for items at the two sides of the operators in the logic expression and the items at the right side of the operators can be values. Then the condition terms are displayed in a condition term displaying unit so that the user can use the selecting unit to select the required condition terms and operators to generate the condition part of the SOA policy.

Returning to after the condition generator generates the condition part of the SOA policy the action generator generates the corresponding action part of the SOA policy according to the action list. In this embodiment in the action generator a module displaying unit displays all the action semantic modules in the action list. Then the user uses a module selecting unit to select the required action semantic modules and sets the parameters in the action semantic modules by a parameter setting unit.

Returning to the apparatus for generating a SOA policy based on a context model of this embodiment can also include a template generator which generates a context model template including the context model and the SOA metadata documents. The context model template and the generated SOA policy are registered in the Policy Registry Repository of the SOA system for future policy enforcement.

It should be noticed that the apparatus for generating a SOA policy based on a context model and its components can be implemented by a hardware circuit such as Very Large Scale Integrated Circuit or gate array a semiconductor such as logic chips and transistors a programmable hardware device such as a field programmable gate array a programmable logic device by software executed on various types of processors or by a combination of the above hardware circuit and software. Also the apparatus for generating a SOA policy based on a context model of this embodiment may operationally realize the method for generating a SOA policy based on a context model of the embodiment shown in .

The apparatus for generating a SOA policy based on a context model of this embodiment can be plugged into the existing SOA application assembly development environment.

Although the method and apparatus for generating a context model for generating a SOA policy and the method and apparatus for generating a SOA policy based on a context model are described in detail in conjunction with the preferred embodiment the present invention is not limited as above. It should be understood for persons skilled in the art that the above embodiments may be varied replaced or modified without departing from the spirit and the scope of the present invention.

