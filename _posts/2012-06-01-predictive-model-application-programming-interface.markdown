---

title: Predictive model application programming interface
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for utilizing predictive models from an application scripting language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09020861&OS=09020861&RS=09020861
owner: Google Inc.
number: 09020861
owner_city: Mountain View
owner_country: US
publication_date: 20120601
---
This application is a continuation of and claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 13 250 394 filed on Sep. 30 2011 which is incorporated here by reference in its entirety. This application claims the benefit under 35 U.S.C. 119 e of the filing date of U.S. Patent Application No. 61 483 573 filed on May 6 2011 which is incorporated here by reference in its entirety.

Predictive modeling generally refers to techniques for extracting information from data to build a model that can predict an output from a given input. Predicting an output can include predicting future trends or behavior patterns or performing sentiment analysis to name a few examples. Various types of predictive models can be used to analyze data and generate predictive outputs. Examples of predictive models include Naive Bayes classifiers k nearest neighbor classifiers support vector machines and logistic regression techniques for example. Typically a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output respectively. The amount of training data that may be required to train a predictive model can be large e.g. in the order of gigabytes or terabytes. The number of different types of predictive models available is extensive and different models behave differently depending on the type of input data. Additionally a particular type of predictive model can be made to behave differently for example by adjusting the hyper parameters or via feature induction or selection.

In various implementations a prediction model application programming language interface API accessible through an application scripting language allows users to programmatically train and or use predictive models within software applications such as for instance spreadsheets calendars electronic mail e mail and word processors. For example a script executed by an e mail application can invoke a predictive model to predict whether an incoming e mail message is SPAM. As a further example a script executed by a spreadsheet can provide the value of a spreadsheet cell as input to a predictive model and then present the output of the predictive model in another spreadsheet cell.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of presenting a graphical user interface of a web application on a client device wherein the graphical user interface presents multiple cells in a matrix of cells wherein each cell of the multiple cells is an interactive element executing a first script found in a first cell of the multiple cells the first script invoking i a first model of a plurality of predictive models using data of a first plurality of the cells to train the first model and ii a second model of the plurality of predictive models using the data of the first plurality of the cells to train the second model and executing a second script found in a second cell of the multiple cells the second script invoking i the trained first model with data from a second plurality of cells as input and using output from the trained first model to determine a value of a third cell in the matrix of cells and ii the trained second model with data from the second plurality of cells as input and using output from the trained second model to determine a value of a fourth cell in the matrix of cells.

Other embodiments of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other embodiments can each optionally include one or more of the following features alone or in combination.

The output from the trained first model is a prediction by the trained first model that is based on the data from the second plurality of cells. The output from the trained second model is a prediction by the trained second model that is based on the data from the second plurality of cells. The method further includes executing the first script in response to an explicit user invocation. The method further includes executing the second script in response to detection of web application activity. The first script further invokes i the first model using data from one or more web application files to train the first model and ii the second model using the data from one or more web application files to train the second model. A portion of the execution of the first script and the second script occurs at a same time. The method further includes receiving the first script the second script or both from the client device. The method further includes executing the first script the second script or both on the client device.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Predictive models can be trained and queried from within web applications through the execution of web application scripts. Model training data can be culled from web application data files. Model predictions can be utilized within web applications and stored in web application data files. Scripts can be executed in parallel along with web applications and other computer programs. Interactive data fields in the graphical user interfaces of web applications can be used as the source of training data or prediction queries and can also be used to hold or process the output of model predictions.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

A web application is software that executes on one or more server computing devices or servers and that is accessed over a network such as the Internet by users through web browsers or other software that runs on client computing devices or clients . User data files that are created accessed or modified by web applications are stored in repositories that are accessible to the servers. Web applications can provide a graphical user interface GUI to client devices by sending the client devices Hypertext Markup Language HTML documents or other information that can be used to render the GUIs. A scripting language allows users to control some or all aspects of web applications that recognize scripts written in the scripting language. The scripting language is a computer programming language. A script is a set of instructions that are written in the scripting language. In some implementations the scripting language is JAVASCRIPT. Other scripting languages are possible including functional and procedural programming languages. A script can be executed entirely on a client entirely on a server or on both the client and the server. In some implementations scripts are executed on one or more servers. Script execution can be initiated through explicit user invocation e.g. selecting an interactive button in a GUI or through web application activity e.g. a spreadsheet web application that recalculates the value of a spreadsheet cell invokes a script that is referenced in a formula for the cell. 

In some implementations the scripting language or a software library accessible from the scripting language provides a set of programmatic objects whose methods can be invoked in scripts to access functionality of web applications such as spreadsheets word processors email financial tools calendars and maps for example. Alternatively the functionality can be accessed through function or procedure calls rather than through method invocations. By way of illustration an object that represents a spreadsheet web application can have methods for reading writing and creating spreadsheet data files performing calculations on information in spreadsheet cells and manipulating the spreadsheet GUI such as for instance by opening dialog boxes. Likewise an object that represents an email web application can have methods for retrieving new email messages sending email messages moving email messages to data files and directories and so on. In addition to accessing web application functionality in scripts a prediction API is provided to allow scripts to programmatically train and or use predictive models or models . The prediction API allows users to upload training data from web application data files or from other sources of data and use the uploaded data to train a model. A model that has been trained using uploaded data or a previously trained model can be invoked by scripts to obtain predictions for queries. In various implementations a prediction is either a numeric value or a categorization of a query.

The GUI presents multiple cells e.g. cells and in a two dimensional matrix consisting of rows and columns. A cell is an interactive field that can accept user input such as a formula and present an output value such as alphanumeric text or a numeric value for example. A formula defines how the content of a cell is calculated e.g. from the contents of one or more cells in the matrix or other information . As mentioned above a formula can invoke a script which can in turn invoke functionality of the prediction API to train a predictive model from data in cells or calculate the value of cells using predictions from a model. The prediction API is described further below. 

For example the cells in range can be submitted as training data to train a model using the prediction API in a script. In various implementations a model is either categorical if its predictions are categories or regression if its predictions are numeric . Training data comprises examples that each comprise one or more data values plus an answer a category or a value for that example. By way of illustration the training data in TABLE 1 consists of examples that are email message subject lines and a category that indicates whether each example represents SPAM or not.

After a model has been trained against training data queries can be submitted to the model. In some implementations queries are similar in form to training examples that is a query has the same data values but does not include the answer. The trained model uses patterns that it learned from the training data to either find the closest category for the submitted query if it is a categorical model or estimate a value for the query if it is a regression model and returns the category or value.

Scripts are executed by a script engine . The script engine is invoked by the web application or other application when a script needs to be processed such as in the example of a spreadsheet when the spreadsheet requires the script to be executed in order to determine the value of a spreadsheet cell. The script engine is a computer program that interprets or executes scripts. In some implementations the script engine is a JAVASCRIPT interpreter. The script engine can translate or compile scripts to an intermediate language or to a machine language before executing them. Other types of script engines are possible. Scripts that utilize functionality of the prediction API can communicate with one or more models in order to train the models and or invoke the models to make predictions.

By way of further illustration cell in the spreadsheet GUI can have a formula which invokes the following script 

The first line of the above script written in JAVASCRIPT creates an object ss that represents the active spreadsheet in a web application i.e. the spreadsheet that currently has input focus . The second line of the script obtains a sheet object sheet that represents the active sheet within the active spreadsheet. Scripts reference interactive fields of graphical user interfaces by reading or writing values of the fields. The third line obtains the value e.g. text or a number of the D cell from the active sheet and places it in variable myValue . Next in the fourth line of the script the value of cell D is sent as a query to a model referred to as Mike s Model . A script references a model by providing an input parameter to a prediction API function that identifies the model or a location of training data for the model. The prediction of the model is placed in the result variable which then provides the value of spreadsheet cell D in the fifth line of the script.

TABLE 2 below shows an example set of prediction API functions. The prediction API functionality can be exposed in scripts as methods functions procedure calls or macros.

A single script can invoke the prediction API functions for multiple models. For example a script can use one model to determine that an email message is not spam and use another model to determine the sentiment of the email message.

A given server comprises one or more data processing apparatus. The servers can communicate with each other and with storage systems e.g. application data storage system and training data storage system at various times using one or more computer networks or other communication means. For example the servers in the data center can be coupled to an intranet. A computer program can execute on a single server or alternatively the program can be organized into components that execute on multiple servers. There can be more than one instance or copy of a given computer program executing on the collection of servers at any given time. Multiple copies of a computer program that implements the script engine for instance can be executing at the same time on one or more servers providing script execution for different web applications . Scripts can be executed in parallel by the script engines . Two scripts are executed in parallel if they are executed on different servers and if at least a portion of their execution occurs at the same time. For example assume that script A is executed by a script engine executing on server S and script B is executed by a script engine executing on server S. If some period of time exists where script A and B are both being executed then the scripts are executed in parallel.

As an illustration and with reference to client can interact with web application . In order to execute a script the web application invokes a script engine . The script engine is a separate computer program or in some implementations is part of the computer program that makes up the web application . In either case the script engine is provided with the script or a memory location of the script . The web application and the script engine can communicate through method invocation shared memory network communication or other means of inter or intra process communication. The script engine includes a script language execution engine a web application API a prediction API and optionally other APIs . Scripts can contain references to interactive fields of web applications as input parameters to the web application API methods. Scripts can also contain references to predictive models as input parameters to the prediction API functions. The script language execution engine interprets or executes the script . In some implementations the execution engine is a JAVASCRIPT interpreter. The web application API exposes functionality through objects methods or functions that allow scripts to utilize functionality of web applications and access application data such as user data files.

The prediction API exposes functionality through objects methods or functions that allow scripts to query models and train models using training data obtained from application data . In some implementations models are trained by a training system which receives requests from the prediction API to initiate training and check the status of training. The prediction API provides the training system with the location of training data to be used in training a particular model. For example the training data such as a range of cells in a spreadsheet can be obtained from the application data through use of the web application API and then provided to the training system through use of the prediction API .

Other APIs can include for instance an API that allows scripts to communicate over computer networks using Transmission Control Protocol Internet Protocol TCP IP and an authentication API which provides a mechanism for authorizing a script s request to access a user s application data models and training data through the web application API and the prediction API . In some implementations the web application or the script engine requests access permission from an authorization server. The authorization server is responsible for prompting the user e.g. user for permission to grant access to the required data if necessary. If permission is granted the authorization server returns a token that can be shared with the web application the web application API and the prediction API in order to access the required data. Other authorization mechanisms are possible.

The server also includes hardware or firmware devices including one or more processors one or more additional devices a computer readable medium a communication interface and one or more user interface devices . Each processor is capable of processing instructions for execution within the server . In some implementations the processor is a single or multi threaded processor. Each processor is capable of processing instructions stored on the computer readable medium or on a storage device such as one of the additional devices . The server uses its communication interface to communicate with one or more computers for example over a network . Examples of user interface devices include a display a camera a speaker a microphone a tactile feedback device a keyboard and a mouse. The server can store instructions that implement operations associated with the modules described above for example on the computer readable medium or one or more additional devices for example one or more of a floppy disk device a hard disk device an optical disk device or a tape device.

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language resource in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending resources to and receiving resources from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

