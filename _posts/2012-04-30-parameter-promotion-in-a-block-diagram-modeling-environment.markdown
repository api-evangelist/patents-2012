---

title: Parameter promotion in a block diagram modeling environment
abstract: A computational device receives, from a user, a selection of a block, a subsystem or multiple blocks from a block diagram modeling environment, and presents, to the user, a set of parameters associated with the block, subsystem, or multiple blocks. The computational device receives, from the user, selection of a first subset of parameters from the set of parameters, and creates a customized dialog box by promoting the selected first subset of parameters to the customized dialog box, wherein the customized dialog box permits editing of values associated only with the first subset of parameters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058175&OS=09058175&RS=09058175
owner: The MathWorks, Inc.
number: 09058175
owner_city: Natick
owner_country: US
publication_date: 20120430
---
This application claims priority from provisional application No. 61 494 213 filed Jun. 7 2011 the disclosure of which is incorporated by reference herein in its entirety.

Simulink from The MathWorks Inc. of Natick Mass. is an example of a graphical modeling environment specifically a block diagram environment. Simulink allows users to create a pictorial model of a dynamic system. Models generated in Simulink consist of a set of symbols called blocks. Each block can have zero or more input ports output ports and states. Each block represents a dynamic system whose inputs states and outputs can change continuously and or discretely at specific points in time. Since each block is a dynamic system it is represented by a set of equations. The lines are used to connect the blocks ports to one another and represent time varying quantities used by the block s equations.

A block is referred to as atomic if its functional definition is outside the context of the model in which it is placed. Simulink has a set of predefined atomic blocks e.g. Sum Product Gain and the user can also create their own atomic blocks through user written S functions . Being atomic S functions functional definitions are specified outside the context of the model for example using C code or MATLAB m code. A composite block is a block whose functional definition is specified through the model using sets of atomic and composite blocks. Simulink permits the user to specify subsystems composite blocks whose definition consists of interconnected sets of predefined blocks user written S functions and other Simulink subsystems. Subsystems can be nested hierarchically defining a model hierarchy. 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following detailed description does not limit the invention.

Block diagram models consisting of one or more blocks are utilized in a variety of modeling paradigms and application contexts in engineering and science. A block can include elements from which models can be built and contains fields called block parameters which can be used to enter values that customize the behavior of the block. In modeling paradigms reusable components for design can be packaged in groups e.g. groups of blocks and provided to build more complex systems. A subsystem block can include a set of blocks that have been replaced by a single block called a subsystem block. As a model increases in size and complexity the model can be simplified by grouping blocks into subsystems. Often component designers abstract out the complexity of such complex systems from the end user by providing a simplified external interface.

In doing so component designers need a mechanism to ensure that certain artifacts of these reusable components can be abstracted out and be controlled by an external interface. Also in certain cases component designers may feel the need to fix or limit some of the options available in the complex systems thereby preventing such options from being visible to or selectable by the end user. This allows component designers to enforce pre configured sets of rules. Traditionally the designs to achieve this desired behavior and flexibility suffer from drawbacks in syntactic clarity run time performance added complexity and poor error checking resulting in a loosely integrated system.

A complex system communicates with different reusable components packaged inside the complex system using parameters controlling those reusable components. This can require the ability to control multiple parameters from multiple reusable components at different levels e.g. hierarchical levels inside of a complex system using a single point of control. It may also require the ability to choose and move parameters that are modifiable by the end user in the system hierarchy.

Exemplary embodiments described herein overcome these and possibly other drawbacks of conventional approaches and allow component and system designers to build interfaces to those systems with a finer flexible syntactically better and automated approach.

While building complex systems component designers often abstract out the complexity of these systems by providing a simplified external interface. Masking may be used to provide such a custom user interface. A mask can be a customer user interface e.g. a dialog for a block e.g. a Simulink block . The mask hides the native user interface of the underlying block substituting an icon and a parameters dialog box defined by the mask. Using masks the component designer can provide interface customization logic encapsulation and data hiding or obfuscation. The component designer can specify mask parameters which can provide an external user interface allowing users to communicate with different reusable components wrapped under the mask.

Parameter promotion can introduce a new mask parameter type referred to as promote which component designers can use to promote parameters from different levels inside of a complex system to that mask parameter. This mask parameter in turn controls the parameters associated with it. Setting the value of the mask parameter also sets the value of all the associated promoted parameters.

The mask parameter of promote type itself can be promoted thereby allowing building a complex nested chain of promoted parameters. This provides greater flexibility to the component designer while assimilating different reusable components to build a complex system. Once the parameter is promoted any direct edit of the parameter s value may be disallowed. The parameter may in some implementations only be set via the mask parameter to which this parameter is promoted.

The mask parameter of promote type also inherits various key properties from the associated promoted parameters. This helps the component designer in building a highly integrated interface. It also ensures that if some of these properties of the promoted parameters are changed in the future version the mask parameter will inherit them providing auto update functionality with minimal to no overhead on the part of the component designer.

The mask editor may be the user interface that allows the component designer to define the mask. Using the mask editor the component designer may be presented with a tree view of all the valid blocks inside the components whose parameters can be promoted. Each of these blocks may show all of the valid parameters which the component designer can choose to promote. The component designer can decide to promote multiple parameters to a single mask parameter provided they satisfy all the rules for multiple parameters to be promoted together. Appropriate error checking is done to ensure that only valid parameters can be coupled together thereby ensuring the sanity of the external interface.

Block author may use a mask editor dialog and a promoted parameter selector dialog to promote a set of selected mask parameters from built in block parameters to a custom masked block . A built in block and its corresponding built in parameters represent a standardized block and its associated parameters that were previously created and stored in memory for use in modeling a system or subsystem. The promoted set of mask parameters represent a portion e.g. a subset of the built in parameters from the original block that may be editable by an eventual block user when creating a customized masked block that can be used in a block model diagram. Thus promoting a built in parameter for a block to a mask parameter includes block author selecting what block specific parameters of custom masked block may be editable by an eventual block user when customizing the masked block for use in a block model diagram. In some implementations block author may add custom information to custom masked block e.g. company notes custom parameters etc. . Custom masked block may further include other block parameters that were not promoted to custom masked block i.e. other built in block parameters of block .

As shown in custom masked block may be subsequently stored in a block library for future retrieval and use by a block user . Block user may retrieve custom masked block from block library via a custom mask dialog that may present the promoted mask parameters i.e. the specific promoted block parameters that may be edited to block user for editing their values. Custom masked block with promoted and or edited mask parameters may be used by block user in a block model diagram to model a system or subsystem. Custom mask dialog may be realized as a non modal or modal window separate from other windows or it can be a region of an existing window or other graphical interface.

Promotion of block parameters to a mask can provide the block author e.g. block author the ability to choose a valid parameter from any block and move it up in the model hierarchy. Promotion of block parameters to a mask further gives the block author the ability to control multiple parameters at any level in the model hierarchy via a single parameter and to lock down a parameter that the block author does not want to expose to block users. Promotion of block parameters to a mask further allows the building of a nested chain of promoted parameters inside complex system models.

The block user can configure the custom block using the custom mask dialog or the block user can configure the custom block parameters defined using a textual programmatic Application Programming Interface API not shown which lets block user programmatically set the promoted parameters and possibly additional other parameters e.g. other block parameters using an API which accepts the parameter names and values. An example API using the MATLAB programming language would be set param argument 1 argument 2 argument 3 

where the first argument for setparam may either be a string or handle to the custom masked block the second argument may be the name of the promoted mask parameter or the additional other parameter s and the third argument may be the value for the parameter.

Promotion of parameters simplifies the construction of new blocks from existing blocks by re using existing parameter elements. Prior to the invention of promoted parameters development of a custom block dialog required creating a new parameter and associating it with an existing parameter. Having to create new parameters and form the association takes more steps and is error prone. For example when creating new parameters and associating them with existing parameters it is very easy to make mistakes where the properties of the new parameter are not identical to the associated parameter. The use of promoted parameters both simplifies the creation of new custom block dialogs and eliminates common failure modes.

Clients through n may include devices such as a computer e.g. desktop laptop palmtop or tablet computer a wireless telephone a personal digital assistant PDA a lap top or another type of computation or communication device a thread or process running on one of these devices and or an object executable by one of these devices. Block author may use for example server to generate one or more custom masked blocks for storage in block library . Block users not shown in may further use respective clients through n for retrieving the generated custom masked blocks from block library and using the custom masked blocks in block diagram models for modeling systems or subsystems.

Server may include one or more devices capable of executing instructions to perform an operation. Server may include for example a computer a wireless device a lap top or another type of computation or communication device a thread or process running on one of these devices and or an object executable by one of these devices.

Network s may include one or more networks of any type including a local area network LAN a wide area network WAN a metropolitan area network MAN a satellite network a telephone network such as the Public Switched Telephone Network PSTN or a Public Land Mobile Network PLMN an intranet the Internet or a combination of networks. The PLMN s may further include a packet switched sub network such as for example General Packet Radio Service GPRS Cellular Digital Packet Data CDPD or Mobile IP sub network.

Processing unit may include one or more processors or microprocessors or processing logic that may interpret and execute instructions. Main memory may include a random access memory RAM or another type of dynamic storage device that may store information and instructions for execution by processing unit . ROM may include a ROM device or another type of static storage device that may store static information and instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits an operator e.g. block author to input information to server such as a keyboard a mouse a pen voice recognition and or biometric mechanisms etc. Output device may include a mechanism that outputs information to the operator including a display a printer a speaker etc. Communication interface may include any transceiver that enables server to communicate with other devices and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network such as network s .

Server consistent with the embodiments described herein may perform certain operations or processes as will be described below. Server may perform these operations in response to processing unit executing software instructions contained in a computer readable medium such as memory . A computer readable medium may be defined as a physical or logical memory device.

The software instructions may be read into memory from another computer readable medium such as data storage device or from another device via communication interface . The software instructions contained in memory may cause processing unit to perform operations or processes that will be described later. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement embodiments described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

TCE may include any hardware and or software based logic that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. In one implementation TCE may include a dynamically typed programming language e.g. the M language that can be used to express problems and or solutions in mathematical notations. For example one or more languages provided in TCE may use an array as a basic element where the array may not require dimensioning. TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel programming etc. . In another implementation TCE may provide these functions as block sets. In still another implementation TCE may provide these functions in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. the MATLAB programming language from The MathWorks Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim Ptolemy from the University of California at Berkeley etc. a graphically based environment e.g. Simulink Stateflow SimEvents etc. by The MathWorks Inc. VisSim by Visual Solutions LabViewt by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

GUI may include any type of graphical interface that may receive user input for generating and or using custom masked blocks. GUI may present mask editor dialogs promoted parameter selector dialogs and custom mask dialogs. Block library may include a library of blocks including built in blocks and custom masked blocks and their associated parameters. Block library may be accessed to retrieve built in blocks or custom masked blocks.

Client may in some implementations include the same or similar functional components as those shown in . In some implementations server or client may include fewer different or additional functional components than those depicted in .

The exemplary process may include receiving selection of a block subsystem or multiple blocks from a block diagram modeling environment block . Block author may select either a single block a subsystem i.e. comprising multiple blocks arranged in a single subsystem or multiple blocks e.g. multiple related or interconnected blocks . As models grow in size and complexity the component designer can simplify the model by grouping blocks into subsystems. A subsystem may include a set of underlying blocks that has been graphically replaced by a single block called a subsystem block. A subsystem block reduces the number of blocks displayed in a block diagram window and enables the component designer to establish a hierarchical block diagram where the subsystem block is in one layer of the block diagram and child blocks that make up the subsystem are in another layer of the subsystem block. In some embodiments a subsystem can include two or more layers of child blocks arranged in hierarchies within the subsystem. To abstract the complexity of child blocks of a subsystem block the component designer may create a mask to the subsystem which acts as a user interface that allows block users to communicate with child blocks. The component designer may promote necessary child block parameters to the subsystem mask including promoting multiple child block parameters to a single mask that can control the multiple child block parameters.

Large models may contain thousands of blocks and the component designer may promote parameters from multiple blocks within the model that may not be in a subsystem. The multiple blocks may be in a same hierarchy and a multi block mask may be created that promotes block parameters of selected blocks to the mask. Setting the mask may automatically set the block parameters.

A mask editor dialog may be presented block and a parameter promotion selection may be received from the mask editor block . The mask editor dialog may permit block author to promote all built in block parameters to the mask in a single click. The mask editor dialog may also permit block author to promote selected block parameters to the mask. depicts a mask editor that may be presented to block author in response to selection of the create mask option in block . Block author may select a button that promotes all of the built in block parameters to the mask. Block author may alternatively select a button that permits the promotion of selected parameters to the mask via a promoted parameter selector dialog.

A parameter promotion selection dialog may be presented block and selection of parameters for promotion may be received via the parameter promotion dialog block . depicts a promoted parameter selector dialog presented to block author in response to selection of button from mask editor . Promoted parameter selector dialog permits block author to select one or more blocks and their associated parameters for promotion to the mask. For example as shown in promoted parameter selector may include a block field that displays a list of blocks that may be selected for promotion to the mask. In the example of only a single block e.g. Gain has been selected for promotion to the mask. Promoted parameter selector may further include a promotable parameters field that displays a list of parameters for the block selected in field . Block author may select one or more parameters from field for promotion to the mask. Promoted parameter selector may further include a promoted parameters field that displays a list of parameters promoted to the mask by block author from list . depicts another example in which a block diagram includes a subsystem block having multiple child blocks. depicts a second block diagram that includes the multiple child blocks and of subsystem block . As further shown in Block author may select multiple child blocks from child blocks field of a promoted parameter selector dialog and then may further select one or more parameters for promotion from promotable parameters field of promoted parameter selector dialog for each selected child block. Therefore multiple promoted parameters of child blocks of a subsystem may be controlled via a single custom masked block. In some implementations the block author may add custom information to the custom masked block e.g. company notes custom parameters etc. .

A custom masked block may be generated based on the promoted parameters block . The custom masked block may specify the parameters of the underlying built in block or blocks that have been selected for promotion. The promoted parameters may represent the parameters of the custom masked block that may be exposed to block user for editing of the parameter values. The generated custom masked block may be stored in a block library block . Upon completion of parameter promotion selection and generation of the custom masked block the custom masked block may be stored in block library for future retrieval by block user .

The exemplary process may include receiving selection of a custom masked block block . Block user at for example client may select a custom masked block previously generated by library block author from storage in block library . A custom mask dialog for the custom masked block may be presented block . The custom mask dialog may expose only the promoted parameters of the selected custom masked block for editing of their values by block user i.e. disallowing edits of values of other parameters of the custom masked block . Values of other parameters of the custom masked block may not be edited by block user . depicts a custom mask dialog for a Gain block and a typical dialog for a built in Gain block. Edits of values of promoted parameters may be received via the custom mask dialog block . As shown in the block user may only edit values for a promoted parameter via custom mask dialog e.g. values for the multiplication parameter in custom mask dialog shown in . The custom masked block with values edited by block user may subsequently be used in a block diagram modeling environment to model a system or subsystem.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example while series of blocks have been described with respect to the order of the blocks may be varied in other implementations. Moreover non dependent blocks may be performed in parallel. Embodiments have been described herein as selecting block parameters from lists in a dialog for promotion to a mask. In other embodiments however the block author may drag and drop parameter widgets to a layout editor to promote the parameters for a custom masked block and a custom mask dialog.

Certain features described above may be implemented as logic or a unit that performs one or more functions. This logic or unit may include hardware such as one or more processors microprocessors application specific integrated circuits or field programmable gate arrays software or a combination of hardware and software. Logic for practicing aspects described herein may be provided to a client via a license. This license may in some implementations be tiered so that users have varying degrees of flexibility and or speed based on the licenses that they have.

No element act or instruction used in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

In the preceding specification various embodiments have been described with reference to the accompanying drawings. It will however be evident that various modifications and changes may be made thereto and additional embodiments may be implemented without departing from the broader scope of the invention as set forth in the claims that follow. The specification and drawings are accordingly to be regarded in an illustrative rather than restrictive sense.

