---

title: Predictive model importation
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for obtaining a plurality of model representations of predictive models, each model representation associated with a respective user and expresses a respective predictive model, and selecting a model implementation for each of the model representations based on one or more system usage properties associated with the user associated with the corresponding model representation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08583576&OS=08583576&RS=08583576
owner: Google Inc.
number: 08583576
owner_city: Mountain View
owner_country: US
publication_date: 20120529
---
This application is a continuation of and claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 13 277 052 filed on Oct. 19 2011 which is incorporated here by reference in its entirety. This application claims the benefit under 35 U.S.C. 119 e of the filing date of U.S. Patent Application No. 61 484 157 filed on May 9 2011 which is incorporated here by reference in its entirety.

Predictive modeling generally refers to techniques for extracting information from data to build a model that can predict an output from a given input. Predicting an output can include predicting future trends or behavior patterns or performing sentiment analysis to name a few examples. Various types of predictive models can be used to analyze data and generate predictive outputs. Examples of predictive models include Naive Bayes classifiers k nearest neighbor classifiers support vector machines and logistic regression techniques for example. Typically a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output respectively. The amount of training data that may be required to train a predictive model can be large e.g. in the order of gigabytes or terabytes. The number of different types of predictive models available is extensive and different models behave differently depending on the type of input data. Additionally a particular type of predictive model can be made to behave differently for example by adjusting the hyper parameters or via feature induction or selection.

In various implementations predictive models can be imported into a system that selects implementations for the models based on factors such as a user s status for instance. Different model implementations of a particular model e.g. a Naive Bayes classifier vary in the amount of parallelization they can achieve. Larger model implementations can utilize a large number of servers for example. Model implementations can be associated with nodes in a graph so that the output of one model serves as the input to another. The order of model implementation execution is prescribed by the graph and depending on the edges the graph may allow some models implementations to be executed in parallel with each other.

In various implementations predictive models can be imported into a system that selects implementations for the models based on factors such as a user s status for instance. Different model implementations of a particular model e.g. a Naive Bayes classifier vary in the amount of parallelization they can achieve. Larger model implementations can utilize a large number of servers for example. Model implementations can be associated with nodes in a graph so that the output of one model serves as the input to another. The order of model implementation execution is prescribed by the graph and depending on the edges the graph may allow some models implementations to be executed in parallel with each other.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of obtaining a plurality of model representations of predictive models wherein each model representation is associated with a respective user and expresses a respective predictive model and selecting a model implementation for each of the model representations each model implementation comprising one or more computer programs operable to be executed on one or more computing devices each model implementation being selected for a corresponding model representation based on one or more system usage properties associated with the user associated with the corresponding model representation wherein the one or more system usage properties comprise one or more of the following i an amount of system resources that the user has consumed over a given period of time ii a time of day during which system resources were previously used by the user or iii an amount of money that was previously paid by the user for the system resources.

Other embodiments of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other embodiments can each optionally include one or more of the following features alone or in combination.

The method further includes associating each of one or more of the selected model implementations with a node in a directed graph wherein for one or more ordered pairs of nodes in the graph the prediction output of a model implementation associated with a tail node in the pair serves as input to a model implementation associated with a head node in the pair. The method further includes executing each model implementation in an order prescribed by the directed graph. The method further includes assigning a system resources quota to the user determining the amount of system resources that the user has consumed over the given period of time and selecting the model implementation based on an amount of unconsumed system resources according to the system resource quota wherein an amount of system resources that can be consumed by the selected model implementation does not exceed the amount of unconsumed system resources. The method further includes selecting a computationally intensive model implementation for each of the model representations based on a determination that the system resources were previously used during an off peak time of day. The method further includes determining an account balance for the user based on the amount of money that was previously paid by the user for the system resources and selecting the model implementation based on the account balance wherein an estimated amount of money that the user can be charged for the use of the selected model implementation does not result in a negative account balance.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Predictive models can be trained in third party systems and imported for use in systems described herein. Model implementations can be selected based user properties available resources other information or combinations of these. Model implementations can be executed in concert with each other based on the order prescribed by a directed graph. This allows the prediction output of some models to serve as the input to other models. For example a model that determines the sentiment of an article can provide a prediction of the sentiment to another model that predicts who the author of the document is.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

In various implementations a predictive model or model is either a categorical model if its predictions are categories or is a regression model if its predictions are numeric. A predictive model is trained using training data. Training data encompasses examples that each comprise one or more data fields plus an answer a category or a numeric value for that example. By way of illustration the training data in TABLE 1 consists of examples that are email message subject lines and a category that indicates whether each example represents SPAM or not.

After a model has been trained against training data queries can be submitted to the model. In some implementations queries are similar in form to training examples that is a query has the same or fewer data fields but does not include the answer. The trained model uses patterns that it learned from the training data to either find the closest category for the submitted query if it is a categorical model or estimate a value for the query if it is a regression model and returns the category or value.

A model can be expressed as a model representation to allow models to be exchanged between systems. In some implementations the model representation is a Predictive Model Markup Language PMML document. PMML is an eXtensible Markup Language XML based language. Other model representations are possible such as for example formatted or unformatted text an database e.g. an SQL database or a sparse vector. The PMML specification is an XML schema. Instances of models are XML documents that conform to the schema. A PMML document can represent more than one model. Generally speaking a PMML document can contain some or all of the information described in TABLE 2. The PMML document can also contain information not described in TABLE 2.

The model importer interprets the model representation and either emits a intermediate representation or a model implementation . By way of illustration if the model representation is a PMML document an XML parser can be used to translate the document into the intermediate representation . The intermediate representation is an internal representation of the model representation from which a model implementation can be generated or selected if the implementation has already been generated . In some implementations the intermediate representation is a data structure that encodes the information of the model representation to allow for rapid generation or selection of a model implementation .

A model implementation can be generated or selected directly from the model representation or from the intermediate representation . The model implementation is one or more computer programs that execute on one or more servers. In some implementations the type of model implementation is chosen based on the user s status available resources or both. This is described further below with reference to . For example the model implementation can be a computer program that is designed to execute on a single server or it can be designed to execute on multiple servers. An example of the later approach is a model implemented as a map reduce system. A map reduce system includes application independent map modules configured to read input data and to apply at least one application specific map operation to the input data to produce intermediate data values. The map operation is automatically parallelized across multiple servers. Intermediate data structures are used to store the intermediate data values. Application independent reduce modules are configured to retrieve the intermediate data values and to apply at least one application specific reduce operation to the intermediate data values to provide output data. The map reduce system is described further in U.S. Pat. No. 7 650 331 entitled System and method for efficient large scale data processing which is incorporated by reference herein in its entirety.

Computer programs can be executed in parallel by the servers. Two computer programs are executed in parallel if they are executed on different servers and if at least a portion of their execution occurs at the same time. For example assume that computer program A is executed on server S and computer program B is executed on server S. If some period of time exists where program A and B are both being executed then the programs are executed in parallel.

The servers execute computer programs that implement model implementations an implementation selector and model executors . The model executors can use the implementation selector to select model implementations to execute based on various factors. A given model e.g. a support vector machine can have a number of different possible model implementations. In some implementations there are predetermined model implementations. For example there can be small medium and large implementations. A small model implementation uses the resources of a single server a medium model implementation has a parallelized implementation e.g. a map reduce model implementation that uses the resources of N servers and a large implementation has a parallelized implementation that uses the resources of P servers where P N. Of course P and N can be varied dynamically based on the available resources of the system e.g. the number of a servers that are available to execute a portion of the model implementation and other factors. Some model implementations can also perform pre processing see data transformations in TABLE 2 and post processing see targets in TABLE 2 in parallel. Model training and prediction can be performed faster on models implementations that utilize more servers those that utilize fewer. In some implementations the user can choose which model implementation they desire.

The implementation selector is used by the predictive model importer or by the model executors to select a specific implementation for an imported model representation based on user properties available resources other information or combinations of these. Model executors are described further below. One user property is a user s status. Users e.g. users and can each be associated with a respective status to indicate the type of user they are such as for example very important user test user and so on. Other types of user status are possible. A model implementation can be selected based on the user s status. Users who are very important for instance can be assigned a model implementation that executes faster than model implementations for test users. In various implementations larger model implementations e.g. medium or large are selected for very important users whereas smaller model implementations e.g. small are selected for users of lesser status.

Other user properties are the amount of system resources the user has consumed over a given time period the time of day the user typically trains or queries their models and the amount of money the user has paid to utilize the system . The amount of resources consumed can be for one or more servers the amount of computer memory consumed the amount of CPU processing time consumed the amount of information sent or received on a computer network or combinations of these. In some implementations users are assigned resource quotas and model implementations are selected based the amount of unused resources according to the user s quota. For example a user may configure the system to provide the fastest model implementation that is estimated not to exceed the user s unused resource quota.

The time of day that a user typically trains or queries their models can in some implementations determine the speed of the model implementation used. During off peak hours faster and or more computationally intensive model implementations can be used for example. The amount of money a user has paid to utilize the system can be a flat rate or based on actual usage. In the former case the user may pay for a level or grade of service which determines the size of model implementations that are available to them. In the latter case the user is charged for the system resources they consume so that if the user or the system selects larger model implementations the user will be charged accordingly. In some implementations the user s remaining account balance determines which model implementations are selected based an estimate of what the user will be charged for the usage. That is the most accurate and fastest model implementation possible is selected that is not estimated to result in a negative account balance based on system usage.

The model executors execute the model implementations according to an order prescribed by respective directed graphs assigned to the model executors . A directed graph or digraph is a pair G V E where V is a set nodes and E is a set of ordered pairs of nodes or edges . An edge e x y is considered to be directed from node x to node y y is called the head and x is called the tail of the edge y is said to be a direct successor of x and x is said to be a direct predecessor of y. If a path made up of one or more successive edges leads from x to y then y is said to be a successor of x and x is said to be a predecessor of y.

In various implementations each node of the graph is associated with a model implementation. A model executor executes model implementations by following the edges in the graph . The prediction output of a model implementation associated with a direct predecessor serves as input to the model implementation associated with the direct successor. In this example the output of the model implementation associated with node A serves as input to the model implementation associated with node C . The input to the model implementation associated with node D is the output of the model implementations associated with nodes C and B . The output of the model implementation associated with node D serves as input to the model implementation associated with node E . The model executor can utilize dependencies in the graph to determine if model implementations can be executed in parallel. For example the execution of the model implementation associated with node B can occur in parallel with the execution of the model implementations associated with nodes A and C since there are no edges between A and B and between C and B .

The server also includes hardware or firmware devices including one or more processors one or more additional devices a computer readable medium a communication interface and one or more user interface devices . Each processor is capable of processing instructions for execution within the server . In some implementations the processor is a single or multi threaded processor. Each processor is capable of processing instructions stored on the computer readable medium or on a storage device such as one of the additional devices . The server uses its communication interface to communicate with one or more computers for example over a network . Examples of user interface devices include a display a camera a speaker a microphone a tactile feedback device a keyboard and a mouse. The server can store instructions that implement operations associated with the modules described above for example on the computer readable medium or one or more additional devices for example one or more of a floppy disk device a hard disk device an optical disk device or a tape device.

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language resource in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending resources to and receiving resources from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

