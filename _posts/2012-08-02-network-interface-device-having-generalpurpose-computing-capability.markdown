---

title: Network interface device having general-purpose computing capability
abstract: Techniques for a network interface controller (NIC) capable of performing general-purpose computing tasks without intervention from a central processing unit (CPU) are disclosed herein. The network interface controller includes a circuit board, a network interface, a computer bus interface and a processor. The network interface is operatively coupled to the circuit board for receiving network packets. The computer bus interface is operatively coupled to the circuit board for receiving a general-purpose program. The processor is operatively coupled to the circuit board and capable of executing the general-purpose program to process the network packets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09350828&OS=09350828&RS=09350828
owner: FACEBOOK, INC.
number: 09350828
owner_city: Menlo Park
owner_country: US
publication_date: 20120802
---
This invention relates generally to network interface devices and in particular to a network interface controller NIC capable of performing general purpose computing tasks without intervention from a central processing unit CPU .

Central Processing Units CPUs have been gaining increasing performance capability exponentially over the past 40 years in accordance with Moore s Law. CPUs are not only growing faster and faster but also are applied to increasing number of applications such as logic based computation integer and floating point arithmetic string processing multimedia processing encryption and error correction. CPUs also contain a large number of transistors dedicated to alleviate common performance bottlenecks such as slow memory fetches and frequent code branches.

Consequently modern CPUs are quite adequate for a diverse set of workloads. But this trend comes at a cost since the total amount of silicon components in a CPU is limited by thermal and economic constraints. Instead of requiring CPUs to handle all workloads some workloads are better served by less general more specific processors.

One example is graphic processor unit GPU . GPUs were popularized by the commoditization of discrete graphics cards for higher graphics performance in workloads such as computer games media creation and computer aided design. GPUs are specialized processors designed to process relatively few tasks involved in computer graphics in a very efficient way. But the new application of GPUs has been recently discovered and expanded. There is an entire class of non graphics computation that can exploit these specialized functions of GPUs. Particularly now GPUs can handle highly parallel numeric codes for many scientific programs. New software libraries such as CUDA and OpenCL emerged to facilitate the use of this specialized hardware for codes that were originally designed for CPUs. The success of this model is evident in the fact that some of the fastest computers in the world now use these so called general purpose GPUs GPGPUs as numerical accelerators.

However general purpose GPUs still have limitation for general purpose computing. The hardware of GPUs are generally designed and optimized for floating point calculation. Thus GPUs offer little advantage over CPUs for computing tasks focusing on integer point calculation. Also due to the architectural nature of GPUs GPUs gain performance advantage by parallelizing the computation. Yet not all computing tasks can be parallelized efficiently this severely limits the application of general purpose GPUs. Further GPUs are typically fabricated on graphical expansion card. It is not efficient to use GPUs for certain tasks including high speed network data processing since a large amount of data needs to transfer among network interface controllers NICs CPUs and GPUs.

With the growth of the Internet in terms of transmission speeds it is common nowadays that a datacenter server or a desktop computer needs to process network transmitted data at a transmission speed over 1 gigabit per second. Processing the incoming network segments such as TCP or UDP can further pose an overhead burden on CPUs. As a result a significant amount of the processing power of a CPU is dedicated to processing the network transmission instead of running intended applications.

Some modern network interface controllers can offload the burden on the CPU by doing limited processes on the network transmitted data using dedicated hardware fabricated on the network interface controller NIC . For example some NICs include predetermined features such as TCP IP offloading encryption and error correction that can relieve the CPU of the burden of computing these common albeit limited tasks. Nevertheless the functionalities of the network interface controllers are fixed by the predetermined dedicated hardware. There is no mechanism for these network interface controllers to perform any general purpose computing tasks other than the pre supplied functionalities

The technology introduced here uses a network interface controller NIC to perform general purpose computing tasks without intervention from a central processing unit CPU . The network interface controller is designed to be installed and operating in a host computer. The network interface controller includes a circuit board a network interface a computer bus interface and a processor. The network interface is operatively coupled to the circuit board for receiving network packets. The computer bus interface is operatively coupled to the circuit board for receiving a general purpose program. The processor is operatively coupled to the circuit board and capable of executing the general purpose program to process the network packets and directly access data on the memory of the host computer based on the network packets without intervention from a central processing unit of the host computer.

The general purpose NICs as described herein expand the functionality of existing NICs and support many new applications that were previously run exclusively on CPUs. With the ability of receiving and executing general purpose programs the GPNIC s functionalities are no longer confined by the fabricated hardware. Therefore the disclosed general purpose NICs can offload the burden of host computer CPUs so that CPUs can focus on other computing tasks.

Other aspects of the technology introduced here will be apparent from the accompanying figures and from the detailed description which follows.

References in this specification to an embodiment one embodiment or the like mean that the particular feature structure or characteristic being described is included in at least one embodiment of the present invention. All occurrences of such phrases in this specification do not necessarily refer to the same embodiment.

Processors included in network interface controllers NICs have recently grown more sophisticated powerful and flexible especially with high end server NICs such as 10 Gbe Myrinet and Infiniband NICs. The present invention discloses a type of NICs can be used as general purpose NICs GPNICs to accelerate many computing tasks traditionally carried out by CPUs. The disclosed general purpose NICs can not only expand the functionality of existing NICs e.g. so that the controller can use arbitrary network based compression methods as opposed to just one compression method predetermined by a dedicated hardware but also support many new applications that heretofore were run exclusively on CPUs. For example a GPNIC can serve as a memory caching systems based on key value stores and no SQL databases such as Memcached a sophisticated storage server such as Facebook s Haystack and or even a web server for delivering both static and dynamic content.

The GPNIC further includes a physical network interface coupled to the circuit board . The physical network interface PHY can be configured for I O of Ethernet WiFi Token Ring or other forms of computer networks. For example the physical network interface can include a network cable socket so that an Ethernet cable can connect to the network interface . Or the physical network interface can include an antenna for sending and receiving data to from a WiFi network. In one embodiment the physical network interface can include a chip for Serializer Deserializer SerDes functions. Since typically the network signals are serial signals and the bus signals in the computer systems are parallel signals the physical network interface uses the chip to convert the input and or output signals between parallel and serial forms. The chip of the physical network interface can further include a Physical Coding Sublayer to help defining physical layer specifications e.g. speed and duplex modes for networking protocols such as Fast Ethernet Gigabit Ethernet and 10 Gigabit Ethernet. The physical network interface can further include additional parts for data and clock recovery where applicable.

The GPNIC further includes a Media Access Controller MAC providing addressing and channel access control mechanisms that make it possible for several terminals or network nodes to communicate within a multiple access network that incorporates a shared medium e.g. Ethernet. The MAC can further include functionality as an 8b 10b decoder which maps 8 bit signals to 10 bit signals to achieve DC balance and bounded disparity and yet provides enough state changes to allow reasonable clock recovery. The MAC can include additional functionality such as logical link control which provides multiplexing mechanisms that make it possible for several network protocols e.g. IP IPX Decnet and Appletalk to coexist within a multipoint network and to be transported over the same network media.

There may be buffers between the MAC and a processor of the GPNIC . For example Receive first in first out RX FIFO buffer can be operatively coupled between the processor and the MAC . Network packets received by network interface can be buffered in RX FIFO before being processed by the processor . In addition Transmit first in first out TX FIFO buffer can be operatively coupled between the processor and the MAC . New network packets generated by the processor can be buffered in TX FIFO before being sent to MAC and network interface . In some embodiments a host computer may be able to access the RX TX FIFO buffers via the computer bus interface using mechanism such as direct memory access DMA .

The GPNIC includes at least one general purpose processor . A general purpose processor is a processor that is not tied to a specific application or integrated with a specific piece of software. The general purpose processor can realize a functionally complete set of logic operators. Therefore the general purpose processor is capable of executing a general purpose program to process the network packets received by the network interface . A general purpose program is a Boolean function that can be built up from a subset of a functionally complete set of logic operators.

In some embodiments the clock rate of the processor is higher than the bitrate of the network packets being received from the network interface . For example a GPNIC designed for receiving 1 gigabit s of network traffic has a processor having a clock rate higher than 1 GHz.

Instead of a predetermined functionality as in conventional NICs the GPNIC can receive and execute various general purpose programs received via the computer bus interface . The general purpose programs can be supplied by a CPU of a host computer or even a computer user via an input device of the host computer. The general program may be stored in an onboard read write memory of the GPNIC . When the processor executes the general purpose program the read write memory can store the program state information to assist the computation in the processor .

During operation the processor is capable of executing the general purpose program which is not predetermined by hardware components of the GPNIC. By executing the general purpose program stored in onboard memory the processor can process the network packets received from the network interface and provide any functionality that can be realized by a program instead of being confined to a predetermined functionality. For example the program being executed in the processor may recognize a client request based on the received network packets and generate a response to the client request. The response may be based on certain data that is stored in a volatile or non volatile memory of the host computer. The processor can directly access the data stored in the memory of the host computer via the computer bus interface without intervention from the CPU of the host computer. The processor then generates the response as a series of new network packets based on the data retrieved from the host computer s memory. Then the network interface of the GPNIC is responsible for sending out the new network packets as a response to the client request.

The GPNIC can further include a clock generator and a phase lock loop PLL connected to any components of GPNIC that need phase lock reference signals. In some embodiments a collection of clock generators and PLLs of various clock frequencies are included for supplying reference signals for components of the GPNIC that require reference signals with different clock frequencies. In another embodiment a component of the GPNIC may contain its own built in clock generator and or PLL.

Besides the expansion slot the host computer further includes a CPU a volatile memory a non volatile storage and at least one I O device . The components of the host computer are interconnected by a bus .

The general purpose processor of GPNIC is capable of executing a general purpose program to process the network packets received by the network interface . Instead of a predetermined functionality as in conventional NICs the GPNIC can receive and execute various general purpose programs received via the computer bus interface . The general purpose programs can be supplied by CPU of the host computer or even a computer user via the I O device . When the processor executes the general purpose program the read write memory can store the program state information for running the program.

By executing the general purpose program the processor can process the network packets received from the network interface and provide any functionality that can be realized by a program instead of being confined to a predetermined functionality. For example by executing the program the processor may recognize a client request based on the received network packets. Certain data stored in the host memory or host storage is required to satisfy the client request. Thus the processor directly accesses the data stored in the memory or the storage of the host computer via the computer bus interface without intervention from the CPU of the host computer . The processor then generates a response as a series of new network packets based on the data retrieved from the host computer . Then the processor sends out the new network packets as a response of the client request via the network interface .

In one embodiment the GPNIC is connected to the host bus via the bus interface . The GPNIC responds to the enumeration requests as deemed appropriate by the protocol used for the interface such as PCI Express enumeration requests. The GPNIC implements a PCI backward compatible configuration space as well as PCI Express configuration space as defined by the PCI Express standard. The GPNIC identifies itself with the NETWORK CLASS CODE and may optionally identify itself as a multi function device by setting appropriate capabilities bits in the type 0 PCI configuration space header. In case of a multi function device the device class code for the second function is a general purpose device. 

In the embodiment illustrated in the last paragraph both the general purpose computing and NIC functions are exposed via a memory mapped set of registers used for communicating with the GPNIC . The base address at which these registers are available is assigned at boot time of the host computer when the BIOS of the host computer enumerates devices on various buses available in the system. For instance in one embodiment these memory spaces can be easily located by reading from a first PCI or PCI Express Base Address Register BAR0 .

In some embodiments a GPNIC device can come with a set of general purpose mailbox registers in the memory mapped space that the GPNIC exposes to the host computer . This set of general purpose registers can be used to perform arbitrary communications between the GPNIC and the host computer as well as to send code updates or program and to configure the GPNIC device .

In one embodiment the host computer and the operating system of the host computer can access the GPNIC using memory mapped input output MMIO operations. The host computer and the host operating system use a common address bus to address both the memory of the host computer and the GPNIC. A range of the memory addresses are assigned to the GPNIC the memory and registers of the GPNIC are mapped to memory address values within that range. So when a memory address is accessed by the host operating system the memory address may refer to a portion of the memory of the host computer or may refer to the memory or register of the GPNIC. Thus through the common address bus the host operating system can issue instructions to access the GPNIC. A memory management unit MMU within the CPU of the host computer intercepts the instruction to access the memory range assigned to the GPNIC device. The MMU translates the instruction and generates a bus request. For example in case that the GPNIC uses PCI Express interface the bus request can be a PCI Express request to write data. The data travels to the GPNIC via the bus.

In one embodiment the GPNIC utilizes a PCI PCI X or PCI Express interface. When the host computer starts and conducts bus enumeration the BIOS of the host computer detects and configures all peripheral device extension slots including the slot populated with the GPNIC. The BIOS then requests the peripheral devices to notify the BIOS of how large is the MMIO memory range that the peripheral devices require. After the GPNIC announces the requested size of the MMIO memory range the BIOS configures the GPNIC and puts the address range assigned for the GPNIC into its base address registers inside of the PCI configuration space. Following the boot process of the host operating system the host operating system can read those registers and will know from now on where is the MMIO memory range for the GPNIC. In some other embodiments the GPNIC can use a bus interface other than the PCI family.

Once the host operating system knows the MMIO range of the GPNIC device it can communicate with the GPNIC by issuing read and write operations to the GPNIC. The host operating system controls the access of the MMIO range and enforces the access permission of the MMIO range to avoid security issues when user processes interacts counteracts with requests from other processes.

In order to secure the MMIO range the host operating system sets the appropriate bits in the address translation tables consistent with the desired permissions that the host operating system wants to grant to user processes. In some embodiments the host operating system is the only entity able to directly read and write from this memory region and then it tracks usage of the region by allowing users to interact with the MMIO region via a special system such as an application programming interface API . In such a case the API usually contains all the necessary logic to track and allow disallow accesses by processes.

In one embodiment to control concurrent accesses to the GPNIC a request FIFO in the GPNIC can keep a backlog of programs to run and the GPNIC run one program fetched from the backlog at a time.

In another embodiment the GPNIC can have a finite set of triggers and filters of that each would trigger a different program among the programs that access the GPNIC concurrently to run. For example the GPNIC can have a set of packet filters to match the trigger information embedded in the incoming network packets. If the GPNIC detects that the TCP or UDP address and destination port of the incoming packets match one of the filters the GPNIC runs a program associated to that filter to process these incoming packets. When the GPNIC detects that the TCP or UDP address and destination port of new packets match a second filter the GPNIC runs another program associated to the second filter to process the new packets.

The GPNIC can establish a priority order of matching filters. For example a priority order can prefer matching source IP address first and then matching source TCP or UDP destination port second. The GPNIC can also define other priority orderings based on protocol type Ethernet type for Ethernet packets source IP destination IP source port or destination port. The filtering mechanism allows multiple programs to be uploaded to the GPNIC and each of the programs can be triggered on different packets events .

The host operating system including the API logic in the driver can ensure only one program is associated for each filter slot available. For example the GPNIC can have a single program that decompresses the packet and then transforms the packet in some way instead of having one program decompressing and passing the packet to a second program that transforms the packet. The GPNIC can have multiple programs uploaded and the GPNIC can return a completion confirmation or an error code to the driver of the host operating system which in turn notifies via the API the user program if the request of running a program has been completed.

Applications using the GPNIC can realize various functionalities for processing the incoming network packets including Memcached Facebook s Haystack and even a simple web server for both static and dynamic content. The following paragraphs discuss some of the scenarios involving the GPNIC as disclosed in .

As shown in a client uses a client side library to locate a datacenter server for a Memcached service. The client sends a Memcached service request to the datacenter server at a port e.g. port 11211 . The Memcached service request includes a key which is associated with a value in a key value associative array stored in a volatile memory of the datacenter server wherein the client attempts to set or read the value corresponding to the key .

A network interface of a general purpose network interface controller receives the Memcached service request including a key at a port such as port 11211. A general purpose processor of the GPNIC instead of a CPU of the datacenter server is responsible for responding the Memcached service request and executes a Memcached server program while the GPNIC continues to serve as a regular NIC. The Memcached server program executed by the processor determines the type of requests that the processor is responsible for. The processor scans the incoming network packets. When the processor detects the Memcached service request from the incoming network packets the processor does not forward the request to the CPU of the datacenter server . Instead the processor handles and responds to the request without intervention from the CPU . The processor can forward other types of network packets and requests to the CPU .

In another embodiment the Memcached server program executed by the processor forwards all network packets and requests to the CPU . The CPU can decide which Memcached service request is to be processed by the GPNIC processor . Once the processor receives a Memcached service request sent by the CPU the Memcached server program executed by the processor starts to handle and respond to the request without intervention from the CPU .

Following the instruction of the Memcached server program the processor extracts the key from the Memcached service request and then computes a hash of the key . The processor directly accesses the memory of the datacenter server via a bus interface and bus and compares the hash with entries of a hash table without intervention from the CPU . If the processor finds that an entry of the hash table matches the hash the processor further checks that the key matches the key in that entry of the hash table .

Using the matched entry of the hash table the processor is able to locate the value in the key value associative array stored in the volatile memory of the datacenter server . If the Memcached service request is a read request the processor directly accesses the memory of the datacenter server via a bus interface and bus to read the value associated with the key without intervention from the CPU . Then the processor generates a series of new network packets including the information of the value as a response to the Memcached service request . Then the network interface sends the new network packets to the client to deliver the content of the requested value.

If the Memcached service request is a set request the processor directly accesses the memory to set the value associated with the key using a value included in the Memcached service request without intervention from the CPU . Then the processor generates a series of new network packets as a response to the Memcached service request that confirms the set request. Then the network interface sends the network packets to the client as a response.

In one embodiment the hash table can be stored in an onboard memory of the GPNIC instead of the memory of the datacenter server . Accordingly the processor just needs to access the GPNIC s own onboard memory to compare the hash with the entries of the hash table . In another embodiment even a portion of or the entire the key value associative array can be stored in the onboard memory of the GPNIC instead of memory of the datacenter server . In such a case the processor may even process the Memcached request without the need of accessing any other components of the datacenter server outside of the GPNIC via the bus interface .

As illustrated in the GPNIC including the processor handles the Memcached request by directly accessing the host computer memory the memory of the datacenter server without intervention from the host computer CPU . The task of handling the Memcached request is a general purpose computing task run by the GPNIC while the GPNIC continues to serve as a regular NIC for the datacenter server . Further the datacenter server or a user of the datacenter server can instruct the GPNIC to run other general purpose applications by providing other general purpose programs to the GPNIC . For example the GPNIC can also handle HTTP based photo request from a generic object store called Haystack.

Haystack is a type of generic object store utilized to eliminate unnecessary metadata overhead for photo read operations. In one embodiment Haystack is deployed on top of commodity storage blades. Each storage blade provides terabytes of storage space. The storage blades can be configured as RAID partitions e.g. RAID 6 managed by hardware RAID controllers to provide redundancy and to increase read performance.

Built upon these storage blades Haystack is a log structured append only object store containing needles that represent the stored objects e.g. photos . A Haystack consists of two files the actual haystack store file containing the needles plus an index file. shows the layout of a haystack store file. The first 8 KB of the haystack store is occupied by the superblock. Immediately following the superblock are needles with each needle consisting of a header the data and a footer. A needle is uniquely identified by its offset key where the offset is the needle offset in the haystack store. There is a corresponding index record for each needle in the haystack store file and the order of the needle index records must match the order of the associated needles in the haystack store file. The index file provides the minimal metadata required to locate a particular needle in the haystack store file. Loading and organizing index records into a data structure for efficient lookup is the responsibility of the Haystack application e.g. photo store . The index file is not critical as it can be rebuilt from the haystack store file if required. The main purpose of the index is to allow quick loading of the needle metadata into memory without traversing the larger Haystack store file since the index is usually less than 1 the size of the store file.

A Haystack write operation synchronously appends new needles to the haystack store file. After the needles are committed to the larger Haystack store file the corresponding index records are then written to the index file. Since the index file is not critical the index records are written asynchronously for faster performance. The index file is also periodically flushed to the underlying storage to limit the extent of the recovery operations caused by hardware failures. Haystack does not allow overwrite of an existing needle offset so if a needle s data needs to be modified a new version of it is written using the same key value. Applications can then assume that among the needles with duplicate keys the one with the largest offset is the most recent one.

The parameters passed to the haystack read operation can include the needle offset key cookie and the data size. Haystack then adds the header and footer lengths to the data size and reads the whole needle from the file. The read operation succeeds only if the key and cookie match the ones passed as arguments if the data passes checksum validation and if the needle has not been previously deleted.

As shown in a client sends an HTTP photo read request to the server . The HTTP photo read request includes a haystack ID a photo key and a cookie. A network interface of the general purpose network interface controller receives the HTTP photo read request . A general purpose processor of the GPNIC instead of a CPU of the server is responsible for responding the HTTP photo read request and executes a Haystack server program while the GPNIC continues to serve as a regular NIC for the server . The Haystack server program executed by the processor determines the type of requests that the processor is responsible for. The processor scans the incoming network packets. When the processor detects the HTTP photo read request from the incoming network packets the processor does not forward the request to the CPU of the server . Instead the processor handles and responds to the request without intervention from the CPU . The processor can forward other types of network packets and requests to the CPU .

In another embodiment the Haystack server program executed by the processor forwards all network packets and requests to the CPU . The CPU can decide which HTTP photo request is to be processed by the GPNIC processor . Once the processor receives a HTTP photo request sent by the CPU the Haystack server program executed by the processor starts to handle and respond to the request without intervention from the CPU .

Following the instruction of the Haystack server program the processor directly access the memory via a bus interface and a bus to perform a lookup in the in memory index based on the photo key. If the processor finds the photo key in the in memory index the processor retrieves the offset of the needle containing the requested image. Using the offset of the needle the processor directly access the storage via a bus interface and a bus to perform the haystack read operation to get the image directly from the needle stored in the storage . Then the processor generates a series of network packets including the content of the photo as a response to the HTTP photo read request . The network interface sends the network packets to the client to deliver the photo.

During the task of handing the Haystack HTTP read request the processor communicates directly to the memory and the storage of the server without the involvement of the CPU .

In another embodiment the in memory index can be stored in an onboard memory of the GPNIC instead of memory of the server . Accordingly the processor just needs to access the GPNIC s own onboard memory to perform the lookup in the in memory index based on the photo key.

The task of handling Haystack HTTP read request is a general purpose computing task run by the GPNIC while the GPNIC continues to serve as a regular NIC for the server . The server or a user of the datacenter server can instruct the GPNIC to run other general purpose applications by providing other general purpose programs to the GPNIC . For example the GPNIC serves a regular HTTP server to handle all HTTP requests for static and dynamic content by accessing memory and storage of the server directly without involvement of the server CPU.

In another embodiment a GPNIC installed in a node of a Hadoop cluster can handle data compression and decompression. When the Hadoop node receives the data the processor on the GPNIC instead of the node CPU can compress the data before storing the data in this node or other nodes in the Hadoop cluster. Similarly the processor on the GPNIC instead of the node CPU can decompress data before sending out the data to clients. In another embodiment the processor on the GPNIC can handle encryption and decryption of network data.

Following the instruction of the general purpose program at the processor directly accesses data on a memory of a host computer based on the network packets without intervention from a central processing unit of the host computer wherein the network interface controller is operatively coupled to the host computer via the computer bus interface. Then at the processor generates a plurality of new network packets based on the data without intervention from the central processing unit of the host computer. Via the network interface the GPNIC sends out the new network packets as a response to the received network packets .

The processor s is are the central processing unit CPU of the storage controller and thus control the overall operation of the node . In certain embodiments the processor s accomplish this by executing software or firmware stored in memory . The processor s may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs trusted platform modules TPMs or the like or a combination of such devices.

The memory is or includes the main memory of the node . The memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. In use the memory may contain a code . In one embodiment the code includes a general programming module configured to recognize the general purpose program received via the computer bus interface and prepare the general purpose program for execution at the processor. In another embodiment the general programming module may be implemented using hardware circuitry such as application specific integrated circuits ASICs programmable logic devices PLDs or field programmable gate arrays FPGAs .

Also connected to the processor s through the interconnect are a network adapter and a storage adapter . The network adapter provides the node with the ability to communicate with remote devices over a network and may be for example an Ethernet adapter or Fibre Channel adapter. The network adapter may also provide the node with the ability to communicate with other nodes within the cluster. In some embodiments a node may use more than one network adapter to deal with the communications within and outside of the cluster separately. The storage adapter allows the node to access a persistent storage and may be for example a Fibre Channel adapter or SCSI adapter.

The code stored in memory may be implemented as software and or firmware to program the processor s to carry out actions described above. In certain embodiments such software or firmware may be initially provided to the node by downloading it from a remote system through the node e.g. via network adapter .

The techniques introduced herein can be implemented by for example programmable circuitry e.g. one or more microprocessors programmed with software and or firmware or entirely in special purpose hardwired circuitry or in a combination of such forms. Special purpose hardwired circuitry may be in the form of for example one or more application specific integrated circuits ASICs programmable logic devices PLDs field programmable gate arrays FPGAs etc.

Software or firmware for use in implementing the techniques introduced here may be stored on a machine readable storage medium and may be executed by one or more general purpose or special purpose programmable microprocessors. A machine readable storage medium as the term is used herein includes any mechanism that can store information in a form accessible by a machine a machine may be for example a computer network device cellular phone personal digital assistant PDA manufacturing tool any device with one or more processors etc. . For example a machine accessible storage medium includes recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

The term logic as used herein can include for example programmable circuitry programmed with specific software and or firmware special purpose hardwired circuitry or a combination thereof.

In addition to the above mentioned examples various other modifications and alterations of the invention may be made without departing from the invention. Accordingly the above disclosure is not to be considered as limiting and the appended claims are to be interpreted as encompassing the true spirit and the entire scope of the invention.

