---

title: Recovery system and method for recreating a state of a datacenter
abstract: Embodiments include a recovery system, a computer-readable storage medium, and a method of recreating a state of a datacenter. The embodiments include a plurality of program modules that is executable by a processor to gather metadata from a first datacenter that includes at least one virtual machine (VM), wherein the metadata includes data representative of a virtual infrastructure of the first datacenter. The program modules are also executable by the processor to recreate a state of the first datacenter within a second datacenter using the metadata upon a determination that a failure occurred within the first datacenter, and to recreate the VM within the second datacenter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09304873&OS=09304873&RS=09304873
owner: VMware, Inc.
number: 09304873
owner_city: Palo Alto
owner_country: US
publication_date: 20120823
---
Software applications such as virtual machines VMs may be executed by a group or cluster of host computing devices. Each VM creates an abstraction of physical computing resources such as a processor and memory of the host executing the VM and executes a guest operating system which in turn executes one or more software applications. The abstracted resources may be functionally indistinguishable from the underlying physical resources to the guest operating system and software applications.

At least some host computing devices are grouped together in one or more datacenters within a common site. The datacenters may be at least partially virtualized so that computing devices and other resources may be abstracted and accessible to users as VMs. Virtualization of datacenters facilitates the migration and recovery of applications and data between computing devices and datacenters. For example because the VMs are represented as one or more files the VMs can be replicated onto remote storage and can be migrated to a backup site as desired.

However at least some known datacenters may not provide complete recovery solutions for enterprise applications and or for other components of the datacenter. Enterprise applications are often complex and may include many components residing on different VMs. Some VMs may have specific configurations required to execute them in a preferable manner. Moreover some groups of VMs have a specific startup order and initiating or powering on the VMs in the wrong order can result in execution failure. If a failure occurs at a first or primary datacenter and the VMs are recovered to a second or recovery datacenter the configuration settings for the VMs typically must be set up manually. In addition components and configuration settings of the primary datacenter itself may not be stored in a recovery datacenter to enable the primary datacenter components and settings to be restored. For example the primary datacenter may include one or more virtual datacenters instantiated therein and or may include one or more virtual networks that may not be stored and recovered at the recovery datacenter.

Embodiments described herein include a recovery system a computer readable storage medium and a method of recreating a state of a datacenter. The embodiments include a plurality of program modules that is executable by a processor to gather metadata from a first datacenter that includes at least one virtual machine VM . The metadata includes data representative of a virtual infrastructure of the first datacenter. The program modules are also executable by the processor to recreate a state of the first datacenter within a second datacenter using the metadata upon a determination that a failure occurred within the first datacenter and to recreate the VM within the second datacenter.

In one embodiment a recovery system includes a primary datacenter a recovery datacenter and a plurality of datastores coupled to the primary datacenter and to the recovery datacenter. The primary datacenter is located within a primary site and the recovery datacenter is located within a recovery site. The recovery system also includes a plurality of program modules including a protection daemon an extractor a recovery agent and a reconstructor. The recovery system facilitates protecting the primary datacenter such that the primary datacenter may be recovered or recreated within the recovery datacenter when a failure occurs within the primary datacenter and or the primary site.

In operation the recovery system extracts metadata from the primary datacenter and stores the metadata as a metadata package within a protection datastore. The metadata includes data representative of a virtual infrastructure of the primary datacenter including a hierarchy of entities and or components of the primary datacenter. The VMs within the primary datacenter are extracted to or stored on one or more protection datastores. The data of the protection datastores including the metadata and VM data is replicated to one or more recovery datastores coupled to the recovery datacenter. When a failure occurs within the primary site and or the primary datacenter the recovery system recreates the virtual infrastructure of the primary datacenter within the recovery datacenter. In addition one or more networks from the primary datacenter are recreated within the recovery datacenter. Each VM is imported into or recreated within the recovery datacenter from the recovery datastores. Moreover each VM is initiated or powered on in a predetermined startup order based on the metadata stored in the recovery datastore.

Accordingly as described herein the recovery system automatically protects and recovers both the VMs of a datacenter and the virtual infrastructure of the datacenter. As the recovery system recovers the primary datacenter using the extracted metadata VMs are imported into a virtual infrastructure including the hierarchy of components and entities that substantially mirrors the infrastructure of the primary datacenter. The networks are automatically restored as well thus minimizing or reducing an amount of manual reconfiguration that may otherwise be required in prior art systems to prepare the recovery site for operation of the recovered datacenter.

As used herein the term state refers to a configuration and or a snapshot of data and or other program information of a system or program at a point in time. In addition as used herein the terms restore recreate recover and reconstruct are used interchangeably.

In some embodiments computing device also includes at least one presentation device for presenting information to a user . Presentation device is any component capable of conveying information to user . Presentation device may include without limitation a display device e.g. a liquid crystal display LCD organic light emitting diode OLED display or electronic ink display and or an audio output device e.g. a speaker or headphones . In some embodiments presentation device includes an output adapter such as a video adapter and or an audio adapter. An output adapter is operatively coupled to processor and configured to be operatively coupled to an output device such as a display device or an audio output device.

The computing device may include a user input device for receiving input from user . User input device may include for example a keyboard a pointing device a mouse a stylus a touch sensitive panel e.g. a touch pad or a touch screen a gyroscope an accelerometer a position detector and or an audio input device. A single component such as a touch screen may function as both an output device of presentation device and user input device .

Computing device also includes a network communication interface which enables computing device to communicate with a remote device e.g. another computing device via a communication medium such as a wired or wireless packet network. For example computing device may transmit and or receive data via network communication interface . User input device and or network communication interface may be referred to as an input interface and may be configured to receive information such as configuration options e.g. threshold values from a user. In some embodiments presentation device and or user input device are remote from computing device and transmit and or receive data via network communication interface .

Computing device further includes a storage interface that enables computing device to communicate with one or more datastores. In exemplary embodiments storage interface couples computing device to a storage area network SAN e.g. a Fibre Channel network and or to a network attached storage NAS system e.g. via a packet network . The storage interface may be integrated with network communication interface .

The virtualization software layer supports a virtual machine execution space within which multiple virtual machines VMs may be concurrently instantiated and executed. Hypervisor includes a device driver layer and maps physical resources of hardware platform e.g. processor memory network communication interface and or user input device to virtual resources of each of VMs such that each of VMs has its own virtual hardware platform e.g. a corresponding one of virtual hardware platforms . Each virtual hardware platform includes its own emulated hardware such as a processor a memory a network communication interface a user input device and other emulated I O devices in VM .

In some embodiments memory in first virtual hardware platform includes a virtual disk that is associated with or mapped to one or more virtual disk images stored in memory e.g. a hard disk or solid state disk of computing device . The virtual disk image represents a file system e.g. a hierarchy of directories and files used by first virtual machine in a single file or in a plurality of files each of which includes a portion of the file system. In addition or alternatively virtual disk images may be stored in memory of one or more remote computing devices such as in a storage area network SAN configuration. In such embodiments any quantity of virtual disk images may be stored by the remote computing devices .

Device driver layer includes for example a communication interface driver that interacts with network communication interface to receive and transmit data from for example a local area network LAN connected to computing device . Communication interface driver also includes a virtual bridge that simulates the broadcasting of data packets in a physical network received from one communication interface e.g. network communication interface to other communication interfaces e.g. the virtual communication interfaces of VMs . Each virtual communication interface may be assigned a unique virtual Media Access Control MAC address that enables virtual bridge to simulate the forwarding of incoming data packets from network communication interface . In an embodiment network communication interface is an Ethernet adapter that is configured in promiscuous mode such that all Ethernet packets that it receives rather than just Ethernet packets addressed to its own physical MAC address are passed to virtual bridge which in turn is able to further forward the Ethernet packets to VMs . This configuration enables an Ethernet packet that has a virtual MAC address as its destination address to properly reach the VM in computing device with a virtual communication interface that corresponds to such virtual MAC address.

Virtual hardware platform may function as an equivalent of a standard x86 hardware architecture such that any x86 compatible desktop operating system e.g. Microsoft WINDOWS brand operating system LINUX brand operating system SOLARIS brand operating system NETWARE or FREEBSD may be installed as guest operating system OS 265 in order to execute applications for an instantiated VM such as first VM . Virtual hardware platforms may be considered to be part of virtual machine monitors VMM which implement virtual system support to coordinate operations between hypervisor and corresponding VMs . Those with ordinary skill in the art will recognize that the various terms layers and categorizations used to describe the virtualization components in may be referred to differently without departing from their functionality or the spirit or scope of the disclosure. For example virtual hardware platforms may also be considered to be separate from VMMs and VMMs may be considered to be separate from hypervisor . One example of hypervisor that may be used in an embodiment of the disclosure is included as a component in VMware s ESX brand software which is commercially available from VMware Inc.

In an embodiment provider datacenter includes a plurality of datacenters allocated to one or more customers hereinafter referred to as customer datacenters . More specifically customer datacenters are virtual datacenters to which resources are assigned or allocated by provider datacenter . Alternatively one or more customer datacenters may include a plurality of computing devices allocated from resources . In addition each customer datacenter includes at least one VM .

In an embodiment resources include a plurality of host computing devices a plurality of datastores coupled to host computing devices and a plurality of network resources . It should be recognized that any number of computing devices network resources and datastores may be included within provider datacenter to enable datacenter to function as described herein.

Datastores include one or more protection datastores and or one or more recovery datastores . As described more fully herein protection datastores and recovery datastores are used to store data for use in recovering provider datacenter or portions thereof. In an embodiment each VM is stored on a single protection datastore of a first provider datacenter to be protected also known as a primary datacenter and is replicated to a single recovery datastore of a second provider datacenter also known as a recovery datacenter to facilitate ensuring that data accesses to and from each VM are maintained in a proper order in an event that VM needs to be restored.

Network resources may include for example network switches routers repeaters and or any other network device that enables computing devices datastores and or other components of provider datacenter to communicate together. Network resources may be logically organized in a network pool .

Each customer datacenter includes one or more virtual appliances and each virtual appliance includes one or more VMs . Virtual appliances are preconfigured software solutions installed on a virtualization layer such as a hypervisor. In an embodiment each virtual appliance is packaged updated maintained and or managed as a unit to facilitate efficient distribution and installation of virtual appliances and or VMs .

VMs within each virtual appliance may be coupled to other VMs within virtual appliance and or to any other VM by one or more networks . In an embodiment each network is allocated from network pool by provider datacenter and or by customer datacenter .

Recovery system includes a protection daemon and an extractor coupled to protection daemon . In an embodiment protection daemon and or extractor are positioned remotely from primary site and are coupled to primary site and to primary datacenter by one or more networks. Primary site includes a plurality of resources associated with or allocated to primary datacenter including one or more protection datastores . Primary datacenter includes one or more customer datacenters . In an embodiment primary site and or primary datacenter is used for normal operation of customer datacenters .

In an embodiment a plurality of primary datacenters are included within primary site . An administrator or an owner of primary site may designate primary datacenters as protected datacenters or as unprotected datacenters. Protected datacenters are primary datacenters that are protected by recovery system such that datacenters are restored within recovery site if primary site and or primary datacenter fails. Unprotected datacenters are datacenters that are not protected by recovery system such that no recovery is performed if primary site and or primary datacenter fails. An owner of primary site may charge a higher cost for datacenters that are protected as compared to a cost for datacenters that are unprotected. Unless otherwise specified primary datacenters described herein are protected datacenters.

Recovery system also includes a recovery agent and a reconstructor coupled to recovery agent . In an embodiment recovery agent and or reconstructor are positioned remotely from recovery site and are coupled to recovery site and to recovery datacenter by one or more networks. Recovery site also includes a plurality of resources associated with or allocated to recovery datacenter including one or more recovery datastores . In an embodiment recovery site is used to recover a state of primary datacenter if primary site and or primary datacenter fails for example.

Recovery system also includes a replication module communicatively coupled to datastores e.g. protection datastores of primary datacenter and to datastores e.g. recovery datastores of recovery datacenter . In an embodiment replication module is a program module that is executable by a processor to replicate data including VMs from primary datacenter to recovery datacenter at predetermined intervals as described more fully herein.

In an embodiment one or more program modules such as protection daemon extractor recovery agent reconstructor and or replication module are stored within a computer readable storage medium such as memory of a computing device . The computing device and processor of computing device is communicatively coupled to primary site primary datacenter recovery site and or recovery datacenter . Alternatively computing device may be positioned within primary site primary datacenter recovery site or recovery datacenter . In addition one or more of the program modules are executable by a processor of computing device to perform the functions described herein. In one embodiment protection daemon extractor recovery agent reconstructor and replication module may be combined into a single program module or a plurality of program modules to perform the functions described herein.

In an embodiment extractor is a program module that is executed by a processor to gather metadata and or other data from primary site and or primary datacenter . As used herein gathering data or metadata from primary site and or from primary datacenter includes gathering data or metadata from resources within primary site and or primary datacenter such as computing devices datastores and or network resources. Protection daemon is a program module executable by a processor that invokes or calls extractor to cause extractor to gather the metadata and or other data from primary site and or primary datacenter . Protection daemon stores the metadata and or other data received from extractor in protection datastore . In one embodiment the metadata is stored in a separate protection datastore sometimes referred to as a bootstrap datastore than the protection datastores used to store data for each VM .

Metadata gathered by extractor includes data representative of a framework or virtual infrastructure needed to rebuild primary site and or primary datacenter in recovery site and or recovery datacenter . As used herein the term virtual infrastructure refers to one or more software components and or configuration settings that facilitate constructing and or operating a datacenter. For example the virtual infrastructure may include software components and or configuration settings that provide centralized management resource allocation and optimization instantiation of virtual datacenters within the datacenter instantiation and or encapsulation of virtual networks defined within the datacenter and or any other components and or configuration settings that enable the datacenter to function.

Such metadata may include for example data regarding resources of primary datacenter e.g. the storage capacity of primary datacenter the computing capacity of primary datacenter and or the number identity and or capacity of datastores associated with primary datacenter data regarding resources allocated to each customer datacenter a list of virtual appliances and or VMs within each customer datacenter configuration settings of VMs within each customer datacenter including a startup order of VMs for each customer datacenter configuration settings for each network within primary site primary datacenter and or customer datacenters and or an identity and or a connection identifier of each resource customer datacenter and or other component of primary datacenter and or primary site . The connection identifier may include a uniform resource locator URL and or any other identifier that enables recovery system to function as described herein. The metadata may also include for example a hierarchy of datacenters resources and or other components of primary datacenter and or primary site .

Extractor organizes the metadata into a metadata package and transmits the metadata package to protection daemon . In an embodiment protection daemon stores the metadata package in protection datastore in a format that is readable by recovery agent and or reconstructor such as in an extensible markup language XML format. Data stored in protection datastores including the metadata package and data representative of VMs is replicated or transmitted to one or more recovery datastores in or coupled to recovery site by replication module .

Reconstructor and recovery agent are program modules that are executable by a processor. In an embodiment reconstructor is invoked or called by recovery agent . Recovery agent extracts the metadata from the metadata package stored in recovery datastore and transmits the metadata to reconstructor . Reconstructor rebuilds or recreates primary datacenter and or primary site within recovery site . More specifically reconstructor creates the framework or virtual infrastructure of primary site and primary datacenter within recovery site using the metadata stored in recovery datastore . Reconstructor then rebuilds or recreates virtual appliances VMs and other data stored within recovery datastores into the framework created from the metadata.

During operation recovery system implements a setup phase a protection phase and a recovery phase. During the setup phase recovery system is configured and prepared to enable primary datacenter and or primary site to be recovered if a failure occurs. More specifically in an embodiment a network connection is established between datastores of primary datacenter and datastores of recovery datacenter . For example protection datastores of primary datacenter are connected to recovery datastores of recovery datacenter by replication module to facilitate replicating the data from datastores of primary datacenter e.g. protection datastores to datastores of recovery datacenter e.g. recovery datastores .

Moreover resources are allocated or reserved within recovery datacenter in an amount that is expected to be needed to replicate primary datacenter if a failure of primary datacenter and or primary site occurs. It should be recognized that the allocated resources may be used for other purposes until primary datacenter needs to be recreated in recovery datacenter .

A portion of the framework or virtual infrastructure of primary datacenter is mapped onto or created within recovery datacenter . In an embodiment a unique identifier such as a unique name is associated with each datastore and each customer datacenter within primary datacenter and is mapped from primary datacenter to recovery datacenter . In one embodiment the identifier for each datastore and or for each customer datacenter is prefixed with a name or another identifier of primary site to ensure that the identifiers are not duplicated by other components within recovery datacenter . Recovery system stores the identifier mappings in memory such as within protection datastores and or recovery datastores .

Accordingly a placeholder is created within recovery datacenter for each datastore and each customer datacenter of primary datacenter . It should be recognized that not every component within primary datacenter may be mapped onto recovery datacenter during the setup phase. For example networks associated with primary datacenter may not be mapped to recovery datacenter . Rather networks may be created or allocated by reconstructor from a network pool within recovery datacenter and or recovery site during the recovery phase i.e. during a time period when primary datacenter is replicated within recovery datacenter .

During the protection phase data and metadata from primary datacenter and or primary site is gathered at predetermined intervals. The intervals are selected based on selected recovery point objectives RPO and or based on a determination of an acceptable amount of data loss in an event of a failure of primary site and or primary datacenter . For example a user or an administrator may input into protection daemon a desired frequency at which protection daemon and extractor gather the data and the metadata.

Protection daemon is a continuously or periodically executing process that manages the protection of primary site . Protection daemon maintains a list of protected primary datacenters . Protection daemon invokes extractor at the predetermined intervals to query primary site and or primary datacenter to extract the metadata needed to reconstruct primary site and or primary datacenter at recovery site . In an embodiment extractor is a library that does not store login credentials for example that may be required to access data at primary site . Accordingly protection daemon stores the login credentials and transmits the login credentials to extractor each time extractor is executed. In addition protection daemon passes the list of protected primary datacenters to extractor .

In an embodiment extractor uses an application programming interface API to communicate with primary site and or primary datacenter . Extractor gathers metadata from each protected primary datacenter and or from primary site and stores the metadata for each primary datacenter as a metadata package in protection datastore associated with primary datacenter . In an embodiment extractor uses a series of recursive hypertext transport protocol HTTP GET requests to gather the metadata from primary datacenter and from other components of primary site and or primary datacenter . Alternatively any suitable protocol or method may be used to gather the metadata from primary datacenter and or primary site . It should be recognized that each HTTP GET request received by a component within primary site returns configuration information for the component in addition to a uniform resource locator URL of any entities within it. Therefore a recursive series of HTTP GET requests that traverse a hierarchy of primary site provide substantially all the information needed from primary site and or primary datacenter . In an embodiment at least some other data such as network configuration data for the networks associated with primary site and or primary datacenter is not part of the hierarchy and is obtained separately from the recursive requests.

In an embodiment extractor receives a list of customer datacenters within primary datacenter in response to the HTTP GET request. The list of customer datacenters includes a resource identifier such as a uniform resource locator URL for each datacenter . In an embodiment extractor transmits another HTTP GET request to each customer datacenter within primary datacenter using the URL of customer datacenter . Configuration information specific to each customer datacenter is received by extractor in response to the HTTP GET request. The configuration information includes information needed to recreate customer datacenter within recovery datacenter including computing and storage capacity allocated to customer datacenter quotas regarding a number of VMs and networks within customer datacenter and or any other suitable data. In addition a list of virtual appliances is provided.

Extractor issues another HTTP GET request to the virtual appliances within customer datacenter . Each virtual appliance provides a list of VMs instantiated within the virtual appliance network configurations used with the virtual appliance the configurations of each virtual appliance a startup order of the VMs and or of the virtual appliance and or any other suitable data that enables extractor to function as described herein. Extractor also issues an HTTP GET request to each VM within each virtual appliance to gather the configuration data needed to replicate the VM within recovery datacenter .

Extractor organizes the extracted information from each primary datacenter into a metadata package associated with primary datacenter . Extractor transmits the metadata package to protection daemon and protection daemon stores the metadata package in protection datastore that is associated with primary datacenter .

In an embodiment the networks used by customer datacenters may not be confined to customer datacenters and or primary datacenters . Rather such networks may cross datacenter boundaries to communicatively couple a plurality of customer datacenters and or primary datacenters together. Accordingly to ensure that a network is properly restored to all associated customer datacenters and or primary datacenters extractor stores configuration data for each network within protection datastore of each primary datacenter . While each metadata package may therefore include potentially duplicative network configuration data such duplications are resolved at the recovery phase in which reconstructor only restores the networks of a metadata package that have not been already restored from other metadata packages.

It should be recognized that the protection phase is executed repeatedly and or periodically until primary site fails. For example primary site may fail if site loses power if one or more cooling systems fail within site if computing devices within site experience failures and or if any other event occurs that prevents primary site and or datacenters from operating normally.

In addition to storing metadata at predetermined intervals recovery system also stores or replicates VMs of customer datacenters and or VMs of primary datacenter within recovery datastores of recovery datacenter . In an embodiment VMs are replicated using array based replication wherein controllers of each protection datastore associated with primary datacenter cause the data stored within protection datastore to be replicated to a datastore i.e. a recovery datastore of recovery datacenter . Accordingly each datastore and each VM associated with a protected primary datacenter within primary site is replicated to recovery site and or recovery datacenter at a predetermined interval. In an embodiment VMs and protection datastores may be replicated at a predetermined interval that is different than the predetermined interval at which the metadata is gathered. For example VMs and protection datastores may be replicated less frequently than the metadata is gathered because a cost of the data replication may be higher than the cost of gathering the metadata.

In an embodiment the recovery phase is initiated when primary site experiences a failure and when recovery site is directed to restore primary site and or one or more primary datacenters . During the recovery phase an owner or operator of primary site transmits a list of primary datacenters to be restored and a list of recovery datastores within recovery site associated with primary datacenters . Alternatively recovery site may receive the list of primary datacenters and a list of the associated recovery datastores from a file or another resource located within recovery site and or coupled to recovery site . Recovery agent is invoked and the list of primary datacenters to be restored as well as the associated recovery datastores is input into recovery agent or is transmitted to recovery agent .

Recovery agent extracts or retrieves the metadata package from each recovery datastore . In an embodiment the metadata packages provide information about datastores that were in use by primary datacenter before the failure occurred. Accordingly recovery agent connects recovery datacenter to datastores identified in the metadata package. Recovery agent invokes reconstructor for each protected primary datacenter i.e. each primary datacenter identified in the list of datacenters provided to recovery agent . Recovery agent provides reconstructor with the metadata package for each primary datacenter a reference to a new empty primary datacenter i.e. a recovery datacenter reserved during the setup phase and a reference to recovery datastore corresponding to primary datacenter to be recovered. Recovery agent also passes to reconstructor any necessary mappings between old and new entity references. In addition reconstructor imports VMs from recovery datastores for use recreating VMs within recovery datacenter during the recovery process.

Reconstructor recreates the virtual infrastructure of primary site and or primary datacenter within recovery site . For example reconstructor recreates networks of primary datacenter within recovery datacenter using the network configuration settings stored in the metadata package within recovery datastore . In an embodiment reconstructor recreates the virtual infrastructure of primary site and or primary datacenter including networks before primary datacenter is reconstructed within recovery datacenter .

As network configuration settings for each network are stored within each metadata package reconstructor determines whether each network has already been restored during the reconstruction of another primary datacenter for example. If the network has not already been restored reconstructor allocates the network from a network pool of recovery datacenter . Because network pools within primary datacenter and recovery datacenter are abstracted and are substantially similar networks can be created out of any available network pool within recovery datacenter . In an embodiment networks that are created use the same name that networks from primary datacenter use to simplify recovery since network names only should be unique within the scope of customer datacenter .

Reconstructor reconstructs primary datacenter within recovery datacenter using for example HTTP requests such as HTTP PUT and HTTP POST requests. The HTTP PUT request causes recovery datacenter to incorporate the configuration settings of primary datacenter included within the metadata. More specifically the empty recovery datacenter is reconfigured by executing an HTTP PUT request to the URL of recovery datacenter . Reconstructor allocates customer datacenters within recovery datacenter by transmitting a HTTP POST request to a datacenter creation URL included within recovery datacenter . In the body of the request reconstructor specifies the configuration data and the identity of customer datacenters that reconstructor retrieves from the metadata. Accordingly reconstructor creates an empty customer datacenter that is configured to match customer datacenter of primary datacenter . While reconstructor is described as using HTTP requests it should be recognized that reconstructor may use any suitable protocol or method that enables recovery system to function as described herein.

Reconstructor imports each VM into recovery datacenter or recreates VMs within recovery datacenter and into customer datacenters of recovery datacenter by issuing an HTTP POST request to an import action URL of recovery datacenter . The import action creates a virtual appliance and imports the specified VMs into the newly created virtual appliance . After VMs have been imported or recreated reconstructor reconfigures virtual appliance and VMs using the metadata from primary site . More specifically reconstructor configures virtual appliance and VMs to use the allocated networks. In addition reconstructor may provide an internet protocol IP address to VMs if VMs are configured for static IP addressing for example. In an embodiment the IP address may be the same IP address used within primary datacenter .

In an embodiment reconstructor receives a sequence or order in which VMs are to be initiated or powered on from the metadata package. Reconstructor initiates VMs in the sequence received from the metadata to complete the recovery phase of recovery system . At this point the state of primary datacenter and or primary site has been reconstructed or recovered within recovery site .

In an embodiment a recovery site is provided for a primary site that is to be protected by method . The primary site includes at least one primary datacenter that includes at least one customer datacenter. The customer datacenter includes at least one virtual appliance and each virtual appliance includes at least one VM. A plurality of resources such as computing storage and network resources are allocated within the recovery site to ensure that the resources are available to recover the primary site and or the primary datacenter within the primary site if a failure occurs within the primary site and or the primary datacenter.

A plurality of entities within the primary site are mapped to the recovery site. For example placeholders for the primary datacenters and or the customer datacenters of the primary site are created within the recovery site. A recovery agent and or a reconstructor program module of the recovery system maintains a list of the mappings between a name and or another identifier of the primary datacenters and or the customer datacenters of the primary site and a location within the recovery site and or the recovery datacenter that will be used to reconstruct the primary datacenters and or the customer datacenters of the primary site.

In an embodiment a state of the VMs and virtual appliances of the primary site and or the primary datacenter are replicated periodically or upon the occurrence of an event. The VM and the virtual appliance states are stored within one or more protection datastores of the primary site and are replicated to one or more recovery datastores coupled to the recovery datacenter and or the recovery site. More specifically the datastores of the primary datacenter and or the primary site including VM files and VM disk files are replicated to one or more recovery datastores coupled to the recovery datacenter and or the recovery site. In addition metadata is extracted from the primary site and or from the primary datacenter periodically or upon the occurrence of an event. It should be recognized that the states of the VMs and the virtual appliances may be stored at a different interval or upon the occurrence of a different event than that of the metadata extraction. The extracted metadata is stored as a metadata package in a protection datastore of the primary datacenter and is replicated or transmitted to a recovery datastore that is coupled to the recovery site and or to the recovery datacenter.

The replication of the VMs and the virtual appliances the extraction of the metadata and the storage of the metadata package are repeated until a failure is detected within the primary site or within the primary datacenter. If a failure is detected within the primary site or within the primary datacenter one or more recovery datastores are provisioned at the recovery site and or the recovery datacenter. The provisioning of the recovery datastores ensures that the replicated data i.e. the data within the recovery datastores is transformed and or is available in a suitable format to be used by the recovery site and or the recovery datacenter as a recovery datastore. The virtual infrastructure of the primary site and or of the primary datacenter is reconstructed for example by a recovery agent and a reconstructor program module. The VMs and the virtual appliances that were stored in the recovery datastore i.e. that were replicated above are imported into the recovery site and or into the recovery datacenter.

In addition at least some VMs may need to be initiated in a particular startup order or sequence. Accordingly the startup order of the VMs may be determined from configuration data stored within the metadata package. When the startup order of the VMs is determined each VM is initiated according to the startup order.

The recovery system as described herein may be performed by one or more computers or computing devices. A computer or computing device may include one or more processors or processing units system memory and some form of computer readable media. Exemplary computer readable media include flash memory drives digital versatile discs DVDs compact discs CDs floppy disks and tape cassettes. By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media store information such as computer readable instructions data structures program modules or other data. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Combinations of any of the above are also included within the scope of computer readable media.

Although described in connection with an exemplary computing system environment embodiments of the disclosure are operative with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the disclosure include but are not limited to mobile computing devices personal computers server computers hand held or laptop devices multiprocessor systems gaming consoles microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the disclosure may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. The computer executable instructions may be organized into one or more computer executable components or modules. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the disclosure may be implemented with any number and organization of such components or modules. For example aspects of the disclosure are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the disclosure may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

Aspects of the disclosure transform a general purpose computer into a special purpose computing device when programmed to execute the instructions described herein.

The operations illustrated and described herein may be implemented as software instructions encoded on a computer readable medium in hardware programmed or designed to perform the operations or both. For example aspects of the disclosure may be implemented as a system on a chip.

The order of execution or performance of the operations in embodiments of the disclosure illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the disclosure may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the disclosure.

When introducing elements of aspects of the disclosure or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the disclosure in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the disclosure as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the disclosure it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

