---

title: Methods and devices for managing a cloud computing environment
abstract: Methods, devices, and systems for management of a cloud computing environment for use by a software application. The cloud computing environment may be an N-tier environment. Multiple cloud providers may be used to provide the cloud computing environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043751&OS=09043751&RS=09043751
owner: Kaavo, Inc.
number: 09043751
owner_city: Austin
owner_country: US
publication_date: 20120810
---
This is a continuation of co pending U.S. application Ser. No. 12 247 654 filed Oct. 8 2008 now U.S. Pat. No. 8 271 974 the entire contents of which are expressly incorporated by reference.

The present methods devices and systems relate generally to the fields of computers information technology virtualization and cloud computing. More particularly the present methods devices and systems relate to management of a cloud computing environment for use by a software application.

Virtualization technology facilitates the operation of multiple virtual servers within a single physical server system such that each virtual sever may operate within its own unique system environment e.g. operating system applications . From a user s perspective virtual servers may appear identical to a physical server. Users of the virtual server may be able to install any operating system application etc. on the virtual server without impacting users of other virtual servers operating within the same physical server system.

Cloud computing may be used to leverage virtualization of the resources of for example datacenters. Cloud providers which may operate resources such as datacenters and or other information technology related capabilities may facilitate the use of such resources by providing users which may be remote to the cloud provider with access to their resources. These potentially accessible resources may be collectively referred to as a cloud computing environment or a cloud environment. 

Embodiments of the present methods for managing a cloud computing environment for use by a software application may include determining a requested initial cloud environment based on user defined provisioning information sending an initialization event based on the requested initial cloud environment sending application data that is configured to cause the application to begin execution in the initial cloud environment configuration receiving monitoring environment data that represents a current cloud environment state determining a requested adjusted cloud environment based on the monitoring environment data and sending a cloud environment adjustment event based on the requested adjusted cloud environment.

An application may include application software which may contain one or more units of functionality e.g. a web portal with email functionality database programs word processing programs accounting programs inventory management programs numerical analysis programs . An application may also include services which may contain one logical unit of functionality e.g. an autonomous unit that is responsible for a transformation storage and or retrieval of data such as a database management service or a database API service .

The requested initial cloud environment may be an N tier computing environment. The initialization event may be configured to cause an initial cloud environment configuration to be made available to an application. The requested adjusted cloud environment may be an N tier computing environment. The cloud environment adjustment event may be configured to cause an adjusted cloud environment configuration to be made available to the application.

In some embodiments the application data may comprise computer usable code defining the application to be executed in the initial cloud configuration. In some embodiments the computer usable code defining the application may not be present within the cloud environment prior to the sending of the application data. In some embodiments the initial cloud configuration the adjusted cloud configuration and the computer usable code defining the application are removed after execution of the application is complete. In some embodiments the computer usable code defining the application may be configured to be executed in a non cloud computing environment e.g. a physical computer environment and may execute within the initial cloud configuration without being modified or optimized for use in a cloud computing environment.

In some embodiments the initial cloud environment configuration may include an initial first cloud configuration that is made available by a first cloud provider. The requested adjusted cloud environment configuration may include a requested second cloud adjusted configuration. The adjusted cloud environment configuration may include an adjusted second cloud configuration. The cloud environment adjustment event may include a second cloud adjustment event based on the requested second cloud adjusted configuration. The second cloud adjustment event may be configured to cause the adjusted second cloud configuration to be made available by a second cloud provider.

In some embodiments the requested initial cloud environment may include a requested first cloud initial configuration and a requested second cloud initial configuration. The initial cloud environment configuration may include an initial first cloud configuration and an initial second cloud configuration. The initialization event may include a first cloud initialization event based on the requested first cloud initial configuration and a second cloud initialization event based on the requested second cloud initial configuration. The first cloud initialization event may be configured to cause the initial first cloud configuration to be made available by a first cloud provider. The second cloud initialization event may be configured to cause the initial second cloud configuration to be made available by a second cloud provider.

In some embodiments the requested adjusted cloud environment configuration may include a requested first cloud adjusted configuration and a requested second cloud adjusted configuration. The adjusted cloud environment configuration may include an adjusted first cloud configuration and an adjusted second cloud configuration. The cloud environment adjustment event may include a first cloud adjustment event based on the requested first cloud adjusted configuration and a second cloud adjustment event based on the requested second cloud adjusted configuration. The first cloud adjustment event may be configured to cause the adjusted first cloud configuration to be made available by the first cloud provider. The second cloud adjustment event is configured to cause the adjusted second cloud configuration to be made available by the second cloud provider.

In some embodiments the user defined provisioning information may be determined using a needs analysis algorithm and or a user input received from a user interface.

In some embodiments the user defined provisioning information may include geographic data. In some embodiments the user defined provisioning information may include service level agreement data.

Some embodiments of the present methods may also include forecasting an optimal cloud environment for future use with the application. In some embodiments the forecasting the optimal cloud environment may be based on the monitoring environment data.

Some embodiments of the present methods may also include forecasting a future cost associated with executing the application. In some embodiments the forecasting the future cost may be based on the monitoring environment data. In some embodiments the forecasting the future cost may include using service level agreement data.

Some embodiments of the present methods may also include receiving security information determining a requested security action based on the security information and or sending a security event based on the requested security action.

Embodiments of the present systems for managing a cloud computing environment for use by a software application may include a processor in communication with a memory. The memory may store processor executable program code. Embodiments of the system may be configured to be operative in conjunction with the processor executable program code to perform any of the present methods described above.

Embodiments of the present computer readable media may have computer usable program code executable to perform operations for managing a cloud computing environment for use by a software application. Some embodiments may have computer usable program code executable to perform any of the present methods described above.

Embodiments of the present first computer readable media may have first computer usable program code that may be executable to install second computer usable program code on a second computer readable medium where the second computer usable program code is executable to perform operations for managing a cloud computing environment for use by a software application. In some embodiments the second computer usable program code may be executable to perform any of the present methods described above.

Any embodiment of any of the present methods devices e.g. computer readable media and systems may consist of or consist essentially of rather than comprise include contain have the described functions steps and or features. Thus in any of the claims the term consisting of or consisting essentially of may be substituted for any of the open ended linking verbs recited above in order to change the scope of a given claim from what it would otherwise be using the open ended linking verb.

The term send and its variations are defined as including transmitting both directly and indirectly e.g. passing through intermediate components and sending both directly and indirectly. Similarly the term communicate and its variation are defined as including both direct communication and indirect communication.

The term server includes virtual servers and physical servers. The term computer system includes virtual computer systems and physical computer systems.

The terminology based on denotes a relationship or dependency but is not limited to situations where the relationship or dependency is exclusive. For example X is based on Y is not limited to a relationship where X is equal to Y or where X is equal to a constant time Y. Instead the determination of X is dependant on Y but there may be other variables involved in the determination of X.

The terms comprise and any form of comprise such as comprises and comprising have and any form of have such as has and having include and any form of include such as includes and including and contain and any form of contain such as contains and containing are open ended linking verbs. Thus a method comprising certain steps is a method that includes at least the recited steps but is not limited to only possessing the recited steps. Likewise a device or system comprising certain elements includes at least the recited elements but is not limited to only possessing the recited elements.

Similarly a computer readable medium comprising computer usable program code for performing certain steps is a computer readable medium that has computer usable instructions for implementing at least the recited steps but also covers media having computer usable instructions for implementing additional unrecited steps. Further a computer system that is configured to perform at least certain functions is not limited to performing only the recited functions and may be configured in a way or ways that are not specified provided the system is configured to perform the recited functions.

The terms a and an are defined as one or more than one unless this application expressly requires otherwise. The term another is defined as at least a second or more.

In one aspect the present disclosure provides embodiments that are methods for managing a cloud computing environment for use by a software application. In another aspect the present disclosure provides embodiments that are systems for managing a cloud computing environment for use by a software application. Another aspect of the present disclosure provides computer readable media having computer usable program code executable to perform operations for managing a cloud computing environment for use by a software application. Yet another aspect of the present disclosure provides first computer readable media having first computer usable program code that is executable to install second computer usable program code on a second computer readable medium where the second computer usable program code is executable to perform operations for managing a cloud computing environment for use by a software application.

An embodiment of a present method for managing a cloud computing environment for use by a software application is depicted in . In this embodiment system is configured to perform one method of managing cloud environment . System may be remote from cloud environment . System may send cloud environment initialization event to cloud environment to cause application cloud environment configuration to be made available to for use by an application e.g. as an environment for running the application . As used in this disclosure the term application includes both application software which may contain one or more units of functionality e.g. a web portal with email functionality database programs word processing programs accounting programs inventory management programs numerical analysis programs and services which may contain one logical unit of functionality e.g. an autonomous unit that is responsible for a transformation storage and or retrieval of data such as a database management service or a database API service .

Application cloud environment configuration may include an N tier computing environment that is made available to the application by cloud environment and may be dependant on information included in cloud environment initialization event . Cloud environment initialization event may cause application cloud environment configuration that includes an environment having any number of tiers e.g. logical groupings of components directed to a general type of functionality to be made available. For example cloud environment initialization event may be configured to cause the availability of application cloud environment configuration that may include an environment that contains a presentation tier an application tier e.g. a logic or business logic tier and a database tier. Other configurations of cloud environment initialization event may cause the availability of application cloud environment configuration that may include an environment containing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 or more tiers.

In some embodiments the sending of cloud environment initialization event to cloud environment may comprise the passing of one or more software objects that contain information related to the provisioning of the resources by cloud environment for application cloud environment configuration e.g. number of servers to launch in each tier of the N tiers configurations of firewalls for security middleware requirement data required dependent application data . In some embodiments the sending of cloud environment initialization event to cloud environment may comprise an application programming interface API call or a set of multiple API calls.

Cloud environment may contain one cloud configuration or several cloud configurations that collectively provide application cloud environment configuration . Referring to the depicted embodiment contains M cloud configurations that collectively provide application cloud environment configuration . The M cloud configurations may be provided by M unique cloud providers e.g. each individual cloud configuration may be provided by a different entity . Alternately the M cloud configurations may be provided by less than M unique cloud providers with one or more cloud provider supplying more than one of the M cloud configurations. Each individual cloud configurations may be a private cloud e.g. the operator of may be a related entity to the cloud provider and access to the cloud provider may not be generally accessible to outside entities or a public cloud e.g. the cloud provider may be generally accessible to some outside entities . Each cloud provider may be remote from the other cloud providers and from system .

Each individual cloud configuration may contribute all a portion or none of each individual tier of the N tier configuration of application cloud environment configuration . For example an embodiment of application cloud environment configuration may include an application tier that contains servers e.g. virtual servers physical servers from cloud configurations and and a database tier that contains servers from cloud configurations . In another exemplary embodiment all N tiers of application cloud environment configuration may contain servers from each of the M cloud configurations.

Embodiments of the present disclosure may also include cloud environment initialization event sent to cloud environment by system . In the embodiment depicted in cloud environment initialization event is sent directly from system to cloud environment . In other embodiments cloud environment initialization event may be sent to cloud environment from system indirectly passing through additional components that may be interposed in a communications path between system and cloud environment . In some embodiments the interposed additional components may modify cloud environment initialization event before it reaches cloud environment . For example interposed additional components may modify cloud environment initialization event by adjusting formatting or adding timestamp information.

Cloud environment initialization event may be configured based on a requested initial cloud environment which in turn may be determined based on user defined provisioning information. The requested initial cloud environment may represent a cloud environment configuration suitable for the user defined provisioning information. Cloud environment initialization event may be configured to cause such a cloud environment to be made available. In some embodiments of the present disclosure the user defined provisioning information may be determined using user input received from a user interface. In some embodiments user input can be provided by another computer system. Examples of information that may comprise the user defined provisioning information include geographic preference e.g. geographic restriction of locations for data and or applications service level requirements e.g. availability pricing information tier definitions e.g. number of tiers computational resources needed for each tier security needs for each tier security requirements e.g. data encryption requirements audit backup requirements e.g. frequency of backup data retention specifications and special monitoring alert requests e.g. alert when a firewall rule is breached alert when average CPU utilization reaches or exceeds a threshold value for a given time in a given tier .

In some embodiments a configuration input file may comprise all or a portion of the user defined provisioning information. The configuration input file data may be stored in memory or may be stored on another storage medium. The configuration input file may facilitate modularity and the sharing of information between modules. In some embodiments a needs analysis algorithm may be applied to the user input to generate a configuration input file.

In some embodiments the configuration input file may be in the format of an industry standard software language. An example of a configuration input file written in XML Extensible Markup Language is presented in the Appendix appearing at the end of the present disclosure.

In some embodiments of the present disclosure that generate a configuration input file based on user input received from a user interface the configuration input file may be copied and stored for reuse. Subsequent identical configurations of cloud environment initialization event may be configured by utilizing the stored configuration input file thereby eliminating the need to collect user input from a user interface for repeated identical configurations of cloud environment initialization event . In some embodiments the stored configuration input files may be modified. In some embodiments the configuration input files may be generated without the use of a user interface e.g. a configuration input file may be written by a user in an industry standard language .

Cloud environment initialization event may be configured to cause application cloud environment configuration to be made available for executing an application. The N tier configuration of application cloud environment configuration may be made available based on the configuration of cloud environment initialization event . depicts an embodiment in which cloud environment initialization event includes M cloud initialization events which are configured to cause M cloud configurations that collectively provide application cloud environment configuration .

Cloud environment initialization event may be configured to optimize the configuration of application cloud environment configuration based on criteria such as for example geographic preferences and dependencies service level agreement SLA data cloud provider preference and collected cloud provider performance data e.g. quality of service data . Service level agreement data may include for example a user s desired service level e.g. geographic redundancy system availability and the service level required for each cloud provider e.g. monitored cloud provider performance compared to cloud provider specifications .

Referring again to the embodiment depicted in system may be configured to send application data to cloud environment to cause an application to begin execution within application cloud environment configuration . Application data may include for example specification configuration data for the application or the computer usable code of the application. In some embodiments application data may include substantially the entire computer usable code of the application e.g. the entirety of the computer usable application code for executing a web application database application numerical analysis application or email service . In some of these embodiments the computer usable code defining the application may not be present within cloud environment or application cloud environment configuration prior to the sending of application data to cloud environment by system .

In some embodiments the computer usable code defining the application may not be present within cloud environment after completion of the lifecycle of the application. For example cloud environment may initially not contain computer usable code defining the application which may subsequently be sent as part or all of application data to cloud environment to facilitate execution of the application within application cloud environment configuration . After execution of the application is completed the resources of application cloud environment configuration may be returned to cloud environment and the computer usable code defining the application may be removed from cloud environment e.g. after the lifecycle of the application is complete the virtual environment provided by application cloud environment configuration and the instance of the computer usable code defining the application that was sent as part of application data are removed .

In some embodiments the computer usable code defining the application that may be sent as part or all of application data may be configured to be executed in a non cloud computing environment. In these embodiments the computer usable code may execute within application cloud environment configuration without being modified or optimized for use in a cloud computing environment. In other words some embodiment allow the customization of application cloud environment configuration to match the required environment for an existing configuration of an application. Therefore the reconfiguring of the application or the use of additional middleware to accommodate the use of the application within application cloud environment configuration may not be required.

For example system and application cloud environment configuration may be configured to execute a version of an application that was previously configured and or optimized for execution in a user s existing conventional physical computer environment. System may facilitate the use of such an application by causing application cloud environment configuration to be provided that substantially matches the user s existing conventional physical computer environment for which the application was configured and or optimized.

The communication of the application s input and output data of some embodiments of the present disclosure is depicted by application input output and application input output . In some embodiments application input output may be communicated between the application executing within application cloud environment configuration and system . In some embodiments application input output may be communicated between the application executing within application cloud environment configuration and application end user that is not a user of system .

Continuing with the embodiment of system may configured for receiving monitoring data from cloud environment . Monitoring data may include for example data relating to CPU utilization memory utilization I O utilization and other performance related criteria of application cloud environment configuration cloud availability data for each individual cloud provider within cloud environment and network availability performance. Monitoring data may also include security information received from cloud environment e.g. messages from a firewall scanner monitor .

Some embodiments of the present disclosure may include predictive forecasting of an optimal cloud environment for future execution of the application based on monitoring data . Predictive forecasting of an optimal cloud environment may be performed using techniques such as for example neural networks time series algorithms and regression analysis to predict resources needed in future time forecast periods e.g. the next 10 minutes hour day week month next quarter year . The forecasting algorithms employed may be refined and updated as additional data becomes available.

In some embodiments predictive forecasting of a future cost associated with executing the application may be performed based on monitoring data . For example information from predictive forecasting of an optimal cloud environment and current pricing billing information may be used to predict future costs associated with executing the application for various time periods e.g. the forecasted bill at the end of the next month .

Referring again to the embodiment of system may be configured for sending cloud environment adjustment event to cloud environment to cause adjustment of application cloud environment configuration that is available to for use by the application e.g. adjust the environment for running the application by increasing decreasing or changing resources . In some embodiments the sending of cloud environment adjustment event to cloud environment may comprise the passing of one or more software objects that contain information related to the provisioning of the resources by cloud environment for application cloud environment configuration e.g. number of servers to launch in each tier of the N tiers configurations of firewalls for security middleware requirement data required dependent application data . In some embodiments the sending of cloud environment initialization event to cloud environment may comprise an API call or a set of multiple API calls.

Referring also to the adjustment of application cloud environment configuration may include adjusting the number of cloud configurations and or cloud providers of the N tier computing environment that collectively provide application cloud environment configuration . The adjustment of application cloud environment configuration may be dependant on information included in cloud environment adjustment event . In the depicted embodiment cloud environment adjustment event includes M cloud adjustment events which may be configured to adjust the M cloud configurations that collectively provide application cloud environment configuration . Cloud configurations may be reconfigured added subtracted and or replaced by other cloud configurations. Similarly cloud providers may be added subtracted and or replaced by other cloud providers. An added cloud configurations may be a private cloud or a public cloud. Embodiments of the present disclosure may send cloud environment adjustment event to cloud environment synchronously or asynchronously. Cloud environment adjustment event may be sent many times over the lifecycle of the execution of an application. The adjustment of application cloud environment configuration caused by cloud environment adjustment event as well as the adjustment of the M cloud configurations may be synchronous or asynchronous.

In the embodiment depicted in cloud environment adjustment event is sent directly from system to cloud environment . In other embodiments cloud environment adjustment event may be sent to cloud environment from system indirectly passing through additional components that may be interposed in a communications path between system and cloud environment . In some embodiments the interposed additional components may modify cloud environment adjustment event before it reaches cloud environment . For example interposed additional components may modify cloud environment adjustment event by adjusting formatting or adding timestamp information.

Cloud environment adjustment event may be configured based on a requested adjusted cloud environment which in turn may be determined based on monitoring data . In some embodiments of the present disclosure the requested adjusted cloud environment may be determined using monitoring data to optimize the configuration of application cloud environment configuration based on criteria such as for example geographic preferences and dependencies SLA data cloud provider preference and collected cloud provider performance data e.g. quality of service data . For example if monitoring data indicates that one cloud provider is not meeting required service levels e.g. SLA defined criteria a requested adjusted cloud environment may be determined that represents a cloud environment that addresses the deficiency by replacing the deficient cloud provider with a different cloud provider. Based on the requested adjusted cloud environment cloud environment adjustment event may be configured to cause an adjustment of application cloud environment configuration that replaces a cloud configuration provided by the deficient cloud provider with a newly instantiated cloud configuration from the different cloud provider.

In the embodiment of cloud environment includes a cloud environment configuration that comprises tiers and monitoring module . Tier includes High Availability Load Balancers running in two different datacenters two different cloud configurations . Tier includes a JBoss Application Server Cluster running in two different datacenters two different cloud configurations . Tier includes an MySQL Database Cluster running in two different datacenters two different cloud configurations . Monitoring module may be located in one of the cloud configurations utilized by tiers or it may be located separately. The depicted embodiment includes tier specific firewalls providing customized security for each tier and for the monitoring module.

In one embodiment user interface device is referred to broadly and is intended to encompass a suitable processor based device such as a desktop computer a laptop computer a Personal Digital Assistant PDA a mobile communication device or organizer device having access to network . System may be configured such that user interface software e.g. graphical user interface software may be used in conjunction with user device .

Network may facilitate communications of data between server and user interface device . Network may also facilitate communications of data between server and the cloud computing environment. Network may include any type of communications network including but not limited to a direct PC to PC connection a local area network LAN a wide area network WAN a modem to modem connection the Internet a combination of the above or any other communications network now known or later developed within the networking arts which permits two or more computers to communicate one with another.

System also may include Random Access Memory RAM which may be SRAM DRAM SDRAM or the like. Computer system may utilize RAM to store the various data structures used by a software application configured to manage a cloud computing environment for use by a software application. System may also include Read Only Memory ROM which may be PROM EPROM EEPROM or the like. The ROM may store configuration information for booting the computer system . The RAM and the ROM may hold user and system data.

System may also include input output I O adapter communications adapter user interface adapter and display adapter . I O adapter and or user interface adapter may in certain embodiments enable a user to interact with the computer system in order to input information for authenticating a user identifying an individual or receiving health profile information. In a further embodiment the display adapter may display a graphical user interface associated with a software or web based application for managing a cloud computing environment.

The I O adapter may connect to one or more storage devices such as one or more of a hard drive a Compact Disk CD drive a floppy disk drive and a tape drive. Communications adapter may be adapted to couple computer system to a network which may be for example one or more of a LAN a WAN and the Internet. The user interface adapter may couple user input devices such as keyboard and pointing device . The display adapter may be driven by CPU to control display on display device .

The present embodiments are not limited to the architecture of or . For example any suitable processor based device may be utilized including without limitation including personal data assistants PDAs computer game consoles and multi processor servers. Moreover the present embodiments may be implemented on application specific integrated circuits ASIC or very large scale integrated VLSI circuits. In fact persons of ordinary skill in the art may utilize any number of suitable structures capable of executing logical operations according to the described embodiments.

Some embodiments of the present disclosure include a computer readable medium having computer usable program code executable to perform operations for managing a cloud computing environment for use by a software application. Computer readable media includes any physical medium that can store or transfer information. Such embodiments may be characterized as tangible computer readable media having or encoded with computer usable e.g. machine readable instructions for performing certain step s including but not limited to hard drive media optical media RAM SRAM DRAM SDRAM ROM EPROM EEPROM tape media cartridge media flash memory memory stick and or the like.

Some embodiments may include a first computer readable medium having a first computer usable program code executable to install second computer usable program code on a second computer readable medium where the second computer usable program code is executable to perform operations for managing a cloud computing environment for use by a software application. Referring to computer readable medium contains installer software . Execution of installer software may cause installation of cloud management software on computer readable medium . Cloud management software may be executable to perform operations for managing a cloud computing environment for use by a software application.

An embodiment of a method for managing a cloud computing environment for use by a software application is depicted in the operational flow diagram of . Method may comprise determining a requested initial cloud environment based on user defined provisioning information where the requested initial cloud environment is an N tier computing environment block sending an initialization event based on the requested initial cloud environment where the initialization event is configured to cause an initial cloud environment configuration to be made available to an application block sending application data that is configured to cause the application to begin execution in the initial cloud environment configuration block receiving monitoring environment data that represents a current cloud environment state block determining a requested adjusted cloud environment based on the monitoring environment data where the requested adjusted cloud environment is an N tier computing environment block sending a cloud environment adjustment event based on the requested adjusted cloud environment where the cloud environment adjustment event is configured to cause an adjusted cloud environment configuration to be made available to the application block forecasting an optimal cloud environment for future use with the application where the forecasting the optimal cloud environment is based on the monitoring environment data block forecasting a future cost associated with executing the application where the forecasting the future cost is based on the monitoring environment data block receiving security information block determining a requested security action based on the security information block and sending a security event e.g. shut down of servers generation of alerts or notifications based on the requested security action block .

The operational flow diagram of is intended only as an example and one of ordinary skill in the art will recognize that in alternative embodiments the order of operation for the various blocks may be varied certain blocks may be performed in parallel certain blocks of operation may be omitted completely and additional operational blocks may be added. Thus the present embodiments are not intended to be limited only to the operational flow diagram of but rather such operational flow diagram is intended solely as an example that renders the disclosure enabling for many other operational flow diagrams for implementing the user interface. For example in some embodiments any or all of blocks may be omitted.

The following example is included to demonstrate a particular embodiment of the present disclosure. It should be appreciated by those of skill in the art that the techniques disclosed in this example represent techniques designed to function well in the practice of the present disclosure. However those of skill in the art should in light of the present disclosure appreciate that many changes can be made in the specific embodiments which are disclosed and still obtain a like or similar result without departing from the scope of the disclosed embodiments. For example it will be appreciated that some of the described modules may be added or omitted. It will also be appreciated that some of the described functionality of the exemplary modules may be performed by other modules or may be omitted. One of skill in the art with the benefit of the present disclosure will appreciate that embodiments of the present disclosure may contain many different design choices addressing for example the choice and arrangement of functionality performed by the modules.

The modules described herein may be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices.

Modules may also be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Referring to various modules of an embodiment of an N tier configuration lifecycle management engine for managing a cloud computing environment for use by a software application is described. Each of these modules may be deployed on a single server or can be deployed on multiple servers e.g. the Monitoring module may have two or more components running on various servers .

The User Interface Processing Module can capture user input and needs e.g. how many servers what type of servers geographic restrictions and minimum max server limits for each tier server size and enter the data in an application database for use by various engine modules. The User Interface Processing Module allows the user to specify deployment related requirements at a high level e.g. type of application need for geographic redundancy need to encrypt data need for high availability and creates a deployment configuration accordingly that can later be further customized and edited.

The Provisioning and Deployment Management Module is responsible for provisioning the servers and ensuring the deployment rules are followed e.g. quantity of servers to launch in each tier firewall configuration used etc. . The module can leverage a plug in module for provisioning servers in various clouds public or private . In addition the module can get input from a Deployment Optimization Module directed to the optimal provisioning of the servers.

The Life Cycle State Management Module manages the state of the application that executes in the cloud environment. This module can be a state machine that gets data for each application e.g. each application or service from the Monitoring Module. The module can maintain the states of the application for each tier and overall state e.g. deployment state pending state normal running state warning state update servers optimization state error state scale up state scale down state shut down state . For example if the monitoring module determines that the average utilization of servers CPU memory and or I O utilization is over 90 in the database tier it may generate a scale up event. The Life Cycle State Management Module may pick up the event and proceed to issue an event to add additional servers in the database tier. The Provisioning and Deployment Management Module may pick up the event and instantiate a new instance of a server in the database tier. After the new server is instantiated the Provisioning and Deployment Management Module may issue a completion event and the Runtime Configuration Management Module can process the event and generate a event for performing post server instantiation operations e.g. configuration file changes service starts etc. The Runtime Configuration Management Module can receive the event perform the task and place the task completion event for the Life Cycle State Management Module queue so that the state of the application can be updated.

The Life Cycle State Management Module should also be able to handle virtual server instance level failures similar to scale up scale down events. The module may be able to deal with instance level failure.

The Deployment Optimization Module is responsible for collecting and maintaining for example SLA data pricing data and quality of service data from different cloud providers. Prior to provisioning the resources the Provisioning and Deployment Management module may call the Deployment Optimization Module. The deployment optimization module can use the application service configuration information user inputs e.g. geographic dependencies provider preference SLA requirements and the actual collected data from various cloud providers to recommend the optimal cloud configuration.

This Runtime Configuration Management Module can perform the tasks of updating configuration files on running servers starting or stopping applications on the virtual servers and installing software upgrades and patches on the virtual servers. This module can have several libraries of best practice configuration templates for various types of software packages. Depending on the event the module can dynamically create configuration files from templates and apply appropriate changes to the server s . Upon completion of the tasks the module may puts a message on the queue for the Life Cycle State Management Module.

The Load Forecasting Module can use the monitoring data from the Monitoring Module and the collected cloud provider data to forecast the load e.g. number of servers or amount of resources that would be needed in the future to optimally run the application without degrading the quality of service . The Load Forecasting Module may operate in conjunction with the Deployment Optimization Module. The Load Forecasting Module may generate messages which will be processed by the Life Cycle State Management Module and the Pricing Module.

The Pricing Module may process messages from the Monitoring Module and the Life Cycle State Management Module and in combination with the output of the Load Forecasting Module compute current pricing and forecast future pricing. Memory CPU Disk Usage Bandwidth along with SLAs and backend provider cost information may be used as a part of the input for computing current pricing and forecasting future pricing. Credits received from cloud providers e.g. for failure to meet SLA levels may also be accounted for. The pricing module may have the ability to forecast the pricing of the cloud computing infrastructure used by any specific application service or group of applications services on a daily weekly quarterly and or yearly basis thereby facilitating accurate budget forecasting by the users of the application. The prediction interval of the pricing can be customized for each account.

The Audit Reporting Module may track relevant events in the system and facilitate displaying generating and emailing various reports and audit logs to the proper party based on user role. The module may also the HA Scheduler to automate the process of creating and sending reports to users at a scheduled time.

These are set of libraries for APIs for connecting to various cloud providers. These libraries may also have APIs for connecting directly to virtualization providers. The purpose of the module is to provide a collection of plug in APIs such that the details of obtaining resources for running application and services are abstracted from the provisioning module. The Provisioning and Deployment Management Module may leverage the plug ins for provisioning servers in various environments.

The Monitoring Module may contain components for processing the monitoring data and generating appropriate events and for collecting data from various virtual servers. The data collection component of the monitoring module may be pluggable such that any external monitoring system can be integrated with the application to collect data. The Monitoring Module may leverage both agent and agent less monitoring.

The Security Module may receive various security related information e.g. firewall access reports for the virtual servers breaches . The Security Module may provide a central processing unit for receiving security related information for various software component and services. For example an external firewall scanner monitor can send messages to the Security Module and in response the Security Module may process the information and generate appropriate events e.g. shutdown server security breach event for sending alerts notification .

The Alert Notification Processing Module may process various events from various modules and be responsible for delivering user notification via different means e.g. email SMS etc. .

The Software Audit Module may provide information about the version of software deployed on various servers. The module may have two components one to audit the virtual machines that are currently running and the other to audit the virtual machine images. The audit reports may be organized in application service context to inform the user of the version of various software components deployed on the servers that are executing the specified application s or service s.

This module may be provided to leverage the OVF standards to simplify movement and deployment of Virtual appliances and servers to different backend environments.

The Access Control Module may be responsible for maintaining all the access control rules e.g. access to root access to a virtual server access to start stop servers and applications services access to view specific data . Various modules may leverage the Access Control Module for checking user permissions for specific tasks.

The Highly Available Scheduler may provide a resilient scheduling mechanism. The HA Scheduler solution may be provided by for example a J2EE container.

The Highly Available Queuing solution for receiving and delivering messages may be provided by for example a J2EE cluster.

Some up to all of the steps described in the sections above may be implemented using a computer having a processor e.g. one or more integrated circuits programmed with firmware and or running software. Some up to all of the steps described in the sections above may be implemented using a distributed computing environment which is one example of a computer system. Some up to all of the steps described in the sections above may be implemented using a virtual computer system a virtual machine where the virtual computer environment does not have a one to one correspondence with a physical computer environment.

Descriptions of well known assembly techniques components and equipment have been omitted so as not to unnecessarily obscure the present methods apparatuses an systems in unnecessary detail. The descriptions of the present methods and apparatuses are exemplary and non limiting. Certain substitutions modifications additions and or rearrangements falling within the scope of the claims but not explicitly listed in this disclosure may become apparent to those of ordinary skill in the art based on this disclosure.

The appended claims are not to be interpreted as including means plus function limitations unless such a limitation is explicitly recited in a given claim using the phrase s means for and or step for respectively.

