---

title: Information processing apparatus and method for controlling display of print driver names
abstract: An information processing apparatus includes a first type printer driver and a second type printer driver that is different than the first type printer driver, where each driver runs on the information processing apparatus. The information processing apparatus also includes a display control unit that displays an identification of the first type printer driver as a printer driver suited to create print data based on drawing data in response to a first type application outputting the drawing data, and displays an identification of the second type printer driver as a printer driver suited to create print data based on drawing data in response to a second type application different than the first type application outputting the drawing data. The first and second type printer drivers are used for a printing apparatus.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08587824&OS=08587824&RS=08587824
owner: Canon Kabushiki Kaisha
number: 08587824
owner_city: Toyko
owner_country: JP
publication_date: 20120106
---
The present application is a continuation of U.S. Pat. No. 8 111 422 filed on Mar. 1 2011 which is a continuation of U.S. Pat. No. 7 920 280 filed on Mar. 14 2007 which claims priority from Japanese Patent Application No. 2006 075547 filed Mar. 17 2006 all of which are hereby incorporated by reference herein in their entirety.

The present invention relates to an information processing apparatus and a print setting reflection method pertaining to an information processing apparatus which may include but is not limited to for example print processing using a plurality of varying graphics engines.

It is typical for an operating system to take on a configuration such as that depicted in in order to print an image or a text on a print apparatus from an application that is being executed on a host computer. An application passes a graphics data to a graphics engine by calling a drawing function provided by the graphics engine and the graphics data is processed in the graphics engine and passed to a printer driver which generates a print data for the print apparatus typically in Page Description Language or PDL. After the print data is stored in a spooler it is sent to a print apparatus .

The graphics engine performs processing of the image data such as converting a resolution of the print data that is created in the application or simulation processing in line with the printer driver s capability. It is thus possible for the application and the printer driver to run independently of one another. The graphics engine is normally provided as a component of an operating system .

The graphics engine is not necessarily limited to one engine. It is also possible to have an operating system wherein two or more graphics engines coexist.

For example WinHEC 2005 a hardware engineering conference was sponsored in 2005 in Seattle Wash. by Microsoft. A new Microsoft operating system with the name of Windows Vista was introduced at WinHEC 2005 as having a configuration with two coexisting graphics engines as depicted in . As of Feb. 28 2005 refer to Advances in Windows Printing TWPR05001 WinHEC05.ppt May 7 2004 at Microsoft.com on the Architecture and Driver Support for Printer Technology for Windows Printing Technologies page.

A conventional Microsoft printing system uses a graphics engine called Graphic Device Interface GDI via an application that uses an application programming interface or API known as a Win32 API i.e. a Win32 application. The print data is created from the graphics data via the printer driver that is called from the GDI i.e. a GDI printer driver. The print processing route is referred to according to the embodiment as a GDI print path.

In Windows Vista a new print path known as an XPS print path is added to the existing GDI print path. With the XPS print path a graphics engine known as Windows Presentation Foundation WPF is provided by the operating system via an application that uses an API known as a WinFx API i.e. a WinFX application. A graphic data in XML Paper Specification XPF format is passed by the WPF graphics engine to the printer driver i.e. an XPS printer driver which converts the graphic data to the printer data.

The GDI and WPF graphics engines can link together. Such a link facilitates passing the graphics data from a Win32 application to an XPS printer driver as well as passing the graphics data from a WinFX application to a GDI printer driver.

Because of the link when a print is performed from the WinFX application using the GDI printer driver the graphics data is converted in the WPF graphics engine to a graphics data in the XPS format which in turn is converted to a graphics data in an EMF format. After the converted graphics data is stored in an EMF spool file a conversion to the print data is performed in the GDI driver.

When a print is performed from the Win32 application using the XPS printer driver the graphics data is converted in the GDI graphics engine to a graphics data in the EMF format which in turn is converted to a graphics data in the XPS format. After the converted graphics data is stored in an XPL spool file a conversion to the print data is performed in the XPS driver.

Thus four print paths are offered within Windows Vista. Offering either a GDI printer driver or an XPS printer driver thus allows support for print processing from both a Win32 application and a WinFx application.

Differences between the XPS format and the EMF format however lead to issues with graphics data format conversion in areas that include but are not limited to print quality feature set or print speed.

For example a graphics data that contains a logical operation such as a raster operation process ROP computation which is supported in the EMF format would not be supported in the XPS format. Thus under a specification established by Microsoft converting the graphics data that contains the logical computation with a GDI XPS conversion module that converts from the EMF format to the XPS format runs a risk of having the logical computation information being stripped out. It is possible that when the graphics data from which the logical computation information has been removed is passed to the XPS printer driver it may not be possible for an output result intended in the Win32 application to be created by the XPS printer driver.

Conversely a sophisticated graphics data that is supported in the XPS format is not supported in the EMF format. Consequently when converting such a graphics data from the XPS format to the EMF format with an XPS GDI conversion module a local bitmapping known as flattering is performed. In such a circumstance the conversion of the graphics data into a bitmap data means that no determination can be made of original object properties on the part of the GDI printer driver which thus cannot create an output result that corresponds to the object properties. Data format conversion degrades outputted image quality. For example when performing an n page print with the printer driver the bitmapped data is compressed and positioned and thus image quality is lower than when drawing a graphics object at a reduced size.

For example electronic signature information that is supported in the XPS format is not supported in the EMF format. A process of directly giving information from an application to the GDI printer driver which is supported in the EMF format is not supported in the XPS format. Thus when converting from the XPS format to the EMF format or conversely in the opposite direction if an instruction is included in the pre conversion format graphic data that uses a feature that is not supported in the post conversion format the feature will not be carried out. When a data format conversion process is performed a feature that cannot be fulfilled may be present within the graphics data of the respective formats.

An occurrence of a process including but not limited to GDI XPS conversion or XPS GDI conversion also gives rise to a process overhead which runs a risk of print processing speed being slower than a path that does not require a conversion.

Hence when a data format conversion is performed a problem occurs also with any of a quality aspect a feature set aspect or a speed aspect. Accordingly it is desirable to avoid a print path wherein the data format conversion is performed.

At the same time a selection of a printer driver to use is left to a user even when the XPS printer driver and the GDI printer driver are installed in a computer for a common print apparatus. The graphics engine in Windows Vista does not automatically perform a selection of a path that does not require a data format conversion. Many typical users are not conscious of whether an application is a Win32 application or a WinFX application nor are they aware that there are four print paths. Thus once a user selects a printer driver as a default printer driver the selected printer driver will be used regardless of the type of application. In such manner it has been difficult if not impossible to avoid a data format conversion in the print path of the GDI XPS conversion or the XPS GDI conversion.

According to an aspect of the present invention an information processing apparatus and a method for an information processing apparatus are provided such that a print setting once inputted for a printer driver may be applied to another printer driver even if the printer driver that is used is changed to another printer driver corresponding to a graphics engine that an application uses.

According to another aspect of the present invention an embodiment is directed to an information processing apparatus that includes a first graphics processing unit for converting graphics data from a first type application to first print data capable of being processed by a first type printer driver and a second graphics processing unit for converting graphics data from a second type application to second print data capable of being processed by a second type printer driver. The apparatus comprises a determination unit configured to determine whether a combination of an application and a first printer driver corresponds to a first combination of the first type application and the first type printer driver or a second combination of the second type application and the second type printer driver a user interface unit configured to enable selection of a second printer driver if it is determined that the combination of the application and the first printer driver does not correspond to the first combination and the second combination and a print setting value handling unit configured to use a print setting value that is set for the first printer driver as a print setting for the second printer driver if the second printer driver is currently selected. With this embodiment it may be possible to perform a print process via a printer driver that directly corresponds to a graphics engine that an application uses in a print processing without having to pre select a printer driver as a printer driver to use. When changing a printer driver to be used it is possible to reflect a print setting value for a pre change printer driver as a print setting value for a post change printer driver. Consequently a user will be able to obtain a high quality output that is created by the application program promptly and without undue difficulty.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings .

Following is a description of an embodiment of a print control apparatus according to the present invention. The print control apparatus is fulfilled by a computer i.e. an information processing apparatus. An example of a configuration of the computer s software is depicted. A configuration of the computer s hardware is constituted of a CPU a memory a user interface which may include but is not limited to a keyboard or a display and a file storage apparatus similar to a typical general use computer.

A printer driver is classified into two types a GDI printer driver which is a first type printer driver and an XPS printer driver which is a second type printer driver. The GDI printer driver receives the graphics data from the GDI and converts it into a print data to be transmitted to a print apparatus . The XPS printer driver receives the graphics data from the WPF and converts it into a print data to be transmitted to the print apparatus . The printing data that is created by the printer driver is transmitted to the print apparatus via a spooler .

In the present circumstance a print path that creates a print data in the GDI printer driver from the Win32 application via the GDI is referred to as a GDI print path. A print path that creates a print data in the XPS printer driver from the WinFX application via the WPF is referred to as an XPS print path. In the present circumstance the GDI print path and the XPS print path are collectively referred to as a straight print path. Aside from the GDI print path and the XPS print path however there exist a print path that creates a print data in the XPS printer driver from the Win32 application via the GDI and a print path that creates a print data in the GDI printer driver from the WinFX application via the GDI . The paths are fulfilled by converting a data format via a GDI XPS conversion module and an XPS GDI conversion module see . In the present circumstance the print paths wherein the respective graphics engines convert into the respective data formats are collectively referred to as a cross print path.

Following is a description of a print path with reference to which depicts an arrangement of a coexistence of two graphics engines in Windows Vista wherein four types of print paths are present a print path a print path a print path and a print path .

The print path depicts the GDI print path. The graphics data that is passed from the Win32 application is stored in Enhanced Metafile EMF format in an EMF spool file in the GDI after which a conversion to the print data is performed in the GDI printer driver .

The print path depicts the XPS print path that is added to Windows Vista. The graphics data that is passed from the WinFX application is stored in an XPS spool file in the WPF after which a conversion to the print data is performed in the XPS printer driver .

The print path depicts the print path when printing a data from the WinFX application in the GDI printer driver . The graphics data that is passed from the WinFX application is converted by the XPS GDI conversion module via the WPF into a graphics data in the EMF format. After the converted graphics data is stored in the EMF spool file a conversion to the print data is performed in the GDI driver .

The print path depicts the print path when printing from the Win32 application in the XPS printer driver . The graphics data that is passed from the Win32 application is converted by the GDI XPS conversion module into a graphics data in the XPS format. After the converted graphics data is stored in the XPS spool file it is changed to the print data in the XPS printer driver .

In a host computer comprises a CPU which executes a processing of a document of mixed content which may include but is not limited to a diagram a graphical image text or a chart which in turn may include but is not limited to a spreadsheet in accordance with a document processing program or other instruction that is stored in either a ROM program ROM or an external memory and the CPU universally controls all devices that are connected via a system bus .

Either the ROM e.g. program ROM or the external memory stores an operating system program OS that is a control program of the CPU or other program code. Either the ROM font ROM or the external memory stores font data or other codes that are used in the document processing. Either the ROM data ROM or the external memory stores various types of data that are used in the document processing or other processing.

A RAM functions as a main memory a work area or other area of the CPU . A keyboard controller controls a key input from a keyboard or a pointing device not shown . A CRT controller controls a display of a CRT display referred to herein as CRT or display . A disk controller controls access to a hard drive a floppy disk drive or other external memory whereupon may be stored among other things a boot program various types of applications the font data a user file an edit file or a program that generates a printer control command. The printer drivers pertaining to embodiments of the present invention are also stored in the external memory .

A printer controller is connected to the printer via a prescribed bi directional interface and executes a communications control processing with the printer . The CPU executes for example an outline font generation or raster sizing process on a display information RAM that is configured in the RAM allowing WYSIWYG on the display .

The CPU opens a variety of windows that are registered in accordance with a command that is directed by a mouse cursor or other manner on the display and executes a variety of data processing. When a user requests a print operation a window pertaining to a print setting opens allowing a setting of a print processing method for a print driver including a printer setting or a selection of a print mode.

In the printer a printer CPU outputs an image signal as an output information to a printer engine print module that is connected to a system bus via a print module interface I F in accordance with either a control program or other instruction that is stored in a ROM program ROM or a control program or other instruction that is stored in an external memory .

The ROM program ROM stores a control program or other instruction of the CPU . The ROM font ROM stores a font data or other data that is used when generating the output information and the ROM data ROM stores information that is used on the host computer or other data in the event the printer does not have an external memory e.g. a hard drive .

The CPU of the printer is capable of communication with the host computer via an input unit thus constituting capability for communicating with the host computer including but not limited to information internal to the printer. A RAM functions as a main memory a work area or other area of the CPU . In an embodiment the RAM may have its capacity expanded via an optional RAM that is connected to an expansion port not shown . The RAM is used for including but not limited to an output information development region an environment data storage region or an NVRAM. Access to the external memory which may include but is not limited to the hard drive or an IC card is controlled by a memory controller .

The external memory is optionally connected and stores information which may include but is not limited to font data an emulation program or form data. Upon an operation panel control module are mounted a switch an LED display module or other device for control. The external memory is not limited to one module rather it comprises at least one module and may be comprised of more than one module and may be constituted such that a plurality of external memory within which are stored an optional font card in addition to an internally loaded font or a program that interprets a printer control language that varies according to language. An NVRAM not shown may also be possessed which stores a printer mode setting information from the operation panel .

The GDI printer driver is constituted of a GDI user interface driver and a GDI graphics driver . The GDI user interface driver stores a printer driver user interface display or print setting information that is inputted by a user in a registry. The GDI graphics driver receives the corresponding graphics data a Device Driver Interface or DDI function from the graphics engine and creates printer data from the graphics data in accordance with the print setting information that is stored in the GDI user interface driver .

The XPS printer driver is constituted of an XPS user interface driver and an XPS graphics driver . The XPS user interface driver stores a printer driver user interface display or print setting information that is inputted by a user in a registry. The XPS graphics driver receives the corresponding graphics data from the graphics engine and creates printer data from the graphics data in accordance with the print setting information that is stored in the XPS user interface driver .

In the present circumstance it is possible for the GDI user interface driver and the XPS user interface driver to store the print setting information as a setting information in a shared setting information area other than the registry in which the respective printer drivers store their print setting information. In concrete terms both the GDI user interface driver and the XPS user interface driver are capable of storing the setting information in the setting information storage area and of reflecting the print setting that is stored in either the registry or the setting information in the user interface configuration screen. Each respective user interface driver is to read or save the print setting information in a designated format known as DEVMODE. The print setting information that is specific to the printer driver contains information for designating for example what may include but are not limited to an n in 1 that creates a reduced layout of one page of data in one sheet of paper a printer paper orientation a page sequence or a printer paper tray to be used.

Whereas describes the GDI user interface driver and the XPS user interface driver as differing components it would also be permissible to use a single shared user interface driver that comprises a feature set of both user interface drivers. In such instance the GDI printer driver comprises the shared user interface driver and the GDI graphics driver and the XPS printer driver comprises the shared user interface driver and the XPS graphics driver .

When the user interface driver receives a user interface display instruction from the application and via the graphics engine and it obtains the name of the application from an application information obtainment module that calls the user interface driver according to an embodiment. According to an embodiment information is obtained as to whether the application is the Win32 application or the WinFX application that is application type information. By using a GetModuleFileName or other function that is provided by the Win32 API it is possible to obtain a process name that calls the user interface driver i.e. an executable file name according to an embodiment. It is possible to determine whether the application that calls the user interface driver is the Win32 application or the WinFX application as follows. A Dynamic Link Library DLL which the executable file imports is obtained from a header portion that is maintained by the executable file whose name is obtained by the function. A determination is made as to whether or not a module that is specific to a WinFX application is present within the imported DLL. For example a prior list and storage of a name of a module that is specific to WinFX is made the module name that is obtained is searched from the list and it is possible to determine that the module is specific to WinFX if the module is found to be on the list.

While a determination is thus made as to whether the application is the Win32 application or the WinFX application it is further possible to acquire for example the application type information using an API that supplies the application type if the operating system offers the API. It may instead be possible to link a process name i.e. the executable file name within the user interface driver and adopt such a method as saving an application table that stores the type information that shows whether the application is the Win32 application or the WinFX application. It is desirable that the method be capable of displaying a maintenance user interface for maintaining the application table and of updating the application table by way of input from a user. By using the GetModuleFileName or other function the user interface driver obtains the process name that calls the user interface driver and searches the application table with the process name. If a match is found the application name that has been assigned to the process name is the name of the application that calls the user interface driver. The type of the application that has been assigned to the process name is the type of the application that calls the user interface driver.

A determination is made by a combination determination unit as to whether or not the application and the user interface driver that the application calls are suitable for one another. A criterion for the determination is depicted in . Suitability refers to conformity between the graphics engine that the application uses and the printer driver. That is to say it is unnecessary to convert the format of the graphics data for example EMF XPS that is outputted by the graphics engine. The graphics engine that the application uses is determined in accordance with the application type. Accordingly knowing the application type information and the printer driver that is selected within the application allows determining suitability. The application type may be obtained via the foregoing operations. The selected printer driver may be specified by querying the selection information if the selection information is saved on the computer. If the information on the printer driver being used which may include but is not limited to an identifier may also be passed from the application program that performs a print to the graphics engine and queried in the user interface driver the information may also be queried. If the printer driver identifier may be queried it is possible to determine whether the printer driver is the XPS printer driver or the GDI printer driver that is to say the printer driver type. For example it is possible to create and save a table that associates the printer driver name or identifier with the type information and determine the printer driver type by querying the table. That is to say the printer driver identifier shows the type of the data format being handled and the printer model. Suitability also expresses a union between an application and a printer driver of a common type. A determination of whether or not the application and the printer driver are of a common type must also be performed on a graphics engine in order to determine the necessity of data format conversion and it will also be possible to adopt the same determination criteria therefor.

If it is determined in the combination determination unit that the combination of the application and the printer driver is not a suitable one a print setting step is offered to a user via a setting unit . That is a user interface unit displays a print setting screen. A user interface configuration memory unit stores a configuration value that a user inputs in the print configuration screen i.e. a print setting information linked with the identifier of the selected printer driver and together with the name of the application or the name of the executable file in a setting information storage area as the setting information . The setting information storage area may be an area that is not erased even when a print setting process is finished including but not limited to a hard drive or a registry at a different address from the foregoing registry. It is necessary however that the setting information storage area be addressable by both the GDI user interface driver and the XPS user interface driver . The printer driver identifier that is linked and saved with the print setting information is the printer driver identifier that is unsuited to the cross print path in the present example. If the unsuited printer driver is selected however it is permissible to relate the printer driver to a common printer and link and save the identifier of the printer driver of a different type with the print setting information. In such circumstance the printer driver of the different type forms the straight path with the graphics engine that is associated with the application.

After a save of the print setting received from the user via the user interface configuration unit and the print setting received from the user interface configuration memory unit is performed a switching dialog display unit displays a dialog box see for details. The dialog box contains a specified sequence of text and a button that calls for a confirmation. The window is closed by the user pressing the button . Selecting a new suitable printer driver from the presently selected unsuitable printer driver also known as switching is performed by the user via the application print instruction user interface.

If it is determined in the combination determination unit that the combination of the application and the printer driver is a suitable one a setting obtainment unit obtains the setting information . The setting obtainment unit determines whether or not the application name or executable file name that is obtained in the application information obtainment module matches the application name that is contained within the obtained setting information and which is linked to the print setting information and saved. If a plurality of the setting information is saved each set of the setting information is searched and a search is conducted as for a possible match with the application name that is obtained in the application information obtainment module . An additional search condition in the search is the printer driver identifier that is linked to the print setting information. In the present example if the combination of the application and the printer driver is unsuitable the identifier of the unsuitable printer driver is linked to the print setting information and saved. In such circumstance the search condition is a correspondence with the currently selected printer driver and the shared printer and that the identifier of the printer driver that differs in type is contained within the setting information. That is the search condition is that the identifier of the printer driver is included whose type forms a cross path for the type of application for which the newly selected printer driver forms a straight path. The setting information that satisfies the search condition and contains the application name that is obtained in the application information obtainment module is the object of the search.

Distinct from the present example is a conceivable case wherein the identifier of the suitable printer driver is linked to the print setting information and saved if the combination of the application and the printer driver is unsuitable. In such circumstance the search condition is that the printer driver identifier that matches the currently selected printer driver identifier is contained within the setting information.

If the printer driver identifier search condition is satisfied and is saved in the setting information together with the application name that is obtained in the application information obtainment module the print setting information that is linked to the printer driver identifier is the targeted print setting information. If the targeted print setting information is found and if there is a request from the application print instruction user interface to display the user interface driver setting screen the user interface unit displays the setting screen on the display that reflects the print setting information. The setting unit receives an input of a setting item on the setting screen. The user may also examine the setting screen and change the print setting information. Thus a print setting device is offered via the setting unit . If the user saves either the displayed setting information or the changed setting information and inputs the print instruction the selected printer driver uses the saved print setting information to convert the graphics data into the print data and transmits the print data to the printer.

Even if the application performs a print request without performing the user interface driver call the graphics driver i.e. the GDI graphics driver or the XPS graphics driver converts the graphics data into the print data and transmits the print data to the printer according to the print setting information that is contained within the setting information if the setting information is saved that contains the application name that is obtained in the application information obtainment module .

If the application name that matches the name of the application that calls the user interface driver is not found within the setting information the setting obtainment unit duplicates the preset default setting information in the setting information . The default setting information is installed together with the printer driver when the printer driver is installed. It may also be changed after installation.

By the process of the user interface driver the print setting information that the user configures via the user interface driver of the printer driver that forms the cross print path is linked with the printer driver identifier and the application name and saved. If the printer driver that forms the cross print path is selected it is possible to alert the user of the use of the printer driver that makes the straight print path. It is possible to continue using the print setting information that is linked with the printer driver identifier and the application name and saved even if the printer driver that forms the straight print path is subsequently changed by the user. Consequently it is possible to reflect the print setting that is performed in the pre switch printer driver user interface driver in the print result from the post switch printer driver.

Similarly it is determined that selecting the XPS printer driver when printing from the WinFX application is suitable because printing with the WinFX application uses the XPI graphics engine and print processing is performed as the straight print path for the XPS printer driver within the XPS graphics driver . It is determined that selecting the GDI user interface driver when printing from the WinFX application is unsuitable because printing with the WinFX application uses the WPF graphics engine the XPS GDI conversion is performed and print processing is performed as the cross print path for the GDI printer driver within the GDI graphics driver . Consequently a value is registered with the relevant item that corresponds to the decision.

According to the embodiment when performing the graphics data output directly from the application to the graphics driver without launching the user interface driver it is not possible for the user interface driver to perform the determination of the suitability or the unsuitability of the application and the printer driver or to use the dialog box to notify the user of the recommended suitable printer driver. If the direct output of the graphics data from the application to the graphics driver is performed after using the dialog box to notify the user of the recommended suitable printer driver without launching the user interface driver however it is possible to draw on the saved print setting information to generate the print data.

In when the user prints from the application upon giving an instruction to the application to perform the printer driver print setting the user interface driver is called by the application based on the identifier of the selected printer driver. The setting instruction is simultaneously given to the user interface driver which obtains the application information i.e. the name and type and a determination is made regarding the compatibility i.e. the conformity or the suitability of the application and the selected printer driver as per the configuration in . If the selected printer driver is an unsuitable printer driver then in response to the OK button being pressed the print setting information that the user has set is linked to the application name and the identifier of the unsuited printer driver which is the identifier of the selected printer driver in the present example and saved and a dialog box such as that depicted in is displayed when the user interface driver terminates. Upon receiving the dialog box display when the user interface driver is launched while the unsuited printer driver is selected the user selects a new printer driver for the application in accordance with the dialog box display. If the instruction to perform the print setting is re issued to the application thereafter the suited user interface driver is called by the application based on the name of the newly selected printer driver and the setting instruction is given to the user interface driver.

The user interface driver that is called is the user interface driver of a suited printer driver and the setting screen is displayed and saved based on the print setting instruction that was saved in the unsuited printer driver user interface driver . Consequently it is unnecessary for the user to re input the information that the user already configured when the unsuited printer driver was selected. A suited graphics driver is called by simply having the user instruct the application in print processing. It is thus possible to avoid the cross path associated with the data format conversion of the print path or the print path in . Hence it is possible to avoid the print path wherein exists an issue pertaining to mishandling of a graphic print speed or feature set and perform print processing on the straight path for example the print path i.e. the GDI print path or the print path i.e. the XPS print path.

When the user prints from the application instructing the printer driver for the print setting causes the application to issue the print setting user interface display instruction to the specified printer driver s user interface driver. Consequently the printer driver s user interface driver receives the display instruction as per step S .

Upon receipt of the print setting user interface display instruction the user interface driver uses the aforementioned API to obtain information containing the name of the application or the name of the executable file that calls the API. The user interface driver also obtains the type information based on the name as to whether the called application is a Win32 application or a WinFX application as per step S .

The user interface driver determines whether or not the printer driver that contains the user interface driver is suited or not in accordance with the obtained application type and the identifier of the selected printer driver in particular the type that is specified by the identifier per step S . It is determined to be suited if the application and the printer driver form the straight print path as depicted in the relational table in .

Following is a description of the process when the printer driver is determined to be unsuited NO in step S . The user interface driver displays the print setting user interface following the display instruction from the application and receives the print setting instruction from the user per step S . When an input signifying that the user configuration change is complete by pressing the OK button as per step S the user interface driver links the name of the original called application or the executable file name the identifier of the unsuited printer driver and the inputted print setting information and saves the linked information in the prepared setting information save area as the setting information per step S . Thus the user interface driver performs the display of the change recommendation dialog box that recommends the suited driver from per step S and the process when it is determined that the printer driver is unsuited in step S terminates.

The user may then select a new printer driver and test printing following a display in step S . If the application subsequently issues a print request and the graphics data output is performed the graphics data format conversion is performed as the cross print path the print data is generated using the graphics driver and the print data is transmitted to the printer.

If on the other hand the printer driver is determined to be suited to the called original application YES in step S the user interface driver reads the saved setting information that is saved in the setting information save area per step S . The user interface driver searches the setting information and determines whether or not the name of the called original application or the executable file name is saved. If it is saved a determination is made that the print setting information that corresponds to the name of the called original application or the executable file name is present per step S . The search uses the information that signifies the printer driver identifier to find the print setting information that was saved when the unsuited printer driver was called.

If the print setting information that corresponds to the name of the called original application is present the print setting information is saved as the print setting information of a print job to be performed and reflected in the designated print setting user interface display screen and the group of the print setting information the printer driver identifier and the application name that is saved in the print setting information save area is deleted per step S . The print setting instruction is subsequently received from the user per step S . When the setting value is changed via the print setting user interface display screen and the OK button is pressed the input setting value is saved in the registry.

When the notice is received from the user that the setting change is completed per step S the process when it is determined that the printer driver is suited in step S terminates. Subsequently the data is passed from the application to the graphics engine and the graphics data is then passed from the graphics engine to the printer driver. As the selected printer driver has been determined to be suited no data format conversion is performed. The printer driver converts the graphics data into data described in PDL and transmits the data to the printer following the print setting information that is saved in the registry in step S . According to the embodiment when generating the print data the setting value that is saved in the registry is used with the setting value that is configured in the unsuited user interface driver being saved in the shared print setting information save area and made readable by the suited user interface driver.

When the print setting information that is saved in the shared print setting information save area is reflected in the print setting information of the suited printer driver it is possible to perform one instance of continuity of the print setting information by deleting the read print setting information. When subsequently reprinting from the same application the lack of the print setting information that corresponds to the setting information storage area means that either the default setting value or the setting value that is registered in the registry is reflected in the print setting information. Consequently the subsequent print setting suffers no negative effect.

A configuration that satisfies the embodiment may be a configuration wherein the XPS printer driver and the GDI printer driver coexist on a single print apparatus or where the XPS printer driver and the GDI printer driver exist as the component that converts the regular graphics data into the printer data.

When the printer driver is switched in the user interface setting instruction is not passed by the suited user interface driver and the print processing commences directly in the graphics driver the information on the application that calls the graphics driver and not the user interface driver is obtained and the print processing performed based on the application name. In such circumstance the process of steps S and later in are executed by the graphics driver. After the user interface driver has executed the process of steps S and later in deleting the read print setting information allows preventing overlapping redundant execution of step S .

It is thus possible to reuse the print setting that is inputted when the unsuited printer driver is selected after the selection is switched to the suited printer driver even if the user interface driver is not called.

According to the embodiment when the unsuited printer driver is selected the printer driver identifier is linked to the print setting information and the application name and saved. If the printer driver that is installed on the computer corresponds to only one printer however there is no need to save the printer driver identifier because the printer driver type is restricted to two types according to the embodiment. If the selected printer driver is unsuited it is possible to specify that the print setting information that corresponds to the application name is the print setting information that was saved for the application when the unsuited printer driver was selected if the print setting information that corresponds to the application name was saved. Consequently there is no need to save the printer driver identifier.

The present invention may be applicable whether to a system that is constituted of a plurality of devices which may include but are not limited to for example the host computer an interface device a reader and the printer or an apparatus that is constituted of a single device which may include but is not limited to for example a photocopier or a fax machine. The objectives of the present invention are also achieved by supplying a recording medium upon which is recorded a program code that fulfills the feature set of the embodiment to the system or the device and by a computer in the system or the device reading and executing the program code that is stored on the recording medium. In such circumstance the program code itself that is read out from the recording medium fulfills the feature set of the embodiment and the program code itself and the recording medium that stores the program code will constitute the present invention.

The present invention also includes a circumstance wherein an actual process in whole or in part is performed by the operating system or other code that runs on the computer in accordance with the instruction of the program code and the process fulfills the feature set of the embodiment. An instance wherein the program code that is read out from the recording medium is written to a memory unit that is built into an expansion card that is fitted into the computer or an expansion unit that is connected to the computer also is applicable to the present invention. In such circumstance the actual process in whole or in part is performed by a CPU or other unit that is built into the expansion card or the expansion unit in accordance with the instruction of the program code and the process fulfills the feature set of the embodiment.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

