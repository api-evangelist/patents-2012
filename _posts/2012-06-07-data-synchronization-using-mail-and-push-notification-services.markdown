---

title: Data synchronization using mail and push notification services
abstract: Systems, methods, and computer program products for data synchronization across multiple devices using mail and push notification services is disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09071564&OS=09071564&RS=09071564
owner: Apple Inc.
number: 09071564
owner_city: Cupertino
owner_country: US
publication_date: 20120607
---
Many modern mobile devices allow users to create and edit documents such as notes. Often a user would like to synchronize data between two or more devices. It is desirable to have a system architecture that can synchronize data across multiple devices with reduced delay.

Systems methods and computer program products for data synchronization across multiple devices using mail and push notification services is disclosed.

In some implementations a method comprises receiving a request to register a mailbox for a push event from an application sending a token for the registered mailbox to the application requesting a push event for the registered mailbox from a mail server receiving a push notification for the registered mailbox from a push notification server the push notification indicating that the registered mailbox has changed and sending the push notification to the application using the token.

In some implementations a method comprises sending a request for a list of mailboxes to a mail server receiving the list of the mailboxes from the mail server registering the mailboxes with a mail client receiving a token for a registered mailbox from the mail client receiving a push notification for the registered mailbox from the mail client indicating a change in the registered mailbox and using the token to request an update to the changed mailbox from the mail server.

In some implementations a method comprises receiving a request for a list of mailboxes from an application sending the list of mailboxes to the application receiving a request for push events for mailboxes in the list from a mail client that is in communication with the application sending push event information to the mail client including a subset of mailboxes from the list for which push notifications are available sending a request for a push notification to a push notification server for the subset of mailboxes in response to a push notification for a changed mailbox in the subset of mailboxes receiving a request for an update for the changed mailbox from the application and sending the requested update to the application.

Other implementations can include systems apparatuses and computer readable mediums whether or not such implementations are included in the original claims of this specification.

Particular implementations disclosed herein provide one or more of the following advantages. An architecture that includes a mail server and push notification server is configured together with a client mail application and data access daemon to synchronize data across multiple devices with reduced delay.

The details of the disclosed implementations are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

Servers can be implemented by one or more server computers. Mail Server can implement Internet Message Access Protocol IMAP . Network can include any number of wireless or wired networks including local area networks and wide area networks e.g. the Internet . Client device can be any device mobile or stationary that is capable of communicating with network using any suitable communication protocol. Some examples of client device include but are not limited to a desktop or notebook computer a smart phone or e mail device an electronic tablet a game console and a television set top box or other appliance.

In some implementations client device can include data access daemon hereafter DA and mail client . DA monitors changes to mailboxes for one or more applications. If an application e.g. a notes application requests updates DA is called e.g. through Application Programming Interface API to fetch the updates for the application. Mail client can be any known push e mail application e.g. a client application that supports IMAP in which new email is actively transferred pushed by mail server to mail client .

Although only one device is shown in for illustrative purposes any number of client devices can be coupled to system . An exemplary architecture of client device is described in reference to .

In an exemplary use scenario the synchronization of documents is automatically initiated when a client application that requires synchronization of electronic documents is launched on client device . An example client application is a notes application that allows a user to take notes on their mobile device. The client application can access data for synchronization using DA . When the user launches the notes application the notes are automatically and transparently synchronized using system and the process described in reference to .

During event DA sends a request to mail server for a list of mailboxes of interest. Mailboxes are data structures for storing e mail. Mailboxes can also store other data such as notes. During event mail server responds by sending the list of mailboxes to DA .

During event DA registers the mailboxes of interest e.g. mailboxes with notes with mail client for push events. During event mail client responds by sending a token for each mailbox to DA . During event which can be at the same time as event mail client contacts mail server e.g. through a different connection and requests a push event for each registered mailbox. Mail client provides an account ID and device token to mail server . Server stores those values.

The account ID can be a unique random string that is chosen when the mail account was setup on device . The device token can be a unique identifier that identifies device to push notification server . The account ID and device token uniquely identify a single mail account on device .

In some implementations mail client may send local notifications to DA on a schedule acting as if push notifications had arrived from push notification server for those mailboxes for which push notifications were unavailable.

During event when a registered mailbox changes mail server sends a request to push notification server for push events for the registered mailboxes. The request can include the account ID device token and the mailboxes received during event .

During event which immediately follows event a push notification is sent by push notification server to mail client for the changed mailbox. During event mail client sends the push notification for the changed mailbox to DA using the assigned token for that mailbox. In response to the push notification DA performs a sync of the mailbox that corresponds to the token following standard IMAP synchronization rules to download new messages in the mailbox update flags of existing messages and remove messages that are no longer present.

In some cases push notification server may only retain the last N messages in a notification queue while device is unreachable. If N 1 or more notifications arrive the oldest notifications may be lost or dropped due to the size limit of the notification queue. Accordingly if push notifications are retained in the notification queue on push notification server e.g. when device is off then when device is detected again by push notification server device can receive the notifications in the queue. The first notification out of the queue can include data e.g. a flag set indicating that the notifications were retained on push notification server while device was unavailable. When mail client receives the flagged notification mail client generates local notifications that can include each of the registered mailbox tokens. Local notifications are a broadcast mechanism on device for notifying other local processes on device . The notifications have no payload and can be arbitrary strings.

In some implementations DA can be informed of the local notifications so that it can look for missed changes. Informing DA of local notifications can be used in systems where not all data from all the notifications is retained on push notification server . Rather in such systems only the data from the last notification is delivered and other notifications along with their payload are dropped. Accordingly if notifications were retained one of the retained notifications may have contained information to update a mailbox that the final notification no longer has. In these types of systems DA be informed of the local notifications and in response synchronize all of its monitored mailboxes to ensure that all updates to mailboxes have been processed.

The process described above allows the use of mail and push notification services to synchronize data across multiple devices with reduced delay.

Architecture can be implemented in any device including but not limited to portable or desktop computers smart phones and electronic tablets television systems game consoles kiosks and the like. Architecture can include memory interface data processor s image processor s or central processing unit s and peripherals interface . Memory interface processor s or peripherals interface can be separate components or can be integrated in one or more integrated circuits. The various components described above can be coupled by one or more communication buses or signal lines.

Sensors devices and subsystems can be coupled to peripherals interface to facilitate multiple functionalities. For example motion sensor light sensor and proximity sensor can be coupled to peripherals interface to facilitate orientation lighting and proximity functions of the device. For example in some implementations light sensor can be utilized to facilitate adjusting the brightness of touch surface . In some implementations motion sensor e.g. an accelerometer gyros can be utilized to detect movement and orientation of the device. Accordingly display objects or media can be presented according to a detected orientation e.g. portrait or landscape .

Other sensors can also be connected to peripherals interface such as a temperature sensor a biometric sensor or other sensing device to facilitate related functionalities.

Location processor e.g. GPS receiver can be connected to peripherals interface to provide geo positioning. Electronic magnetometer e.g. an integrated circuit chip can also be connected to peripherals interface to provide data that can be used to determine the direction of magnetic North. Thus electronic magnetometer can be used as an electronic compass.

Camera subsystem and an optical sensor e.g. a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor can be utilized to facilitate camera functions such as recording photographs and video clips.

Communication functions can be facilitated through one or more communication subsystems . Communication subsystem s can include one or more wireless communication subsystems. Wireless communication subsystems can include radio frequency receivers and transmitters and or optical e.g. infrared receivers and transmitters. Wired communication system can include a port device e.g. a Universal Serial Bus USB port or some other wired port connection that can be used to establish a wired connection to other computing devices such as other communication devices network access devices a personal computer a printer a display screen or other processing devices capable of receiving or transmitting data. The specific design and implementation of the communication subsystem can depend on the communication network s or medium s over which the device is intended to operate. For example a device may include wireless communication subsystems designed to operate over a global system for mobile communications GSM network a GPRS network an enhanced data GSM environment EDGE network 802.x communication networks e.g. WiFi WiMax or 3G networks code division multiple access CDMA networks and a Bluetooth network. Communication subsystems may include hosting protocols such that the device may be configured as a base station for other wireless devices. As another example the communication subsystems can allow the device to synchronize with a host device using one or more protocols such as for example the TCP IP protocol HTTP protocol UDP protocol and any other known protocol.

Audio subsystem can be coupled to a speaker and one or more microphones to facilitate voice enabled functions such as voice recognition voice replication digital recording and telephony functions.

I O subsystem can include touch controller and or other input controller s . Touch controller can be coupled to a touch surface . Touch surface and touch controller can for example detect contact and movement or break thereof using any of a number of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with touch surface . In one implementation touch surface can display virtual or soft buttons and a virtual keyboard which can be used as an input output device by the user.

Other input controller s can be coupled to other input control devices such as one or more buttons rocker switches thumb wheel infrared port USB port and or a pointer device such as a stylus. The one or more buttons not shown can include an up down button for volume control of speaker and or microphone .

In some implementations device can present recorded audio and or video files such as MP3 AAC and MPEG files. In some implementations device can include the functionality of an MP3 player and may include a pin connector for tethering to other devices. Other input output and control devices can be used.

Memory interface can be coupled to memory . Memory can include high speed random access memory or non volatile memory such as one or more magnetic disk storage devices one or more optical storage devices or flash memory e.g. NAND NOR . Memory can store operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks. Operating system may include instructions for handling basic system services and for performing hardware dependent tasks. In some implementations operating system can include a kernel e.g. UNIX kernel .

Memory may also store communication instructions to facilitate communicating with one or more additional devices one or more computers or servers such as communicating with servers through network . Communication instructions can also be used to select an operational mode or communication medium for use by the device based on a geographic location obtained by the GPS Navigation instructions of the device. Memory may include graphical user interface instructions to facilitate graphic user interface processing sensor processing instructions to facilitate sensor related processing and functions phone instructions to facilitate phone related processes and functions electronic messaging instructions to facilitate electronic messaging related processes and functions including instructions for implementing the mail client and data access daemon described in reference to web browsing instructions to facilitate web browsing related processes and functions media processing instructions to facilitate media processing related processes and functions GPS Navigation instructions to facilitate GPS and navigation related processes camera instructions to facilitate camera related processes and functions and other instructions . The memory may also store other software instructions for facilitating other processes features and applications such as applications related to navigation social networking location based services or map displays.

Each of the above identified instructions and applications can correspond to a set of instructions for performing one or more functions described above. These instructions need not be implemented as separate software programs procedures or modules. Memory can include additional instructions or fewer instructions. Furthermore various functions of the mobile device may be implemented in hardware and or in software including in one or more signal processing and or application specific integrated circuits.

The features described can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The features can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device for execution by a programmable processor and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output.

The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language e.g. Objective C Java including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors or cores of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer can communicate with mass storage devices for storing data files. These mass storage devices can include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with an author the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the author and a keyboard and a pointing device such as a mouse or a trackball by which the author can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

One or more features or steps of the disclosed embodiments can be implemented using an Application Programming Interface API . For example the data access daemon can be accessed by another application e.g. a notes application using an API. An API can define on or more parameters that are passed between a calling application and other software code e.g. an operating system library routine function that provides a service that provides data or that performs an operation or a computation.

The API can be implemented as one or more calls in program code that send or receive one or more parameters through a parameter list or other structure based on a call convention defined in an API specification document. A parameter can be a constant a key a data structure an object an object class a variable a data type a pointer an array a list or another call. API calls and parameters can be implemented in any programming language. The programming language can define the vocabulary and calling convention that a programmer will employ to access functions supporting the API.

In some implementations an API call can report to an application the capabilities of a device running the application such as input capability output capability processing capability power capability communications capability etc.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made. Elements of one or more implementations may be combined deleted modified or supplemented to form further implementations. As yet another example the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

