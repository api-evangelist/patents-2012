---

title: Method and apparatus for client application customization
abstract: Methods and apparatus to provide client application customization including requesting and receiving, by a client browser on a client machine, a first file from a server, running the first file as a client application, which looks to identify user preferences on the client machine, reading, parsing and loading into memory, by a computer processor on the client application, the identified user preferences as action scripts, and rendering the application using the action scripts. This arrangement saves server resources by customization being performed locally.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09207703&OS=09207703&RS=09207703
owner: EMC Corporation
number: 09207703
owner_city: Hopkinton
owner_country: US
publication_date: 20120628
---
As is known in the art storage systems such as cloud storage systems contain a relatively large number of hardware devices and components and software applications modules and components. With many different infrastructure devices and applications in the cloud storage system there can be significant client customization. In conventional systems servers must maintain a significant amount of user customization information for populating and rendering web pages with user preferences.

In general web pages rendered by browsers are constructed at the server after applying its preferences and modifications at the server. Any client side changes in these pages are transmitted to and from the client and the server which are preserved at the server end specific to each user. When the client customizes the user interface UI components the changes are sent to server. At the next client login before sending pages to the client the server processes and populates the pages after applying the preserved user preferences.

In one aspect of the invention a method comprises requesting and receiving by a client browser on a client machine a first file from a server running the first file as a client application which looks to identify user preferences on the client machine reading parsing and loading into memory by a computer processor on the client application the identified user preferences as action scripts and rendering the application using the action scripts.

The method can further include more or more of the following features first file comprises a .swf file the first file enables multimedia vector graphics and action scripts the user preferences are encrypted on the client machine sending status of preferences saved on the client machine to the client browser and sending the status to the client application the user preferences are saved in XML checking for an update of the user preferences the user preferences enable for a view at least one of the following adding renaming the view removing the view ordering multiple views adding columns inside the view removing columns inside the view ordering multiple columns inside the view from a settings menu option ordering multiple columns inside the view by the user sorting for each column inside the specific view a refresh interval for each of the specific views column width for each visible column showing and hiding a filter panel specific to the view showing values inside the filter panel specific to the view and or the client machine is coupled to a cloud computing system having cloud components including at least one of a fabric interconnect in a compute layer a switch in a network layer and a storage array in a storage layer the cloud computing system having a management layer.

In another aspect of the invention an article comprises a computer readable medium containing non transitory stored instructions that enable a machine to perform requesting and receiving by a client browser on a client machine a first file from a server running the first file as a client application which looks to identify user preferences on the client machine reading parsing and loading into memory by the client application the identified user preferences as action scripts and rendering the application using the action scripts.

The article can further include one or more of the following features the first file comprises a .swf file the first file enables multimedia vector graphics and action scripts the user preferences are encrypted on the client machine sending status of preferences saved on the client machine to the client browser and sending the status to the client application checking for an update of the user preferences the user preferences enable for a view at least one of the following adding renaming the view removing the view ordering multiple views adding columns inside the view removing columns inside the view ordering multiple columns inside the view from a settings menu option ordering multiple columns inside the view by the user sorting for each column inside the specific view a refresh interval for each of the specific views column width for each visible column showing and hiding a filter panel specific to the view showing values inside the filter panel specific to the view and or the client machine is coupled to a cloud computing system having cloud components including at least one of a fabric interconnect in a compute layer a switch in a network layer and a storage array in a storage layer the cloud computing system having a management layer.

In a further aspect of the invention a system comprises a processor and a memory containing stored instructions that enable the system to request and receive by a client browser on a client machine a first file from a server run the first file as a client application which looks to identify user preferences on the client machine read parse and load into memory the identified user preferences as action scripts and render the application using the action scripts. In one embodiment the first file comprises a .swf file.

The compute domain comprises components such as blade servers chassis and fabric interconnects that provide the computing power for the platform. The storage domain comprises the storage components for the platform. The network domain comprises the components that provide switching and routing between the compute and storage domains within and between platforms and to the client or customer network.

The management domain can include a number of applications to perform various functions for overall control configuration etc of the various platform components. For example management applications can include a virtualization function such as VSPHERE VCENTER by VMware of Palto Alto Calif. A further management application can be provided as the Unified Computing System UCS by Cisco. It is understood that the blade chassis and fabric interconnection can be considered part of the UCS. Another management application can includes a management interface such as EMC UNISPHERE to provide a flexible integrated experience for managing existing storage systems such as CLARIION and CELERRA storage devices from EMC. A further management application includes a platform element manager such as Unified Infrastructure Manager UIM by EMC for managing the configuration provisioning and compliance of the platform.

The unified infrastructure manager further includes a change and configuration management module a policy based compliance and analysis module a unified infrastructure provisioning module a consolidation topology and event service module and an operational awareness module . The various modules interact with platform elements such as devices in compute network and storage domains and other management applications.

In one aspect of the invention a uniform infrastructure management module includes client application customization automatically at the client based upon preferences saved by the user. In general a client machines requests and receives a file such as a SWF flash file from the server. The downloaded file runs and looks for existing user preferences which are loaded into memory as action script objects. During rendering at the screen gets painted these objects get customized in accordance with the saved preferences.

It is understood that various vendor specific terminology product name jargon etc. may be used herein. It is further understood that such vendor specific information is used to facilitate an understanding of embodiments of the invention and should not limit the invention in any way. Any specific vendor information should be construed mean a generic product function or module.

Some exemplary items are set forth below. It is understood that one of ordinary skill in the art is familiar with the generic architecture and functionality of a vendor specific terms.

UIM Provisioning or UIM P EMC Unified Infrastructure Management Provisioning that provides simplified management for VCE VBLOCK by managing the components of VBLOCK platforms as a single entity and easily define and create infrastructure service profiles to match business requirements.

VBLOCK A pre architected and pre qualified environment for virtualization at scale storage fabric compute hypervisor management and security.

Model Service Adapter A service that uses the RESTful interface to expose the types of resources and instances of the data sources.

While exemplary embodiments of the invention are shown and described in conjunction with particular client server application and browser configurations including SWF flash for client customization it is understood that alternative embodiments can include other applications and configurations readily understood by one of ordinary skill in the art well within the scope of the claimed invention.

As is well known in the art SWF is an ADOBE FLASH file format used for multimedia vector graphics and ACTIONSCRIPT object oriented programming language from Macromedia Inc. SWF files can contain animations or applets of varying degrees of interactivity and function. A variety of well known applications can generate files in the SWF format.

Exemplary embodiments of the invention provide more efficient user preference utilization by customizing client applications that are loaded in the client browsers. The applications are customized automatically at the client itself based on the preferences saved by the user dynamically at runtime even before rendering to view and immediately after download to client.

In general the user sends the request to the server using the client browser . The server responds with the SWF Flash file to load on the client . An embedded plugged in flash container starts running the SWF Flash file after finishing the download. The downloaded SWF Flash file begins to look for preferences at the client machine that are already available or saved. If the corresponding preferences are available the currently running Flash SWF file reads parses and loads the preferences into the memory as action script objects. During its rendering time e.g. when the screen is actually getting painted at runtime these components get customized as per the saved preferences one by one. The container then gets notified for visualization.

With this arrangement the use of network resources is reduced the use of memory at the server is reduced the use of server processing resources is reduced server response time is decreased and the amount of server side scripting is reduced.

The exemplary list of features below should function when a user is performing operations during a login session 

The process is the same when applying the preferences into the UI when it is rendering a web page the PrefUtils object first checks for existing preferences. If the preferences are available retrieved string information is converted into XML and then un marshalled into a collection of ActionScript objects View and the preferences are applied.

The XML structure can be checked for specific attributes that represents valid preferences as described below. Loading of filter values into the filter panel can be performed as follows. By default the filter panel is loaded with the static XML provided as an input. Modifying the static XML at the run time automatically updates the filter panel with the saved preference value.

In one embodiment there is a cached information location at the client. It is understood that this file should not be edited since that would corrupt the file encryption leads to fail the preferences loading. An exemplary path is 

It should be noted that these folders might be hidden so that show hidden folders should be enabled to see hidden folders in windows. For example in Internet Explorer 

As discussed above current user preferences are exported. An exemplary set of steps to export user preferences is set forth below 

Client preference information is fetched from the client application CA to the client browser CB and then to the client machine CM which looks for user preference availability. The client machine CM returns user preferences to the client browser CB which gives them to the client application CA. The client application CA then loads the user preferences processes the preferences decides on the user interface UI components and applies the preferences.

The client application CA then provides the rendered application to the client browser CB which makes the client changes . The client application CA then receives events from the client browser CB which processes the events and raises events to save user preferences. Preferences from the client application CA are saved by the client browser CB. The preferences are then saved to the client machine CM from the client browser CB.

Status for the client machine CM is provided to the client browser CB which provides the success fail status information to the client application. The status information is loaded into memory by the client application CA. The client application CA then sends a location request to the client browser CB which sends the request to the server S. The server S sends a response to a display in the user interface.

Processing is not limited to use with the hardware and software described herein and may find applicability in any computing or processing environment and with any type of machine or set of machines that is capable of running a computer program. Processing may be implemented in hardware software or a combination of the two. Processing may be implemented in computer programs executed on programmable computers machines that each includes a processor a storage medium or other article of manufacture that is readable by the processor including volatile and non volatile memory and or storage elements at least one input device and one or more output devices. Programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the programs may be implemented in assembly or machine language. The language may be a compiled or an interpreted language and it may be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer programs may be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network. A computer program may be stored on a storage medium or device e.g. CD ROM hard disk or magnetic diskette that is readable by a general or special purpose programmable computer for configuring and operating the computer when the storage medium or device is read by the computer to perform processing.

One skilled in the art will appreciate further features and advantages of the invention based on the above described embodiments. Accordingly the invention is not to be limited by what has been particularly shown and described except as indicated by the appended claims. All publications and references cited herein are expressly incorporated herein by reference in their entirety.

