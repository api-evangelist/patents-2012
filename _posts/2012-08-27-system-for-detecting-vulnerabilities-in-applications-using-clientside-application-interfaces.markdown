---

title: System for detecting vulnerabilities in applications using client-side application interfaces
abstract: An improved method and apparatus for client-side application analysis is provided. Client-side application analysis involves determining and testing, using client-side application interfaces and the like, data input points and analyzing client requests and server responses. A security vulnerability analyzer can be employed to analyze content for client-side application files, such as Flash files and Java applets, extract addresses and data parameters embedded in the client-side application file, and modify the data parameters according to user-defined test criteria. The modified data parameters are transmitted as part of a request to a respective server used to service requests from the client-side application files. The security vulnerability analyzer analyzes the response from the server to ascertain if there are any security vulnerabilities associated with the interface between the client-side application file and the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08893282&OS=08893282&RS=08893282
owner: WhiteHat Security, Inc.
number: 08893282
owner_city: Santa Clara
owner_country: US
publication_date: 20120827
---
This application is a continuation of U.S. patent application Ser. No. 11 339 373 entitled System for Detecting Vulnerabilities in Web Applications Using Client Side Application Interfaces filed Jan. 24 2006 which claims priority to U.S. Provisional Patent Application No. 60 647 181 entitled System For Detecting Vulnerabilities In Web Applications Using Client Side Application Interfaces filed Jan. 25 2005 the entire disclosures of these applications are incorporated herein by reference for all purposes.

Millions of people worldwide bank shop purchase goods and services perform research etc. using the World Wide Web. With each transaction private information including names addresses phone numbers credit card and debit card numbers and passwords are routinely transferred and stored in a variety of locations. Billions of dollars and millions of personal identities and pieces of private information are vulnerable to hackers who find their way through security vulnerabilities in web applications.

One approach to identifying security vulnerabilities in a web application is to examine the code for the web application to identify risk prone operations within the code. However this might not provide a complete picture of vulnerabilities as the execution structure of the code might not be apparent from reviewing the code and the interplay of the examined code and other parts of a web application might introduce other vulnerabilities. Additionally while examined code might be secure it is possible for an unauthorized client device to modify client side code to do something other than what was intended by the web application. Therefore web application testing should also involve testing the limits of what unauthorized client side code could perform.

Difficulties with properly executing security scans of web applications from the client side include being able to correctly determine the possible paths of interaction between a user and a client and the web application. Often this is made difficult because the client is provided with code to execute that has varied points of entry to the web application that is not in a readily understood format. For example if the client side code comprises a webpage formatted with simple HyperText Markup Language HTML a reader or a computer program can easily determine all of the entry points of that code such as the form fields and embedded URLs.

Therefore what is needed is a system and method to detect security vulnerabilities in server based web applications using client side applications that are simple to implement and cost effective.

Embodiments of the invention provide an improved method and apparatus for analyzing client side web applications to reveal security vulnerabilities in server side interfaces associated with client side web applications. In one embodiment a security vulnerability analyzer is employed to retrieve webpage content from a server in communication with the security vulnerability analyzer. The security vulnerability analyzer retrieves an application file such as a Flash file file extension .fla .swf and the like referred to in the webpage content. The security vulnerability analyzer extracts web addresses and associated input data parameters embedded in the application files. The security vulnerability analyzer replaces the input data parameters with user defined input criteria. A request along with the user defined input criteria is transmitted to the servers referred to in the web addresses to invoke a response from the servers. The security vulnerability analyzer analyzes the server responses by matching the received responses against a plurality of pre determined server responses that alone or in combination are indicative of server side security vulnerabilities.

In one embodiment the invention provides a method for analyzing security vulnerabilities in web based applications. The method includes extracting path parameters and data parameters from the client side applications referring to web servers servicing the client side applications modifying the path parameters or data parameters with user defined data to generate test data transmitting the test data to the web servers and determining if any of responses received in response to the test data are indicative of security vulnerabilities.

In another embodiment the invention provides a method of detecting security vulnerabilities in web based applications. The method includes extracting data from client side applications to locate data entry points to web servers used to service the client side applications and applying user defined test criteria to the data entry points. The user defined testing data is configured to cause a web server to respond with one or more predetermined responses configured to expose security vulnerabilities in client server interfaces associated with the data input points.

In another embodiment the invention provides a security analyzer for detecting security vulnerabilities in client server interfaces. The security analyzer includes a security analyzer engine configured to extract client server interface data embedded in client side application files and generate user defined testing data from the client server interface data. The user defined testing data is configured to cause a web server to respond with one or more predetermined responses that are used to expose security vulnerabilities in client server interfaces associated with the client side application files.

Embodiments of the present invention provide a system and method to examine webpage content for locations to client side application files. The paths and associated data parameters embedded in the client side application files are extracted and modified with user defined test criteria. The modified paths and associated data parameters are transmitted to respective servers referenced in the extracted paths. Responses received from the servers are evaluated to determine if the paths and associated data parameters provide unauthorized network access through the client side interface and therefore represent a security vulnerability risk.

Processing system includes a central processing unit CPU and memory . Memory may include a browser and security analyzer module . Memory is preferably random access memory sufficiently large to hold the necessary programming and data structures required for the operation of processing system . While memory is shown as a single entity it should be understood that memory may in fact comprise a plurality of modules and that memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. In one embodiment processing system may interact with website A through communication network . Communication network may be any network such as the Internet a local area network LAN a wide area network WAN a wireless network a wire line network etc.

Website A may be stored on a storage device such as web server A. In one embodiment web server A is a computer that holds the files for one or more websites such as website A. In some cases website A may be split over a number of servers in different geographical locations. Website A may be any software application. Although website A is described it will be understood that any software application may be analyzed. In one embodiment website A is a collection of files. For example website A may include a beginning file called a home page. This home page may be associated with an identifier such as a universal resource locator URL such as http www.example.com. The URL corresponds to a file that is being stored. From a home page other pages may be accessed using links on the home page. The other pages may be associated with other URLs such as www.example.com login.html. A person of skill in the art will appreciate additional details regarding websites that are not described. Although the terms webpages and websites are used herein it will be understood that these terms may include applications that are not web based.

When a client such as processing system requests a webpage web server A may use a file stored on the web server A in order to serve the webpage A to the client. The webpage A may then be displayed on an interface such as web browser . Actions may then be performed with the webpage A. For example items may be selected clicked to request other webpages text may be entered forms may be filled documents transferred Flash files file extension .fla or .swf or java applet applications may be invoked etc. Requests indicating these actions may be sent to one or more web servers A for further processing. For example login information such as a username and password may be entered on a webpage in order to login to website A. In this case a user may access a restricted webpage that is only accessible if the login information is entered. For example a restricted webpage may show a user s personal email account information.

A protocol may be used in communications between browser and web server A. In one embodiment the HyperText Transfer Protocol HTTP is used. Using the example above login information such as a username and password account number or related information is entered in a webpage sent in a request. The login information may be any information that allows access to restricted parts of website A. The login information sent in the request may allow a user to log into website A. In one embodiment in response to receiving the login information credential information may be sent in a response from web server A. Credential information may be any information that may be needed to access the restricted parts of website A. The credential information may be stored and sent with future requests by a client that sent the request. For example HTTP cookies URL parameter schemes or other HTTP headers may be used to retain the credential information for future requests.

In one embodiment security analyzer module enables the detection and assessment of security vulnerabilities associated with website A. As website A may have references to more than one web server security vulnerabilities may be associated with a plurality of web servers A e.g. web servers A N . Security vulnerabilities include but are not limited to application specific vulnerabilities which are security holes within the website s own specific application and security vulnerabilities embedded in client side application files such as Flash files or Java applets that may be associated with the website A or other websites and servers used to service the client side application files. These security vulnerabilities arise from an application level interface between the client and servers and include but are not limited to path vulnerabilities parameter vulnerabilities and the like.

In order to determine server side security vulnerabilities associated with client side application files security analyzer module may be configured to retrieve webpage contents of website A to obtain paths e.g. web addresses and data parameters associated with web servers A servicing instructions and content for the webpage page A. In one embodiment security analyzer module is capable of automatically extracting web addresses and data parameters embedded in client side application files referred to in the webpage content. This enables the security analyzer module to discover the structure or elements of the client side application interface with the web servers A particularly the path parameters and data parameters employed in the interface. Security analyzer module is also capable of modifying the data extracted transmitting the modified data and server request protocols to the respective web server A via communication network and analyzing the response from the web server A in response to the modified data to determine server side security vulnerabilities associated with the client server interface.

For example to discover server side security vulnerabilities security analyzer module may be configured to retrieve and analyze webpage content of website A to locate client side application files referred to in the webpage content. Security analyzer module is configured to extract path parameters and associated data parameters from the client side application files which refer to web servers used to service the client side application files content and instructions thereof. In one embodiment security analyzer module modifies the path parameters and or extracted data parameters with user defined criteria to form test data transmits the test data to the servers and analyzes the server responses for server side security vulnerabilities. Any security vulnerabilities found may be summarized and provided to a user in a security vulnerability assessment as described further below. Advantageously security analyzer module may be used to detect security vulnerabilities in the interface between clients and web servers before attackers gain access to personal information such as user s credit card data and other personal information by exploiting those security vulnerabilities.

While security analyzer module is capable of performing the processes of parsing and analysis automatically it is contemplated that a user of the security analyzer module may manually modify the parsing and or analysis functions to for example customize parsing and or analysis for any portions of the client side application files and data parameters that meet the needs of a given application. For example the user may modify the parsing and or analysis process to eliminate searching for unnecessary files paths and the like. Advantageously providing the user with the ability to manually modify the parsing and or analysis processes provided by security analyzer module may allow security analyzer module to locate security vulnerabilities more quickly and efficiently.

In one embodiment security analyzer engine is a software module capable of manually or automatically assessing server side security vulnerabilities using data embedded in client side applications. Security analyzer engine may be configured to parse webpage content and client side application files such as Flash files to discover URLs data parameters and the like. The client side application files may be developed in any one of a vast option of languages such as Flash Perl PHP Java C and the like and may use one or more integration methods CGIs servlets server APIs etc. . The data parameters are used to call initiate or trigger various functions actions or logic of the servers servicing the client side applications. Each such parameter may have a number of attributes such as data type length visibility and value.

Once the embedded data has been extracted security analyzer engine modifies the path parameters and or data parameters found transmits requests to the discovered URLs with the modified paths and or parameters analyzes the results of the responses or lack thereof from the respective web servers and ranks the results. Such results may then be used to determine the security vulnerability of the server interface servicing the client side application. A more detailed description of the processing steps carried out by security analyzer engine is described further below with respect to .

Transformation criteria includes a plurality of user defined data such as alphanumeric characters symbols and the like that when transmitted to a server A may or may not invoke a response from the server. For example transformation criteria may include a text character such as an apostrophe a numeric character such as 1 an algorithm such as 1 1 a symbol and the like. Such transformation criteria when processed by a server A as part of a request message may invoke an error message may invoke no response or may invoke an unexpected response from the server A that may lead a user to discern security vulnerabilities as described further below.

Transformation criteria may be derived manually or automatically. In one embodiment transformation criteria is derived empirically from the user s observations of security vulnerabilities with respect to for example user experimentation. In other embodiments transformation criteria may be derived automatically using one or more algorithms. In one embodiment such algorithms employed may generate patterns of data that invoke patterns of web server responses. Such patterns may be used to detect security vulnerabilities.

Security test data includes data associated with the process of server side security vulnerability testing. For example in one embodiment security test data may include the webpage content server requests web addresses extracted from the client side applications modified parameters modified cookies modified javascript modified applet parameters modified database parameters and the like.

Application data may include client side application files referred to in the webpage being analyzed e.g. webpage A . Examples of client side applications may include but are not limited to Sun Microsystems Java Applets code Macromedia s Flash Movies applications XUL and Microsoft s ActiveX Controls code. These types of applications provide an alternative application programming interface to web server A that may be separate from the typical HTML and Javascript interfaces.

Results data structure includes results associated with the process of server side security vulnerability testing. For example results data may include errors and messages received from servers in response to the transformation criteria a listing of security issues a user defined relationship between errors and transformation criteria reports security assessments and the like.

Depending on the type of client side application different techniques may be employed to identify the available URLs contained within the client side application. For example at step security analyzer engine parses the contents to locate references e.g. paths to client side applications such as Java applets Flash files and the like. For example illustrates the content of webpage www.example.com having references to a Flash file location path to flash movie.swf. and an applet with references to an applet file path to applet.class.

In one embodiment a user may modify the parsing step to tailor the parsing to a particular need. For example the user may modify the parsing process to eliminate searching for image files such as GIF JPEG BMP and the like. In other embodiments the user may modify the parsing step to search for references to specific file types such as Flash applications Applet applications and other types of client side application files. Advantageously providing the user with the ability to modify the parsing step allows security analyzer engine to parse the webpage content more quickly to help a user locate security vulnerabilities more quickly and efficiently.

At step security analyzer engine retrieves the client side application files discovered during parsing and stores them for example in application data structure . Security analyzer engine extracts path parameters and associated data parameters from the client side application files. In one embodiment security analyzer engine parses the client side application to extract the path parameters and associated data parameters from the client side application files using a variety of methodologies. This may be done when for example security analyzer engine is configured to search through the client side application file for the path parameters and associated data parameters. For example to parse the client side application file the security analyzer engine may use the file format of the client side application file published for example by the vendor of the client side application. In other embodiments the format may be learned through reverse engineering procedures. Alternatively the security analyzer engine may analyze the client side application file code which may be encoded in various formats to identify data matching the standard structure of path and data parameters.

In one embodiment security analyzer engine employs binary analysis to find path parameters and associated data parameters from the client side application files. For example path parameters and associated data parameters may be part of an ASCII string in a binary file. Once located security analyzer engine searches the strings for indications of path parameters and associated data parameters within the strings. For example the string may include path parameters such as http www and the like.

In another embodiment security analyzer engine employs run time monitoring to derive path parameters and associated data parameters. In this embodiment a client side application file is activated in a sandbox environment to simulate the execution process of a client side application in a controlled environment. Sandboxing refers to a process of activating the client side application file in an isolated environment and monitoring its operation. In the sandbox environment upon execution the client side application file may attempt to make outbound HTTP requests. If the client side application attempts to remotely connect security analyzer engine captures path parameters and associated data parameters from such HTTP requests sent for example from processing system to web server A via network . The captured path parameters and associated data parameters may be stored for example in security test data structure for real time or later analysis.

At step once the path parameters and associated data parameters are determined the next step is to analyze messages that flow or would flow between a client and a web server in order to discover data input points of the web application interface with external clients. Examples include links forms fixed fields hidden fields menu options etc. The security analyzer engine may send an HTTP request derived from each of the path parameters e.g. URL identified in the previous step and receive the associated responses from the web server A. The web server responses can then be analyzed to discover the various URLs and data input points contained within the website and web applications.

Web applications interface with clients using a multitude of data parameters that may be data input points. Security analyzer engine may employ a variety of techniques to discover such data input points. In one embodiment for well understood URL structures which usually exhibit a well known format with a query string name value name value security analyzer engine may parse the URL string to extract value and value . For example as illustrated in employing the extraction process step security analyzer engine extracted http host webapp.cgi name ActualValue from the flash file flash movie.swf . In this example the path parameter http host webapp.cgi and associated data parameter ActualValue were embedded in flash movie.swf. In this illustration the data parameter ActualValue represents a plurality of application data entry parameters symbols algorithms etc. that are provided by for example the company that generated flash movie.swf. In one embodiment security analyzer engine marks the data entry parameter ActualValue as a data entry point that may be stored for example in security tests data structure .

In other embodiments for non standard URL structures security analyzer engine may employ a deterministic approach to locate data input points. For example security analyzer engine may compare a set of URLs examining where the URLs change on a byte by byte position basis. Changes in bytes with respect to given byte position between URLs may represent a data input point.

At step security analyzer engine generates modified data entry parameters by replacing the ones discovered during the parsing step with user defined transformation criteria. Such user defined transformation criteria may be derived from virtually any source and may be formed from alphanumeric characters symbols algorithms binary strings and the like with respect to the type of path parameters and client side applications being analyzed. For example as illustrated in transformation criteria may be represented by the term TestCriteria which can take on a plurality of attributes with respect to common gateway interface CGI web application webapp.cgi CGI is a standard for interfacing external applications with information servers such as HTTP or web servers . In one example as shown in TestCriteria is an apostrophe character. In another example as shown in TestCriteria is an algorithm 1 1 .

In one embodiment security analyzer engine retrieves predetermined transformation criteria from transformation criteria data structure . Such predetermined transformation criteria may be derived empirically from user observations of responses from the web server with respect to known web server responses and user observed responses that may lead the user to deduce a security vulnerability. For example a user may rely on a string such as SH1214 SGS that is known to produce an error message such as DNS Error from web servers most of the time.

A user may develop other transformation criteria that produces unexpected results recognized by the user but not necessarily recognized by others. In one embodiment the user may develop predefined text field parameters numeric filed parameters database parameters e.g. SQL etc. parameter names and additional path parameters configured to invoke a known server response or a server response recognized by the user but not necessarily recognized by others. The predetermined transformation criteria may be stored in for example security tests data structure .

At step security analyzer engine transmits the transformation criteria to its respective web server according to the path parameters. For example as illustrated in a request containing the data parameter TestCriteria is transmitted to a web server called host . As shown in the data parameter for TestCriteria is an apostrophe and an algorithm 1 1 respectively sent to the host web server. Security analyzer engine is configured to transmit the transformation criteria any number of ways. For example the transformation criteria may be sent as an HTTP request such as GET or POST as known in the art.

At step security analyzer engine receives responses or no responses from the web servers e.g. web server A N . As described herein the responses or lack thereof may be known unexpected or known to a user of the security analyzer engine . Security analyzer engine stores the responses in results data structure and examines the responses or lack thereof from the web servers responding to the transformation criteria to determine if any security vulnerabilities exist.

In one embodiment the security analyzer engine compares the responses received to a list of responses and associated security vulnerabilities stored for example in security test data structure . For example as illustrated in an analysis process provides a rank of security vulnerability test . As illustrated at a web server provides a response of ODBC Drivers error 80040e14 in response to the modified transformation criteria of name where the modified data parameter sent was an apostrophe . Security analyzer engine compares the response ODBC Drivers error 80040e14 to a list of responses and corresponding security vulnerabilities that are well known or defined by the user and provides a risk analysis of Level A . As illustrated at a web server provides a response of file system error in response to the modified transformation criteria of name 1 1 where the modified data parameter sent was the algorithm 1 1 . Security analyzer engine compares the response file system error to a list of responses and corresponding security vulnerabilities and provides a risk analysis of Level B for example where B may be indicative of a greater security risk than level A . Security analyzer engine may compile the risk analyses to form a risk security vulnerability assessment. Security analyzer engine ends the method at step .

The present invention can be implemented in the form of control logic in software or hardware or a combination of both. The control logic may be stored in an information storage medium as a plurality of instructions adapted to direct an information processing device to perform a set of steps disclosed in embodiments of the present invention. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the present invention.

The above description is illustrative but not restrictive. Many variations of the invention will become apparent to those skilled in the art upon review of the disclosure. The scope of the invention should therefore be determined not with reference to the above description but instead should be determined with reference to the pending claims along with their full scope or equivalents.

