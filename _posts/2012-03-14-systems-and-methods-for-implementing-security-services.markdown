---

title: Systems and methods for implementing security services
abstract: Systems and methods for providing a login context operate a virtual machine, wherein the virtual machine includes an open services platform and an authentication service, wherein the authentication service includes a classloader, and an initial classloader is designated as the classloader of the authentication service, register a login module, receive an authentication request from a first application, and responsive to receiving the authentication request designate a classloader associated with the login module as the classloader of the authentication service, generate a login context of the login module, and provide the login context of the login module to the first application, whereby the first application uses the login context to perform an authentication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732811&OS=08732811&RS=08732811
owner: Canon Kabushiki Kaisha
number: 08732811
owner_city: Tokyo
owner_country: JP
publication_date: 20120314
---
This application is a continuation in part of U.S. application Ser. No. 13 073 882 filed on Mar. 28 2011 which is hereby incorporated by reference.

It is often desirable to make computing resources available to only authorized users for instance to protect against malicious users and programs and to prevent overutilization of the resources. However the computing resources should be available to authorized users and programs and different computing resources may need different levels of security. Making the resources available to different users and programs is made more complicated because the resources may need to be accessed across multiple security domains different security services may be used to secure the resources and different software platforms may be used to interface with the security services.

Computing environments provide some standardized tools to help solve these issues. In a Java environment the Java Authentication and Authorization Service JAAS provides a security framework that enables developers to authenticate users and enforce access controls upon users. JAAS also standardizes interfaces and abstracts underlying authentication and authorization mechanisms. JAAS login modules do the actual authentication and authorization. However login modules need to be determined before or at the time the virtual machine is started because login modules cannot be added or removed dynamically while the virtual machine is running. For example OSGi platforms require the login modules provided by JAAS to be in the classpath of JAAS. In the Java Virtual Machine the classpath includes directories or JAR files where the java compiler runtime will look for .class files. For example example.class will not be found by the Java Virtual Machine unless the classpath includes the directory or JAR file that includes example.class . Thus the login modules must be added to the classpath before the Java Virtual Machine is started which in turn prevents the dynamic addition and removal of login modules.

In one embodiment a method for providing a login context comprises starting a virtual machine wherein the virtual machine includes an open services platform and an authentication service wherein the authentication service includes a classloader and an initial classloader is designated as the classloader of the authentication service registering a login module receiving an authentication request from a first application and responsive to receiving the authentication request designating a classloader associated with the login module as the classloader of the authentication service generating a login context of the login module and providing the login context of the login module to the first application whereby the first application uses the login context to perform an authentication.

In one embodiment a computing device for creating a login context comprises a computer readable storage device and one or more processors configured to cause the computing device to perform operations including operating a virtual machine that includes a security platform registering a first login module while the virtual machine is operating assigning a first classloader associated with the first login module as a classloader of the security platform generating a login context of the first login module and providing the login context of the first login module to a first client application.

In one embodiment one or more computer readable media store instructions that when executed by one or more computing devices cause the one or more computing devices to perform operations comprising registering a security service while operating a virtual machine the virtual machine including a security platform designating a classloader associated with the security service as a classloader of the security platform generating a context of the security service responsive to receiving a request for a context of the security service from a first application wherein generating the context of the security service includes invoking the designated security platform classloader and providing the context of the security service to the first application.

Though the following description includes certain explanatory embodiments the scope of the claims is not limited to the explanatory embodiments. Additionally the explanatory embodiments may include several novel features and a particular feature may not be essential to practice the systems and methods described herein.

The OSGi platform provides a module system and service platform for JAVA and an execution environment that can install start stop update and uninstall applications and components also collectively referred to herein as bundles without requiring a reboot of the JVM . Bundles can make services available to other bundles. A bundle s services are added to a services registry so that other bundles can detect and use them and the removal of a service from the registry can be used to detect the removal of the service.

The system also includes security providers that make security services available to other applications modules bundles components etc. illustrates security providers N . . . N also referred to herein as security providers where N represents any positive integer such that the system is capable of operating with the total number of security providers. The security providers also illustrated in may be implemented in bundles and make their services available as OSGi services including adding the services to the OSGi services registry . The security providers may include login modules and or provide services that include JAAS authentication and authorization services. The client application may also be a bundle and the client application may request one or more services e.g. authentication authorization from the security providers .

The system also includes a context factory in the OSGi platform . The context factory facilitates the access of the security services by the client application . When a security provider is loaded onto the OSGi platform and started the security provider registers itself e.g. with the context factory with the custom configuration unit shown in FIG. including registering any service s provided by the security provider and registering a classloader for the service provider and or service s . A classloader loads classes e.g. Java Classes into a virtual machine e.g. the JVM . The class loader locates libraries reads the contents of the libraries and loads the classes contained within the libraries. The loading may be done on demand i.e. dynamically and thus the loading may not be performed until the class is actually used by the JVM.

The context factory receives requests for the security service s from the client application and returns an interface e.g. a login context of the security services to the client application . A login context is an object that provides an interface to a security service stores post authentication user credential information and or lists privileges and permissions. A login context includes a login method that invokes a method from a security provider e.g. from a login module . Also a login context may be instantiated by JAAS and may comply with the JAAS API. By using the interface e.g. login context for example a LoginContext the client application may then interact with the security service s and the security provider without the involvement of the context factory e.g. without the context factory acting as a proxy . Thus the client application can use the normal API of JAAS to communicate with the security service s which simplifies the design of the client application and or the use of the security service s .

The security device includes one or more processors also referred to herein as CPU which may be a conventional or customized microprocessor s . The CPU is configured to read and execute computer readable instructions and the CPU may command and or control other components of the security device . The security device also includes I O interfaces which provide communication interfaces to other devices including a keyboard a display device a mouse a printing device a touch screen a light pen an optical storage device a scanner a microphone a camera etc. The security device also includes a memory which may be volatile or non volatile such as ROM RAM and flash memory. The security device further includes a network interface that allows the security device to communicate with the network . The storage device stores data or modules and may include for example a hard drive an optical storage device a diskette and or a solid state drive. The components of the security device are connected via a bus. The security device includes an operating system which manages the hardware the processes the interrupts the memory and or the file system of the security device .

The security device also includes a context factory a custom configuration unit and a security provider . The context factory the custom configuration unit and the security provider may be implemented in computer executable instructions. Computer executable instructions may be executed by the security device to cause the security device to perform certain operations including the methods described herein though for purposes of description a member of the security device may be described as performing the operations. Computer executable instructions may include logic and may be implemented in software firmware and or hardware. In other embodiments the context factory and the custom configuration unit may be combined into a single member or further divided into more members. The security device may control access to computing resource and computing resource and may require client applications to perform authentication and or authorization operations with the security provider before accessing computing resource and computing resource .

Beginning in block a virtual machine is started such as a JAVA virtual machine. Next in block a classloader for a security module is obtained. For example a security module that includes an associated classloader may be installed as part of a bundle on a virtual machine that includes an OSGi platform and the security module may provide the classloader as well as login module name s class path etc. to a custom configuration unit as a parameter passed in a method call. Moving to block a configuration entry is generated for the security module. The configuration entry indicates the classloader and associates the classloader with the security module. Finally in block the configuration entry is stored for example in a configuration table in memory.

Next in stage a client application requests a login context from the context factory . In stage the context factory retrieves the classloader for the requested login context from the custom configuration unit . Proceeding to stage the context factory performs a thread switch and changes the JAAS default classloader to the classloader for the requested login context. A thread is a unit of processing that can be scheduled by an operating system. Next in stage the context factory requests the login context from JAAS . In stage JAAS generates the login context using the classloader and in some embodiments the class name e.g. a login module s fully qualified class name for example com.canon.jaas.LoginModuleA associated with the login module . During the thread switch the context factory and or JAAS are blocked from attempting to generate additional login contexts e.g. a blocking call . Moving to stage the thread is restored which permits the context factory and or JAAS to generate additional login contexts the JAAS classloader may be changed back to the JAAS default classloader and the generated login context is returned to the client application . Finally in stage the client application requests a login from the login module using the returned login context. Using the returned login context the client application can communicate with the login module and or JAAS without the use of a proxy. Thus the client application may use standard JAAS interfaces to perform JAAS authentication.

In stage the client sends a request for a login context to the context factory . The request for a login context identifies one or more requested login modules for which a login context is sought e.g. the login module s . Next in stage the context factory sends a request for a classloader for the requested login module s in this example the login module s . In response to receiving the request for a classloader the custom configuration unit identifies the classloader associated with the requested login module s by referring to the configuration table e.g. maps the requested login module to the associated classloader . The custom configuration unit then sends a reference to the login module classloader to the context factory in stage .

In stage the context factory modifies the reference to the login module classloader in JAAS . Initially the login module classloader reference refers to the JAAS default classloader which is determined at runtime of the JVM. Since JAAS will automatically refer to the login module classloader reference to find a classloader to instantiate a login context and since JAAS is not capable of changing the login module classloader reference while the JVM is running the context factory changes the login module classloader reference to refer to the login module classloader instead of the default classloader . The context factory may also start a blocking thread in stage to block the generation of other login contexts. The blocking may be important because JAAS will use the classloader referred to by the login module classloader reference to generate a login context. Thus if not blocked JAAS will use the login module classloader to instantiate other requested login contexts while the login module classloader reference refers to the login module classloader . However the other requested login contexts may be requests for login contexts associated with the default classloader . Therefore it may be desirable to block the generation of other login contexts while the login module classloader reference refers to the login module classloader .

Once the login module classloader reference refers to the login module classloader in stage the context factory sends a request for a login context to JAAS . In stage JAAS gets the classloader now the login module classloader referred to by the login module classloader reference. In stage JAAS receives a classloader reference which refers to the login module classloader . Next in stage JAAS instantiates a login context using the login module classloader .

Proceeding to stage a reference to the login context is returned to the context factory by JAAS . The context factory may then change the login module classloader reference to refer to the default classloader and end the blocking thread. Next in stage the reference to the login context is returned to the client . Finally in stage the client uses the login context to communicate with the login module s . Thus the client communicates with the login module s via the login context in JAAS without a proxy and the client can use the standard JAAS API to communicate with the login module .

Additionally a classloader may be able to generate a login context that allows communication with only the login modules of the associated OSGi bundle. For example classloader A may be used to generate a login context that allows a client application to communicate with login module A but cannot generate a login context that allows a client application to communicate with login modules from other security providers e.g. login module B login module . Also classloader C may be used to generate a login context that allows a client application to communicate with the login modules of security provider C login module login module . . . login module N but cannot be used to generate a login context that allows a client application to communicate with the login modules of other security providers e.g. login module A login module B .

The above described devices systems and methods can be achieved by supplying one or more storage media that store thereon computer executable instructions for realizing the above described operations to one or more devices that are configured to read the computer executable instructions stored in the one or more storage media and execute them. In this case the one or more devices perform the operations of the above described devices systems and methods when executing the computer executable instructions read from the one or more storage media. Also an operating system on the one or more systems and or devices may implement one or more of the operations of the above described devices systems and methods. Thus the computer executable instructions and or the one or more storage media storing the computer executable instructions thereon constitute an embodiment.

Any applicable computer readable storage medium e.g. a magnetic disk including a floppy disk and a hard disk an optical disc including a CD a DVD a Blu ray disc a magneto optical disk a magnetic tape and a solid state device including flash memory DRAM SRAM can be employed as a storage medium for the computer executable instructions. The computer executable instructions may be written to a computer readable storage medium provided on a function extension board inserted into a device or on a function extension unit connected to a device and a CPU provided on the function extension board or unit may implement the operations of the above described devices systems and methods.

This disclosure has provided a detailed description with respect to particular explanatory embodiments. The scope of the claims is not limited to the above described embodiments and various changes and modifications may be made without departing from the scope of the claims.

