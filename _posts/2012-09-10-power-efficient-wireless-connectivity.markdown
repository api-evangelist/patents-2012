---

title: Power efficient wireless connectivity
abstract: Described herein are systems and methods for reducing power consumption in a device while maintaining a wireless local area network connection. An interface processor of a wireless interface is configured to maintain a network connection while an application processor is in a low power mode. The interface processor may awaken the application processor to a high power mode upon receipt of a wakeup signal, loss of network connection, detection of a network suitable for connection, or other pre-determined event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09277500&OS=09277500&RS=09277500
owner: AMAZON TECHNOLOGIES, INC.
number: 09277500
owner_city: Reno
owner_country: US
publication_date: 20120910
---
User devices with wireless interfaces configured to connect to a wireless network may have limited power or other resources for operation. The wireless network may be used to transfer a wide variety of data including content for consumption administrative data or control data.

A wide variety of user devices ranging from appliances to consumer electronics utilize wireless networks to exchange information. For example a user device may use a wireless network to connect to the internet to exchange information with a server. For ease of discussion in this disclosure server indicates a server or other resource external to the user device.

The user device includes one or more primary or application processors configured to execute an operating system applications and so forth. The application processor is configured to transition between a high power mode and a low power mode. The high power mode consumes more electrical power than the low power mode. The low power mode may also be known as a sleep or suspend mode.

The user device also includes a wireless interface with an interface processor and a transceiver. The interface processor may consume less electrical power than the application processor. The interface processor may also be configured to transition between a high power mode and a low power mode. The transceiver is configured to establish a network connection with another transceiver such as in an access point. Using this network connection the user device may exchange data with the server. Various networking devices may process the data during transit between the user device and the server. The networking devices may include routers firewalls network address translators and so forth.

The networking devices may be configured to block inbound traffic unless the user device has previously opened a connection. Inbound traffic is data originating at a location outside of the local network to which the user device has a wireless local area network connection. Blocking improves network security for the user device but prevents legitimate resources such as the server from communicating directly with the user device using the network. For example when the server has data to send to the user device the networking devices may block this message.

As described herein the user device may be configured to send keepalive data to the server. Ongoing transmission of the keepalive data across the network maintains a network connection between the user device and the server through the networking devices. Because the keepalive reoccurs a pathway is maintained allowing the server to communicate as needed with the user device.

To reduce power consumption the interface processor may be configured by the application processor to transmit the keepalive data while the application processor is in the low power mode. The ongoing transmission of the keepalive data maintains the connectivity and inbound path so the server is able to communicate with the user device.

The interface processor may also be configured to receive wakeup data sent by the server. The wakeup data triggers the interface processor to wakeup or transition the application processor from the low power mode to a high power mode. Once in the high power mode the application processor may communicate with the server or take other action.

The interface processor may also be configured to scan for networks and perform other actions while the application processor is in the low power mode. By reducing the amount of time the application processor is in high power mode power consumption is reduced. This reduction in power consumption may extend the operating time available to the user device.

The user device may comprise one or more application processors one or more memories one or more displays one or more input output I O interfaces and one or more network interfaces . The user device may include other devices not depicted such as global positioning system receivers cameras keyboards and so forth.

The application processor may comprise one or more cores and is configured to access and execute at least in part instructions stored in the one or more memories . The application processor may be configured to execute instructions associated with several different applications and interact with different components in the user device . In some implementations the application processor may also be known as a central processing unit or main processor.

The one or more memories comprise one or more computer readable storage media CRSM . The one or more memories may include but are not limited to random access memory RAM flash RAM magnetic media optical media and so forth. The one or more memories may be volatile in that information is retained while providing power or non volatile in that information is retained without providing power.

The one or more displays are configured to present visual information to the user . The display may comprise an emissive or reflective display configured to present images. An emissive display emits light to form an image. Emissive displays include but are not limited to backlit liquid crystal displays plasma displays cathode ray tubes light emitting diodes image projectors and so forth. Reflective displays use incident light to form an image. This incident light may be provided by the sun general illumination in the room a reading light and so forth. Reflective displays include but are not limited to electrophoretic displays interferometric displays cholesteric displays and so forth. The one or more displays may be configured to present images in monochrome color or both. In some implementations the one or more displays of the user device may use emissive reflective or combination displays with emissive and reflective elements.

The one or more I O interfaces may also be provided in the user device . These I O interfaces allow for coupling devices such as keyboards joysticks touch sensors cameras microphones speakers haptic output devices external memories and so forth to the user device . The devices coupled to the I O interfaces may be configured to generate notifications such as when data is received from a touch sensor.

The one or more memories may store instructions for execution by the application processor to perform certain actions or functions. These instructions may include an operating system module configured to manage hardware resources such as the I O interfaces and provide various services to applications or modules executing on the application processor . The one or more memories may also store a datastore a communication module and one or more other modules . While described as individual modules herein it is understood that the functions and operations of various modules may be merged distributed and so forth. These modules may be executed while the application processor is in a high power mode. During a low power mode of the application processor execution may be suspended.

The datastore is configured to store information such as configuration files user information connection data network lists wakeup signatures and so forth. This information may be stored in a database linked list tree or other data structure.

The communication module is configured to establish and maintain wireless connections using a wireless interface . The communication module may be configured to communicate using transmission control protocol internet protocol TCP IP . The communication module is discussed below in more detail with regard to the wireless interface .

The other module may provide a variety of functionality including email clients mapping applications encryption applications and so forth. The other module s may be configured to communicate using services provided by the communication module and the wireless interface .

The wireless interface provides for the transfer of data between the user device and another device such an access point another user device and so forth. The wireless interface may be configured to provide communication with networks including but not limited to personal area networks PANs wired local area networks LANs wireless local area networks WLANs wireless wide area networks WWANs and so forth. The wireless interface may utilize acoustic radio frequency optical or other signals to exchange data between the user device and another device such as an access point a host computer a server another user device and the like.

The wireless interface comprises one or more interface processors . The interface processor operates the functions of the wireless interface . The interface processor may be configured to exchange data with the application processor . In contrast to the general functionality of the application processor the interface processor is dedicated to managing the functions of the wireless interface and executing instructions associated with the operation of the wireless interface . Additionally the interface processor may have limited processing capability compared to the application processor . For example and not by way of limitation the interface processor may comprise across all cores about 15 000 transistors while the application processor may have more than 20 000 transistors across all cores.

The interface processor as well as other components in the wireless interface may be configured to transition between a high power mode and a low power mode to reduce power consumption mitigate thermal effects and so forth. The interface processor may consume less power than the application processor . In some implementations the interface processor may comprise a microcontroller application specific integrated circuit ASIC field programmable gate array FPGA and so forth.

The wireless interface includes an interface memory comprising one or more CRSM. A connection module may be stored in the interface memory . The connection module is configured to transmit keepalive data monitor connection status scan for wireless networks and so forth. The connection module may be configured to handle address resolution protocol ARP requests and other TCP IP related functions when the communication module is inaccessible due to the application processor being in the low power mode.

The connection module may access connection data received from the communication module and stored in the interface memory . The connection data provides information about an established connection to be maintained. The connection data may be provided to the connection module using an application programming interface API . The connection data is discussed below in more detail with regard to .

The connection module may also access a network list received from the communication module and stored in the interface memory . The network list comprises data describing one or more wireless networks which the user device may connect with. The network list may be generated by the user accepting to connect with a particular wireless network received from another device such as a server and so forth. The network list is discussed below in more detail with regard to .

A wakeup module is configured to process data received from the wireless network using a wakeup signature to determine what received data will trigger a wakeup. For example the wakeup signature may define a particular piece of data such as a string which when received and processed by the interface processor results in the interface processor generating a signal configured to wake up the application processor .

One or more of the wakeup signatures may be received from the communication module and stored in the interface memory . When data received matches one of the wakeup signatures the wakeup module is configured to generate a wakeup signal configured to transition the application processor from the low power state to the high power state. In some implementations the wakeup signal may comprise an interrupt sent along a general purpose input output connection. In some implementations the interrupt may comprise data such as a packet of data sent along one or more data lines. For example the interrupt may comprise a software interrupt which announces a particular state or calls for action. In other implementations the interrupt may comprise applying a voltage to removing a voltage from or modulating a voltage on a pin or bus line coupled to the application processor or an associated device such as a power management integrated circuit PMIC interrupt handler processor and so forth. For example the interrupt may comprise a hardware interrupt responsive to an interrupt request such as generated by the interface processor on behalf of the wakeup module .

The wakeup module may also determine an application associated with the wakeup data and pass at least a portion of the wakeup data to the application after the application processor has resumed high power mode operation. The wakeup signatures are discussed below with regard to .

The wireless interface comprises a transceiver configured to exchange data wirelessly with another device such as an access point another user device and so forth. The transceiver may be configured to send and receive data using radio frequencies optical wavelengths magnetic fields sound and so forth. In one implementation the transceiver may comprise a radio transceiver configured to operate on one or more standard networking protocols. These networking protocols include but not limited to the 802.11 standards promulgated by the Institute of Electrical and Electronics Engineers IEEE . In some implementations the wireless interface may comprise a plurality of transceivers.

The transceiver is configured to establish a wireless connection with one or more other transceivers such as in an access point . The access point may be communicatively coupled to another device such as a firewall or other network device. The firewall or other network device in turn communicatively couples to a network . The network may comprise a private network public network such as the Internet or a combination thereof. The network in turn couples to a server .

In some implementations a plurality of access points . . . A may be present which in turn may couple to one or more networks . . . N .

The server may comprise one or more computing devices configured to send receive or send and receive data with the user device . As described above the connection module of the wireless interface may be configured to send keepalive data . Transit of the keepalive data across the network maintains a network connection with which the server may communicate with the user device even through intervening network devices such as the firewall .

This keepalive data may comprise one or more user datagram protocol UDP packet. The keepalive data may be static or may be configured to convey additional information about the user device . For example the keepalive data may include last known geographic position battery status and so forth.

The server may send wakeup data along the network connection established and kept open by transit of the keepalive data . The wakeup data may comprise information corresponding to the wakeup signature . When received the wakeup module parses the wakeup data and may transition the application processor from the low power mode to the high power mode.

Data may be exchanged between the user device and the server . The data may be described as being inbound data when received by the user device or outbound data when sent by the user device . This data may include content for consumption programs. Email and so forth. With the ongoing transmission of the keepalive data from the connection module maintaining a network connection between the user device and the server the wakeup data to awaken the application processor and so forth the data may be transferred more quickly and with reduced power consumption.

While some modules and data are depicted as stored in the interface memory in some implementations the wireless interface and the application processor may share a common memory. This common memory is configured to remain accessible when the application processor or the wireless interface is in a low power mode.

The connection data provides information to the connection module in the wireless interface for use in maintaining an established network connection. In some implementations the connection data may be provided to the connection module using an application programming interface API provided by the operating system or the communication module .

The connection data may comprise an established connection identifier which identifies a particular connection such as Pine137. A keepalive interval defines an interval of time between transmission of the keepalive data across the network . For example the keepalive interval may be about 27 seconds. The keepalive interval may be fixed or dynamically vary. The keepalive interval may also vary based on the established connection identifier or other factors. For example the keepalive interval for the Pine137 network connection may be 27 seconds while the Oak393 network connection is set to about 13 seconds. In some implementations the connection module the communication module or both may be configured to test different intervals on a particular network to determine a keepalive interval in which bidirectional communication with the server is maintained but which minimizes transmissions.

The connection data may also comprise keepalive data . This may include one or more of a destination address destination port or protocol . The destination address may specify an address of the server on the network . For example an IP address. The destination port may specify a TCP or UDP port. A protocol may be specified such as whether the keepalive data is to be sent as a UDP or a TCP packet.

The keepalive data may also be encrypted in some implementations. The connection data may include encryption information such as keys initialization vectors and so forth. The keepalive data may include payload . For example current battery state last known geographic location and so forth may be included in the keepalive data .

Other data may also be included in the connection data . For example the established connection may have an expiration time such that after a given interval or particular count of transmitted keepalive data keepalives will be discontinued.

In some implementations a list of disapproved networks may be provided. These are wireless networks which are known but disallowed for connection. For example these may be wireless networks which incur unacceptable costs have insufficient security measures and so forth. For example the disapproved networks in this illustration are identified with the names Mesquite Sage and Jimson .

The network list may also include other data. For example the other data may include dates times which one or more of the approved networks are valid for. For example the Juniper network may be available for use for the next 24 hours but after that may be unavailable.

The wakeup signature and the corresponding wakeup data may comprise one or more of a source address destination address protocol source port or destination port . The source address may indicate the address or addresses from which wakeup data may be considered value. For example the wakeup data received from an IP address of 172.16.12.12 may be acceptable for waking up the application processor while data received from 172.16.37.40 may not. Similarly the destination address may indicate a valid destination address associated with the wakeup. The protocol may be used to specify a protocol such as TCP or UDP by which wakeups may be delivered. The source ports and the destination ports may also be defined.

Other data may be incorporated into the wakeup signature . A fragmentation offset may be used to aid the wireless interface in reconstructing packets. A size may be indicated. For example jumbo packets may be set to be invalid to wakeup.

The wakeup module may be configured to process the payload of the wakeup data . In some implementations the payload may be used to designate a particular application to be called. When valid wakeup data is received and the wakeup module transitions the application processor from the low power mode to the high power mode the wakeup module may further send the payload or a portion thereof to the particular application.

The wakeup signature may also include encryption information. The wakeup data may be encrypted in some implementations. The encryption information may comprise information used to encrypt or decrypt the contents of the wakeup data .

The wakeup signature may also comprise other data . For example the wakeup module may be configured to only accept wakeup data which were originated at a particular time or which show a particular packet routing.

At the communication module executing on the application processor provides connection data to the wireless interface describing an established wireless connection. At the interface processor processes at least a portion of the connection data and configures the wireless interface to maintain the connection. At the application processor transitions to the low power mode.

At the wireless interface sends keepalive data to the server via the wireless connection with the access point . The wireless interface configured with the connection data may send the keepalive data at the specified keepalive interval thus maintaining the connection with the server .

At the server sends data to the wireless interface of the user device . In some implementations this data may comprise the wakeup data . The interface processor at executes the wakeup module to parse the received data such as the wakeup data . The wakeup module determines whether the data is valid and sufficient to trigger a wakeup of the application processor . In one implementations the wakeup module may be configured to trigger a wakeup on any data received over the maintained connection with the server . In another implementation the wakeup module may be configured to trigger the wakeup of the application processor upon receipt of the specific wakeup data which corresponds to the wakeup signature .

At the wakeup module has determined a wakeup action is appropriate such as when data has been received from the server over the network connection or when the wakeup data is valid and initiates a wakeup of the application processor which results in a transition of the application processor from the low power mode to the high power mode. As described above in some implementations the wakeup may be initiated with an interrupt or other signal.

At at least partly in response to the signal the application processor transitions to the high power mode. Once awake at the communication module the other module or both may communicate with the server to exchange data .

Using the techniques described in this disclosure the server may continue to communicate with the user device even when the application processor is in a low power mode. This improves the user experience by allowing for receipt of data while minimizing power consumption thus extending operating time while on battery power.

At the communication module executing on the application processor provides the network list to the wireless interface . As described above the network list comprises information about networks with which a network connection may be established.

At the wireless interface begins a scan for networks. This scan may be continuous or performed at intervals. At the application processor enters the low power mode. Meanwhile the wireless interface continues scanning for wireless networks.

At the access point or another device transmits data which is received by the wireless interface during the scan. For example a service set identifier SSID beacon may be received during the scan.

At the received data is compared with the information on the network list . When a match is determined at the wireless interface initiates a wakeup of the application processor which results in a transition of the application processor from the low power mode to the high power mode. As described above in some implementations the wakeup may be initiated with an interrupt or other signal.

At at least partly in response to the signal the application processor transitions to the high power mode. Once awake at the communication module may establish a network connection using the detected approved network. In some implementations at once the network connection has been established the process may continue to that described above with regard to .

As described above with regard to at the communication module executing on the application processor provides connection data to the wireless interface describing an established wireless connection. At the interface processor processes at least a portion of the connection data and configures the wireless interface to maintain the connection. At the application processor transitions to the low power mode.

At the wireless interface sends keepalive data to the server via the wireless connection with the access point . The wireless interface configured with the connection data may send the keepalive data at the specified keepalive interval thus maintaining the connection with the server .

At the network connection is lost. For example the server may unavailable the access point may have failed the network access privileges on the wireless network may have expired and so forth.

At the connection module initiates a wakeup of the application processor which results in a transition of the application processor from the low power mode to the high power mode. As described above in some implementations the wakeup may be initiated with an interrupt or other signal.

At at least partly in response to the signal the application processor transitions to the high power mode. In some implementations at once the network connection has been established the process may continue to that described above with regard to .

Block receives the connection data . In some implementations this may use a communication interface between the memory and the interface memory . As described above the connection data describes an established wireless networking connection using the transceiver . In some implementations the transceiver may be a radio frequency or radio transceiver.

Block receives the wakeup signature . In some implementations this may use the communication interface between the memory and the interface memory .

Block may receive an indication the application processor is transitioning from the high power mode to the low power mode. The wireless interface based at least in part on the connection data and the wakeup signature continues to operate. In some implementations the wireless interface or portions thereof such as the interface processor may transition between high power and low power modes to further reduce power consumption.

Block transmits keepalive data . The keepalive data may be transmitted at a pre determined interval specified in the connection data such as the keepalive interval . As described above presence of the keepalive data maintains a connection which is accessible to the server . By maintaining this connection the server is able to establish communication with the user device even while the application processor is in the low power mode.

Block receives inbound data such as wakeup data over the established connection. For example the server may be attempting to communicate with the other module on the user device .

Block compares the inbound data with the wakeup signature . This comparison may include determining a match mismatch partial match and so forth. Block based at least in part on the comparison sends a wakeup signal to the application processor . For example in some implementations when the received data matches the wakeup signature the device may the wakeup signal may be sent. As described above this comparison may include determining a match mismatch partial match and so forth. The wakeup signal may comprise a hardware or software interrupt configured to transition the application processor from a low power state to a high power state. Once the application processor is awake and in the high power state at least a portion of the received data may be sent to the application processor for processing.

Block receives the network list from the application processor . As described above the network list describes wireless networks approved for connection and may include known but disapproved wireless networks.

Block receives data from the wireless network. For example a beacon may be received from the access point . Block identifies the wireless network based at least in part on a comparison of at least a portion of the received data with the network list . For example the wireless network may be identified as an unrecognized wireless network which does not appear in the approved networks or the disapproved networks of the network list .

Block signals the application processor to transition from the low power mode to the high power mode. This prepares the application processor to execute the communication module which is configured to determine what action to take with this unrecognized wireless network. Block may signal the application processor using a hardware interrupt sent along one or more general purpose input output lines. In other implementations a software interrupt sent along a data bus may be used.

Block provides at least a portion of the received data to the application processor . The application processor may execute a module such as the communication module to process this data and determine what action to take. These actions may include but are not limited to prompting the user to accept connection to this wireless network validating credentials of the unrecognized network disregarding the unrecognized network and so forth.

Block receives from the application processor instructions to connect to the identified wireless network. For example the instructions may configure the interface processor to establish a network connection using the identified wireless network. Block connects to the wireless network.

In some implementations the connection module the communication module or both may be configured to add the wireless network to the network list such as when not already present on the network list . As described above the wireless interface may be configured to maintain the network connection.

Block receives from the application processor an indication of entry to the low power mode. The wireless interface now configured and connected with the wireless network maintains the connection while the application processor is in the low power mode conserving power.

As described above the network connection may be lost for a variety of reasons. Block determines loss of connection to a first wireless network. For example transmission of the keepalive data may fail or a pre determined timeout interval may pass during which no beacon or other traffic associated with the wireless network is received by the wireless interface . The wireless network may comprise a wireless local area network WLAN . In one implementation the WLAN connection may be between the user device and an access point for the network. In another implementation the WLAN connection may be between the user device and another user device or other device.

Block signals the application processor to transition from the low power mode to the high power mode. Block sends to the application processor data indicating the loss of connection to the first wireless network. The application processor may execute the communication module to process this data and select an action if any.

Block receives from the application processor instructions to scan for wireless networks. As the network connectivity has been lost the communication module may be configured to attempt to reestablish a network connection. Having handed the scanning task off to the wireless interface block receives from the application processor an indication of entry to the low power mode.

Block scans for one or more additional wireless networks. This scan may be continuous or take place at various intervals. Block detects the one or more additional wireless networks . In some implementations the scan results may be compared to the network list as described above with regard to .

Block signals the application processor to transition from the low power mode to the high power mode. Block sends data about the one or more additional wireless networks found during the scan to the application process . The communication module may perform one or more actions based at least in part on the data. These actions may include connecting to one or more of the additional wireless networks found during the scan.

Block transitions the at least one application processor from the low power mode to the high power mode at least partly in response to a signal from the wireless interface .

Block queries the wireless interface for data associated with one or more wireless local area network connections.

Block receives the data from the wireless interface . As described above in one example the data may a portion of wakeup data received by the wireless interface . In another example the data may comprise information indicative of a loss of connectivity for the one or more wireless local area network connections. In yet another example the data may comprise detection of a wireless network. This may be a recognized wireless network such as appearing in the network list or an unrecognized wireless network.

Block based at least in part on the data performs one or more actions. The one or more actions may include configuring the wireless interface to perform one or more functions and transitioning the application processor from the high power mode to the low power mode. As described above the one or more functions may include one or more of periodically transmitting a user datagram protocol UDP keepalive signal receiving wakeup data corresponding to a pre determined wakeup signature or scanning for a pre determined wireless local area network.

When wakeup data is received the one or more actions may comprise executing a particular application referenced by the data. For example the wakeup data may refer to an email application which would be executed and prepared to receive an incoming email.

When the data comprises loss of connection information the one or more actions may comprise configuring the wireless interface to scan for wireless local area networks. As described above the scan may comprise transitioning the wireless interface from a low power mode to a high power mode receiving data from signals acquired by the wireless interface during a listening interval and transitioning the wireless interface from the high power mode to the low power mode. This may be done to minimize power consumption while extending scan time.

When the data comprises detection of a wireless network the one or more actions may comprise establishing a connection with the detected wireless network. For example when the scan detects the Pine network which is an approved network the wireless interface may be configured to establish a network connection and maintain that network connection.

The operations and processes described and shown above may be carried out or performed in any suitable order as desired in various implementations. Additionally in certain implementations at least a portion of the operations may be carried out in parallel. Furthermore in certain implementations less than or more than the operations described may be performed.

Certain aspects of the disclosure are described above with reference to block and flow diagrams of systems methods apparatuses and or computer program products according to various implementations. It will be understood that one or more blocks of the block diagrams and flow diagrams and combinations of blocks in the block diagrams and the flow diagrams respectively can be implemented by computer executable program instructions. Likewise some blocks of the block diagrams and flow diagrams may not necessarily need to be performed in the order presented or may not necessarily need to be performed at all according to some implementations.

These computer executable program instructions may be loaded onto a special purpose computer or other particular machine a processor or other programmable data processing apparatus to produce a particular machine such that the instructions that execute on the computer processor or other programmable data processing apparatus create means for implementing one or more functions specified in the flow diagram block or blocks. These computer program instructions may also be stored in a computer readable storage media or memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable storage media produce an article of manufacture including instruction means that implement one or more functions specified in the flow diagram block or blocks. As an example certain implementations may provide for a computer program product comprising a computer readable storage medium having a computer readable program code or program instructions implemented therein said computer readable program code adapted to be executed to implement one or more functions specified in the flow diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational elements or steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions that execute on the computer or other programmable apparatus provide elements or steps for implementing the functions specified in the flow diagram block or blocks.

Accordingly blocks of the block diagrams and flow diagrams support combinations of means for performing the specified functions combinations of elements or steps for performing the specified functions and program instruction means for performing the specified functions. It will also be understood that each block of the block diagrams and flow diagrams and combinations of blocks in the block diagrams and flow diagrams can be implemented by special purpose hardware based computer systems that perform the specified functions elements or steps or combinations of special purpose hardware and computer instructions.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain implementations could include while other implementations do not include certain features elements and or operations. Thus such conditional language is not generally intended to imply that features elements and or operations are in any way required for one or more implementations or that one or more implementations necessarily include logic for deciding with or without user input or prompting whether these features elements and or operations are included or are to be performed in any particular implementation.

Many modifications and other implementations of the disclosure set forth herein will be apparent having the benefit of the teachings presented in the foregoing descriptions and the associated figures. Therefore it is to be understood that the disclosure is not to be limited to the specific implementations disclosed and that modifications and other implementations are intended to be included within the scope of the appended claims. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

