---

title: Data services generation
abstract: A system for generation of a RESTful data service comprises a processor and a memory. The processor is configured to: receive a business process model; read the business process model to determine one or more inputs and one or more outputs; generate code for a RESTful data service to invoke the business process model that provides the input data and processes the output data; and generate a URL for the RESTful data service, wherein the URL represents the business process as an addressable resource. The memory is coupled to the processor and is configured to provide the processor with instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460304&OS=09460304&RS=09460304
owner: EMC Corporation
number: 09460304
owner_city: Hopkinton
owner_country: US
publication_date: 20120928
---
Typical data services that enabled access to data sources required manual coding. Also in many cases there is no automatic orchestration of data sources and data mappings. This means that these systems are complex to generate and maintain and are not easy to change as the system and needs for the system evolve. Further they require high technical skills to modify and maintain. In addition data services often use a standard asynchronous business process engine to orchestrate the data sources this results in indeterminate and unpredictable execution times.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

A RESTful REpresentational State Transfer data services generation system is disclosed. The system comprises a processor and a memory. The processor is configured to receive a business process model for example a stateless synchronous business process engine read the business process model to determine input s and output s generate code for a RESTful data service to invoke the business process model that receives the input data and responds with the output data and generate a URL uniform resource locator for the RESTful data service wherein the URL represents the business process as an addressable resource. The memory is coupled to the processor and is configured to provide the processor with instructions.

Advantages of a RESTful data services generation system include 1 configuration based generation of data services no coding required 2 automatic generation of data services from data model introspection 3 synchronous orchestration over multiple data sources 4 simplified maintenance and evolution product upgrade 5 easy configuration increasing the responsiveness to business needs 6 a WYSIWYG what you see is what you get editor that doesn t require high user expertise and 7 improved reusability.

In some embodiments the system comprises a mechanism for exposing data sources as RESTful data services that can be consumed by web service clients in a corporate network and across the internet. The data services are accessed over HTTP hypertext transfer protocol and URIs uniform resource identifiers are used to address the data available through the service. The REST interactions with the data happens in terms of HTTP verbs for example get post put and delete and the data exchanged in the interactions is represented in both XML extensible markup language and JSON Javascript object notation formats.

In some embodiments a typical scenario handled with the RESTful data services generation system requires orchestrated access across multiple data sources. A synchronously executing business process engine is responsible for orchestrating the access to the disparate data sources mapping and transforming data from each individual data source and returning the result. A business process model serves as the definition for the data service. The business process model defines a set of input data and output data. The data definition becomes the request and response interface for the RESTful service. A service generator reads the business process model and based on the model s data definition generates code to receive and process the request URL invoke the stateless process synchronously pass in the correctly mapped input data get the output data from the completed process execution and return it to the service s client.

In some embodiments an application service consumes a stateless process as a data service source to fetch arbitrary information from a data repository or external resource e.g. relational data base management system RDBMS web service hypertext transfer protocol HTTP etc. . The stateless process can be configured to take inputs and return outputs using process variables. The returned outputs can be either a single object or a list of objects. The output is used as a data service source and can be bound to a result list text label etc. to display a result in a graphical user interface. For example 

In some embodiments in the event that the service encounters an error while executing the stateless process engine a service error is returned.

In some embodiments a user composes a stateless process and saves it. A builder generates the data source service for the stateless process. The user then binds this data service to any control in a user interface page builder. The data source service is similar to a real time search service. The stateless process can have process variables that are marked for input or output. The process variables marked for input are defined in an input domain class. The process variables marked for output are defined in an output domain class. There is a base controller which does not have any business logic defined and only delegates calls to the service class. The constructor takes the following three arguments 1 a process URN uniform resource name 2 class input and 3 class output.

In some embodiments the business process model comprises a synchronous business process engine. A typical process engine executes the process in an asynchronous manner with respect to the process invocation mechanism. For example the actual execution of the process by the process engine is not coordinated in time with its invocation. The engine may pause execution and resume it at a later time when resources are available while the invoker has terminated or has moved on to another responsibility. On the other hand a synchronous process engine executes the exact same business process models that the asynchronous one executes by using the same procedural markup definition a user defining a process need not learn anything new nor do they need to revise existing models. The synchronous process engine operates on an entire business process or in hybrid fashion as a specified portion of a process with the remainder of the business process operated on by an asynchronous process engine. The differentiating characteristics of the synchronous process engine include 

In one sense synchronous process engine provides a static resource allocation wherein a computing resource is tied up statically for a single execution context permitting a predictable and or determinate time for execution.

In some embodiments the synchronous process engine orchestrates the activities through a variety of flow patterns like splits parallel joins n out of m joins error forks and others. Each orchestration managed by the process engine may be initiated through a variety of different mechanisms for example by an externally occurring event through direct invocation via a software API and or from a computer software program s graphical user interface.

In some embodiments the synchronous process engine carries out the same set of activities provides e.g. a more limited set of initiation mechanisms and is capable of orchestrating the same flow patterns as the asynchronous engine. Since manual activities are asynchronous by nature the synchronous engine ends the execution and returns to the invoker immediately as soon as it encounters the manual activity. Manual activities in such a case may be flagged for post process execution. In some embodiments if no non manual activities are detected for forward progress execution the engine terminates the process execution and returns immediately no post process execution of the remaining manual activities occurs because the process has ended 

Similarly rendezvous also known as wait for activities that require waiting for external events to occur are not allowed for a synchronous process engine as waiting may lock the associated resources.

In some embodiments with a dedicated associated resource for the synchronous process engine a simplification is to serialize the parallelized activities synchronous execution. Because the resource is dedicated the synchronous serialized activities are many times faster than the asynchronous parallelized activities.

Due to the manner in which it executes business processes the synchronous process engine may provide orchestration for actions within software applications. Actions are defined as changes to or retrieval of data needed by the application that typically require multiple steps and some specific sequencing to accomplish.

Examples of application actions carried out by the engine include querying data from a relational database calling a remote Web service uploading content to a repository sending electronic mail and sending electronic files to an FTP site. These individual actions are orchestrated to form composite actions by the synchronous process engine . The engine allows these actions to be carried out with very low latency with respect to their invocation and for the information accessed by the actions to be modified without the need to coordinate complex distributed transaction semantics with the synchronous process engine. In some embodiments the engine has no persistency requirements thus there is no need for distributed transaction coordination with the data accessed by the engine s activities during execution. This is in contrast to where the distributed transaction coordination comes into play if the engine needs to persist state data which is unnecessary for a synchronous process engine.

One example is looking up city data to use in filling out user interface web forms for example verifying zip codes and or area codes etc. The business portion of a process would be a single activity as shown in . The activity is executed synchronously to fill out the drop down GUI control on the Web Form to list all cities for a particular US State as shown in .

In some embodiments upon model definition and or creation by default the system assumes an asynchronous process engine will execute all activities. The example given in is a loan approval process which includes two sequential activities a determination of income from a credit application and a determination of a debt to income ratio and another activity reporting the loan approval status . Using only an asynchronous engine there may be no way to predict execution time for activities and together.

In the user or system specifies that activities and are to be executed synchronously in a Turbo Mode by synchronous engine and thus are shown in a different grey color. The remaining activities for example are still executed by the asynchronous engine . In this way the system designer can assign a predictable execution time for activities and together.

In one embodiment an activity type called an activity template is used to represent the invocation of synchronous process states within the larger business process. In a single activity would represent a different process that would be executed synchronously i.e. in Turbo mode . That process would contain the two activities Determine Income from Credit Application and Determine Debt to Income Ratio.

In step an asynchronous business process specification declared in a procedural markup language comprising an activity flow model and more than one activity is received. For example the procedural markup language may be expressed in XML extensible markup language XPDL XML process definition language BPEL business process execution language and or BPMN business process modeling notation .

In step an indication that a subset of the activities is to be synchronously executed without reduced latency is received. In some embodiments the synchronous subset that is manual activities is identified as null operations. The indication may be received via an API or via a user interface. In some embodiments the engine identifies any activities in the synchronous subset that are rendezvous activities and flags them as not synchronously executable. In some embodiments the engine identifies parallelized activities within the synchronous subset and serializes the parallelized activities for synchronous execution.

In step all process execution related objects are fetched once into cache and or memory. In step the synchronous subset is executed in a single execution transaction context. For example the synchronous subset may be executed without clearing the process execution related objects from the memory and or without recording an execution state during the execution. Executing in a single execution transaction context includes executing with a predictable execution time. In some embodiments the null operations are flagged for future manual execution.

Without limitation the following are example release notes that can be used to describe use of the synchronous engine 

Use the stateless process engine to execute process instances in memory. The stateless process engine relies on a Synchronous Invoke Process activity that invokes a workflow synchronously. The synchronous transaction commits only at the end of the workflow so that if an error occurs during the subprocess the entire workflow fails.

Invoking process instances using the Synchronous Invoke Process activity provides significant performance improvement. For example during in house testing the execution time of one workflow instance containing 20 activities was reduced from three seconds to 160 milliseconds. Actual performance benefits depend on multiple factors including load the number of processors processor speed and the nature of the activities in the process.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

