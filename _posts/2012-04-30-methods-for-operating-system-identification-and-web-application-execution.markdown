---

title: Methods for operating system identification and web application execution
abstract: Methods to execute operating system dependencies for web applications are provided. A particular method includes receiving an operating system independent function call at a web server. The operating system independent function call may be initiated at a web-based application. The method further includes determining a particular operating system used by the web server and selecting a command based on the particular operating system. The method further includes executing the selected command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08776096&OS=08776096&RS=08776096
owner: International Business Machines Corporation
number: 08776096
owner_city: Armonk
owner_country: US
publication_date: 20120430
---
This application is a continuation patent application of and claims priority from U.S. patent application Ser. No. 12 484 085 filed on Jun. 12 2009 and entitled Systems and Methods for Operating System Identification and Web Application Execution status abandoned which is incorporated by reference herein in its entirety for all purposes.

The present disclosure is generally related to networked computing systems and more particularly to web application execution.

Web applications may rely upon functions that use instructions that in turn depend upon a particular operating system of a computing system on which the web application is executing. Certain web applications as a result include code to execute a series of tests in order to determine the type of operating system on which the web application may execute. The web application may be modified if there is a need or desire to execute the web application on a different computing system having a different operating system. Modifying web applications for different operating system environments adds costs to development.

Methods to execute web applications are provided. A particular method includes receiving an operating system independent function call at a web server from a web based application. The method further includes determining a particular operating system used by the web server and selecting a command based on the particular operating system. The method further includes executing the selected command associated with the operating system independent function call at the web server.

The system of is configured to determine a path to an executable by determining the type of operating system being executed by the system . The system includes at least one computer . The computer shown in may represent any type of computer computer system or other programmable electronic device capable of functioning as a client or a server in a client server environment. Moreover the computer may be implemented using one or more networked computers e.g. in a cluster or other distributed computing system.

The computer includes a central processing unit CPU that includes at least one microprocessor coupled to a memory . The memory may include an operating system . The computer generally operates under the control of the operating system . The operating system may generally function as an interface between hardware and applications. The operating system may be responsible for the management and coordination of activities and the sharing of computer resources.

The operating system additionally may act as a host for applications that execute on the computer . As a host the operating system may manage details of the application as related to the operation of the hardware. Applications such as web applications may access operating system services through application programming interfaces APIs or system calls. By invoking an API the application may request a service from the operating system pass parameters and receive any results of an operation. Users may also interact with the operating system using a software user interface such as a command line interface or a graphical user interface.

The memory may also include various computer software applications components programs objects modules data structures etc that are executable by the CPU . For example a web server may include a program that accepts HTTP requests from clients e.g. a web browser and serves responses that typically include web pages such as HTML documents and linked objects. The web server may identify the operating system being executed by the computer . The web server may identify the operating system in response to an operating system independent function call initiated at a web application . For example a web application may initiate an operating system independent call querying sales data. In response to the sales data query an exemplary web server may execute an identify command e.g. a Java command including System.getProperty os.name . The indentify command may be configured to retrieve information identifying the operating system used by the web server .

In an embodiment the web server may include an executable module . The executable module may include executables that execute an identify command to determine the operating system type. For example the executable module may receive the operating system independent function call prompting a display of employee address information. The executable module may execute an identify command to determine the operating system type. The executable module may further execute an operating system dependent command that is based on the operating system type and that initiates the display of employee address information.

The memory may represent random access memory RAM devices comprising main storage of the computer as well as any supplemental levels of memory e.g. cache memories non volatile or backup memories e.g. programmable or flash memories read only memories etc. In addition the memory may include memory storage physically located elsewhere in the computer e.g. cache memory in CPU as well as any storage capacity used as a virtual memory e.g. as stored on a mass storage device or on another computer coupled to the computer via a network . The computer may receive and output data via a user interface .

The embodiment of may reduce the number of tests used to determine the operating system. The web application may be modified to enable execution by the determined operating system at any time without rebuilding the source code. The embodiment of may further provide web developers with a direct path to an executable web application that includes codes appropriate for the operating system being executed by the web server. The appropriate code e.g. command string may be determined and retrieved without necessitating extra software at the web application to determine the operating system on which the web application is executing. Instead the web server may transparently determine the operating system that is being used in response to an operating system independent function call. The web server may provide the correct path to a version of code appropriate for the executing operating system. For example an appropriate version of installation code may be selected from among a number of versions of installation programs each version associated with a different operating system.

Referring to a method is described that includes receiving an operating system independent function call at a web server from a web based application at . By way of example a web based application may be designed to list the user accounts on the server. According to one embodiment the web based application may be programmed to provide an operating system independent function call. For example in a Java Websphere environment the web based application could utilize the provided method signature 

Responsive to receiving the operating system independent function call a determination may be made as to the particular operating system used by the web server at . The method used by the web server to determine the operating system being used may vary by system. As an example a Java 2 Platform Enterprise Edition J2EE server may use a Java System property os.name . The J2EE server may use an identify command that include a Java method such as System.getProperty os.name to retrieve the operating system identification information.

Thus in the exemplary system using a Java Websphere application executing on a J2EE platform the web based application may be programmed to send the command LISTUSER to a web server. Responsive to receiving the command LISTUSER a determination may be made at the web server of the particular operating system being used e.g. by executing the System.getProperty os.name command. A method signature public java.lang.String getExecutable java.lang.String commandId may take the command e.g. LISTUSER attribute of the executable element as a parameter.

A command may be selected in response to the operating system independent function call and based on the particular operating system used by the web server . For example the independent function call from the web application may initiate a determination by the web server of the operating system being executed by the web server. The command may include a version of installation code for the web application that is appropriate for the determined operating system. The web server may provide a command string for AIX or Linux for instance. Where the operating system is unsupported a null value may alternatively be returned. In this manner a command may be selected based on the operating system independent function and based on the particular operating system being used.

The command may be executed to access and implement the function associated with the operating system independent function call at . For example the command string for AIX or Linux may be executed by a respective AIX or Linux operating system to execute a function to for example list user accounts on the system.

In a particular embodiment results of execution of the command may be provided to the web based application . In one particular example only two operating systems e.g. AIX and Linux may be supported. Additional operating systems may be supported in other embodiments. For example the following additional Java supported operating systems may be used with certain embodiments Digital Unix FreeBSD HP UX Irix Mac OS MPE iX Netware 4.11 OS 2 Solaris Windows 2000 Windows 95 Windows 98 Windows NT and Windows XP.

The executable module may be separate from and may operate independently with respect to the web based application allowing support for additional operating systems whether currently supported by Java or supported in the future to be added without the need to alter or rebuild the software for the web based application. Rather additional elements may be added to the web.xml configuration file with corresponding operating system identifiers and commands.

The commands may access a function of the particular operating system. Continuing with the earlier example one function may be to list the user accounts on the server. However any number of functions may be accessed using the described techniques. In certain cases a command may provide for including data necessary to execute the function. Data may be provided as part of the operating system independent function call and passed to the web server such as the example of using the web.xml configuration file.

The embodiment of may reduce the number of tests used to determine the operating system. The web server may be used to determine the operating system being executed by the web server . The web application may be modified to enable execution by the determined operating system at any time without rebuilding the source code of the web application. The appropriate code e.g. command string may be determined and retrieved without necessitating extra web application software to determine the operating system on which the web application is executing. Instead the web server may transparently determine the operating system that is being used in response to an operating system independent function call. The web server may provide the correct path to a version of code appropriate for executing the requested function at the executing operating system.

In the depicted example the computing system includes a processor a main memory an input device such as a keyboard or mouse a display device and a network adapter . The network adapter is coupled to client computers .

The main memory may include computer instructions installed onto a computer readable medium such as computer memory storage. The main memory may include the computer instructions executable by the processor . The computer instructions may include an operating system independent function call. As an example the operating system independent function call may be the LISTUSER function described above but may also be any number of other functions as may be useful for implementation with a particular web based application. The computer instructions may determine the operating system type of the server and may execute an operating system dependent command selected from a plurality of commands .

The operating system dependent command may be selected based on the operating system type and in response to the operating system independent function call of the instructions . For example the operating system dependent command may include a version of installation code selected from a number of installation codes where each code is associated with a corresponding operating system. The selection may be automatically made based on the determination of the operating system being executed by the web server. The operating system determination may be made in response to receiving the operating system independent call.

The main memory may also include the executable module such as the executable module described in reference to to execute a command to determine the operating system type. The executable module may additionally execute an operating system dependent command. In one example either a first operating system dependent command e.g. for AIX or a second operating system dependent command e.g. for Linux may be executed depending on the operating system type. Additional operating system dependent commands may be added and made accessible to the main memory for other operating systems.

An operating system not shown runs on the processor and coordinates and provides control of various components within the computing system . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on the computing system Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both .

The hardware in computing system may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used by the computing system but are not specifically illustrated in to simplify the explanation. Also the processes of the disclosed illustrative embodiments may be applied to a multiprocessor data processing system.

The depicted examples described with respect to are not meant to imply architectural limitations. For example portions of the computing system may be implemented in a personal computer a server a server cluster a tablet computer a laptop computer or a communication device.

Particular embodiments of the computing system can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a particular embodiment the disclosed methods are implemented in software that is embedded in a processor readable medium and executed by a processor including but not limited to firmware resident software microcode etc .

Further embodiments of the present disclosure such as the one or more embodiments in can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can tangibly embody a computer program and that can contain store or communicate the program or portions thereof for use by or in connection with the computer the instruction execution system an apparatus or a computing device.

In various embodiments the medium can include an electronic magnetic optical electromagnetic infrared or a semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write memory CD R W and digital versatile disk DVD .

The previous description of the disclosed embodiments is provided to enable a person skilled in the art to make or use the disclosed embodiments. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles disclosed herein may be applied to other embodiments without departing from the scope of the disclosure. Thus the present disclosure is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope possible consistent with the principles and features as defined by the following claims.

