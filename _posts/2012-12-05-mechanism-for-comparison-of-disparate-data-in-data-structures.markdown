---

title: Mechanism for comparison of disparate data in data structures
abstract: A device receives a first result that includes first data, and a second result that includes second data, and determines whether a comparator supports the first data and the second data. When the comparator supports the first data and the second data, the device utilizes the comparator to select comparison logic for the first data of the first result and for the second data of the second result, compares the first result and the second result, using the selected comparison logic, to determine whether the first result is equivalent to the second result, and outputs or stores the determination of whether the first result is equivalent to the second result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223595&OS=09223595&RS=09223595
owner: The MathWorks, Inc.
number: 09223595
owner_city: Natick
owner_country: US
publication_date: 20121205
---
The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

A technical computing environment TCE may provide a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that requires the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one example a TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

Code generated by the TCE may be tested to determine whether the code will function properly e.g. when executed . In a simple example the code may be output as a simulation and an executable. The simulation code may be executed to generate simulation results and the executable code may be executed to generate executable results. The simulation results and the executable results may be tested to determine whether the simulation results are equivalent to the executable results. However comparing such results may be difficult when the results include disparate data in complex data structures.

Systems and or methods described herein may compare disparate data in arbitrarily complex data structures in order to determine whether the data structures are equivalent e.g. pass or fail a qualification test . In one example the systems and or methods may provide a comparator application programming interface API that enables a tester of program code to compare complex data structures e.g. cell arrays structure arrays etc. . The data structures may include many different types of data and each data type may require different methods of comparison. The single comparator API may recursively compare all elements of a data structure so that each element may utilize comparison logic that is appropriate for that element.

As further shown in the testing component may receive results generated by TCE code. The TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables etc. In one example the TCE code may be executed to generate a first result that includes first data. The TCE code may again be executed to generate a second result that includes second data. In one example the first result may be generated by a simulation version of the TCE code and the second result may be generated by an executable version of the TCE code. The first data and the second data may be the same type or different types and may include floating point values cell arrays structure arrays simulation output data etc. The testing component may receive a test case to be applied to the first result and the second result. For example the test case may include a test e.g. IsEqualTo to determine whether the first result is equivalent to the second result.

The testing component may determine whether a comparator of the testing component supports the first data and the second data. If the comparator does not support the first data and or the second data the testing component may provide e.g. display an indication of an unsupported data in the first result and or the second result. If the comparator supports the first data and the second data the testing component may utilize the comparator to select comparison logic that is appropriate for the first data of the first result and the second data of the second result.

In one example implementation the comparator may include a set e.g. a list of comparison logic that may be used to support different data structures. For example the list may include comparison logic for cell arrays structure arrays numeric data logical data string data object data etc. The testing component may determine first comparison logic of the list that matches the first data and may determine second comparison logic of the list that matches the second data. The comparator may output the first comparison logic as the selected comparison logic that is appropriate for the first data of the first result. The comparator may output the second comparison logic as the selected comparison logic that is appropriate for the second data of the second result.

The testing component may compare the first result and the second result using the selected comparison logic and based on the test case to determine whether the first result is equal to the second result. The testing component may output a determination of whether the first result is equal to the second result. If the first result equals the second result the testing component may output e.g. display and or store diagnostic information indicating the equivalence of the first result and the second result. For example as shown in the diagnostic information may state The first result IsEqualTo the second result. If the first result does not equal the second result the testing component may output e.g. display and or store diagnostic information indicating the nonequivalence of the first result and the second result.

The terms code and program code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In one example code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices.

Server device may include one or more server devices or other types of computation and communication devices that gather process and or provide information in a manner described herein. Server device may include a device that is capable of communicating with client device e.g. via network . In one example server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. and or software e.g. a simulator executing on the aforementioned devices. In one example server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN an intranet the Internet or a combination of networks.

TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In one implementation TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . Alternatively or additionally TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in other implementations environment may include fewer components different components differently arranged components and or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more other tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in other implementations device may include fewer components different components differently arranged components and or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more other tasks described as being performed by one or more other components of device .

Block diagram editor may include hardware or a combination of hardware and software that may be used to graphically specify models of dynamic systems. In one implementation block diagram editor may permit a user to perform actions such as construct edit display annotate save and or print a graphical model e.g. a block diagram that visually and or pictorially represents a dynamic system . In another implementation block diagram editor may permit a user to create and or store data relating to graphical entities .

A textual interface may be provided to permit interaction with block diagram editor . A user may write scripts that perform automatic editing operations on a model using the textual interface. For example the textual interface may provide a set of windows that may act as a canvas for the model and may permit user interaction with the model. A model may include one or more windows depending on whether the model is partitioned into multiple hierarchical levels.

Graphical entities may include hardware or a combination of hardware and software that may provide entities e.g. signal lines buses etc. that represent how data may be communicated between functional and or non functional units and blocks of a model. Blocks may include fundamental mathematical elements of a block diagram model.

Execution engine may include hardware or a combination of hardware and software that may process a graphical model to produce simulation results may convert the graphical model into executable code and or may perform other analyses and or related tasks. In one implementation for a block diagram graphical model execution engine may translate the block diagram into executable entities e.g. units of execution following the layout of the block diagram. The executable entities may be compiled and or executed on a device e.g. client device to implement the functionality specified by the model.

Graphical models may include entities with relationships between the entities and the relationships and or the entities may have attributes associated with them. The entities my include model elements such as blocks and ports. The relationships may include model elements such as lines e.g. connector lines and references. The attributes may include model elements such as value information and meta information for the model element associated with the attributes. Graphical models may be associated with configuration information. The configuration information may include information for the graphical model such as model execution information e.g. numerical integration schemes fundamental execution period etc. model diagnostic information e.g. whether an algebraic loop should be considered an error or result in a warning model optimization information e.g. whether model elements should share memory during execution model processing information e.g. whether common functionality should be shared in code that is generated for a model etc.

Additionally or alternatively a graphical model may have executable semantics and or may be executable. An executable graphical model may be a time based block diagram. A time based block diagram may consist for example of blocks e.g. blocks connected by lines e.g. connector lines . The blocks may consist of elemental dynamic systems such as a differential equation system e.g. to specify continuous time behavior a difference equation system e.g. to specify discrete time behavior an algebraic equation system e.g. to specify constraints a state transition system e.g. to specify finite state machine behavior an event based system e.g. to specify discrete event behavior etc. The lines may represent signals e.g. to specify input output relations between blocks or to specify execution dependencies between blocks variables e.g. to specify information shared between blocks physical connections e.g. to specify electrical wires pipes with volume flow rigid mechanical connections etc. etc. The attributes may consist of meta information such as sample times dimensions complexity whether there is an imaginary component to a value data type etc. associated with the model elements.

In a time based block diagram ports may be associated with blocks e.g. blocks . A relationship between two ports may be created by connecting a line e.g. a connector line between the two ports. Lines may also or alternatively be connected to other lines for example by creating branch points. For instance three or more ports can be connected by connecting a line to each of the ports and by connecting each of the lines to a common branch point for all of the lines. A common branch point for the lines that represent physical connections may be a dynamic system e.g. by summing all variables of a certain type to 0 or by equating all variables of a certain type . A port may be an input port an output port an enable port a trigger port a function call port a publish port a subscribe port an exception port an error port a physics port an entity flow port a data flow port a control flow port etc.

Relationships between blocks e.g. blocks may be causal and or non causal. For example a model may include a block that represents a continuous time integration block that may be causally related to a data logging block by using a line e.g. a connector line to connect an output port of the continuous time integration block to an input port of the data logging block. Further during execution of the model the value stored by the continuous time integrator may change as the current time of the execution progresses. The value of the state of the continuous time integrator may be available on the output port and the connection with the input port of the data logging block may make this value available to the data logging block.

A sample time may be associated with the elements of a graphical model. For example a graphical model may include a block e.g. block with a continuous sample time such as a continuous time integration block that may integrate an input value as time of execution progresses. This integration may be specified by a differential equation. During execution the continuous time behavior may be approximated by a numerical integration scheme that is part of a numerical solver. The numerical solver may take discrete steps to advance the execution time and these discrete steps may be constant during an execution e.g. fixed step integration or may be variable during an execution e.g. variable step integration .

Alternatively or additionally a graphical model may include a block e.g. block with a discrete sample time such as a unit delay block that may output values of a corresponding input after a specific delay. This delay may be a time interval and this interval may determine a sample time of the block. During execution the unit delay block may be evaluated each time the execution time has reached a point in time where an output of the unit delay block may change. These points in time may be statically determined based on a scheduling analysis of the graphical model before starting execution.

Alternatively or additionally a graphical model may include a block e.g. block with an asynchronous sample time such as a function call generator block that may schedule a connected block to be evaluated at a non periodic time. During execution a function call generator block may evaluate an input and when the input attains a specific value when the execution time has reached a point in time the function call generator block may schedule a connected block to be evaluated at this point in time and before advancing execution time.

Further the values of attributes of a graphical model may be inferred from other elements of the graphical model or attributes of the graphical model. For example the graphical model may include a block e.g. block such as a unit delay block that may have an attribute that specifies a sample time of the block. When a graphical model has an execution attribute that specifies a fundamental execution period the sample time of the unit delay block may be inferred from this fundamental execution period.

As another example the graphical model may include two unit delay blocks e.g. blocks where the output of the first of the two unit delay blocks is connected to the input of the second of the two unit delay block. The sample time of the first unit delay block may be inferred from the sample time of the second unit delay block. This inference may be performed by propagation of model element attributes such that after evaluating the sample time attribute of the second unit delay block a graph search proceeds by evaluating the sample time attribute of the first unit delay block since it is directly connected to the second unit delay block.

The values of attributes of a graphical model may be set to characteristics settings such as one or more inherited settings one or more default settings etc. For example the data type of a variable that is associated with a block e.g. block may be set to a default such as a double. Because of the default setting an alternate data type e.g. a single an integer a fixed point etc. may be inferred based on attributes of elements that the graphical model comprises e.g. the data type of a variable associated with a connected block and or attributes of the graphical model. As another example the sample time of a block may be set to be inherited. In case of an inherited sample time a specific sample time may be inferred based on attributes of elements that the graphical model comprises and or attributes of the graphical model e.g. a fundamental execution period .

Although shows example functional components of TCE in other implementations TCE may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of TCE may perform one or more other tasks described as being performed by one or more other functional components of TCE .

As further shown in testing component may receive results generated by TCE code . TCE code may include text based code that may require further processing to execute binary code that may be executed text files that may be executed in conjunction with other executables etc. In one example TCE code may be executed to generate a first result that includes first data. TCE code may again be executed to generate a second result that includes second data. In one example first result may be generated by a simulation version of TCE code and second result may be generated by an executable version of TCE code . The first data and the second data may be the same type or different types and may include floating point values fixed point values cell arrays structure arrays simulation output data numeric data logical data string data object data etc. Testing component may receive a test case to be applied to first result and second result . For example test case may include a test e.g. IsEqualTo to determine whether first result is equivalent to second result .

Testing component may determine whether a comparator of testing component supports the first data and the second data. If the comparator does not support the first data and or the second data testing component may provide e.g. display an indication of unsupported data in first result and or second result . If the comparator supports the first data and the second data testing component may utilize the comparator to select comparison logic that is appropriate for the first data of first result and the second data of second result .

In one example implementation the comparator may include a set e.g. a list of comparison logic that may be used to support different data. For example the list may include comparison logic for cell arrays structure arrays numeric data logical data string data object data etc. Testing component may determine first comparison logic of the list that matches the first data and may determine second comparison logic of the list that matches the second data. The comparator may output the first comparison logic as the selected comparison logic that is appropriate for the first data of first result . The comparator may output the second comparison logic as the selected comparison logic that is appropriate for the second data of second result .

In one example the data structures handled by the comparator may need to be compared in a numerically stable manner. Such data structures may include numerical values such as floating point values and values inside more complex data structures such as cell arrays structure arrays output data recursive data etc. The comparator may provide the numerical comparison of such complex and arbitrary data structures.

Testing component may compare first result and second result using the selected comparison logic and based on test case to determine whether first result is equal to second result . Testing component may output a determination of whether first result is equal to second result . If first result equals second result testing component may output e.g. display and or store as determination diagnostic information indicating the equivalence of first result and second result . For example as shown in diagnostic information may state The first result IsEqualTo the second result. If first result does not equal second result testing component may output e.g. display and or store as determination diagnostic information indicating the nonequivalence of first result and second result . Diagnostic information may provide information identifying a location of the nonequivalence in first result and or second result . The location information may include a diagnostic code e.g. a recursive path that identifies where the nonequivalence occurs in first result and or second result .

In order to compare disparate data structures typical testing systems define a method e.g. an equals method for each different data structure generated by code e.g. TCE code . This may require modification of the code prior to testing. In contrast testing component may permit a different definition of equality to be used during testing than used during execution of TCE code . Such an arrangement may enable testing component to utilize different comparison logic during the test of first result and second result without the need to modify TCE code prior to testing. Furthermore testing component may permit first result and second result to be compared while typical testing systems do not permit such a comparison. In one example implementation testing component may recursively reuse the comparison logic for many different data structures structured within complex data structures. This may prevent the comparator from having to re implement a recursive step.

In one example implementation the comparator may include APIs of abstract methods e.g. satisfiedBy getDiagnosticFor supports etc. . Alternatively or additionally the comparator may include a recursive API e.g. ContainerComparator and a composite API e.g. ComparatorList that enable testing component to recursively use the comparison logic on complex data structures.

Although shows example operations capable of being performed by TCE in other implementations TCE may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

Comparator component may provide an API that can be used in conjunction with a test case e.g. an IsEqualTo constraint and that may allow a tester to determine comparison logic to use for the test e.g. the equality comparison provided by the IsEqualTo constraint . As shown in comparator component may receive first result and second result and may determine whether comparator component supports the first data of first result and the second data of second result .

If comparator component does not support the first data of first result and or the second data of second result comparator component may provide e.g. display an indication of unsupported data in first result and or second result . If comparator component supports the first data of first result and the second data of second result comparator component may select comparison logic that is appropriate for the first data of first result and the second data of second result . Comparator component may provide comparison logic to determination component . Comparison logic may include comparison methods that may be applied to the first data of first result and the second data of second result .

Determination component may receive first result second result test case and comparison logic . Determination component may compare first result and second result using the selected comparison logic and based on test case to determine whether first result is equal to second result . Determination component may output determination of whether first result is equal to second result . If first result equals second result determination component may output e.g. display and or store as determination diagnostic information indicating the equivalence of first result and second result . If first result does not equal second result determination component may output e.g. display and or store as determination diagnostic information indicating the nonequivalence of first result and second result .

Although shows example functional components of testing component in other implementations testing component may include fewer functional components different functional components differently arranged functional components and or additional functional components than depicted in . Alternatively or additionally one or more functional components of testing component may perform one or more other tasks described as being performed by one or more other functional components of testing component .

As further shown in testing component may receive a test case to be applied to first result and second result . For example test case may include a test e.g. testCase.assertThat to determine whether first result is equivalent to second result . Testing component may generate a test based on first result second result and test case . For example testing component may generate test with the syntax testCase.assertThat a IsEqualTo b Using CustomComparator . Test may determine whether first result a is equal to second result b using a custom comparator e.g. CustomComparator .

Testing component may determine whether the custom comparator supports the first data of first result and the second data of second result . If the custom comparator does not support the first data and or the second data testing component may provide e.g. display an indication of unsupported data in first result and or second result . If the custom comparator supports the first data and the second data testing component may utilize the custom comparator to select comparison logic that is appropriate for the first data of first result and the second data of second result .

Testing component may compare first result and second result using the selected comparison logic and based on test to determine whether first result is equal to second result . If first result equals second result testing component may output e.g. display and or store information e.g. a b indicating the equivalence of first result and second result . If first result does not equal second result testing component may output e.g. display and or store information e.g. a b indicating the nonequivalence of first result and second result .

Although shows example operations capable of being performed by testing component in other implementations testing component may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

In one example implementation comparator component may receive a result that includes particular data and may determine whether comparator list includes comparison logic that supports the particular data. If comparator list includes comparison logic that supports the particular data comparator component may select the first comparison logic from comparator list which supports the particular data. Alternatively or additionally if comparator list includes multiple comparison logic that supports the particular data comparator component may select one of the multiple comparison logic from comparator list .

Some data structures such as cell arrays and structure arrays may contain arbitrarily complex elements that also need to be compared. For such data structures comparator may recursively select comparison logic from comparator list for the different complex elements. For example as shown in comparator may receive a result that includes the syntax data 5 string inputParser. Comparator may determine that data is a cell array and may select comparison logic for cell arrays e.g. CellComparator . Comparator may examine each element of the data cell array and may determine that a first element e.g. 5 is a double value. Since comparison logic for cell arrays e.g. CellComparator and comparison logic for structure arrays e.g. StructComparator do not support double values comparator may select for the first element comparison logic for numeric data e.g. NumericComparator . Comparator may determine that a second element e.g. string is string data and may select for the second element comparison logic for string data e.g. StringComparator . Comparator may determine that a third element e.g. inputParser is object data and may select for the third element comparison logic for object data e.g. ObjectComparator .

Although result may include a simple data structure comparator may permit comparison using appropriate comparison logic of data structures that may be significantly more complex with multiple levels of nesting. Furthermore comparator may ensure that numeric and or non numeric values are compared with appropriate tolerances and that the tolerances propagate to all numeric and or non numeric values in a data structure. Alternatively or additionally comparator may apply modifiers to comparisons for non numeric data types. For example comparator may compare strings without regard to whitespace or case differences may compare numeric values without regard to class type differences etc. The modifiers may be propagated to appropriate values in a data structure.

In one example implementation comparator list may correspond to a list e.g. the ComparatorList of comparison logic that may be selected for a comparison operation. The ComparatorList may provide the list of comparison logic to comparator component e.g. the ContainerComparator before the ContainerComparator performs the comparison operation. The ContainerComparator may then have access to the full list of comparison logic and may therefore compare any data supported by the ComparatorList. The ContainerComparator may support in recursion any data that is support the ComparatorList.

Although shows example operations capable of being performed by comparator component in other implementations comparator component may perform fewer operations different operations and or additional operations than depicted in . Alternatively or additionally one or more components of may perform one or more other tasks described as being performed by one or more other components of .

As shown in process may include receiving a first result that includes first data block and receiving a second result that includes second data block . For example in an implementation described above in connection with testing component may receive results generated by TCE code . TCE code may be executed to generate first result that includes first data. TCE code may again be executed to generate second result that includes second data. In one example first result may be generated by a simulation version of TCE code and second result may be generated by an executable version of TCE code . The first data and the second data may be the same type or different types and may include floating point values cell arrays structure arrays simulation output data numeric data logical data string data object data etc.

As further shown in process may include determining whether a comparator supports the first data and the second data block . If the comparator does not support the first data and or the second data block NO process may include providing an indication of unsupported data block . For example in an implementation described above in connection with testing component may determine whether a comparator of testing component supports the first data and the second data. If the comparator does not support the first data and or the second data testing component may provide e.g. display an indication of unsupported data in first result and or second result .

Returning to if the comparator supports the first data and the second data block YES process may include utilizing the comparator to select comparison logic for the first result and the second result block and comparing the first result and the second result with the comparison logic to determine if the first result is equal or unequal to the second result block . For example in an implementation described above in connection with if the comparator supports the first data and the second data testing component may utilize the comparator to select comparison logic that is appropriate for the first data of first result and the second data of second result . Testing component may compare first result and second result using the selected comparison logic and based on test case to determine whether first result is equal to second result .

As further shown in process may include outputting and or storing the determination of equality or inequality block . For example in an implementation described above in connection with testing component may output determination of whether first result is equal to second result . If first result equals second result testing component may output e.g. display and or store as determination diagnostic information indicating the equivalence of first result and second result . If first result does not equal second result testing component may output e.g. display and or store as determination diagnostic information indicating the nonequivalence of first result and second result .

Process block may include the process blocks depicted in . As shown in process block may include determining first comparison logic of a comparator list that matches the first data block determining second comparison logic of the comparator list that matches the second data block and outputting the first comparison logic and the second comparison logic as the selected comparison logic for the first result and the second result block . For example in an implementation described above in connection with the comparator may include a list of comparison logic for cell arrays structure arrays numeric data logical data string data object data etc. Testing component may determine first comparison logic of the list that matches the first data and may determine second comparison logic of the list that matches the second data. The comparator may output the first comparison logic as the selected comparison logic that is appropriate for the first data of first result . The comparator may output the second comparison logic as the selected comparison logic that is appropriate for the second data of second result .

Systems and or methods described herein may compare disparate data in arbitrarily complex data structures in order to determine whether the data structures are equivalent e.g. pass or fail a qualification test . In one example the systems and or methods may provide a comparator API that enables a tester of program code to compare complex data structures e.g. cell arrays structure arrays etc. . The data structures may include many different types of data and each data type may require different methods of comparison. The single comparator API may recursively compare all elements of a data structure so that each element may utilize comparison logic that is appropriate for that element.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

For example while series of blocks have been described with regard to the blocks and or the order of the blocks may be modified in other implementations. Further non dependent blocks may be performed in parallel.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an application specific integrated circuit ASIC or a field programmable gate array FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

