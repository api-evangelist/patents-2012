---

title: Platform runtime abstraction
abstract: Platform runtime abstraction can include creating a number of template models within a platform wherein the number of template models correspond to a provider mode and creating a number of abstraction layers that allow a provider to plug into the platform at runtime wherein the provider includes a provider sub-system and the provider model. Platform runtime abstraction can also include allowing the provider to plug into the platform at runtime through one of the number of abstraction layers wherein the provider remains independent of the platform and wherein the provider remains independent of a platform hardware infrastructure and a platform operating system infrastructure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507748&OS=09507748&RS=09507748
owner: Hewlett Packard Enterprise Development LP
number: 09507748
owner_city: Houston
owner_country: US
publication_date: 20120426
---
This application is a national stage application under 35 U.S.C. 371 of PCT US2012 035138 filed Apr. 26 2012.

Cloud services be it private or public clouds are gaining momentum. Maintaining availability of applications running on cloud systems and other types of systems is important. Hybrid cloud systems are becoming increasingly popular as private cloud systems seek to expand into public cloud functionality. The binding of private cloud systems to public cloud systems can affect the availability of applications running on the hybrid cloud system.

Examples of the present disclosure may include methods and systems for platform runtime abstraction. An example method for platform runtime abstraction may include creating a number of template models within a platform wherein the number of template models correspond to a provider model and creating a number of abstraction layers that allow a provider to plug into the platform at runtime wherein the provider includes a provider sub system and the provider model. An example method for platform runtime abstraction can also include allowing the provider to plug into the platform at runtime through one of the number of abstraction layers wherein the provider remains independent of the platform and wherein the provider remains independent of a platform hardware infrastructure and a platform operating system infrastructure.

The figures herein follow a numbering convention in which the first digit or digits correspond to the drawing figure number and the remaining digits identify an element or component in the drawing. Similar elements or components between different figures may be identified by the use of similar digits. For example may reference element 02 in and a similar element may be referenced as in .

As used herein a or a number of something can refer to one or more such things. For example a number of widgets can refer to one or more widgets.

Hybrid could systems can combine two or more cloud systems. For example a hybrid cloud system can combine a private cloud system and a public cloud system. A public cloud system can include a cloud system that makes applications storage and or other resources available to the general public through a service provider. A private cloud system can include a cloud system that is operated solely by one entity for the use of that entity.

A hybrid cloud system can combine two or more cloud systems by combining the resources of the two or more cloud systems. For example a hybrid cloud system can combine the hardware resources of a public cloud system with the monitoring resources of a private cloud system.

Hardware resources and software resources associated with a first cloud system can limit the use of an application in a second cloud system. For example if a first cloud system is associated with a first operating system then a second cloud system can only use monitoring resources e.g. application that are compatible with the second cloud system. In a number of examples of the present disclosure a hybrid cloud system can combine two or more cloud systems that are independent of each other without limiting the use of an application.

Binding a number of providers can include loosely binding a number of providers to each other and to a platform when the number of providers plug into a platform . A loose binding can include allowing a number of providers to communicate with each other without being dependent on each other or on a form of communication with each other. A platform can loosely bind a number of providers by acting as a fulfillment engine for the number of providers.

A platform can act as a fulfillment engine for the number of providers by receiving a number of requests from one of the providers and by making the request to a different provider. That is the platform can fulfill the requests of one of the providers without requiring the provider to communicate directly with the number of providers .

A platform can include a modeling engine . A modeling engine can facilitate the use of a number of artifacts stored in the platform. A number of artifacts can include an internal representation of a number of providers such that when a provider registers with the platform an artifact is created. An artifact can correspond to a registered provider and to a provider model. An artifact can be represented as an object and or a structure within the platform.

A platform can also include an orchestration engine . The orchestration engine can coordinate a flow of control of a number of artifacts. That is a platform can manage control of a number of artifacts through an orchestration engine. For example an orchestration engine can give control of a provider resource of a first provider to a second provider by giving the second provider control of an artifact that corresponds to the first provider. The orchestration engine can coordinate a flow of control of an artifact by creating the flow of control and by terminating the flow of control. A flow of control can be created when a provider is given control of an artifact. In a number of examples of the present disclosure an artifact can be controlled by a number of providers and or a provider can control a number of artifacts. In a number of examples an artifact can be controlled by a single provider and or a provider can control a single artifact.

A number of providers can be plugged into a platform through a number of abstraction layers. For example a number of abstraction layers can include a lifecycle abstraction layer a service abstraction layer a monitoring abstraction layer a deployment abstraction layer and a provisioning abstraction layer referred to generally as abstraction layers . A number of providers can register with a platform through a number of abstraction layers at run time. A number of providers can be loosely bound to each other through a platform . The bindings can be created when the providers register with a platform . A provider can include a provider sub system and a provider model. The provider sub system can include a hardware sub system and or a software sub system. A hardware sub subsystem can include a number of hardware resources. A number of software sub systems can include a number of software resources. A number of software resources can include compiled software and or uncompiled software.

The abstraction layers can include an interface that allows a number of providers to communicate with a platform . An interface can include a set of code and or an application programming interface API . The abstraction layers can allow the providers to communicate with a platform by normalizing a set messages e.g. communication between the providers and the platform . A set of messages can be normalized by allowing two systems e.g. providers and platform that have different communication formats to communicate with each other. Two systems e.g. providers and platform can have different communication formats for example when a first system is based on a first operating system and a second system is based on a second operating system. Furthermore two systems can have different communication formats when both systems share a similar operating system but the messages that comprise the communication are formatted differently. For example different communication formats can include a first system that sends and receives messages that are formatted in a first format and a second system that sends and receives messages that are formatted in a second format wherein the first format and the second formats differ.

The abstraction layers can include abstraction layers that are particular to a provider type. A provider type can be defined by characteristics that are shared by a subset of the number of providers. For example a first provider type can include a number of providers that share a communication format. Sharing a communication format can include a number of communication formats that are substantially similar and or a number of communication formats that share key similarities. Key similarities can include characteristics of a communication format that are required by a platform . In a number of examples a provider type can include a number of providers that provide similar resources and or consume similar resources. An abstraction layer can be particular to a provider type when an abstraction layer can alter messages that are in a first format used by providers of the provider type such that a platform can receive the altered messages in a second format. For example an application lifecycle manager provider can communicate with a platform through a lifecycle abstraction layer a first service manager provider and a second service manager provider can communicate with a platform through a service abstraction layer a first monitor product provider and a second monitor product provider can communicate with a platform through a monitoring abstraction layer a second deployment provider and a first deployment provider can communicate with a platform through a deployment abstraction layer and a third provisioning provider a second provisioning provider and a first provisioning provider can communicate with a platform through a provisioning abstraction layer .

In and communications between the providers provider and provider and a platform a platform and a platform through the abstraction layers an abstraction layer and an abstraction layer can be denoted by solid lines and dotted lines. The solid lines can indicate a request and a reply. The dotted lines include a resource. The resources identified by dotted lines can include references to resources wherein the references can include a description of the resources and or resource characteristics.

In a number of examples of the present disclosure the abstraction layers can be part of the platform . In some examples of the present disclosure the abstraction layers can be separate from the platform .

A provider model can include an internal representation of a provider sub system wherein the provider model is internal to the provider. The provider model can be used to register a provider with a platform .

A number of providers can include a first group wherein the first group of providers consumes resources. For example a number of service manager providers and can consume a number of resources that the number of providers can provide. A number of providers can also include a second group of providers that provide resources. For example a number of provisioning providers and can provide resources. A number of providers can further include a third group of providers that consume resources and provide resources. For example a number of deployment providers and can consume resources and provide resources.

A provisioning provider and can include a number of processing systems storage systems and or networking systems. A provisioning provider can include other types of hardware systems not included in the above examples. A provisioning provider can also include a provisioning provider that creates hardware infrastructures. For example a provisioning provider can receive a request for a provision wherein a provision request can include a specific infrastructure configuration. Specific infrastructure configuration can include a specific server with a specific software configuration that meets the specifications found in a provision request. A specific infrastructure configuration can include more and or less components. For example a specific infrastructure configuration can include a network configuration and or power usage configuration. A provisioning provider can respond to a provision request by providing infrastructure that meets the specifications found in the provision request. A provisioning provider can include a number of hardware systems and a number of software systems. A provisioning provider can include a number of different hardware configurations with a number of different software configurations. A provisioning abstraction layer can allow a provisioning provider regardless of hardware configuration and or software configuration to communicate with a platform . A provisioning provider is not limited to hardware resources but can include virtual resources and or cloud resources.

A deployment provider can install and configure software on a number of hardware resources. In a number of examples of the present disclosure a number of different deployment providers can be used on any hardware system because the deployment provider resources can be made available through an abstraction layer . The deployment abstraction layer can allow a number of deployment providers to communicate with a platform regardless of the configurations of the deployment providers. That is a number of deployment providers can be designed to function with a number of different operating systems. For example a first deployment provider can be designed to function with a first operating system and a second deployment provider can be designed to function with a second operating system such that the first deployment provider is incompatible with the second operating system and the second deployment provider is incompatible with the first operating system. The platform can normalize the interactions between a first deployment provider and a second operating system through a number of abstraction layers. The first deployment provider can make a first request wherein the first request is configured to be received by a first operating system. The first request can be configured such that the first operating system can understand the request but the second operating system cannot understand the request. If the first request is normalized through a first abstraction layer then the platform can receive the first request and configure the first request such that the second operating system can understand the second request. Normalizing a request can include receiving a request in a format that is known to the platform . The deployment abstraction layer can allow a deployment provider to communicate with a platform regardless of the deployment provider.

A deployment provider and can receive a deployment request from a platform through a deployment abstraction layer . The deployment request can include a request to deploy software. Deploying software can include installing activating adapting and updating software on a server. Deploying software can include more and or less services than those listed above. For example deploying software can include deactivating software. The deployment provider and can respond to a deployment request by returning an instance of the deployed software. Deployed software can include software that has been installed on a server and or other computation device.

A monitoring product provider and can include a provider that monitors an object. An object can include a different provider an application a platform and or any other object. A monitoring product provider can receive a set of configurations e.g. denoted in as configure and can send a number of alerts to the platform when an object being monitored behaves in a predefined manner and or does not behave in a predefined manner.

An application lifecycle manager provider can manage an application throughout a number of lifecycles of an application. A number of lifecycles can include the different stages of an application. Different stages of an application can include conception testing and implementation. An application lifecycle manage provider can communicate with a platform through a lifecycle abstraction layer . An application lifecycle manager provider can create read update and delete e.g. represented in as CRUD different application versions where each version of an application corresponds to a different lifecycle of an application. The Application lifecycle manager provider can receive a number of references to an application that is being managed and or a number of servers that are associated with an application that is being managed. Furthermore an application lifecycle manager provider can make a number of calls into a platform that affect the management of the different lifecycles of an application. An application lifecycle manager provider can receive a number of application versions and or a number of references to where those application versions can be stored.

A service management provider and can manage a number of services. For example a service management provider and can include a development service management provider and or an email service management provider . However a service management provider can include management of a number of services not included in the above example. A service management provider can create read update and delete e.g. represented in as CRUD a number of objects related to a service that is managed. A service management provider can create read update and delete a number of objects by making a management call to the platform through a service abstraction layer . A service management provider and can make management calls to a platform . Management calls to a platform can manage a service. A platform can return a service resource that is being managed which is denoted in by a dotted line labeled services connecting the platform to the abstraction layer . For example a platform can return an email to an email service manager provider .

A platform can register a provider by requesting a normalized input through a set of common APIs. A normalized input can include a representation of provider resources in a format that is accessible to the platform . The abstraction layer can receive the request for a normalized input and forward the request through a provider implemented API to a tagging layer . A provider implemented API can include an API that defines a communication format that is accessible to the provider . A tagging layer can receive the request from the abstraction layer and send an evaluated input request. The evaluated input request can include a specific call to the provider .

The provider can process the evaluated input request and respond with a message that includes a provider resource wherein the message and the provider resource are in a format that is accessible to the provider . A provider resource can be defined in relation to a provider model . A tagging layer can receive the message that includes a provider resource and tag the provider resource e.g. the provider model such that the tagged resource includes a representation of the provider model in a format that the platform can process. An abstraction layer can receive the tagged resource and send a normalized resource to the platform . The normalized resource can include a message that is accessible to the platform wherein the message includes a tagged provider model .

In a number of examples of the present disclosure a tagging layer can be part of the abstraction layer . In some examples of the present disclosure a tagging layer can be independent from the abstraction layer . A tagging layer can include a model mapping module that receives the parameters associated with the provider model the requirements associated with the provider model and the capabilities associated with the provider model . The model mapping module then filters e.g. through a filtering module a list of provider resources that are included in provider model to identify a set of model resources requested by one of the template models . A list of provider resources and a set of model resources can include the parameters requirements capabilities of a number of resources that are provider by provider . The model mapping module can return a set of mapped values. That is the provider model can be mapped onto the template model . In a number of examples the mapping can occur at runtime. In some examples the mapping can occur after runtime. For example if provider can provide a hosting service with a dynamically allocated Internet Protocol IP address then the tagging layer can tag the dynamically allocated IP address after runtime.

In some examples of the present disclosure the model mapping module and the filtering module can be internal to the tagging layer and the abstraction layer . In a number of examples of the present disclosure the model mapping module and the filtering module can be independent of the abstraction layer and the tagging layer .

The provider can be registered with the platform at runtime. That is the provider can be plugged into the platform at runtime. Plugging the provider into the platform at runtime allows for the provider model to be reused with a number of platforms by changing an abstraction layer and or by making changes to the provider model . The reuse of the provider model allows for portability of the provider wherein portability of the provider includes the ability to use the provider in a number of platforms while allowing the provider model to be reused. A number of platforms can include a number of platforms that include different providers. For example a first platform can include a first provider and a second provider and a second platform can include a third provider. The first provider can be reused and plugged into the second platform without modifying the first provider to make it compatible with the third provider. A template model which can be linked to the provider model at runtime can be updated after runtime. An update can be initiated by the platform and or by the provider as the provider model changes.

Plugging a provider into a platform at runtime can include mapping a provider model onto a template model . Mapping a provider model onto a template model can include binding a provider with a number of providers that can be plugged into a platform . The abstraction layer and the tagging layer allow a provider to plug into a platform while the provider remains independent of the platform . The provider can remain independent of a platform by remaining independent of hardware and or software components associated with a platform and a number of providers that are bound and or can be bound to platform .

Hardware can include a number of hardware components that are associated with a platform . For example hardware can include a computer system that is associated with a platform . Hardware is not limited to computer systems but can include networking components memory components and other computation related components associated with a platform. Hardware can also include a number of hardware components that can be associated with a number of providers. For example a number of providers including a provider can be plugged into a platform and each of the number of providers can be associated with a number of hardware components that can be used to provide a number of provider resources. Each of the providers can remain independent from the hardware components of the other providers.

A provider can remain independent from the software components of a platform and the software components of a number of providers. Software components can include a number of operating systems and or computer readable instructions. Software components are not limited to the above examples of software components and can include other examples of software components.

A provider can remain independent from a platform because the communications between a platform and a provider can be normalized through an abstraction layer . A provider can remain independent from a number of providers that are plugged into the platform because the interactions between a provider and a number of providers that are plugged into the platform can be normalized through the platform . That is an abstraction layer can allow a provider to communicate with a platform and a number or providers without having to change the provider model and or a communication format that is native to a provider.

A designer through a user interface UI can browse the library of templates in the provider through an abstraction layer and or a filtering layer . A designer can include a user that is building a platform . A user can build a platform by selecting a number of providers that will plug into a platform . A user can include a physical user or an automated user. A designer can select a number of templates from the library of templates . The templates that the designer selects can be returned through a filtering layer and the abstraction layer to a platform as modeled content. The modeled content can be included in a catalog of content such that the catalog of content can include a number of templates from a number of providers.

A platform can offer the content e.g. the catalog of the content to a user and or an application by tagging a number of templates. The platform does not have to understand the number of templates to tag the number of templates. That is a user and or an application can select content from the catalog of content without the user and or the platform fully understanding the content.

In the connection between a library of templates and a catalog of content through the linked via tagging can constitute a conceptual representation of the tagging process and is included in the flow between the platform the abstraction layer the filtering layer and the provider .

A number of providers can include a security provider an infrastructure provider a workload management provider a control provider a deployment provider an agent provider an operating system provider a policy provider and a user domain provider referred to generally as providers . In a number of examples of the present disclosure a number of providers can include more or less providers than those included in the above example. Moreover the providers listed above are illustrative and can include different providers that provide different resources.

The application provider can be loosely bound to the number of providers . For example an application provider can be loosely bound to a security provider through binding to an infrastructure provider through binding to a workload management provider through binding to a control provider through binding to a deployment provider through binding to an agent provider through binding to an operating system provider through binding to a policy provider through binding and to a user domain provider through binding .

The application provider can be bound to a number of providers at runtime. A platform can bind an application provider to a number of providers . The bindings can include loose bindings because an application provider can be bound to a number of providers without altering an application model within the application provider and without the application provider communicating directly with the number of providers . This runtime building block construct can allow the creation of a platform that includes the application provider and the number of providers . The platform can be altered dynamically at runtime without affecting the application provider and the number of providers . For example if a platform includes a deployment provider that is an open source deployment provider then the open source deployment provider can be exchanged with a proprietary deployment provider without affecting the other providers that are part of the platform.

An application catalog and a number of provider catalogs can include a description of the providers that enables a designer to select a group of providers that will function together to support the application provider. For example a designer can determine that an application provider requires a number of provider resources to function. The designer can review a number of provider catalogs that describe a number of providers. The designer can select those providers from the number of providers that can provide the required provider resources. The designer can select the application provider and the number of providers before runtime. In a number of examples of the present disclosure the designer can select the application provider and the number of providers at run time. In some examples the designer can modify the selections after runtime.

The model assembler can construct a provider model at runtime. The model assembler can be part of a modeling engine e.g. modeling engine in . The model assembler can bind an application provider and a number of providers to a platform at run time. The fully constructed platform can be realized by a platform realizer at runtime wherein the platform realizer can be part of an orchestration engine e.g. orchestration engine in .

In a number of examples of the present disclosure the platform can include a modeling engine that facilitates the use of a number of artifacts stored in the platform wherein the number of artifacts includes a provider artifact and wherein the provider artifact can be created when the provider plugs into the platform. The platform can also include an orchestrating engine. The orchestrating engine can coordinate a flow of control of a number of artifacts by giving a provider control of an artifact and by terminating the control of an artifact. In a number of examples of the present disclosure an artifact can be controlled by a number of providers and or a provider can control a number of artifacts. In some examples of the present disclosure an artifact can be controlled by a single provider and or a provider can control a single artifact.

A number of abstraction layers can include a number of abstraction layers that are particular to a provider type. A provider type can include a number of providers that share a communication format. Each provider type can include an abstraction layer such that a number of providers from a number of provider types can communicate with a platform through a number of abstraction layers that are particular to the provider type.

A provider can plug into a platform by binding a provider model with a template model. A platform can include a number of template models that represent a number of provider models. The binding can include a number of messages that tag a provider model where in the tagging binds a provider model to a template model.

The abstraction layer and the tagging layer can tag a library of provider templates and link the provider templates into a catalog of content wherein a provider includes a library of provider templates and a platform includes a catalog of content. A library of provider templates can include list of the services that a provider can provider and a description of the lists of services that a provider can provider. The library of provider templates can be linked into a catalog of content to provide a list of service that a number of providers can provide and a description of the list of services that the number of providers can provider. A catalog of content can be provided within a platform to allow a number of platforms to remain independent from each other.

A provider can remain independent from a platform and from a number of providers. A provider can remain independent from a platform operating system infrastructure and a number of provider operating system infrastructures. The platform operating system can include an operating system that is associated with a platform. A provider operating system can include an operating system that is associated with a number of providers.

A number of providers can include an application lifecycle manage provider that manages a lifecycle of a product wherein the lifecycle include a number of states of the product that progress from development to production of the product. A number of providers can further include a provisioner provider that provides a number of hardware resources to the platform wherein the number of hardware resources include a number of different hardware resources with a number of different operating systems. A number of providers can also include a deployer provider that configures and installs software on a number of provisioner providers. A number of providers can include a monitor provider that monitors the number of providers and alerts the platform when performance issues are detected. A number of providers can include a service manager provider that manages a number of services that are provided through the number of providers.

The methods techniques systems and apparatuses described herein may be implemented in digital electronic circuitry or computer hardware for example by executing instructions stored in computer readable storage media. Apparatuses implementing these techniques may include appropriate input and output devices a computer processor and or a tangible computer readable storage medium storing instructions for execution by a processor.

A process implementing techniques disclosed herein may be performed by a processor executing instructions stored on a tangible computer readable storage medium for performing desired functions by operating on input data and generating appropriate output. Suitable processors include by way of example both general and special purpose microprocessors. Suitable computer readable storage devices for storing executable instructions include all forms of non volatile memory including by way of example semiconductor memory devices such as Erasable Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM and flash memory devices magnetic disks such as fixed floppy and removable disks other magnetic media including tape and optical media such as Compact Discs CDs or Digital Video Disks DVDs . Any of the foregoing may be supplemented by or incorporated in specially designed application specific integrated circuits ASICs .

Although the operations of the disclosed techniques may be described herein as being performed in a certain order and or in certain combinations in some implementations individual operations may be rearranged in a different order combined with other operations described herein and or eliminated and the desired results still may be achieved. Similarly components in the disclosed systems may be combined in a different manner and or replaced or supplemented by other components and the desired results still may be achieved.

The above specification examples and data provide a description of the method and applications and use of the system and method of the present disclosure. Since many examples can be made without departing from the spirit and scope of the system and method of the present disclosure this specification merely sets forth some of the many possible embodiment configurations and implementations.

