---

title: System and method for using a device description repository
abstract: A method, computer program product, and computer system for using a device description repository comprises identifying a plurality of string constants associated with an incoming data request. It may be determined whether one or more constants in a user agent string match one of the plurality of string constants. In response to determining that the one or more constants in the user agent string match one of the plurality of string constants, a generic web browser ID is identified as a device description repository ID associated with a device description repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09547727&OS=09547727&RS=09547727
owner: Scientiamobile, Inc.
number: 09547727
owner_city: Reston
owner_country: US
publication_date: 20120725
---
This application claims the benefit of U.S. Provisional Application No. 61 511 287 filed on 25 Jul. 2011 by Passani U.S. Provisional Application No. 61 555 760 filed on 4 Nov. 2011 by Passani et al. U.S. Provisional Application No. 61 604 799 filed on 29 Feb. 2012 by Passani et al. and U.S. Provisional Application No. 61 663 108 filed on 22 Jun. 2012 by Passani the entire contents of which are herein incorporated by reference.

With the expanding diversity of computing devices e.g. mobile phones tablets desktops etc. device fragmentation may occur. For example some computing devices and their run time applications e.g. browser may vary with regard to e.g. hardware characteristics e.g. screen size extension formats e.g. WBMP GIF MP3 WMV browser behavior e.g. Openwave WML XHTML MP support and formatting speed image layout e.g. MMS formatting sender receiver clients . As would be expected device fragmentation may make it more difficult for users of the computing devices to receive the user experience that is either desired by the users and or intended by the content provider.

In one implementation a method for using a device description repository DDR performed by one or more computing devices comprises accessing from a device description repository environment on a computing device a computing device profile hierarchy that represents one or more computing device capabilities of one or more computing devices. A run time profile hierarchy that represents one or more run time capabilities of one or more applications is accessed from the device description repository environment. At least a portion of the one or more run time capabilities in the run time profile hierarchy is detected separately from the computing device profile hierarchy.

One or more of the following features may be included. Detecting at least the portion of the one or more run time capabilities separately from the computing device profile hierarchy may include using at least one of an on request manufactured user agent string and a repository manufactured user agent string. Using the on request manufactured user agent string may include combining at least a portion of a plurality of headers of a data request for the device description repository environment on the computing device. The on request manufactured user agent string may be used to create a device description repository ID for at least one of the one or more run time capabilities of the one or more applications in the run time profile hierarchy and at least one of the one or more computing device capabilities of one or more computing devices in the computing device profile hierarchy. The device description repository ID may include a wireless universal resource file ID. At least one of the one or more run time capabilities and the one or more computing device capabilities may include a virtual capability. A control capability value of at least one of the one or more run time capabilities of the one or more applications may be set using a patch file to override at least one of the one or more run time capabilities of the one or more applications.

In another implementation a computer program product resides on a computer readable storage medium that has a plurality of instructions stored on it. When executed by a processor the instructions cause the processor to perform operations comprising accessing from a device description repository environment on a computing device a computing device profile hierarchy that represents one or more computing device capabilities of one or more computing devices. A run time profile hierarchy that represents one or more run time capabilities of one or more applications is accessed from the device description repository environment. At least a portion of the one or more run time capabilities in the run time profile hierarchy is detected separately from the computing device profile hierarchy.

One or more of the following features may be included. Detecting at least the portion of the one or more run time capabilities separately from the computing device profile hierarchy may include using at least one of an on request manufactured user agent string and a repository manufactured user agent string. Using the on request manufactured user agent string may include combining at least a portion of a plurality of headers of a data request for the device description repository environment on the computing device. The on request manufactured user agent string may be used to create a device description repository ID for at least one of the one or more run time capabilities of the one or more applications in the run time profile hierarchy and at least one of the one or more computing device capabilities of one or more computing devices in the computing device profile hierarchy. The device description repository ID may include a wireless universal resource file ID. At least one of the one or more run time capabilities and the one or more computing device capabilities may include a virtual capability. A control capability value of at least one of the one or more run time capabilities of the one or more applications may be set using a patch file to override at least one of the one or more run time capabilities of the one or more applications.

In another implementation a computing system includes a processor and memory configured to perform operations comprising accessing from a device description repository environment on a computing device a computing device profile hierarchy that represents one or more computing device capabilities of one or more computing devices. A run time profile hierarchy that represents one or more run time capabilities of one or more applications is accessed from the device description repository environment. At least a portion of the one or more run time capabilities in the run time profile hierarchy is detected separately from the computing device profile hierarchy.

One or more of the following features may be included. Detecting at least the portion of the one or more run time capabilities separately from the computing device profile hierarchy may include using at least one of an on request manufactured user agent string and a repository manufactured user agent string. Using the on request manufactured user agent string may include combining at least a portion of a plurality of headers of a data request for the device description repository environment on the computing device. The on request manufactured user agent string may be used to create a device description repository ID for at least one of the one or more run time capabilities of the one or more applications in the run time profile hierarchy and at least one of the one or more computing device capabilities of one or more computing devices in the computing device profile hierarchy. The device description repository ID may include a wireless universal resource file ID. At least one of the one or more run time capabilities and the one or more computing device capabilities may include a virtual capability. A control capability value of at least one of the one or more run time capabilities of the one or more applications may be set using a patch file to override at least one of the one or more run time capabilities of the one or more applications.

In one implementation a method for using a device description repository performed by one or more computing devices comprises calculating an index by a processor based upon at least in part at least a portion of a plurality of user preferences associated with a computing device. One of a first experience and a second experience may be provided to the computing device based upon at least in part the index.

One or more of the following features may be included. Calculating the index may include analyzing one or more responses from one or more users to one or more surveys. Calculating the index may include discarding one or more of the plurality of user preferences associated with the computing device if the one or more of the plurality of the user preferences is less than a sum of a plurality of two or more user preferences of the plurality of user preferences associated with the computing device. Providing to the computing device one of the first experience and the second experience based upon at least in part the index may include determining whether the index is above a threshold value. If the index is below the threshold value the first experience may be provided to the computing device and if the index is above the threshold value the second experience may be provided to the computing device. The index may be associated with a profile of the computing device. The profile of the computing device may include a device description repository profile of the computing device. The device description repository profile of the computing device may include a wireless universal resource file profile of the computing device.

In another implementation a computer program product resides on a computer readable storage medium that has a plurality of instructions stored on it. When executed by a processor the instructions cause the processor to perform operations comprising calculating an index by a processor based upon at least in part at least a portion of a plurality of user preferences associated with a computing device. One of a first experience and a second experience may be provided to the computing device based upon at least in part the index.

One or more of the following features may be included. Calculating the index may include analyzing one or more responses from one or more users to one or more surveys. Calculating the index may include discarding one or more of the plurality of user preferences associated with the computing device if the one or more of the plurality of the user preferences is less than a sum of a plurality of two or more user preferences of the plurality of user preferences associated with the computing device. Providing to the computing device one of the first experience and the second experience based upon at least in part the index may include determining whether the index is above a threshold value. If the index is below the threshold value the first experience may be provided to the computing device and if the index is above the threshold value the second experience may be provided to the computing device. The index may be associated with a profile of the computing device. The profile of the computing device may include a device description repository profile of the computing device. The device description repository profile of the computing device may include a wireless universal resource file profile of the computing device.

In another implementation a computing system includes a processor and memory configured to perform operations comprising calculating an index by a processor based upon at least in part at least a portion of a plurality of user preferences associated with a computing device. One of a first experience and a second experience may be provided to the computing device based upon at least in part the index.

One or more of the following features may be included. Calculating the index may include analyzing one or more responses from one or more users to one or more surveys. Calculating the index may include discarding one or more of the plurality of user preferences associated with the computing device if the one or more of the plurality of the user preferences is less than a sum of a plurality of two or more user preferences of the plurality of user preferences associated with the computing device. Providing to the computing device one of the first experience and the second experience based upon at least in part the index may include determining whether the index is above a threshold value. If the index is below the threshold value the first experience may be provided to the computing device and if the index is above the threshold value the second experience may be provided to the computing device. The index may be associated with a profile of the computing device. The profile of the computing device may include a device description repository profile of the computing device. The device description repository profile of the computing device may include a wireless universal resource file profile of the computing device.

In one implementation a method for using a device description repository performed by one or more computing devices comprises identifying a plurality of string constants associated with an incoming data request. It is determined whether one or more constants in a user agent string match one of the plurality of string constants. In response to determining that the one or more constants in the user agent string match one of the plurality of string constants a generic web browser ID is identified as a device description repository ID associated with a device description repository.

One or more of the following features may be included. The generic web browser ID may be identified as the device description repository ID without qualification of at least one of a web browser name and a web browser version. At least a portion of the plurality of string constants may correspond to a single web browser profile in the device description repository. Identifying at least a portion of the plurality of string constants may include at least one of tokenizing one or more user agent strings patternizing one or more user agent strings and running a batch of one or more user agents through a set of one or more constants. Running the batch of one or more user agents through the set of one or more constants may include counting a frequency of occurrences of each constant and determining an order of the one or more constants. The generic web browser ID may include at least one of a generic desktop web browser a generic smart tv web browser and a gaming console browser. The device description repository may include a wireless universal resource file.

In another implementation a computer program product resides on a computer readable storage medium that has a plurality of instructions stored on it. When executed by a processor the instructions cause the processor to perform operations comprising identifying a plurality of string constants associated with an incoming data request. It is determined whether one or more constants in a user agent string match one of the plurality of string constants. In response to determining that the one or more constants in the user agent string match one of the plurality of string constants a generic web browser ID is identified as a device description repository ID associated with a device description repository.

One or more of the following features may be included. The generic web browser ID may be identified as the device description repository ID without qualification of at least one of a web browser name and a web browser version. At least a portion of the plurality of string constants may correspond to a single web browser profile in the device description repository. Identifying at least a portion of the plurality of string constants may include at least one of tokenizing one or more user agent strings patternizing one or more user agent strings and running a batch of one or more user agents through a set of one or more constants. Running the batch of one or more user agents through the set of one or more constants may include counting a frequency of occurrences of each constant and determining an order of the one or more constants. The generic web browser ID may include at least one of a generic desktop web browser a generic smart tv web browser and a gaming console browser. The device description repository may include a wireless universal resource file.

In another implementation a computing system includes a processor and memory configured to perform operations comprising identifying a plurality of string constants associated with an incoming data request. It is determined whether one or more constants in a user agent string match one of the plurality of string constants. In response to determining that the one or more constants in the user agent string match one of the plurality of string constants a generic web browser ID is identified as a device description repository ID associated with a device description repository.

One or more of the following features may be included. The generic web browser ID may be identified as the device description repository ID without qualification of at least one of a web browser name and a web browser version. At least a portion of the plurality of string constants may correspond to a single web browser profile in the device description repository. Identifying at least a portion of the plurality of string constants may include at least one of tokenizing one or more user agent strings patternizing one or more user agent strings and running a batch of one or more user agents through a set of one or more constants. Running the batch of one or more user agents through the set of one or more constants may include counting a frequency of occurrences of each constant and determining an order of the one or more constants. The generic web browser ID may include at least one of a generic desktop web browser a generic smart tv web browser and a gaming console browser. The device description repository may include a wireless universal resource file.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will become apparent from the description the drawings and the claims.

Referring to there is shown DDR process that may reside on and may be executed by a computer e.g. client computer which may be connected to a network e.g. network e.g. the internet or a local area network . Examples of client computer may include but are not limited to a personal computer s a laptop computer s mobile computing device s a server computer a series of server computers a mainframe computer s or a computing cloud s . Client computer may execute an operating system for example but not limited to Microsoft Windows Mac OS X Red Hat Linux or a custom operating system for example. Microsoft and Windows are registered trademarks of Microsoft Corporation in the United States other countries or both Mac and OS X registered trademarks of Apple Inc. in the United States other countries or both Red Hat is a registered trademark of Red Hat Corporation in the United States other countries or both and Linux is a registered trademark of Linus Torvalds in the United States other countries or both .

The instruction sets and subroutines of DDR process which may be stored on storage device coupled to client computer may be executed by one or more processors not shown and one or more memory architectures not shown included within client computer . Storage device may include but is not limited to a hard disk drive a flash drive a tape drive an optical drive a RAID array a random access memory RAM and a read only memory ROM .

Network may be connected to one or more secondary networks e.g. network examples of which may include but are not limited to a local area network a wide area network or an intranet for example.

Client computer may include a data repository e.g. device description repository DDR such as a database e.g. relational database object oriented database etc. and may be located within any suitable memory location such as storage device coupled to client computer . Generally DDRs may be used for example to maintain device information that may be used to detect the capabilities e.g. properties attributes etc. of client electronic devices e.g. client electronic devices and the associated run time application e.g. run times of the client electronic devices. An example of DDR may include but is not limited to Wireless Universal Resource File WURFL DDR however those skilled in the art will appreciate that other DDRs may also be used without departing from the scope of this disclosure. In some embodiments client computer may utilize a database management system such as but not limited to My Structured Query Language MySQL in order to provide multi user access to one or more databases such as the above noted relational database. The data repository may also be a custom database such as for example a flat file database or an XML database. Any other form s of a data storage structure and or organization may also be used. DDR process may be a component of the data repository a stand alone application that interfaces with the above noted data repository and or an applet application that is accessed via client applications . The above noted data repository may be in whole or in part distributed in a cloud computing topology. In this configuration client computer and storage device may refer to multiple devices which may also be distributed throughout the network.

Client computer may execute a DDR application e.g. DDR application an example of which may include but is not limited to e.g. a wireless universal resource file WURFL application. DDR process and or DDR application may be accessed via client applications . DDR process may be a stand alone application or may be an applet application script that may interact with and or be executed within DDR application . Conversely DDR application may be a stand alone application or may be an applet application script that may interact with and or be executed within DDR process .

Examples of client applications may include but are not limited to a standard web browser a mobile web browser a smart tv web browser a email client application a media player application a game console application a textual and or graphical user interface a customized web browser or a custom application. The instruction sets and subroutines of client applications which may be stored on storage devices coupled to client electronic devices may be executed by one or more processors not shown and one or more memory architectures not shown incorporated into client electronic devices .

Storage devices may include but are not limited to hard disk drives flash drives tape drives optical drives RAID arrays random access memories RAM and read only memories ROM . Examples of client electronic devices may include but are not limited to personal computer laptop computer smart phone notebook computer a tablet not shown a server not shown a data enabled cellular telephone not shown a television and or smart television not shown a gaming console not shown and a dedicated network device not shown .

One or more of client applications may be configured to effectuate some or all of the functionality of DDR process and vice versa . Accordingly DDR process may be a purely server side application a purely client side application or a hybrid server side client side application that is cooperatively executed by one or more of client applications and DDR process .

One or more of client applications may be configured to effectuate some or all of the functionality of DDR application and vice versa . Accordingly DDR application may be a purely server side application a purely client side application or a hybrid server side client side application that is cooperatively executed by one or more of client applications and DDR application .

Users may access client computer and DDR process directly through network or through secondary network . Further client computer may be connected to network through secondary network as illustrated with phantom link line . DDR process may include one or more user interfaces such as browsers and textual or graphical user interfaces through which users may access DDR process .

The various client electronic devices may be directly or indirectly coupled to network or network . For example personal computer is shown directly coupled to network via a hardwired network connection. Further notebook computer is shown directly coupled to network via a hardwired network connection. Laptop computer is shown wirelessly coupled to network via wireless communication channel established between laptop computer and wireless access point i.e. WAP which is shown directly coupled to network . WAP may be for example an IEEE 802.11a 802.11b 802.11g Wi Fi and or Bluetooth device that is capable of establishing wireless communication channel between laptop computer and WAP . Smart phone is shown wirelessly coupled to network via wireless communication channel established between smart phone and cellular network bridge which is shown directly coupled to network .

As is known in the art all of the IEEE 802.11x specifications may use Ethernet protocol and carrier sense multiple access with collision avoidance i.e. CSMA CA for path sharing. The various 802.11x specifications may use phase shift keying i.e. PSK modulation or complementary code keying i.e. CCK modulation for example. As is known in the art Bluetooth is a telecommunications industry specification that allows e.g. mobile phones computers smart phones and other electronic devices to be interconnected using a short range wireless connection.

Client electronic devices may each execute an operating system examples of which may include but are not limited to Android Apple iOS Microsoft Windows Linux or a custom operating system.

As is known in the art WURFL i.e. Wireless Universal Resource FiLe is a Device Description Repository DDR that maps HTTP Request headers to the profile of an HTTP client e.g. a desktop computer a mobile device a tablet computer etc. that issued the request. The subject matter of the following disclosure may be included within or built upon a WURFL Schema. This may enable DDR process to maintain some level of backward compatibility for users of older Application Programming Interfaces APIs .

As will also be discussed in greater detail below according to one or more embodiments DDR process may enable WURFL to have the capability of distinguishing whether a given capability belongs to a computing device and or to a run time. As will also be discussed in greater detail below and according to one or more embodiments of this disclosure DDR process may enable the detection of new families of e.g. HTTP clients as well as distinguish the case in which separate run times e.g. browsers multimedia players etc. may be running on the same computing device. As will also be discussed in greater detail below according to one or more embodiments DDR process may enable at the data level computing device profiles and run time profiles to be separated. However those skilled in the art will recognize that some capabilities may depend on both the computing device and the run time. Accordingly and in some embodiments DDR process may query one or more capabilities that may depend on both profiles and may return an appropriate capability value.

As discussed above and referring also to DDR process may access from a DDR environment e.g. DDR on a computing device e.g. client computer a computing device profile hierarchy e.g. computing device profile hierarchy that may represent one or more computing device capabilities e.g. screen size device model name of one or more computing devices e.g. client electronic devices . A run time profile hierarchy e.g. run time profile hierarchy that may represent one or more run time capabilities of one or more applications e.g. browsers multimedia players etc. may be accessed from DDR process in DDR .

At least a portion of the one or more run time capabilities in run time profile hierarchy may be detected by DDR process e.g. via an API separately from computing device profile hierarchy . For example detection may be accomplished by DDR process adding run time profile hierarchy as a new hierarchy of profiles separated from computing device profile hierarchy . Additionally alternatively detection may be accomplished by DDR process extending an existing WURFL schema to represent the new hierarchy of profiles.

For example and according to one or more embodiments DDR process may implement an ID Tracking function to perform associations between an HTTP request from e.g. client electronic device and one or more WURFL IDs such that a capability value function via DDR process may allow the detection of Run Time capabilities e.g. browser capabilities separately from the underlying computing device.

Assume for illustrative purposes that client electronic device would like to access content e.g. one or more web pages available from client computer . Therefore client electronic device may issue data request for the desired content to client computer . Accordingly and in order to effectuate access to such content DDR process may tailor the content requested by and provided to client electronic device from client computer so that such content is properly displayed on client electronic device . Upon receiving data request DDR process may process data request to e.g. examine the headers included therein to identify various keywords within data request that may be indicative of various computing device capabilities for e.g. client electronic device and various run time capabilities e.g. opera mini browser version 6.4 .

As stated above DDR process may access from device description repository environment on client computer computing device profile hierarchy that represents e.g. one or more computing device capabilities of one or more computing devices. Further and as stated above DDR process may access from device description repository environment on client computer run time profile hierarchy that represents e.g. one or more run time capabilities of one or more applications.

Accordingly DDR process may compare the above described keywords included within the headers of data request to various entries within computing device profile hierarchy and run time profile hierarchy to determine which if any matches occur. In the event that there are no matches between the above described keywords and the various entries included within computing device profile hierarchy and run time profile hierarchy a generic hardware and software configuration maybe utilized e.g. in a fashion similar to the way that earlier versions of Microsoft Windows used to use a generic VGA driver when a vendor specific VGA driver could not be identified for a specific video card . However for situation in which matches have been identified those matches may be utilized to detect one or more run time capabilities in run time profile hierarchy separately from computing device profile hierarchy .

When detecting the one or more run time capabilities separately from computing device profile hierarchy DDR process may use at least one of an on request manufactured user agent OMUA string and a repository manufactured user agent RMUA string. For example DDR process may combine at least a portion of the above described headers of data request for device description repository environment .

As discussed above DDR process may compare the above described keywords included within the headers of data request to various entries within computing device profile hierarchy and run time profile hierarchy to determine which if any matches occur. In the event that matches were found between the above described keywords and computing device profile hierarchy DDR process may utilize these matches to form the above described on request manufactured user agent string. Further in the event that matches were found between the above described keywords and run time profile hierarchy these matches may be utilized to form the above described repository manufactured user agent string.

For example DDR process may utilize the above described on request manufactured user agent string to create a device description repository ID for one or more of the run time capabilities of the one or more applications in the run time profile hierarchy and at least one of the one or more computing device capabilities of one or more computing devices in the computing device profile hierarchy.

An example of such a device description repository ID may include but is not limited to a wireless universal resource file WURFL ID. Such a device description repository ID may be utilized by DDR process to define a technical profile for the device associated with the device description repository ID. An example of such a device description repository ID and the corresponding technical profile is as follows 

Within the above described description repository ID and the corresponding technical profile the relationship between a device profile in computing device profile hierarchy and the corresponding run time profile in run time profile hierarchy may be established by DDR process through e.g. a browser id entry. For example the browser id entry may link a with a special browser or other run time application running on the device in question .

Those skilled in the art will appreciate that other run times applications such as Opera Mini may be identified by DDR process in a similar manner to that described above. As such the above programming logic should be taken as an example only and not to limit the scope of the disclosure.

One of more of the above described run time capabilities and or computing device capabilities may include a virtual capability VC . For example virtual capabilities VCs may be capabilities whose value is calculated by DDR process dynamically each time based on a data request e.g. HTTP request as opposed to being a static capability. The calculation of these virtual capabilities may be a function of all HTTP headers the matched client electronic device and the value of regular capabilities.

Referring at least to diagram in DDR process may set a control capability value of the one or more run time capabilities of the one or more applications using a patch file to override at least one of the run time capabilities of the one or more applications. For example a user via DDR process may override via a patch file the default value within e.g. computing device profile hierarchy and or run time profile hierarchy . Accordingly if e.g. an application ordinarily does not have a certain capability but the user wants such a capability the user via DDR process may override the default run time capability of the application so that such a capability is available. Additionally alternatively DDR process may allow a user via an API to remove the need for the use of a patch file by e.g. allowing the user to select the availability of such a capability.

According to one or more embodiments the following example illustrates how a VC might be implemented by DDR process to return the value of a capability which in the case of Opera Mini may be handled by the corresponding value in one of the Opera Mini profiles 

According to one or more embodiments a VC may use the original HTTP request because certain capabilities may need to be retrieved from run time profile hierarchy and or from other heuristics. As a general example using pseudocode no NULL checking 

As is known in the art WURFL and other DDRs may be able to collect objective testable capabilities e.g. screen size support for a certain CSS property support for a certain video codec etc. . The objective capabilities in essence may be properties that given a mobile device and a test may be immediately measurable and or verifiable for that device.

DDR process may be configured to gather information regarding subjective device capabilities . Subjective device capabilities may broadly be described as capabilities that measure the perception of certain qualities by device users e.g. user of client electronic device . For example a subjective device capability may be how happy user is with one or more user experiences associated with client electronic device and or one or more features and or third party services accessed by client electronic device . As will be discussed in greater detail below the subjective device capabilities may not be collected by a single tester or by many testers together. Conversely the subjective device capabilities may be gathered by DDR process and expressed via an index e.g. a number that may indicate the collective level of appreciation of a certain abstract feature of the client electronic device. As will be discussed in greater detail below the above described index may be determined by DDR process based upon responses to certain surveys provided by e.g. anonymous users of the mobile web.

For example assume that e.g. client electronic device such as an iPhone and or Android device may generally display regular web content. Accordingly users e.g. user of such a device may want full web content delivered to those devices. However this may not always be desirable as full web content is often too large and or too complex to be rendered on such devices. Accordingly the overall user experience on such a mobile device may be less than desirable. Therefore websites may offer a mobile optimized user experience to mobile users. However some mobile users may still prefer the mobile optimized user experience regardless of the ability of their device being capable of receiving and processing full web content. Accordingly DDR process may be configured to measure such a preference via an index e.g. a Full Web Usability Index or FWUI .

As discussed above and referring also to DDR process may calculate the above described index based upon at least in part a plurality of user preferences associated with a computing device e.g. client electronic device wherein DDR process may provide one of a first experience e.g. a mobile experience and a second experience e.g. a desktop experience to the computing device e.g. client electronic device based upon at least in part the above described index.

Specifically DDR process may analyze one or more responses from one or more users e.g. users to one or more surveys e.g. survey to calculate index . For example DDR process may render survey for user within window on client electronic device . Window may include e.g. a pop up window rendered by DDR process as a result of user selecting a link e.g. advertisement from a web page. Additionally alternatively window may be a separate web page.

DDR process may detect the type of client electronic device via the above described on request manufactured user agent string and may inquire concerning e.g. the type of content to be delivered to the client electronic device. Further DDR process may collect answers to the above described inquiry and these answers may be used by DDR process to calculate the Full Web Usability Index. DDR process may be configured to compartmentalize answers to the above described inquiry in accordance with the specific device being utilized by the user. For example users of an iPhone may wish to receive mobile content due to the iPhone s inability to process Flash content while users of Android devices may wish to receive full web content due to the Android device s ability to process Flash content.

Index may be an integer value having a range of e.g. 100 to 100 wherein 100 may broadly indicate everyone prefers a mobile experience for this device and 100 may broadly indicate everyone prefers a full desktop web experience for this device . A zero 0 may indicate that users are more or less equally split between the mobile experience and the full desktop web experience.

While querying information about whether a device is a mobile device may be sufficient in some instances other instances in which e.g. smart TVs mobile devices with large screens and tablets are available with different screen sizes user preferences and index may vary greatly between devices. Once index is calculated DDR process may provide one of the mobile experience or the desktop experience or combinations thereof to client electronic device based upon index .

For example if index has a value of zero or greater the full desktop experience may be provided by DDR process while index having a value of less than zero may result in the mobile experience being provided by DDR process .

For example DDR process may determine whether index is above a threshold value e.g. zero . If index is above this threshold value DDR process may automatically e.g. by associating index with the above noted profile of client electronic device provide a desktop experience to client electronic device . Conversely if index is below this threshold value DDR process may automatically provide a mobile experience to client electronic device .

For example DDR process may provide full desktop web content to devices that score 70 or more e.g. on the 100 to 100 scale for complex websites. As another example DDR process may provide devices which score above 20 for simpler websites with the full desktop experience even when a user may be using a mobile device. As another example DDR process may provide devices accessing any website that scores less than 70 with the mobile experience.

According to one or more embodiments DDR process may provide index to e.g. a webmaster of a complex website who by example may only decide to serve full desktop web content to devices that score 70 e.g. on the 100 to 100 scale or more. As another example a webmaster of a simpler website may decide that everything above 20 qualifies for the full desktop experience even when a user may be using a mobile device. As another example a webmaster of any website for a device that scores less than 70 may be provided with the mobile experience.

As shown in assume that survey asks respondents to select one of four possible answers namely A B C D wherein Answer A indicates that the respondent did not understand the question Answer B indicates that the respondent did not think their answer is dependent upon the particular website in question Answer C indicates that the respondent prefers a mobile experience and Answer D indicates that the respondent prefers a full desktop experience.

Those skilled in the art will recognize that varying questions and response types may also be used without departing from the scope of the disclosure. For example a question on survey may be On a scale of one to five how happy are you with your device overall user experience . As such the description of the specific questions and response type described should be taken as an example only and not to limit the scope of the disclosure.

DDR process may calculate index by e.g. discarding one or more user preferences from all respondents that are associated with client electronic device if the preference being discarded is less than the sum of two or more user preferences from all respondents of the plurality of user preferences associated with client electronic device . For example preference B may be normally discarded unless e.g. the number of people that selected preference B outnumbers the sum of the number of people that selected preference C D.

In such a situation preferences C D may be used to calculate index according to the following formula if then FWUI 200 100 resulting in a number between 100 and 100 Therefore if D 80 C 100 FWUI 80 80 100 200 100 11.11

While index may include for example an integer those skilled in the art will appreciate that other ways of expressing index e.g. non integer values may also be used without departing from the scope of the disclosure. Similarly the example of index spanning 100 to 100 should be taken as an example only and not to limit the scope of the disclosure.

While examples may be disclosed of DDR process using index to measure subjective device capabilities to determine whether a mobile experience or a desktop experience is provided to client electronic device those skilled in the art will appreciate that DDR process may use index to measure subjective device capabilities to determine whether other experiences may be provided to client electronic device without departing from the scope of the disclosure. For example DDR process may use index to measure subjective device capabilities to determine user perceived qualities of such things as support of JQuery Mobile Sencha Touch social media features as well as the user perceived qualities of other third party services. As such any description of DDR process using index to measure subjective device capabilities to determine whether a mobile experience or a desktop experience is provided to client electronic device should be taken as an example only and not to limit the scope of the disclosure.

As will be discussed in greater detail below DDR process may be used at least in two different modes. For instance one mode may be high performance e.g. detect desktop web browsers in a fast nearly purely algorithmically manner and without allocating additional memory for subsequent UA string associations. UA strings detected by DDR process as desktop web browsers may be identified by DDR process as a DDR ID e.g. WURFL ID such as generic web browser . DDR process may identify generic web browser without further qualification of the desktop web browser name or the desktop web browser version. The generic web browser ID may include browsers other than desktop browsers such as for example at least one of a generic desktop web browser a generic smart tv web browser and a gaming console browser.

DDR process may be used in a second example mode as high accuracy e.g. desktop UA matchers may still be run on each request and a profile may be managed in memory for each request .

As will also be discussed in greater detail below DDR process may execute a function e.g. isDesktopBrowserHeavyDutyAnalysis and accordingly may identify certain keywords and or patterns e.g. constants in the UA string associated with an incoming data request. Based at least in part on the identified constants DDR process may determine with a reasonable degree of certainty whether the UA string is a desktop web browser UA string. DDR process may in response to determining that the string constants in the user agent string match one of the plurality of string constants identify the above noted generic web browser ID as the above noted device description repository ID associated with device description repository e.g. a WURFL repository . Additionally in response to identifying the above noted generic web browser ID as the above noted device description repository ID DDR process may proceed to skip the above noted traditional WURFL matching mechanism and memory allocation procedures.

For example DDR process may implement one or more categorization functions e.g. isMobileBrowser isDesktopBrowser and isSmartTV . . . and isDesktopBrowserHeavyDutyAnalysis . These functions may be used by DDR process to identify the most common cases of UA strings that may belong to mobile devices desktop devices smartTVs or other client electronic devices.

These functions may be used by DDR process via the implementation of the API to partition the above noted matchers that may be applied to a UA string to find the DDR ID e.g. a WURFL ID . For instance mobile matchers may not be applied to a UA string that has already been ascertained by DDR process as a desktop web browser.

Desktop web browsers may optionally e.g. at the discretion of the programmer be handled by DDR process via a simplified desktop matcher which may collapse at least a portion of the UA strings in their associated entries into for example one single web browser profile e.g. in DDR repository . Accordingly cache and memory space may not be consumed by using separate web browser profiles for each entry.

As discussed above and referring also to DDR process may identify a plurality of string constants associated with an incoming data request. For example to calculate one or more of the above noted functions DDR process may identify a group of string constants. Non limiting examples of different groups of string constants are illustrated in a table in .

The groups of string constants in table may be used by DDR process to calculate the following example functions isMobileBrowser HttpRequest isSmartTV HttpRequest isDesktopWebBrowser HttpRequest . Accordingly DDR process may use these functions to prepare the work for one or more matchers that may follow.

DDR process may determine whether one or more constants in the above noted UA string match one of the plurality of string constants in table . For example isSmartTV may be implemented by DDR process to identify whether the UA string contains one of the example smartTV constants noted above. For example 

Additionally alternatively DDR process may via iContains discussed below match a list of substrings against the UA string.

Additionally alternatively isDesktopWebBrowser may be implemented by DDR process to identify whether the UA string contains one of the example desktop constants noted above. For example 

Additionally alternatively isMobileBrowser may be implemented by DDR process by first evaluating isDesktopBrowser . In the example if the device is found to be a desktop without a doubt then the device may be identified by DDR process as being non mobile.

The list of Mobile Constants noted above may be evaluated by DDR process . For example if there is a match then the UA may be identified by DDR process to be a mobile device at least for the purpose of optimizing matchers . If the UA string matches the d d d xX d d d d b regular expression e.g. 320 240 480 800 800 1024 then the device may be identified by DDR process as being mobile. This check may be implemented by DDR process at least because some Windows devices and other exotic devices may carry the screen size in the UA string. If all else fails DDR process may identify the UA as non mobile e.g. for the purpose of matchers . For example 

DDR process may via a DDR API use one or more e.g. the above noted three sets of keywords to filter user agents through three corresponding matching systems e.g. desktop browsers mobile browsers and smartTVs . During analysis DDR process via a user agent may flow through one or more of these matching systems depending at least in part on the keywords e.g. string constants matches. As noted above the keywords may be for example words and or phrases that generally only occur in their category of user agents. For instance a user agent containing SonyDTV noted in table may flow through the SmartTV matching system.

DDR process may identify the plurality of string constants using one or more techniques which may include at least one of tokenizing one or more UA strings patternizing one or more UA strings and running a batch of one or more UAs through a set of one or more constants.

For example tokenizing UA strings may include DDR process splitting the UA strings up into individual words that may be known to belong to a single category of devices and counting their frequency of occurrence. Patternizing UA strings may include may include DDR process programmatically removing variable portions of the UA e.g. version numbers and model names thus drawing attention to the non variable keywords. Running a batch of one or more user agents through the set of one or more constants may include DDR process counting a frequency of occurrences of each constant and determining an order of the one or more constants.

For example counting the above noted frequency of occurrences of each constant may include cases where more than one constant may match a single UA. Accordingly DDR process may use the totals to determine the optimal order of the constants and which constants may be unnecessary after optimization.

According to one or more embodiments if an http request contains a UAProf x wap profile header with a valid HTTP url value then DDR process may return false and let regular DDR matching takeover . If Smart TV constants are detected then DDR process may return false. If UA contains Chrome and not Ventana DDR process may return true. If mobile constants are detected then DDR process may return false. If UA contains PPC DDR process may return false. If UA contains Firefox and does NOT contain Tablet DDR process may return true and let the API return the above noted generic web browser as the DDR ID . If UA matches the following Safari Desktop RegEx 

then DDR process may return true. If the UA starts with Opera 9.80 Windows NT or Opera 9.80 Macintosh then DDR process may return true. If Desktop Browser Constants are detected DDR process may return true. If the UA string matches one of the following two regular expressions DDR process may return true Mozilla 5 .0 compatible MSIE 9 .0 Windows NT d . d Mozilla 4 .0 compatible MSIE d . d Windows NT d . d . For example 

DDR process may analyze a AU string and return the correct device string via a getDeviceOSVersion function. DDR process may use extra device specific logic to extract the model name which may be accompanied by the brand name from the UA string. DDR process may use the extra device specific logic to capture the model and or brand name as well as a few common cases. For instance some non limiting examples from multiple manufacturers that may ship Android devices may include 

In the above examples the underlined parts may be what DDR process intends to capture with a regular expression with the objective of identifying e.g. SonyEricssonX10i Behold2 SAMSUNG SGH 1896 HTC Hero respectively. According to one or more embodiments if DDR process encounters a UA string which is not well formed DDR process via the getDeviceOSVersion function may return an empty string to signal that this is not a standard Android UA string.

There are some UAs that respect the schema above BUT still require extra massaging of the model name. For example 

Once DDR process has identified the bit between the language locale e.g. en us and the Build substring DDR process may still perform additional actions. For example according to one or more embodiments if the Model name contains HTC 

With reference to the examples above to get to a standard representation of the model name for the purpose of matching existing devices the following are example transformations that DDR process via the API may perform internally 

Other standard representations may also occur for other model names e.g. SAMSUNG ORANGE LG and V or v etc. without departing from the scope of this disclosure.

After DDR process extracts the device OS version and Model name from the UA string DDR process may normalize the string before DDR process proceeds with RIS based matching. Normalization may detect the device version e.g. Android Version detect the device model or brand and model remove language string and reorganize the UA string internally in a way that may easily be matched by RIS. For example 

Once DDR process normalizes the UA string DDR process via the API may attempt matching through RIS. For example according to one or more embodiments where it is assumed that the OS version and Model Name were identified DDR process may safely apply RIS on to obtain a powerful match. The presence of a device profile with the right Model name and OS Version may be enough for DDR process to obtain a match. The presence of the original UA may allow developers via DDR process to model firmware sub versions if this were needed. Where it is assumed that the OS version and Model Name were not identified prior known strategies may be employed by DDR process .

In a non limiting example where a UA is not recognized yet it contains e.g. Android 3.1 Android 3.2 Android 3.3 or Android 4.0 then DDR process via a recovery heuristic may return generic android ver3 1 generic android ver3 2 generic android ver3 3 and generic android ver4 0 respectively.

DDR process may implement a canHandle process such that DDR process may be determined whether for example a UA begins with Mozilla 5 and contains one of the following iPhone iPod or iPad . The determination may be useful as an in memory user agent string repurposing strategy to include correct matching of Jail Broken iPhone devices and exclusion of false positive iPhone UA strings.

DDR process may calculate the tolerance as the character following the first underscore   and in case the underscore character is not contained in the UA string DDR process may use the following substring to calculate tolerance CPU like Mac OS X wherein tolerance may be set at the index of the semicolon after X . DDR process may then apply RIS with the tolerance calculated above.

In the above example if the conclusive matching fails DDR process may via a recovery matcher identify and parse the OS string e.g. 3 2 1 4 0 and match the corresponding root device. If no underscore is found and the OS version cannot be detected DDR process may revert to e.g.  ver1 for ipad iphone and ipod respectively.

As noted above DDR process may support smartTV detection. For example DDR process may model the following example smartTV family e.g. Device generic smarttv browser and subfamilies e.g. Device generic smarttv googletv browser Device generic smarttv boxeebox browser Device generic smarttv appletv browser .

One or more Google TV UA strings may include for example Mozilla 5.0 X11 U Linux i686 en US AppleWebKit 533.4 KHTML like Gecko Chrome 5.0.375.127 Large Screen Safari 533.4 GoogleTV b42732 . DDR process may in one or more embodiments assume that if a UA contains GoogleTV then DDR process may return generic smarttv googletv browser . Similarly one or more Apple TV UA strings may include for example iTunes AppleTV 4.1 . DDR process may in one or more embodiments assume that if a UA contains AppleTV DDR process may return generic smarttv appletv browser . Similarly one or more Boxee Box UA strings may include for example Mozilla 5.0 X11 U Linux i686 en US AppleWebKit 533.4 KHTML like Gecko Boxee 1.0.1 bxapi 7.1 . DDR process may in one or more embodiments assume that if a UA contains Boxee DDR process may return generic smarttv boxee browser.

In addition as noted above DDR process may recognize a device as a smartTV if the User Agent string contains one of the following non limiting example substrings dlna sonydtv smarttv . In the example DDR process may return generic smarttv browser.

Referring also to there is shown a diagrammatic view of client computing system . While client computing system is shown in this figure this is for illustrative purposes only and is not intended to be a limitation of this disclosure as other configuration are possible. For example any computing device capable of executing in whole or in part DDR process may be substituted for client computing device within examples of which may include but are not limited to client electronic devices .

Computing system may include microprocessor configured to e.g. process data and execute instructions code for DDR process . Microprocessor may be coupled to storage device . As discussed above examples of storage device may include but are not limited to a hard disk drive a tape drive an optical drive a RAID device an NAS device a Storage Area Network a random access memory RAM a read only memory ROM and all forms of flash memory storage devices. IO controller may be configured to couple microprocessor with various devices such as keyboard mouse USB ports not shown and printer ports not shown . Display adaptor may be configured to couple display e.g. a CRT or LCD monitor with microprocessor while network adapter e.g. an Ethernet adapter may be configured to couple microprocessor to network e.g. the Internet or a local area network .

As will be appreciated by one skilled in the art the present disclosure may be embodied as a method e.g. executing in whole or in part on computing device a system e.g. computing device or a computer program product e.g. encoded within storage device . Accordingly the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present disclosure may take the form of a computer program product on a computer usable storage medium e.g. storage device having computer usable program code embodied in the medium.

Any suitable computer usable or computer readable medium e.g. storage device may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium may include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. The computer usable or computer readable medium may also be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to the Internet wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present disclosure may be written in an object oriented programming language such as Java Smalltalk C or the like. However the computer program code for carrying out operations of the present disclosure may also be written in conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through a local area network a wide area network the Internet e.g. network .

The present disclosure is described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams may be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer other programmable data processing apparatus e.g. client computing device such that the instructions which execute via the processor e.g. processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory e.g. storage device that may direct a computer e.g. client computing device or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer e.g. client computing device or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowcharts and block diagrams in the figures may illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustrations and combinations of blocks in the block diagrams and or flowchart illustrations may be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The embodiment was chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.

Having thus described the disclosure of the present application in detail and by reference to embodiments thereof it will be apparent that modifications and variations are possible without departing from the scope of the disclosure defined in the appended claims.

