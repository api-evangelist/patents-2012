---

title: Intelligent offline caching of non-navigated content based on usage metrics
abstract: A request for a navigated content associated with a browsing session can be received. The navigated content can be an electronic artifact which can be presented within an interface during the browsing session. The navigated content can be associated with a data source. The interface can be associated with a computing device. A usage metric associated with the navigated content can be collected. The usage metric can be a frequency and/or a duration measurement. The usage metric can be determined to be equivalent to a threshold value of a usage ruleset and can automatically persist within an offline cache the navigated content. A non-navigated content within the offline cache can be programmatically stored. The non-navigated content can be an electronic artifact linked to the navigated content wherein the non-navigated content is not presented within the interface during the browsing session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08775598&OS=08775598&RS=08775598
owner: International Business Machines Corporation
number: 08775598
owner_city: Armonk
owner_country: US
publication_date: 20120525
---
This application is a continuation of U.S. patent application Ser. No. 13 172 353 filed Jun. 29 2011 pending which is incorporated herein in its entirety.

The present invention relates to the field of browsing and more particularly to intelligent offline caching of non navigated content based on usage metrics.

Mobile workers such as consultants and or sales teams can be frequently required to work in environments where network connectivity is limited. For example consultants often work on engagements which involve access to sensitive data and therefore security prohibits Internet access. In these instances the worker can be subject to severe information access restrictions. That is access to resources such as product sites information articles and online reference material can be unavailable. Consequently the worker ability can be hindered which can result in worker frustration and decreased productivity.

Current solutions to address these limitations require the worker to manually select certain resources e.g. Web sites Web pages that are relevant to the worker. The worker must then enable offline access to the resources. That is the worker must recognize useful resources prior to limited connectivity scenarios. In many instances important resources e.g. Web sites can be overlooked and not stored for offline access. For example a worker can often forget to enable offline access for critical Web pages visited several days ago. Further the current solution requires specific knowledge of relevant resources which can be unknown to the worker.

One aspect of the present invention can include a system an apparatus a computer program product and a method for intelligent offline caching of non navigated content based on usage metrics. A request for a navigated content associated with a browsing session can be received. The navigated content can be an electronic artifact which can be presented within an interface during the browsing session. The navigated content can be associated with a data source. The interface can be associated with a computing device. A usage metric associated with the navigated content can be collected. The usage metric can be a frequency and or a duration measurement. The usage metric can be determined to be equivalent to a threshold value of a usage ruleset and can automatically persist within an offline cache the navigated content. A non navigated content within the offline cache can be programmatically stored. The non navigated content can be an electronic artifact linked to the navigated content wherein the non navigated content is not presented within the interface during the browsing session

Another aspect of the present invention can include an apparatus a computer program product a method and a system for intelligent offline caching of non navigated content based on usage metrics. A caching engine can be able to determine relevant navigated and non navigated content within a browsing session. The browsing session can be an online browsing session and an offline browsing session. A data store can be capable of persisting a usage ruleset a navigated content and a non navigated content. The navigated content and non navigated content can be an electronic artifact. The usage ruleset can be a threshold value and a caching action.

The present disclosure is a solution for intelligent offline caching of non navigated content based on usage metrics. In the solution usage patterns within a browsing session can be monitored to determine resources e.g. content which can be relevant to a user. For example Web browsing behavior can be analyzed to determine Web pages of importance to a user based on frequency of visits. When usage patterns match a usage rule of a usage ruleset offline caching of the resource can be performed. It should be appreciated that the solution can enable offline caching of navigated content and non navigated content. Navigated content can be content which can be manually requested and presented during a browsing session. Non navigated content can be content which is not presented during the browsing session but linked to the navigated content.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The caching action can persist navigated content and non navigated content. The cached content can be retrieved and or presented within an interface during an offline session. An offline session can be a browser session of a computing device having limited and or no connectivity to a data source associated with the navigated and or non navigated content. For example when a computing device lacks network access to the Internet an offline session can be established to browse intelligently cached content within an offline cache.

As used herein navigated content can be content presented within an interface during the browser session. Non navigated content can be content associated with the navigated content but not presented within the interface during the browsing session. Navigated and or non navigated content can include dynamic and or static content. For example non navigated content can be an ADOBE FLASH application embedded within a Web page. Method can be performed in real time and or near real time.

In step a browser session can be initiated. The browser session can include but is not limited to Web browsing session a co browsing session a Web conference session and a desktop sharing session. The browser session can be automatically and or manually initiated. For example the browser session can be established when a Web browser application is executed. In step a navigated content is identified. Navigated content can be identified through traditional and or proprietary mechanisms including but not limited to an automatic navigation action a manual navigation action and the like. In one instance the navigated content can be determined from a manually initiated navigation action. For example a user can navigate to a content utilizing a Uniform Resource Locator URL inputted within a Web browser address bar.

In step usage metric for navigated content can be collected. Usage metrics can include a frequency measurement duration metrics and the like. For instance the duration a user browses a Web page can be collected to determine the likelihood a user is interested in the navigated content. In step a usage metric evaluation can be performed against a usage ruleset to determine content relevance. Evaluation can conform to traditional and or proprietary metric analysis and or evaluation protocols. In one embodiment usage metrics can be evaluated against one or more values within a usage ruleset. For example a usage rule can be created to automatically cache non navigated content associated with a Web page that a user has visited more than five times.

In step if the usage metric is equivalent to threshold value the method can continue to step else return to step . The threshold value can be a single value multiple values and the like. It should be understood that the threshold value can be arbitrarily complex permitting sophisticated content relevance determination to be achieved. In step the navigated content can be offline cached. The navigated content can be offline cached in one or more traditional and or proprietary models. For example the navigated content can be stored within a browser cache.

In step if a non navigated content associated with the navigated content exists the method can continue to step else return to step . In step an evaluation for offline caching of non navigated content is performed against the usage ruleset. The evaluation can be similar and or dissimilar to the navigated content evaluation in step . In one instance keyword data can be analyzed to determine the expected relevance of non navigated content. In the instance when a keyword frequency is equivalent to a frequency value the non navigated content can be automatically cached. In one embodiment non navigated content can be automatically cached without being evaluated via a ruleset.

In step the non navigated content can be cached in an offline storage. The non navigated content can be linked to the navigated content enabling seamless browsing through navigated and non navigated content during an offline session. The offline storage can be a storage component associated a computing device. That is when computing device is not communicatively linked to a source associated with navigated content navigated and non navigated content can be transparently retrieved from the offline cache and presented within an interface. In step if more navigated content is available the method can return to step else continue to step . In step the browser session can be terminated and the method can end.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated the method can be performed continuously during a browser session. That is content can be transparently persisted during user browsing actions e.g. selecting a hyperlink . The method can be performed in parallel in serial and the like. It should be understood that method can be interactive or non interactive based on one or more configuration options.

In one instance one or more portions of a content can be automatically persisted offline. For example when a user interacts with a portion of navigated content the navigated content and associated non navigated content can be automatically persisted offline utilizing method . In another instance method can be triggered via one or more user interface actions. In the instance a copy paste action can trigger steps to be transparently performed. In yet another instance method can be performed upon a browser bookmark. For example Web browser bookmarks can be automatically parsed and relevant non navigated content can be offline cached.

It should be appreciated that engine can be a networked element of a computing environment. That is in system engine can be communicatively linked with server and can be independent of server . Engine can be a component of a distributed computing system networked computing system and the like. In one embodiment engine can reside within device . In the embodiment engine can be a locally executing offline caching service e.g. caching proxy able to intelligently cache navigated and non navigated content .

System can represent one embodiment enabling the heuristic offline caching of user relevant content utilizing usage metrics. System can include but is not limited to computing device Web server network and the like. System can be communicatively linked via network . System configuration can vary based on implementation details component abilities component limitations and the like. In one instance system can be a drop in solution able to extend an existing infrastructure. For example system functionality can be a feature of a Web browser plug in. In another instance system can be a functionality of an application programming interface API .

It should be appreciated that system can illustrate an online state and an offline state. An online state can include computing device communicatively linked to server and or content . During the online state navigated content can be communicated and presented within interface . An online state can be associated with a traditional online browsing session. Usage metrics collected from content during the online state can be communicated to engine . An offline state can include computing device lacking a communicative link to server and or content . For example an offline state can include a scenario where a low bandwidth connection is inadequate to retrieve content within a suitable time frame. An offline state can be associated with a traditional offline browsing session. In an offline state usage metrics can be continually collected and can be communicated during an online state enabling cache contents to evolve based on user behavior.

In one instance the system can perform during a partial and or complete communication failure. For example when a network connection fails offline cache can be automatically utilized to retrieve and present navigated content and non navigated content .

Web server can be a hardware software component for conveying a content to a computing device . Server can include but is not limited to content usage metric usage ruleset caching engine data store and the like. Web server can include traditional and or proprietary Web server technologies and or functionality. For example server can be an APACHE HTTP Web server. In one instance server can be an IBM WEBSPHERE server.

Content can be an electronic artifact associated with a content provider e.g. server . Content can include but is not limited to a document a Web page an application an image a video stream and the like. Content can conform to traditional and or proprietary formats including but not limited to Hypertext Markup Language HTML Extensible Markup Language XML and the like. Content can include navigated content and non navigated content . Navigated content can include content presented within interface resulting from a navigation action. Non navigated content can be associated with navigated content and can be presented within interface during an offline state. For instance non navigated content can be stored within offline cache during an online state and presented during an offline state within an offline browser session.

Usage metric can be one or more measurements indicating a usage pattern associated with a content . Usage metric can include but is not limited to browsing duration browsing frequency click path and the like. For instance metric can include metrics such as hits page views visits bounce rates and the like. In one embodiment usage metric can include traditional Web analytic information including but not limited to click analytics lifecycle analytics and the like. Metric can conform to traditional and or proprietary formats. In one embodiment metric can be encrypted during communication from device to engine and decrypted upon analysis. It should be appreciated that metric can be communicated during an online browsing session and or an offline browsing session.

Usage ruleset can be one or more rules for performing intelligent offline caching based on usage metric . Ruleset can include but is not limited to an identifier a name a threshold value a caching action an owner an expiration value and the like. In one embodiment ruleset can include a threshold value which can be compared to one or more usage metrics . Ruleset can be automatically and or manually established. In one instance ruleset can be heuristically generated based on historic rulesets rulesets associated with different owners and the like. Ruleset can be stored within engine data store cache and the like.

Caching engine can be a hardware software component for performing usage metric driven offline content caching. Engine can include but is not limited to usage monitor synchronization component metric analyzer and the like. Engine functionality can include but is not limited to browsing usage analysis metric collection content synchronization and the like. In one instance engine can be a component of content management system. It should be appreciated that engine can operate during an online and offline browsing session. It should be appreciated that engine components can be distributed throughout one or more components of system .

Usage monitor can be a hardware software entity for collecting usage behavior during a browsing session. Usage metrics can be obtained utilizing traditional and or proprietary mechanisms. In one instance monitor can track user input device data to determine relevant content. In the instance monitor can detect special browser events initiated by a user action. For example monitor can detect a rollover event to determine interaction with a content. In another instance user input can be utilized to identify non navigated content of interest. For example keyboard input can be utilized to identify keywords which can be employed to persist non navigated content . In one instance usage metrics can be collected during an offline browsing session. In the instance metrics can be analyzed to determine relevant content which can be automatically synchronized to the offline cache .

Metric analyzer can be a hardware software element able to evaluate usage metric to determine relevant content . Analyzer can utilize traditional and or proprietary analysis protocols. In one instance analyzer can process metric and evaluate results against metric ruleset . In the instance analyzer can assess metric results against one or more threshold values within ruleset . For example analyzer can evaluate a frequency metric against a rule within ruleset . Based on analyzer evaluation a caching action can be executed. For example when a metric is greater than a threshold value within ruleset non navigated content can be offline cached.

Synchronization component is a hardware software element for persisting navigated content and or non navigated content within offline cache . Component can utilize traditional and or proprietary mechanisms to synchronize content within offline cache . For example Asynchronous JavaScript and Extensible Markup Language AJAX methods can be employed to update cache in real time. In one instance component can update cache via delta encoding. In the instance a delta can be identified and communicated to synchronize content . In one embodiment offline index can be maintained by component to enable real time content synchronicity. In the embodiment synchronization state of content can be tracked in real time utilizing an offline entry . In one embodiment component can permit synchronization across multiple computing devices. For example browsing content on a mobile phone can trigger non navigated content to be cached within an offline cache of a laptop. In one embodiment component can be an external tool communicatively linked to engine . For example component can be a WGET utility able to recursively download Web based content.

Configuration setting can be one or more options for establishing the behavior of system and or engine . Setting can include but is not limited to content settings usage monitor options synchronization component parameters metric analyzer settings offline index options and the like. Setting can be utilized to configure update frequency metric analysis algorithms encryption privacy settings and the like. In one instance setting can be configured through interface .

Offline index can be a dataset for managing content synchronization with offline cache . Index can include but is not limited to a content identifier a synchronization state a timestamp an expiration value a computing device identifier and the like. Offline index can be stored within data store offline cache and the like. In one instance index can be a portion of a database table residing within a database. In another instance index can be a data file stored within offline cache . It should be appreciated that offline index can be an optional entity.

Computing device can be a hardware software entity for executing a browsing session within an interface . Device can include but is not limited to a desktop computer a laptop computer a tablet computing device a portable media player a portable digital assistant PDA a mobile phone and the like. Device can be communicatively linked to offline cache interface and the like. Device can include multiple computing devices multiple interfaces multiple offline caches and the like. That is system can be utilized to intelligently persist navigated content and or non navigated content across multiple system and or components.

Interface can be a hardware software element for performing user interface actions within a browsing session. Interface functionality can include but is not limited to content presentation configuration management and the like. In one instance interface can be a Web browser including but not limited to MOZILLA FIREFOX APPLE SAFARI KONQUEROR GOOGLE CHROME and the like. Interface can be a graphical user interface able to present navigated content and non navigated content during an offline browser session.

Offline cache can be a data store able to persist navigated and non navigated content . Cache can conform to traditional and or non traditional data storage formats. Cache can include but is not limited to random access memory RAM read only memory ROM flash memory and the like. In one embodiment cache can be associated with a browser cache. In another embodiment cache can be independent of a browser cache and or device . For example offline cache can be a removable storage device such as a flash memory drive.

Data store can be a hardware software component able to store unscheduled list . Data store can be a Storage Area Network SAN Network Attached Storage NAS and the like. Data store can conform to a relational database management system RDBMS object oriented database management system OODBMS and the like. Data store can be communicatively linked to server in one or more traditional and or proprietary mechanisms.

Network can be an electrical and or computer network connecting one or more system components. Network can include but is not limited to twisted pair cabling optical fiber coaxial cable and the like. Network can include any combination of wired and or wireless components. Network topologies can include but is not limited to bus star mesh and the like. Network types can include but is not limited to Local Area Network LAN Wide Area Network WAN Virtual Private Network VPN and the like.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. System functionality can extend to traditional and non traditional content and or resources including but not limited to social networking sites e.g. user profile pages files directory structures and the like. For example system can cache a File Transfer Protocol FTP directory structure associated with a user home directory. In one embodiment system can include partial minoring of Web sites permitting seamless navigation of content during an offline state. In one instance the system can be configured to persist only non navigated content .

In ruleset parameter one or more rulesets can be utilized to extend offline caching functionality and or usage pattern triggers. In parameter an external ruleset file can be specified. For example a file selection dialog can be presented enabling selection of one or more rulesets residing within a computing device. In one instance the ruleset can conform to an Extensible Markup Language format. In another instance the ruleset can conform to a flat text file.

In filtering options one or more filtering lists can be specified. In options a whitelist and or a blacklist can be selected. Filtering lists within option can conform to traditional and or proprietary formats. In one embodiment whitelist and blacklist can be a plain text formatted file. In one instance selection of filtering lists can be enabled or disabled through a check box interface element.

In cache configuration parameters cache administration options can be presented and or manipulated. In one instance parameters can include revision options cache size settings and the like. In one embodiment the disclosure can be configured to store multiple revisions of a content within an offline cache. In the embodiment a revision option can be easily enabled or disabled via a check box interface element. In one embodiment cache size can be configured within parameters . Cache size can be automatically determined and or manually specified. In one instance cache size can be limited to a quantity of megabytes. For instance a user can specify the cache not to exceed one gigabyte in size.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Interface can include but is not limited to a graphical user interface GUI voice user interface VUI mixed mode interface text based interface and the like. It should be appreciated that interface can include additional options for specifying caching behavior content presentation and the like. Configuration options can be associated with a file menu context menu and the like. Interface can include graphical user interface elements including but not limited to input boxes check boxes radio dialogs and the like.

The flowchart and block diagrams in the illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

