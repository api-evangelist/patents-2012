---

title: Communication system, GUI apparatus, and service apparatus
abstract: An event list required by a graphical user interface (GUI) apparatus is notified to a service apparatus. The service apparatus assigns an ID to an event list and responds to the GUI apparatus. In a case where an event occurs in the service apparatus, the service apparatus determines based on an event list from the GUI apparatus whether to perform an event notification. When notifying an event to the service apparatus, the GUI apparatus transmits an ID in place of an event list in a case where the ID exists.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09596145&OS=09596145&RS=09596145
owner: Mitsubishi Electric Corporation
number: 09596145
owner_city: Tokyo
owner_country: JP
publication_date: 20120702
---
The present invention relates to a communication system in which a GUI apparatus and a service apparatus are connected with each other through a network to perform mutual communication such that graphics are displayed at the GUI apparatus.

In a conventional embedded device having a GUI Graphical User Interface service logic defining the behavior of applications and the GUI are typically implemented on the same device so as to be configured as an apparatus capable of independent actions on its own.

Meanwhile there is another method of constructing a system such as a server client system in which service logic is equipped in a server and a GUI is equipped in a client to collaborate with each other via a network.

By the recent improvement in processing ability of embedded devices and popularization of having a network connection function the server client system mentioned above has become applicable to embedded devices such that a GUI and service logic are implemented on separate devices.

In such a system communication between the GUI and the service logic which has been performed within the same device is replaced by communication between devices. The processing ability of inter device communication is generally lower than the processing ability of communication within the same device. Further in conventional systems any event occurring in the service logic is notified to the GUI. The GUI makes a decision whether to use the received events and reflects the result on the GUI. Replacement of communication within the device by inter device communication results in prolonged time for communication which follows that the responsive performance of the overall system for example the time to be taken from a user s operation of the GUI until the service logic s processing in response to the operation to reflect the processing result on the GUI is desirably improved by reducing the amount and frequency of inter device communication. Specifically unnecessary events are desirably not notified from the service logic to the GUI.

For example Patent Literature 1 describes that a destination that has requested event notification is registered as a listener and events are notified to the registered listener in order to avoid occurrence of unnecessary notification of events. Patent Literature 2 describes that even when an informer program generates events only an event which has been presented to a notification manager is notified in order to avoid occurrence of unnecessary notification of events. In so doing a communication parameter and a dictionary corresponding thereto are used to reduce the amount of communication for specifying one or more events to be presented to the notification manager.

Patent Literature 2 Japanese Translation of PCT International Application Publication No. 2004 532479

However in the technology as described in Patent Literature 1 reception of one event entails another request for event notification to receive the next event. Thus when the approach of Patent Literature 1 is applied to a system in which the GUI and service logic are implemented on different devices communication is performed frequently.

In the configuration described in Patent Literature 2 the correlation between the notification parameter for the notification manager and the dictionary is fixed. The approach of Patent Literature 2 is safely applicable to a system involving fewer kinds of events however a system involving a number of kinds of events leads to an increased size of dictionary. Moreover considering a case in which the service logic is unchanged and the GUI is changed the change to the GUI could involve change in pattern of events for use in the GUI. In this case according to the approach of Patent Literature 2 the GUI is not changeable unless the changed patterns are listed in the dictionary.

This invention has been made to solve the foregoing problems by providing a communication system which is capable of reducing amount of communication and dealing with flexible change in pattern of events.

A communication system according to this invention includes a GUI apparatus that performs screen construction based on an event notification and a service apparatus that executes a service and generates an event the GUI apparatus and the service apparatus being connected with each other through a network to perform mutual communication wherein the GUI apparatus includes a GUI apparatus side event list memory that stores an event list and an ID for uniquely identifying the event list the event list being a list of the event and a GUI apparatus side event processor that transmits to the service apparatus the event list to be used in a screen at the time of screen construction and that prior to the transmission refers to the GUI apparatus side event list memory and in a case where the event list matching the event list to be transmitted exists obtains the ID for uniquely identifying the event list to transmit to the service apparatus the ID in place of the event list to be transmitted the GUI apparatus side event processor causing the GUI apparatus side event list memory to store in a case where the ID is contained in a response message resulting from the transmission of the event list or the ID to the service apparatus the ID contained in the response message and the event list transmitted to the service apparatus or the event list whose ID is sent instead as one combination wherein the service apparatus includes a service apparatus side event list memory that stores the event list and the ID for uniquely identifying the event list the event list being a list of the event an ID manager that manages a relation between the event list and the ID a service processor that executes the service to generate the event and an event processor that when the event list is received from the GUI apparatus refers to the service apparatus side event list memory in a case where the event list matching the received event list exists obtains the ID for uniquely identifying the event list to include the ID in the response message to the GUI apparatus and transmit the response message and in a case where the event list matching the received event list is absent as a result of referring to the service apparatus side event list memory obtains from the ID manager an ID unregistered with the service apparatus side event list memory to register with the service apparatus side event list memory the obtained ID and the received event list as one combination and includes the obtained ID in the response message to the GUI apparatus and transmits the response message and that when the ID is received from the GUI apparatus refers to the service apparatus side event list memory to in a case where the event list matching the received ID exists include the received ID in the response message to the GUI apparatus and transmit the response message and wherein the service apparatus side event processor makes a determination on the event to be generated based on the service of the service processor as to whether the event list containing the event is to be notified to the GUI apparatus and notifies the GUI apparatus of the event only in a case where the event list is to be notified.

The communication system according to the present invention is configured to notify the service apparatus of an event list for use in the GUI apparatus. The service apparatus is configured to determine whether to notify the GUI apparatus of an event based on the notified event list and configured to assign identification ID to the event list to respond to the GUI apparatus. The GUI apparatus is configured to transmit the ID in place of the event list in a case where the ID exists. Therefore reduction in amount of communication and flexible change in pattern of events are achieved.

Embodiments of the invention are described with reference to the accompanying drawings to provide a more detailed description of this invention.

The communication system depicted in has a configuration in which a GUI apparatus and a service apparatus are connected with each other through a network .

The GUI apparatus includes a display a GUI logic processor a request processor a communicator an event processor a GUI apparatus side event processor an event list memory a GUI apparatus side event list memory and an interface .

The display is a device such as a liquid crystal display configured to display a GUI. The GUI logic processor is a device that is configured to construct the GUI to be displayed on the display and configured to input and output with the interface . The GUI logic processor is also configured to issue a request through the request processor to the service apparatus configured to change the GUI to be displayed on the display based on an event notified from the event processor and configured to execute output other than the GUI through the interface . The request processor is a device configured to execute conversion to adapt a request to the service apparatus which has been received from the GUI logic processor to communication through the communicator . For example in a case where the GUI logic processor makes a function call to the request processor and the GUI apparatus and the service apparatus perform communication with a HTTP Hyper Text Transfer Protocol where the GUI apparatus is a client and the service apparatus is a server the above mentioned conversion corresponds to conversion of the function call from the GUI logic processor into an HTTP request.

The communicator is a device configured to execute data transmission and reception through the network with the service apparatus . The event processor is a device configured to execute a process relating to events in the GUI apparatus e.g. registration of an event list with the service apparatus and delivery of an event received from the service apparatus to the GUI logic processor . The detail of the event list is described later. The event list memory is a device for storing a combination of the event list which the event processor registers with the service apparatus and an ID utilized for uniquely identifying the event list. The interface is a device oriented to interact with a system user and the examples thereof include a touch panel and a speaker.

The service apparatus includes a service processor a request processor a communicator an event processor a service apparatus side event processor an ID manager and an event list memory a service apparatus side event list memory .

The service processor includes one or more services. depicts an example including two services i.e. a service A and a service B . The service denotes a program for providing a function unique thereto. The request processor is a device configured to execute conversion to adapt a request received from the GUI apparatus to the service processor . For example in a case where the GUI apparatus and the service apparatus perform communication with the HTTP and the service processor has public APIs Application Programming Interfaces defined by the services the above mentioned conversion corresponds to analyzing the HTTP request to identify a corresponding API and calling the identified API. The communicator is a device configured to execute data transmission and reception through the network with the GUI apparatus .

The event processor is a device configured to execute a process relating to events in the service apparatus e.g. event list registration requested by the GUI apparatus and reception of a generated event from the service processor to make a decision whether or not to notify the GUI apparatus of the event. The ID manager is a device for deciding an ID for uniquely identifying the event list transmitted from the GUI apparatus . The ID manager is also configured to have a function of referring to the contents stored on the event list memory to identify an event list that corresponds to the ID designated by the event processor . The event list memory is a device for storing a combination of an event list transmitted from the GUI apparatus and an ID for uniquely identifying the event list.

Step ST The GUI logic processor initiates a process of constructing a screen upon for example occurrence of screen transition.

Step ST The GUI logic processor provides the event processor with events to be used in the post transition screen. The event processor uses zero or more events provided by the GUI logic processor to generate an event list and temporarily store the list within the event processor . The reason for including a case in which an event list is generated where there is zero event i.e. no events exist is to handle a service which does not use events provided from the service apparatus .

Step ST The event processor uses the event list temporarily stored at Step ST to conduct search as to whether an element matching the event list is registered with the event list memory . In the case of not registered the process proceeds to Step ST . In the case of registered an ID stored in the pertinent element is obtained and the process proceeds to Step ST .

Step ST The event processor transmits the event list through the communicator to the service apparatus . For example the event list has four events stored therein but the number of events varies depending on the screen and it is sometimes zero.

Step ST The event processor transmits the ID obtained in Step ST through the communicator to the service apparatus . It is to be noted that the service apparatus distinguishes the transmission of event lists from the transmission of IDs coming from the GUI apparatus . This is achievable by previously defining a form for transmission data e.g. a format for URI Uniform Resource Identifier of the HTTP request or for the text to be written in BODY.

Step ST The communicator stands by for a response to the transmission executed in Step ST or Step ST from the service apparatus . Upon receipt of the response the communicator gives the response to the event processor and the process proceeds to Step ST .

Step ST The response received in Step ST contains the ID depicted in . The event processor determines whether the ID is valid or not. In the case where the ID is zero or no ID is contained in the response determination of invalid ID is made and the process proceeds to Step ST . Other than this case determination of valid ID is made and the process proceeds to Step ST .

Step ST The event processor registers with the event list memory a combination of the ID received in Step ST and the event list temporarily stored by Step ST . In a case where an element having a matching ID value exists in the event list memory the portion of the event list in the element is overwritten.

Step ST The event processor discards the event list which has been temporarily stored and activates the function of giving events to the GUI logic processor and then terminates the process. It is to be noted that the function of giving events to the GUI logic processor is appropriately disabled in Step ST or by terminating processing at the transition origin of the screen transition. The events that are received during a period in which the function of giving events to the GUI logic processor is disabled are either accumulated within the event processor or discarded at the event processor .

Step ST After the GUI apparatus performs transmission processing in ST or ST of and then the communicator of the service apparatus receives the transmitted data the service apparatus initiates a process.

Step ST The communicator gives the received data to the event processor . The event processor determines which of an ID or an event list the received data is. In the case of the ID the event processor temporarily stores the ID contained in the received data within the event processor and the process proceeds to Step ST . In the case of the event list the event processor stores the event list contained in the received data within the event processor and the process proceeds to Step ST .

Step ST The event processor gives the ID stored at Step ST to the ID manager and requests for search. The ID manager searches an element matching with the ID in the event list memory . In the case where a pertinent element is found the ID manager determines successfully retrieved and gives the event list contained in the element found to the event processor and the process proceeds to Step ST . In the case where the pertinent element is not found the ID manager determines failed in retrieval and gives the result of determination to the event processor and the process proceeds to Step ST .

Step ST The event processor refers to the event list memory and checks whether an element matching with the event list stored by Step ST exists. In the case where a pertinent element exists decision of matched is made and the process proceeds to Step ST . In the case where the pertinent element does not exist decision of no matching is made and the process proceeds to Step ST .

Step ST The event processor temporarily stores within the event processor the ID of the element matching with the event list that has existed in the event list memory and stored at Step ST . The process proceeds to Step ST .

Step ST The event processor requests with the ID manager for obtaining an unused ID. The ID manager refers to the event list memory decides an ID that does not exist in the event list memory and gives the decided ID to the event processor .

Step ST The event processor registers with the event list memory a combination of the ID given in Step ST from the ID manager and the event list stored at Step ST .

Step ST In the case where the event processor has done Step ST the event list retrieved in Step ST from the event list memory is stored within the event processor . Other than this case nothing is done because the storing operation has been executed in Step ST .

Step ST The event processor transmits through the communicator a response message to the GUI apparatus . The response message includes the ID obtained in Step ST or given from the ID manager in Step ST or given from the ID manager in Step ST . However in the case of failed in retrieval in Step ST an invalid ID e.g. zero based on Step ST is stored.

Step ST When an event occurs in the service A or the service B and the event is given through the service processor to the event processor the service apparatus initiates a process.

Step ST The event processor checks based on a name of the event given from the service processor whether an event matching with the event list stored within the event processor exists. In the case where a pertinent event exists the event is decided to be notified and the process proceeds to Step ST . In the case where the pertinent event does not exist the event is decided not to be notified and the event is discarded and the process proceeds to Step ST .

Step ST The event processor notifies the GUI apparatus through the communicator of the event given from the service processor .

In this embodiment in a case where notification of an event from the service apparatus takes place the GUI apparatus gives the event through the communicator to the event processor and the event processor gives the event to the GUI logic processor . Details of these operations are not omitted.

As has been described in the GUI apparatus of the Embodiment 1 the event processor checks whether an ID for uniquely identifying an event list to be transmitted exists in the event list memory before the GUI apparatus transmits a list of events to be used i.e. the event list to the service apparatus and the ID is transmitted if such an ID exists. Upon receipt of the event list the event processor of the service apparatus uses the ID manager and the event list memory to obtain an unused ID from the ID manager in the case where an element that matches the event list is not found in the event list memory registers a combination of the event list and the ID with the event list memory and transmits the ID to the GUI apparatus . Further the event processor of the GUI apparatus registers with the event list memory a combination of the ID received from the service apparatus and the event list that was going to be transmitted to the service apparatus.

When an event is given from the service processor to the event processor of the service apparatus the event processor uses the event list stored within itself to decide whether the event be notified to the GUI apparatus . Hence event notification being unnecessary for the GUI apparatus is not performed it allows for reduction in amount of communication from the GUI apparatus to the service apparatus .

In the case where an element matching the event list to be transmitted exists in the event list memory the ID in place of the event list is transmitted to the service apparatus enabling the event processor to set the event list by using the ID which also allows for reduction in amount of communication from the GUI apparatus to the service apparatus . More specifically this is because IDs are generally smaller in data amount than event lists. Further reduction in amount of communication is achievable without previously preparing a correlation between event lists and IDs at the service apparatus which additionally allows for reduction in cost for design and implementation of the correlation between event lists and IDs.

Moreover while in the above description an invalid ID is decided where the value of the ID is zero or the response does not contain an ID another method may also be employed.

As described above with the communication system of the Embodiment 1 in the communication system including a GUI apparatus that performs screen construction based on an event notification and a service apparatus that executes a service and generates an event the GUI apparatus and the service apparatus being connected with each other through a network to perform mutual communication wherein the GUI apparatus includes a GUI apparatus side event list memory that stores an event list and an ID for uniquely identifying the event list the event list being a list of the event and a GUI apparatus side event processor that transmits to the service apparatus the event list to be used in a screen at the time of screen construction and that prior to the transmission refers to the GUI apparatus side event list memory and in a case where the event list matching the event list to be transmitted exists obtains the ID for uniquely identifying the event list to transmit to the service apparatus the ID in place of the event list to be transmitted the GUI apparatus side event processor causing the GUI apparatus side event list memory to store in a case where the ID is contained in a response message resulting from the transmission of the event list or the ID to the service apparatus the ID contained in the response message and the event list transmitted to the service apparatus or the event list whose ID is sent instead as one combination wherein the service apparatus includes a service apparatus side event list memory that stores the event list and the ID for uniquely identifying the event list the event list being a list of the event an ID manager that manages a relation between the event list and the ID a service processor that executes the service to generate the event and an event processor that when the event list is received from the GUI apparatus refers to the service apparatus side event list memory in a case where the event list matching the received event list exists obtains the ID for uniquely identifying the event list to include the ID in the response message to the GUI apparatus and transmit the response message and in a case where the event list matching the received event list is absent as a result of referring to the service apparatus side event list memory obtains from the ID manager an ID unregistered with the service apparatus side event list memory to register with the service apparatus side event list memory the obtained ID and the received event list as one combination and includes the obtained ID in the response message to the GUI apparatus and transmits the response message and that when the ID is received from the GUI apparatus refers to the service apparatus side event list memory to in a case where the event list matching the received ID exists include the received ID in the response message to the GUI apparatus and transmit the response message and wherein the service apparatus side event processor makes a determination on the event to be generated based on the service of the service processor as to whether the event list containing the event is to be notified to the GUI apparatus and notifies the GUI apparatus of the event only in a case where the event list is to be notified. Therefore the amount of communication between the GUI apparatus and the service apparatus is reduced and patterns of events are flexibly changeable.

In the Embodiment 1 description is given of registration of a combination of an event list and an ID with the event list memory and the event list memory . In Embodiment 2 an example is described in which limit of the memory capacity set with the event list memory is addressed such that the use efficiency of resources of the service apparatus is improved.

The communication system has a configuration similar to the Embodiment 1 in which a GUI apparatus and a service apparatus are connected with each other through a network .

The GUI apparatus includes a display a GUI logic processor a request processor a communicator and an event processor a GUI apparatus side event processor an event list memory a GUI apparatus side event list memory and an interface . Since the display the GUI logic processor the request processor the communicator the event list memory and the interface have the same configurations as those of the Embodiment 1 description thereof is omitted here.

The event processor is a device configured to execute a process relating to events in the GUI apparatus . The event processor has an additional function with respect to the event processor of the Embodiment 1 of deleting an element comprising a combination of an event list and an ID to be performed with the event list memory .

The service apparatus includes a service processor a request processor a communicator an event processor a service apparatus side event processor an ID manager and an event list memory a service apparatus side event list memory . The service processor the request processor the communicator and the ID manager have the same configurations as those of the Embodiment 1 and description thereof is omitted here. Regarding the event list memory information of a registrable data size is added which is not illustrated.

The event processor is a device configured to execute a process relating to events in the service apparatus . The event processor has an additional function with respect to the event processor of the Embodiment 1 of deleting an element comprising a combination of an event list and an ID to be performed with the event list memory .

Next description is given of operations of the GUI apparatus and the service apparatus with reference to .

In Steps ST ST ST ST ST ST ST ST and ST the operation of the event processor of the Embodiment 1 is not different from the operation of the event processor of the Embodiment 2 except that the executed following Step ST is changed to Step ST and that the communication is performed with the service apparatus and not the service apparatus . Thus description of these steps is omitted here.

Step ST The event processor refers to the deleted ID list that is contained in the response received in Step ST sequentially from the head and deletes elements that include the IDs from the event list memory . In the example of the elements having IDs of 20 and 30 are to be deleted from the event list memory . The event processor causes the process to proceeds to Step ST upon reaching the terminal end of the ID list .

In Steps ST ST ST ST ST ST ST ST and ST in the case where Step ST is executed after Step ST the operation of the event processor of the Embodiment 1 is not different from the operation of the event processor of the Embodiment 2 except that the execution of Step ST precedes that Step ST is executed in place of Step ST and that the communication is performed with the GUI apparatus and not the GUI apparatus . Thus description of these steps is omitted here.

Step ST The event processor uses a the size of the event list having been stored at Step ST and the size of the ID b the sizes of elements registered with the event list memory and c the registrable data size of the event list memory . When an inequality a b c is true the event processor deletes one or more elements registered with the event list memory to nullify this inequality. A variety of criteria is adoptable for selecting an element to be deleted such as one with a minimum size among the sizes larger than a or one with the oldest registration time and sequentially onwards and one with a minimum number of hits in searches using event lists and IDs and sequentially onwards however insofar as the goal is achieved any criterion may be used. When a condition where the above inequality is no longer true is achieved the process proceeds to Step ST .

Step ST The event processor transmits a response message through the communicator to the GUI apparatus . The response message includes the registration result . The ID includes the ID that is obtained in Step ST or given in Step ST from the ID manager or given in Step ST from the ID manager . The deleted ID list includes zero or more IDs of the element s deleted in Step ST in the case of zero the value signifying a termination is stored. It is to be noted that in the case of failed in retrieval in Step ST an invalid ID is set for the ID and the deleted ID list is emptied.

Since the operation of the service apparatus at the time of occurrence of an event of this embodiment is the same as that of the Embodiment 1 description thereof is omitted here.

Furthermore according to this embodiment since the operation of the GUI apparatus in the case of occurrence of notification of an event from the service apparatus is the same as that of the Embodiment 1 description thereof is omitted here the GUI apparatus the service apparatus and the event processor are substituted with the GUI apparatus the service apparatus and the event processor respectively .

As described above the service apparatus of the Embodiment 2 deletes elements from the event list memory to be within the limit of registrable data size of the event list memory at the time of registering a new event list with the event list memory . The GUI apparatus receives from the service apparatus the deleted ID list to be generated as a result of the deletion and deletes the pertinent element s from the event list memory . This allows for obviating lack of resource such as depletion of the memory which could happen due to expansion of the size of data registered with the event list memory . Setting the limit on the size of data to be registered with the event list memory also allows for restraining a maximum time to be taken for performing processing on the event list memory . Moreover the GUI apparatus is also provided with the ID s of the deleted element s which additionally allows for prevention of occurrence of such a phenomenon that the element corresponding to the ID designated by the GUI apparatus does not exist in the event list memory thus cutting unnecessary communication between the GUI apparatus and the service apparatus

It is to be noted that while in this embodiment description is given of how to deal with a limit of registrable data size of the event list memory in the service apparatus a similar procedure may be adopted for the GUI apparatus to deal with a limit of registrable data size of the event list memory . Specifically the event processor may determine whether the size of data registrable with the event list memory is exceeded in a case where an ID is contained in a response message that is available as a result of transmitting an event list or an ID to the service apparatus . When exceeded one or more combinations of an event list and an ID that are registered with the event list memory are deleted so as to be within the limit and in this state the ID contained in the response message and the event list transmitted from the GUI apparatus or the event list whose ID is transmitted instead may be registered with the event list memory as one combination.

As described above in the communication system of the Embodiment 2 the service apparatus side event processor is configured to determine before registering the combination of the event list received from the GUI apparatus and the ID for uniquely identifying the event list with the service apparatus side event list memory as to whether a size of the combination exceeds a size of data registrable with the service apparatus side event list memory and in a case where the size exceeds delete a combination of an event list and an ID having been registered with the service apparatus side event list memory to be within the size and registers in this state the combination of the event list received from the GUI apparatus and the ID for uniquely identifying the event list with the service apparatus side event list memory and include the ID for uniquely identifying the deleted event list in the response message to the GUI apparatus and transmits the response message and wherein the GUI apparatus side event processor in a case where the response message resulting from the transmission of the event list or the ID to the service apparatus contains the ID deleted from the service apparatus side event list memory deletes the event list corresponding to the deleted ID from the GUI apparatus side event list memory. Therefore lack of resource on the side of the service apparatus is inhibited and unnecessary communication is reduced between the GUI apparatus and the service apparatus.

Furthermore in the communication system of the Embodiment 2 in a case where the ID is contained in the response message resulting from the transmission of the event list or the ID to the service apparatus the GUI apparatus side event processor is configured to determine as to whether a size registrable with the GUI apparatus side event list memory is exceeded and in a case where the size is exceeded the GUI apparatus side event processor deletes a combination of an event list and an ID the combination being registered with the GUI apparatus side event list memory to be within the size and registers in this state with the GUI apparatus side event list memory the ID contained in the response message and the event list transmitted from the GUI apparatus or the event list whose ID is transmitted instead as one combination. Therefore lack of resource on the side of the GUI apparatus is inhibited.

In the above described Embodiments 1 and 2 either an event list itself or an ID for uniquely identifying the event list is transmitted in the case where registration of the event list is requested from the GUI apparatus GUI apparatus to the service apparatus service apparatus . Meanwhile transmission of an entire event list is inefficient in a case where difference is slight e.g. one additional event between the event list to be transmitted and the event list registered with the event list memory . In Embodiment 3 a difference from the registered event list is used to reduce the amount of communication as compared with the case in which the event list itself is transmitted.

The system has a configuration in which a GUI apparatus and a service apparatus are connected with each other through a network .

The GUI apparatus includes a display a GUI logic processor a request processor a communicator an event processor a GUI apparatus side event processor and an event list memory a GUI apparatus side event list memory and an interface . Since the display the GUI logic processor the request processor the communicator the event list memory and the interface have the same configurations as those of the Embodiment 1 description thereof is omitted here.

The event processor is a device configured to execute a process relating to events in the GUI apparatus . The event processor has an additional function with respect to the event processor of the Embodiment 1 of requesting with the service apparatus for registration of an event list using an ID and difference in event list.

The service apparatus includes a service processor a request processor a communicator an event list processor a service apparatus side event list processor an ID manager and an event list memory a service apparatus side event list memory . Since the service processor the request processor the communicator the ID manager and the event list memory have the same configurations as those of the Embodiment 1 description thereof is omitted here.

The event processor is a device configured to execute a process relating to events in the service apparatus . The event processor has an additional function with respect to the event processor of the Embodiment 1 of registering an event list by using an ID and a difference in event list.

In Steps ST ST ST ST ST ST ST ST and ST the operation of the event processor of the Embodiment 1 is not different from the operation of the event processor of the Embodiment 3 except that the process following Step ST in a case where decision of not registered is made is changed to Step ST and that the communication is performed with the service apparatus and not the service apparatus . Thus description of these steps is omitted here.

Step ST The event processor generates an event differential list by using the event list temporarily stored therewithin in Step ST and the event lists of the elements registered with the event list memory and selects one with a minimum number of elements from the event differential list . At the same time the event processor obtains IDs for uniquely identifying the event lists that have been used for creating the event differential list from the event list memory . For example in the case where the event list A and the ID A of are registered with the event list memory and the event list that is going to be transmitted this time is configured as ServiceA EventB ServiceA EventC ServiceA EventP and ServiceB EventX the event differential list to be generated is as denoted by the reference numeral and the value of the ID is 10 . It is to be noted that the operation type ADD and the event name ServiceA EventP in the event differential list denote addition of ServiceA EventP to the event list. The operation type DEL and the event name ServiceA EventA denote deletion of ServiceA EventA from the event list.

Step ST The event processor compares the number of elements indicating the amount of information of the event list temporarily stored at Step ST with the number of elements indicating the amount of information of the event differential list generated in Step ST . In the case where the number of elements of the temporarily stored event list is larger difference

Step ST The event processor uses the event differential list obtained in Step ST and the IDs for uniquely identifying the event lists used for creation of the event differential list to generate an event list registration request and transmits the event list registration request through the communicator to the service apparatus .

In Steps ST ST ST ST ST ST and ST the operation of the event processor of the Embodiment 1 is not different from the operation of the event processor of the Embodiment 3 except that the communication is performed with the GUI apparatus and not the GUI apparatus . Thus description of these steps is omitted here.

Step ST The communicator gives the received data to the event processor . The event processor determines the type of the received data an ID an event list or an ID with a difference . In the case where the received data include an ID the event processor stores the ID contained in the received data and the process proceeds to Step ST . In the case where the received data include an event list the event processor stores the event list contained in the received data and the process proceeds to Step ST . In the case where the received data include an ID with a difference the process proceeds to Step ST .

Step ST The event processor gives the ID contained in the received data to the ID manager in order to request for search. The ID manager conducts search as to whether a matching element is registered with the event list memory by using the ID. In the case where a pertinent element is not found the event processor decides failed in creation and the process proceeds to Step ST . In the case where a pertinent element is found the ID manager gives the event list contained in the element found to the event processor and the event processor uses the event list and the event differential list contained in the received data to generate an event list to be registered. Specifically the event name of the element with the operation type indicating ADD is added to the event list given by the ID manager and deletes the event name of the element with the operation type indicating DEL. Then the event processor stores the generated event list and decides successfully generated and the process proceeds to Step ST

Step ST The event processor refers to the event list memory by using the event list stored at Step ST or Step ST to check whether a matching element exists. In the case where the element exists decision of matched is made the process proceeds to Step ST . In the case where the element does not exist decision of no matching is made and the process proceeds to Step ST .

Step ST The event processor transmits a response message through the communicator to the GUI apparatus . The ID that is obtained in Step ST or is given in Step ST from the ID manager or is given in Step ST from the ID manager is stored in the response message. It is to be noted that in the case of failed in retrieval in Step ST or failed in creation in Step ST an invalid ID is stored.

Since the operation of the service apparatus at the time of occurrence of an event of this embodiment is the same as that of the Embodiment 1 description thereof is omitted here.

Since the operation of the GUI apparatus at the time of occurrence of notification of an event from the service apparatus of this embodiment is the same as that of the Embodiment 1 description thereof is omitted here the GUI apparatus the service apparatus and the event processor are substituted with the GUI apparatus the service apparatus and the event processor respectively .

As has been described the GUI apparatus of the Embodiment 3 generates a difference by using the event list registered with the event list memory before transmitting the event list to the service apparatus . In a case where the size of the difference is smaller the ID for uniquely identifying the event list used for creation of the difference and the generated difference are transmitted to the service apparatus and the service apparatus uses the received ID and difference as well as the event list stored on the event list memory to generate an event list to be registered. Hence the amount of communication is reduced as compared to the case in which the event list itself is transmitted.

Although in the description of this embodiment the number of elements in the difference in event list is referenced to select a minimum amount of information the data size may be used for a reference for the amount of information for example.

In the description of this embodiment character strings such as ADD and DEL are set in the operation type however the effect obtained from this embodiment is the same when numerical expressions are used instead.

Furthermore in this embodiment description is given of a procedure in which addition is made with respect to the GUI apparatus and the service apparatus of the Embodiment 1 needless to say however the effects of this embodiment are available by adding a similar procedure to the GUI apparatus and the service apparatus of the Embodiment 2.

As described above in the communication system of the Embodiment 3 in a case where an event list unregistered with the GUI apparatus side event list memory is to be transmitted to the service apparatus the GUI apparatus side event processor is configured to generate a difference between the event list to be transmitted and the event list registered with the GUI apparatus side event list memory and in a case where an amount of information indicating the generated difference is smaller than an amount of information of the event list to be transmitted the GUI apparatus side event processor transmits to the service apparatus the generated difference and the ID for uniquely identifying the event list registered with the GUI apparatus side event list memory the event list being used for creating the difference in place of the event list to be transmitted and wherein in a case where the ID and the difference are received from the GUI apparatus the service apparatus side event processor obtains the event list from the service apparatus side event list memory by using the ID generates a new event list by using the obtained event list and the difference and processes the newly generated event list in place of the event list received from the GUI apparatus. Therefore further reduction in amount of communication is achieved between the GUI apparatus and the service apparatus.

In the above described Embodiments 1 2 and 3 the events that have occurred at the service apparatus the service apparatus and the service apparatus are subjected to determination whether to notify at the event processor the event processor and the event processor immediately followed by the operation of notifying the GUI apparatus the GUI apparatus and the GUI apparatus . The cycle and frequency of occurrence of events are often defined by the specifications of the service apparatus i.e. the origin of the events whereas depending on the specifications of the GUI apparatus a longer cycle and a fewer frequency of notification are sometimes desired than those defined in the specifications of the service. However it is not desired to change the specifications of the service apparatus for the sake of convenience of the GUI apparatus. Thus in Embodiment 4 a mechanism is added in which notification cycles are set per event by the GUI apparatus such that the notification cycles are rendered changeable without changing the specifications of the service apparatus. Further events of the same notification cycle are notified collectively thus reducing the number of communication between the service apparatus and the GUI apparatus.

The system has a configuration in which a GUI apparatus and a service apparatus are connected with each other through a network .

The GUI apparatus includes a display a GUI logic processor a request processor a communicator an event processor a GUI apparatus side event processor an event list memory and an interface . Since the display the request processor the communicator the event list memory and the interface have the same configurations as those of the Embodiment 1 description thereof is omitted here.

The GUI logic processor is a device that is configured to construct a GUI to be displayed on the display and collaborate with the interface to perform input and output. The GUI logic processor is also configured to issue a request through the request processor to the service apparatus configured to change the GUI to be displayed on the display based on the event notified from the event processor and configured to perform output other than the GUI through the interface . The GUI logic processor provides the event processor with the notification cycles of the events also when events for use in screens are provided to the event processor

The event processor is a device configured to execute a process relating to events in the GUI apparatus . The event processor has additional functions with respect to the event processor of the Embodiment 1 of setting notification cycles per event and of handling notification including a plurality of events.

The service apparatus includes a service processor a request processor a communicator an event processor a service apparatus side event processor an ID manager an event list memory and an event accumulator . Since the service processor the request processor the communicator and the ID manager have the same configurations as those of the Embodiment 1 description thereof is omitted here.

The event processor is a device configured to execute a process relating to events in the service apparatus . The event processor has additional functions with respect to the event processor of the Embodiment 1 of setting the notification cycles of events and of notifying a plurality of events collectively. The event accumulator is a device for temporarily storing events to be notified.

Next description is given of operations of the GUI apparatus and the service apparatus with reference to .

In Steps ST ST ST ST and ST the operation of the event processor of the Embodiment 1 is not different from the operation of the event processor of the Embodiment 4 except that the event list is changed to the event list and that the communication is performed with the service apparatus and not the service apparatus . Thus description of the steps similar to those of the Embodiment 1 is omitted here.

Step ST The GUI logic processor provides the event processor with an event to be used in the post transition screen and the notification cycle. The event processor generates an event list by using a combination of zero or more events and the notification cycle s that are provided from the GUI logic processor and temporarily stores the generated event list.

Step ST The event processor conducts search as to whether an element matching the event list is registered with the event list memory by using the event list temporarily stored at Step ST . As a result in the case of not registered the process proceeds to Step ST . In the case of registered the ID stored in the pertinent element is obtained and the process proceeds to Step ST .

Step ST The event processor transmits the event list through the communicator to the service apparatus

Step ST The event processor registers with the event list memory a combination of the ID received in Step ST and the event list temporarily stored at Step ST

In Steps ST ST ST ST ST ST ST ST and ST the operation of the event processor of the Embodiment 1 is not different from the operation of the event processor of the Embodiment 4 except that the communication is performed with the GUI apparatus and not the GUI apparatus . Thus description of these steps is omitted here.

Step ST The event processor refers to the event list memory by using the event list stored at Step ST to check whether a matching element exists. In the case where the element exists decision of matched is made and the process proceeds to Step ST . In the case where the element does not exist decision of no matching is made and the process proceeds to Step ST . The difference from Step ST of the Embodiment 1 is that notification cycles are also used for matching determination on event lists.

Step ST The event processor entirely clears event queues that exist in the event accumulator . Notification cycles are settable in the event queues to be described later with reference to and this setting is also cleared. The event processor refers to the notification cycles of the elements of the event list to check whether an event queue relating to the cycles exists in the event accumulator . In the case where no queue exists the event processor generates an event queue in the event accumulator or sets a notification cycle in an event queue in which a notification cycle has not been set. It is to be noted that in the case where the cycle is 0 ms accumulation to event queues is not performed and thus an event queue is not generated. Finally the event processor prepares and starts a timer that ignites per notification cycle i.e. that generates a trigger for notification per notification cycle for each event queue in which a notification cycle is set.

In Steps ST ST ST and ST the operation of the event processor of the Embodiment 1 is not different from the event processor of the Embodiment 4 except that Step ST is followed by Step ST in the case where decision of to be notified is made and that the communication is performed with the service apparatus and not the service apparatus . Thus description of these steps is omitted here.

Step ST The event processor obtains the notification cycle of an event from the stored event list based on the name of the event given from the service processor . In the case where the cycle is 0 ms the process proceeds to Step ST . In the case where the cycle is other than 0 ms the process proceeds to Step ST .

Step ST The event processor uses the cycle obtained in Step ST to identify a pertinent event queue in the event accumulator and stores the event given from the service processor .

In the illustrated example two sets of ServiceB EventX are stored in an event queue and two sets of ServiceA EventC and one set of ServiceA EventA are stored in an event queue . In addition a timer that ignites at 200 ms is associated with the event queue and a timer that ignites at 100 ms is associated with the event queue

In a case where any of the timers ignites with the event queues and the timers associated with each other in this manner the event processor completely takes out events from the event queue corresponding to the timer ignited and notifies the GUI apparatus through the communicator . Then the timer is started by using the cycle set for the event queue. In other words the timer stops operation once the ignition is ended and thus a cyclical operation is performed to start the timer again and to take out events from the event queue. In the case where the event queue is empty notification is not performed. These operations are not illustrated.

In a case where a plurality of events is notified from the service apparatus and such notification including the plurality of events reaches the GUI apparatus the communicator gives the received contents to the event processor and the event processor gives the individual events contained in the received contents to the GUI logic processor . These operations are not illustrated.

As has been described the GUI apparatus of the Embodiment 4 transmits an event list including the notification cycles of events to the service apparatus . The service apparatus provides an event queue based on the notification cycle contained in the received event list to start a timer accumulates an event in the event queue based on the notification cycles per event at the time of occurrence of the event and when the timer ignites collectively notifies the events accumulated in the event queue. The GUI apparatus upon receipt of a notification having a plurality of events stored therein gives the events to the GUI logic processor . This allows for reduction in number of notification as compared with the case in which notification is performed at each occurrence of an event.

Further while in the above description an event is constantly accumulated if the event is to be notified oftentimes the GUI apparatus need not be notified of a plurality of pieces of the same event. Thus in a case where event queues to be accumulated are scanned prior to the operation of Step ST and the same event has been accumulated accumulation of the event may be skipped. This operation is depicted in . Herein since the steps other than the step of checking whether the event exists in Step ST are the same as those depicted in description is focused on Step ST .

Step ST The event processor checks whether or not the same event is accumulated in an event queue in a case where the cycle is other than 0 ms as a result of the cycle check of Step ST . As a result in the case where the same event is accumulated the process transits as it is to Step ST for termination. In the case where the same event is not accumulated the process transits to Step ST . This allows for reduction in number of events to be notified by set cycles.

In the case where the same event is accumulated in an event queue the accumulated event may be deleted and the event to be accumulated may be freshly added to the event queue. This operation is depicted in . Herein since the steps other than the step of deleting the event in Step ST are the same as the steps depicted in description is focused on Step ST .

Step ST The event processor deletes the same event already accumulated in the case where the step of checking the existence of an event in Step ST reveals that the same event has already been accumulated and the process proceeds to Step ST . Such an operation allows for chronological accumulation into event queues based on the time of occurrence of the events.

In the above description event names are used as information for uniquely identifying the events additionally in a case where events have some kind of parameters such parameters may be used together for decision whether to perform accumulation into event queues. For example a case where ServiceA EventA has two parameters of param a param b can be assumed.

Here suppose that an event of ServiceA Event 2 200 occurs in a state where an event of ServiceA Event 1 200 has been accumulated in an event queue. In Step ST of checking the existence of an event in the above described operations of the values of the parameters are also used to determine the identity of the event. The event processor determines that ServiceA Event 1 200 and ServiceA Event 2 200 are different events. As a result ServiceA Event 2 200 is stored in the event queue.

It is to be noted that while in the above description the unit of ms is used for the notification cycle of the event list the unit may be omitted in the case where the specifications of description of the event list is clearly defined between the GUI apparatus and the service apparatus . This means that the same effects as those of this embodiment are achieved when numerical values instead of character strings are used for the notification cycle .

In the Embodiment 4 additional procedures are described with respect to the GUI apparatus and the service apparatus of the Embodiment 1 however needless to say the effects of this embodiment are achieved by adding similar procedures to the GUI apparatus the GUI apparatus the service apparatus and the service apparatus of the Embodiments 2 and 3.

Moreover in a case where the notification cycle differs while the name of the event is the same in the expression of difference in the Embodiment 3 a type for substitution dedicated to notification cycles may be added to the operation type such that the size of difference is reduced as compared to the case in which the operation type has two kinds of DEL and ADD. For example this is described with reference to .

In a cycle 100 ms is set with respect to ServiceA EventA. Consider the description of difference in the case where the cycle is changed to 200 ms with the event list of being used in the service processor .

Meanwhile REPLACE is added to the operation type. This is dedicated to rewriting of the notification cycles of event lists. The event differential list may be described as follows 

As can be seen the size of difference is smaller when the type dedicated to substitution of notification cycles is used.

As described above in the communication system of the Embodiment 4 the GUI apparatus side event processor is configured to add to each event information on a notification interval of the service apparatus when transmitting the event list to the service apparatus wherein the service apparatus further includes an event accumulator that stores an event queue corresponding to the notification interval of each of the events and wherein in a case where the event to be generated based on the service of the service processor is the event notified from the GUI apparatus the service apparatus side event processor stores the event in the event queue corresponding to the notification interval of the event and when a notification timing of the event queue comes notifies the GUI apparatus of the event stored in the event queue. Therefore the notification cycle is changeable without changing the specifications of the service apparatus. In addition the number of communication is reduced between the service apparatus and the GUI apparatus.

Further in the communication system of the Embodiment 4 when storing the event in the event queue in a case where the same event as one to be stored has already been stored the service apparatus side event processor skips storing the event to be stored or deletes the already stored event and stores the event to be stored. Thus the number of events to be notified by set cycles is reduced.

Moreover in the communication system of the Embodiment 4 the service apparatus side event processor is configured to in a case where the event has a parameter make an identify determination as to whether the same event as one having the parameter has already been stored in the event queue. Thus in a case where the display is changed in the GUI apparatus based on the value of the parameter contained in the event the events to be used are not discarded on the side of the service apparatus and the GUI is changeable as intended.

It should be appreciated that the present invention encompasses within the scope of the invention free combination of the embodiments or modification of any constituent component of the embodiments or omission of any constituent components from the embodiments.

As described above the communication system according to the invention is configured to have a server provided with service logic and a client provided with a GUI which collaborate with each other through a network. Therefore the system is suitable for an embedded device having a GUI.

