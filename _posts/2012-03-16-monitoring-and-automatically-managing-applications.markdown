---

title: Monitoring and automatically managing applications
abstract: This document generally describes techniques, methods, systems, and computer program products for monitoring and managing applications running on virtual machines (VMs).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09176759&OS=09176759&RS=09176759
owner: Google Inc.
number: 09176759
owner_city: Mountain View
owner_country: US
publication_date: 20120316
---
This application claims priority under 35 U.S.C. 119 e 1 to U.S. Provisional Application Ser. No. 61 453 536 filed on Mar. 16 2011 the entire contents of which is incorporated herein.

This document generally describes techniques methods systems and computer program products for monitoring and managing applications running on virtual machines VMs .

Cloud computing is network based computing in which typically large collections of servers housed in data centers or server farms provide computational resources and data storage as needed to remote end users. Some cloud computing services provide access to software applications such as word processors and other commonly used applications to end users who interface with the applications through web browsers or other client side software. Users electronic data files are usually stored in the server farm rather than on the users computing devices. Maintaining software applications and user data on a server farm simplifies management of end user computing devices. Some cloud computing services allow end users to execute software applications in VMs.

This document generally describes monitoring and automatically managing instances of applications that are running on one or more VMs. For example if one more instances of an application that are running on one or more VMs are experiencing a high volume of user requests a computer system can respond by instantiating additional instances of the application on existing or new VMs so as to assist with the user requests.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Various advantages can be provided by the disclosed systems and methods. For example performance degradations of applications running on VMs can be more quickly and accurately identified. In another example adjustments to application and VM deployments can be made more responsive to actual user demand instead of having to guess at a potential cause of fluctuations in metrics like CPU and memory usage.

Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

This document generally describes techniques methods systems and computer program products for monitoring and automatically managing applications running in a virtual environment such as on a VM. A VM is itself an application that runs on a host machine e.g. a computer server and that provides a simulated version of the underlying host machine hardware or a different computer architecture e.g. a VM running on a Solaris server may simulate the Solaris server a PC or any other hardware . A host machine can include a host operating system OS that manages VMs running on the host machine. A host machine can run any number of VMs concurrently such as a portion of a VM e.g. a VM distributed over multiple host machines one VM and multiple VMs. Each VM can be executed on a host machine in a separate environment that is isolated from other VMs running on the host machine. Such separate environments can be referred to as sandboxes or containers. A VM can run a variety of applications using the virtualized hardware that is provided by the VM such as a web server application that serves requests for web accessible documents from client devices.

Various techniques have been used to monitor the performance of VMs such as host level monitoring of processing cycles and memory used by a VM on a host machine. For example a host machine running a VM can monitor the number of cycles of one or more central processing units CPUs of the host machine that are used for operation of the VM. Host level statistics have been used to determine the status of a VM e.g. VM is overloaded which can serve as a basis for increasing or decreasing the number of VMs that are handling a particular task such as serving documents for a website e.g. www.example.com .

However such host level statistics can serve as an inaccurate performance metric for determining whether to increase or decrease a number of VMs performing various tasks. For instance fluctuations in CPU usage by a VM can be caused by a variety of things that may be unrelated to the VM s performance with regard to a particular task. For example a VM that is running a web server application may use more CPU cycles to serve a greater volume of client requests but such an increase in CPU usage does not necessarily mean that the web server application has experienced a degradation in performance e.g. an increase in response latency . Instead the web server can have an average response latency during periods of high request volume when CPU usage may increase that is substantially the same as an average response latency during periods of low request volume when CPU usage may decrease . CPU usage by a VM can also change for reasons unrelated to a particular application. For instance the VM itself and or other applications running on the VM may cause fluctuations in CPU usage by the VM. Using host level statistics such as CPU usage can provide an inaccurate indication as to the performance of a VM and or the applications running on the VM.

This document describes techniques methods systems and computer program products for more accurately monitoring application performance on VMs and for more precisely managing VM and application deployment to meet various performance criteria. In particular application level data for applications running on VMs can be obtained and used to manage application and VM distribution across various host machines and to detect anomalies that may indicate errors in host machines VMs and or applications. Application level data can more accurately indicate the performance of VMs and or applications running on VMs than host level statistics.

For instance if the average latency for a web server application increases to a point where it exceeds a predetermined threshold e.g. average latency is greater than 100 s a determination can be made that the web server application is overloaded with requests and that additional web server applications should be instantiated to assist with incoming client requests. Accordingly this performance degradation can be remedied by automatically instantiating additional VMs across one or more host machines to run additional web server applications which can decrease the request load for each web server application and allow for incoming client requests to be more quickly served. In contrast host level statistics e.g. CPU usage may not provide an indication that the web server application is overloaded e.g. CPU usage may not spike when the average latency is around a predetermined threshold level or may provide an indication that can be attributed to any of a variety of sources such as a VM itself and other applications running on a VM.

Application level data that is obtained and used can vary depending on the particular application for which the data is collected. For example application level data for a frontend application e.g. web server application can include data that provides an indication of how the frontend application is performing its particular tasks e.g. serving client requests . For instance data collected for frontend applications can include data regarding request latency amount of time it takes to serve a request request volume e.g. number of request per second an amount of data transferred per request e.g. bytes transferred per request and a rate at which errors are encountered by the web server application e.g. one error encountered per every one thousand requests . In another example data obtained for a backend applications e.g. database applications can include data regarding a number of expensive queries queries that take longer than a threshold amount of time to run over a given time period.

Application level data can be obtained through the configuration of VMs to use of agents and application specific plugins to collect application level data and to report the collected application level data to a computing system that is external to the VMs. As used herein plugin is a broad term encompassing its plain and ordinary meaning including but not limited to a portion of code that is constructed to communicate with a particular application e.g. using one or more application programming interfaces APIs of the particular application . Plugins can communicate with applications to obtain performance related data from the applications such as the amount of time the application has recently taken to perform various tasks that are specific to the applications.

As used herein the term agent is a broad term encompassing its plain and ordinary meaning including but not limited to a portion of code that is deployed inside a VM as part of the OS and or as an application run by the OS to manage collection of application level data by plugins. An agent can direct plugins to run and collect data from applications within a VM and can receive the collected data from the plugins. An agent can provide collected application level data to a computing system that is configured to receive aggregate and analyze application level data from agents deployed across various VMs and or host machines. An agent can provide application level data obtained from application monitoring on a VM to a computing system using a standard API and with appropriate authentication so as to notify the computing system that the data is coming from a particular VM.

A computing system can include one or more computing devices. The phrase computing device as used herein encompasses its plain and ordinary meaning including but not limited to computer servers desktop computers laptop computers and or distributed computing systems. Computing systems can receive application level data from agents over time and can store such data with time coding information e.g. timestamps so as to provide time series data. Computing systems can be configured to manage the instantiation of VMs and applications on various host machines. Management of VMs and applications can include providing a VM with configuration information that the VM and or agents can use to run a user defined set of applications and or plugins and to obtain user specified application level data from particular applications.

Using data received from agents computing systems can monitor for various conditions and or events associated with applications such as performance degradations with user specified triggers. Triggers can include rules and or conditional statements that are run by a computing system on time series data for applications and that when satisfied can indicate that a particular condition exists within applications and or VMs. For example a trigger can be used to identify when the average latency over the last two minutes across instances of a particular application running on various VMs is greater than 100 s. Satisfaction of this example trigger can be used by the computing system to identify when the instances of the particular application are more heavily loaded than normal. Triggers can be user defined and configurable in any of variety of formats such as a Boolean statement that uses application level data variables e.g. average request latency .

A trigger can be associated with one or more actions that when the trigger is satisfied are performed by a computing system. For example if the example trigger discussed above regarding the average latency exceeding 100 s is satisfied the computing system can cause more instances of the particular application being monitored to be spawned but at a rate of not more than two instances per minute this is an example of an action . In another example if the number of requests served per second average across all the particular application falls below one per second for over five minutes this is an example of a trigger a computing system can reduce the number of instances of the particular application by one instances per minute this is another example of an action . Such a trigger and action framework can permit the computing system to automatically scale VM and application deployment so as to efficiently meet present computational demands.

A computing system can additionally use the time series data from applications to automatically detect anomalous events such as hardware and or software errors that may require an application VM and or host machine to be reset and or repaired. Computing systems can also correlate application level data to other variables that may offer some kind of reasoning as to the cause of an anomalous event. For example a sudden spike in latency from a frontend application can be detected and correlated to a sudden increase in hard disk access latency on a host machine.

Each host machine executes a host operating system or other software that virtualizes the underlying host machine hardware and manages concurrent execution of one or more virtual machines. For example the host operating system is managing virtual machine VM and VM while host OS is managing a single VM . Each VM includes a simulated version of the underlying host machine hardware or a different computer architecture. The simulated version of the hardware is referred to as virtual hardware e.g. virtual hardware and . Software that is executed by the virtual hardware is referred to as guest software. In some implementations guest software cannot determine if it is being executed by virtual hardware or by a physical host machine. If guest software executing in a VM or the VM itself malfunctions or aborts other VMs executing on the host machine will not be affected. A host machine s microprocessor s can include processor level mechanisms to enable virtual hardware to execute software applications efficiently by allowing guest software instructions to be executed directly on the host machine s microprocessor without requiring code rewriting recompilation or instruction emulation.

Each VM e.g. VMs and is allocated a set of virtual memory pages from the virtual memory of the underlying host operating system and is allocated virtual disk blocks from one or more virtual disk drives for use by the guest software executing on the VM. For example host operating system allocates memory pages and disk blocks to VM and VM and host operating system does the same for VM . In some implementations a given VM cannot access the virtual memory pages assigned to other VMs. For example VM cannot access memory pages that have been assigned to VM . A virtual disk drive can be persisted across VM restarts. Virtual disk blocks are allocated on physical disk drives coupled to host machines or available over the internal network for example. In addition to virtual memory and disk resources VMs can be allocated network addresses through which their respective guest software can communicate with other processes reachable through the internal network or the Internet . For example guest software executing on VM can communicate with guest software executing on VM or VM . In some implementations each VM is allocated one or more unique Internet Protocol IP version 4 or version 6 addresses and one or more User Datagram Protocol UDP port numbers. Other address schemes are possible.

A VM s guest software can include a guest operating system e.g. guest operating systems and which is software that controls the execution of respective guest software applications e.g. guest applications and within the VM and provides services to those applications. For example a guest operating system could be a variation of the UNIX operating system. Other operating systems are possible. Each VM can execute the same guest operating system or different guest operating systems. In further implementations a VM does not require a guest operating system in order to execute guest software applications. A guest operating system s access to resources such as networks and virtual disk storage is controlled by the underlying host operating system.

By way of illustration and with reference to virtual machine when the guest application or guest operating system attempts to perform an input output operation on a virtual disk initiate network communication or perform a privileged operation for example the virtual hardware is interrupted so that the host operating system can perform the action on behalf of the virtual machine . The host operating system can perform these actions with a process that executes in kernel process space user process space or both.

The kernel process space is virtual memory reserved for the host operating system s kernel which can include kernel extensions and device drivers for instance. The kernel process space has elevated privileges sometimes referred to as supervisor mode that is the kernel can perform certain privileged operations that are off limits to processes running in the user process space . Examples of privileged operations include access to different address spaces access to special functional processor units in the host machine such as memory management units and so on. The user process space is a separate portion of virtual memory reserved for user mode processes. User mode processes cannot perform privileged operations directly.

In various implementations a portion of VM network communication functionality is implemented in a communication process e.g. communication process . In some implementations the communication process executes in the user process space e.g. user process space of a host operating system e.g. host operating system . In other implementations the communication process can execute in the kernel process space e.g. kernel process space of the host operating system. There can be a single communication process for all VMs executing on a host machine or multiple communication processes one for each VM executing on a host machine. In yet further implementations some portion of the communication process executes in the user process space and another portion executes in the kernel process space.

Each of the VMs and can include various mechanisms for obtaining performance statistics for the applications and as described in greater detail with regard to below. For example application plugins can collect performance statistics the applications and and provide the performance statistics to agents running on or as part of the guest operating systems and . The agents can package e.g. add metadata identifying an application VM and or host machine associated with the performance statistics and report collected performance statistics to a computing system . The computing system can be a virtual computing device e.g. a VM and or a physical computing device e.g. a rack mounted server that collects and evaluates the performance statistics for the applications and running on VMs and . The computing system can evaluate application performance using various triggers and associated actions. Triggers can be evaluated for individual instances of an application e.g. the application and or for collections of application instances e.g. the applications and .

Similar to the VMs described above with regard to the VMs and can run any of number of applications. For example the VM is depicted as running instances of applications A and B and the VM is depicted as running instances of applications A and C. The applications A C can be any of a variety of applications such as web server applications and database applications. As demonstrated by instances and of application A the VMs and can run concurrent and redundant instances of the same application.

Each of the applications and can have one or more associated plugins that are running on the respective VMs . For instance plugins are running in association with application instances and plugins are running in association with application instances . Plugins include code that interacts with an application through a variety of mechanisms such as a common application programming interface API . Plugins can add additional features and or functionality to an application without having to directly alter the application. For example the plugin can collect and report statistics regarding operations performed by the instance of application A such as a number of requests received by the application instance over a period of time and an average amount of time the application instance took to process the received requests.

The plugins and can interact with and or obtain information from applications and through on one or more services that the applications make available to the plugins. A service includes one or more processes of an application that receive and process requests from plugins communicated according to an associated API. For example the plugin can request that a service for application provide an indication when a request is received by the application and an indication when a response is provided by the application . Based on such a request the service can provide notifications to the plugin when requests are received and responses are provided by the application . Information provided to plugins by application services can include indicators of various events e.g. request received that a plugin may timestamp and use to generate various performance statistics. Information provided to plugins can also include various performance statistics that are calculated by an application and or its associated plugin service.

The VMs and include agents and respectively that are configured to receive performance related information e.g. performance statistics indicators of various events for an application from the plugins and . The agents and can be code that is running on and or part of an operating system for the VMs and e.g. the guest operating systems and . The agents and can collect performance related information from the plugins and respectively and provide updates regarding the performance of the applications and and or the VMs and to the computing system . Such updates can be provided to the computing system in a variety of ways such as continuously e.g. forward performance information as it is received from plugins at various timed intervals e.g. every second every 10 seconds and or as triggered by various events on the VMs and e.g. response to a client request completed .

The agents and can receive processed performance statistics from the plugins and and or they can process performance related information received from the plugins and . For example the agents and can aggregate information received from the plugins and over a period of time before sending the information as performance statistics to the computing system . Performance statistics can include a variety of information regarding various aspects of the performance of the applications and . For instance performance statistics can indicate a current request load being handled by one or more applications and or a current level of efficiency with which one or more applications are processing requests. For example performance statistics can include information indicating a number of requests received by an application over a period of time e.g. one second one minute information indicating an average latency for an application to process received requests over a period of time information indicating an average amount of data transferred e.g. kilobytes megabytes by an application per received request over a period of time information indicating a number of errors encountered by an application over a period of time information indicating a number of items that are currently pending in a task queue for an application to process indicating a number of tasks from a task queue that are performed by an application over a period of time and or information indicating a number of operations e.g. database queries taking more than a threshold amount of time to process that are performed by an application over a period of time. Other performance statistics can also be used and provided to the computing system by the agents and .

The agents and can add various metadata to performance statistics before they are provided to the computing system such as information that identifies an application e.g. identifying instance of application A and or a VM e.g. VM . The agents and can provide performance statistics and respectively to the computing system .

The computing system receives the performance statistics from the VMs and through an interface e.g. a network interface and provides the performance statistics to a virtual machine manager . The virtual machine manager can be any of a variety of computing modules e.g. hardware software that is executed on the computing system . The virtual machine manager uses the received performance statistics to monitor the performance of the VMs and and their associated applications and . The virtual machine manager uses triggers to determine when to perform various actions with regard to the VMs that the manager is monitoring which in the present example include VMs and . The triggers include threshold conditions that when satisfied indicate a problem of some sort that the manager may be able to remedy or alleviate through one or more of the actions . The triggers can be application specific. For instance there can be particular triggers that apply to the application A that are different from triggers that are applied to application B. The triggers can be applied to individual application instances e.g. instance of application A and or to particular groups of the application instances e.g. application A instances running on particular host devices to all application A instances . Triggers can also be applied across applications. For example a trigger can be applied to performance statistics for all frontend applications to all applications running on a particular VM and or to all applications running on a particular host device which may be running multiple VMs.

The triggers can be used to identify various conditions. For example the following trigger can be used to identify when a high error rate has been encountered for frontend applications average sum errors per second sum requests per second over 60 seconds 50 . Such a trigger may indicate that anomalous behavior is occurring with one or more frontend applications one or more VMs that are running the frontend applications and or one or more host devices that are running the VMs. The virtual machine manager may apply one or more triggers to identify the source of the anomaly and then apply one or more of the actions to the identified entity such as restarting and or rebooting the entity.

In another example satisfaction of the following trigger may indicate that instances of application A should be scaled up increased average latency per request over 5 minutes 100 ms. In response to determining that such an example trigger has been satisfied the computing system can perform one or more of the actions that causes one or more instances of application A to be launched in one or more VMs.

The virtual machine manager can store performance statistics in a statistic repository . Stored performance statistics can be timestamped and used to perform time based monitoring of the VMs and . Time based monitoring can be used to detect performance changes overtime. As indicated above the triggers can examine various performance statistics over various time ranges e.g. last 60 seconds last 5 minutes last 60 seconds compared with average value over 60 second period .

At the plugin associates with one or more applications that are running on the VM . For example the plugin can provide a request to receive performance information to a particular instance of an application that is running on the VM . For example the plugin can provide a request to the application A to receive particular performance information from the application A . In some implementations the plugin can be associated with an application when the plugin is instantiated by the VM .

The plugin can collect and provide performance statistics for the application with which the plugin is associated . For example as discussed above the plugin can collect performance statistics for the application and can provide the performance statistics to the agent . The performance statistics can be provided as they are obtained by the plugin and or they can be aggregated by the plugin and provided at various time intervals to the agent .

The agent can receive the performance statistics from the plugin . The agent can add metadata to the performance statistics and can provide the performance statistics with metadata to the computing system . For example the agent can add metadata that identifies the application to which the performance statistics pertain and or the VM that is running the application. As discussed above the agent can provide the performance statistics to the computing system as they are received and or can collect the performance statistics and provide them in batches at various intervals of time.

At performance statistics are received by the computing system . For example performance statistics can be received for an application running on the VM such as the applications A B that are running on the VM and or the applications A and C that are running on the VM . Performance statistics can be provided to the computing system using the plugin associated with the application and the agent running on the VM . For example performance statistics for the application A running on the VM can be obtained by the plugin and provided to the agent on the VM . The agent can at various intervals of time and or in response to various events related to the application A running on the VM provide the performance statistics to the computing system which can receive the performance statistics using the interface .

As described above performance statistics received by the computing system can include any of a variety of information regarding the operation of one or more applications on the VM such as information indicating a number of requests received by an application over a period of time information indicating an average latency for an application to process received requests over a period of time information indicating an average amount of data transferred by an application per received request over a period of time information indicating a number of errors encountered by an application over a period of time information indicating a number of items that are currently pending in a task queue for an application and or information indicating a number of tasks from the task queue that were performed by an application over a period of time information indicating a number of operations e.g. database queries taking more than a threshold amount of time to process that are performed by an application over a period of time or any combination thereof.

The received performance statistics can be time coded e.g. associated with a timestamp when they are received . The time coding can be used to identify performance statistics that have been received over one or more periods of time. For example the computing system can identify performance statistics received over a period of time for one or more of the applications and or to determine whether one or more of the triggers have been satisfied and whether one or more of the associated actions should be performed.

Performance statistics can be repeatedly received and time coded by the computing system and at various times e.g. in response to a period of time having elapsed in response to an event occurring can aggregate the performance statistics for analysis . For example performance statistics for all instances of a particular application e.g. application A running on VM and application A running on VM can be aggregated by the computing system to determine whether the particular application should be scaled up number of instances increased scaled down number of instances decreased left at its current level and or whether anomalous behavior is being experienced that may require one or more instances to be restarted rebooted. In another example performance statistics for a particular instance of an application e.g. application A running on VM and or a particular VM e.g. VM can be aggregated over a period of time e.g. previous 5 minutes 10 minutes 20 minutes 30 minutes 45 minutes 1 hour and compared with previous aggregations of performance statistics to determine how performance has changed over time e.g. improved performance degraded performance .

The computing system can determine whether the received performance statistics satisfy one or more triggers . For example the computing system can determine whether the aggregated performance statistics satisfy one or more of the triggers . In another example one or more of the triggers can be used to determine whether an anomalous event has occurred with regard to the application and or the VM . Such a trigger may compare the performance statistics for the instance of the application running on the VM to be compared with performance statistics for other instances of the application running on other VMs.

In response to determining that one or more triggers have been satisfied the computing system can identify one or more actions to be performed in association with the application and or the VM . For example the computing system can identify one or more of the actions to be performed when one or more of the triggers are satisfied. For instance if a trigger from the triggers that monitors latency for application B to process requests is satisfied with regard to the instance of application B that is running on the VM an associated action can be selected from the actions that when performed causes the number of instances of application B to be increased at a rate of one new instance per minute. In a further example if an anomalous event has been detected with regard to the instance of the application running on the VM and or with regard to the VM itself the selected action can include restarting or rebooting the application running on the VM the VM itself and or a host machine that is running the VM .

The computing system can provide one or more instructions that will cause the identified action to be performed . The computing system can provide the one or more instructions to any of a variety of appropriate entities that control the execution of the application the VM or other VMs such as the VM or any component running thereon such as the agent a host machine that is running the VM and or another VM that is separate from the VM . The instruction can instruct the appropriate entities e.g. VM host machine and or other VM to perform the identified action such as shutting down the VM instantiating another instance of the application e.g. on the VM and or the other VM instantiating another VM and or allocating more less computing resources e.g. processor cycles network bandwidth memory to the application and or to other applications that are running on the VM .

In response to receiving the instruction the VM host machine the other VM other appropriate entities e.g. host machines host OS VMs or any combination thereof can perform the identified action as instructed by the computing system . For example the computing system can instruct the host machine to shut down the VM and can instruct the VM to shut down one or more of the guest applications . In another example the computing system can instruct the VM to instantiate an instance of the application B.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. Additionally the processor may be implemented using any of a number of architectures. For example the processor may be a CISC Complex Instruction Set Computers processor a RISC Reduced Instruction Set Computer processor or a MISC Minimal Instruction Set Computer processor. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT Thin Film Transistor Liquid Crystal Display display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provide in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM Single In Line Memory Module card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provide as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor that may be received for example over transceiver or external interface .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to device which may be used as appropriate by applications running on device .

Device may also communicate audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smartphone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN peer to peer networks having ad hoc or static members grid computing infrastructures and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few implementations have been described in detail above other modifications are possible. Moreover other mechanisms for monitoring VMs may be used. In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. Other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

