---

title: Automated mobile application verification
abstract: Disclosed are various embodiments for automatically testing and verifying mobile applications. A mobile application is obtained from a source entity. The mobile application is automatically installed in different mobile computing devices in a testing environment. Execution of the mobile application is automatically initiated in the different mobile computing devices. Whether the mobile application meets performance criteria is automatically verified for each of the different mobile computing devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152541&OS=09152541&RS=09152541
owner: Amazon Technologies, Inc.
number: 09152541
owner_city: Seattle
owner_country: US
publication_date: 20120322
---
Applications often suffer from defects. Developers may put their applications through a quality assurance process in order to discover and correct defects before the applications are released to the public. Application defects may result from errors in the application code itself from incompatibilities with the device on which it is executing and or from other sources.

The present disclosure relates to automated mobile application verification. It can be extremely difficult for an application developer to test an application on all platforms or devices on which the application is going to be executed. Mobile devices in particular suffer from an unwieldy proliferation of different devices and platforms. As technology rapidly advances new versions of mobile devices are released in a matter of months. Consequently it can be difficult for application developers to acquire the mobile devices needed for exhaustive device compatibility testing or to conduct such testing in a scalable manner. Further application marketplaces may wish to conduct some form of quality assurance testing on third party applications before offering the applications for download. The quantity of applications and devices on which they are to be tested may make manual testing infeasible.

Various embodiments of the present disclosure facilitate automated verification of mobile applications. A multitude of different mobile devices may be available in a networked environment that is configured for automated testing. An application may be deployed to the mobile devices and executed. Various input data may be automatically supplied to the mobile devices with the state of the executing applications being monitored. For example the applications may be monitored for crashes unresponsiveness resource consumption activity progress and so on.

In one embodiment an application marketplace may employ such a testing environment to verify whether a third party application meets various performance criteria. In another embodiment such a testing environment may be made available to third party developers as a service which may be used for internal quality assurance evaluations. Although the present disclosure refers to mobile applications and mobile computing devices it is understood that the concepts of the present disclosure may be employed for applications executable in computing devices which are not mobile computing devices. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment in data communication with a testing environment and one or more computing devices by way of a network . The testing environment includes a plurality of mobile computing devices . . . N. The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a computing device such as a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a computing environment may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. The computing environment may include computing devices that may be located in a single installation or may be distributed among many different geographical locations.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include an application marketplace system a mobile application verification service a manual review service and other applications services processes systems engines or functionality not discussed in detail herein. The application marketplace system is executed to provide an online presence for the distribution of applications for use on mobile devices such as for example smartphones electronic book readers tablet computers personal digital assistants etc. Such an online presence may be referred to as an application marketplace. The application marketplace system may be operated by a proprietor who may enable distribution access by various third party developers. The third party developers may upload their mobile applications to the application marketplace system . The mobile applications may be added to the application marketplace and distributed to end users by the application marketplace system provided that the mobile applications meet certain criteria e.g. performance criteria including stability criteria compatibility criteria security criteria behavior criteria correctness criteria etc.

The mobile application verification service is executed to obtain mobile applications and perform various performance testing and verification procedures on them by way of an automated testing environment . To this end the mobile application verification service is configured to automatically deploy and install the mobile applications to various different mobile computing devices in the testing environment . The mobile application verification service causes the mobile applications to be executed in each of the different mobile computing devices and provides simulated user input to each executing instance. The performance of each of the instances is recorded. The performance may be provided to the developers or sources of the mobile applications. In one embodiment the performance may be employed as a verification check which may enable disable or further configure a listing for a mobile application in the application marketplace.

The manual review service may be executed to obtain a manual review of information to facilitate the automated verification by the mobile application verification service . In one example the manual review service may be employed for purposes of configuring simulated user input to be provided to the mobile applications executed under the auspices of the mobile application verification service . In one embodiment the manual review service submits video audio images or other output captured from the mobile application instances for manual review by independent contractors who may be compensated on a per task basis. As a non limiting example a screen capture from a mobile application instance may be provided to an independent contractor or other user to determine what type of user input may be appropriate or permissible for the mobile application instance at the particular state represented in the screen capture e.g. textual input of a certain type a set of permissible input gestures and so on.

The data stored in the data store includes for example mobile applications device images user input profiles evaluation criteria evaluation performance data static analysis data manual review data captured application output emulators device performance profiles application marketplace data and potentially other data. The mobile applications correspond to applications including executable code and data which may be offered in an application marketplace or may be otherwise submitted by third parties for verification or performance evaluation. In some cases the execution of a mobile application may be modeled as a sequence of activities or phases that involve the user. In one embodiment the mobile applications may be specially instrumented to facilitate collection of performance data.

The mobile applications may be supported by one or more different mobile computing platforms. In one non limiting example at least some of the mobile applications may be executable on the ANDROID platform and may correspond to the ANDROID package APK file format. In another non limiting example at least some of the mobile applications may be executable on the IPHONE platform and may correspond to the IPHONE package archive IPA file format.

The device images may correspond to predetermined configurations for the mobile computing devices to which the mobile computing devices are to be initialized before and after installation of a mobile application for testing purposes. In other words the device images may be employed to reset or reflash the respective mobile computing devices . In one embodiment the corresponding device image may be stored in each mobile computing device for fast access. In another embodiment the corresponding device image may be loaded on demand to the mobile computing device from the data store by way of the network .

The user input profiles include data used to generate simulated user input to be provided to the executing instances of the mobile applications . The simulated user input may include textual input touchscreen gesture input audio input image input and or other forms of user input. The user input profiles may be generated based at least in part on a static analysis of a mobile application a manual confirmation of user inputs obtained by way of the manual review service a randomized approach and or other approaches. The user input profiles may be the same for a particular mobile application across multiple different mobile computing devices or may differ across multiple different mobile computing devices .

The evaluation criteria include various criteria and thresholds about which the performance of each of the instances of the mobile applications is to be evaluated or verified. The evaluation criteria may include absolute criteria to be applied across mobile applications and or relative criteria to evaluate the performance of a single mobile application across different mobile computing devices . In various examples the evaluation criteria may pertain to the responsiveness of the mobile application the resources consumed by the mobile application e.g. processor time memory consumption network bandwidth consumption and so on whether the mobile application is permitted to access certain protected or secured resources whether the mobile application has crashed an expected progress in the mobile application measured by time activities and or other metrics and or other criteria. The evaluation criteria may for example include progress criteria stability criteria security criteria and or other criteria.

The evaluation performance data includes various data relating to the observed performance of the mobile applications . The evaluation performance data may be assessed against the evaluation criteria . To this end the evaluation performance data may record information related to the responsiveness of the mobile application activities reached by the mobile application time spent at one or more of the activities computing resources consumed at various times resources accessed and so on.

The static analysis data may record the results of a static analysis performed on a mobile application by the mobile application verification service . The static analysis data may indicate the types of user input that are elicited by the mobile application at various times or stages of execution. For example the static analysis data may indicate that a particular mobile application initially presents a screen of two buttons selection of one button leads to a first activity and selection of another button leads to a second activity. Further analysis may indicate that the first activity expects the user to fill in textual input in two text regions while the second activity expects the user to supply a swipe gesture. The static analysis data may also indicate what data the mobile application expects to obtain e.g. from a configuration file or other source.

The manual review data indicates the results of manual reviews of mobile application output. It may be desired that the user inputs identified by the static analysis be verified by a human user. Alternatively the static analysis may be unable to identify a particular user input field or the specific type of the user input. To this end the manual review service may present a screen capture video audio etc. captured from the mobile application to a human user to verify the type of user input elicited at certain point or activity in the mobile application . The manual review data stores the product of this manual review. In some cases the same output from a mobile application may be presented for manual review to multiple human users for quality assurance and or other purposes.

The captured application output may store the captured video images audio etc. from the mobile application . The captured application output may be used for manual review automatic analysis and identification of the user input solicited by the mobile application at a given state automatic identification of the current state of the mobile application and or for other purposes.

The emulators correspond to software that enables emulation or virtualization of a particular mobile computing device . The emulators may emulate the various hardware resources the performance characteristics and or other characteristics of a mobile computing device . In some cases the emulators may use the device performance profiles to facilitate emulation. The device performance profiles include data indicating the performance characteristics of particular mobile computing devices e.g. processor performance memory performance touchscreen performance etc. The device performance profiles may be in a format suitable to configure operation of the emulators .

The application marketplace data includes various data relating to the operation of the application marketplace system . The application marketplace data may describe the various mobile applications which are offered for download pricing for the mobile applications information about which mobile applications are compatible with which mobile computing devices metadata for the mobile applications and or other information.

The testing environment may include a networked array of physical mobile computing devices which are maintained for the purposes of automated testing and verification of mobile applications . The mobile computing devices may correspond to different device platforms e.g. BLACKBERRY IPHONE ANDROID etc. and different models of devices from a variety of manufacturers. Although a particular mobile application may be tested on multiple different mobile computing devices the testing environment may include multiple units of the same mobile computing device to support concurrent testing of multiple mobile applications .

Each mobile computing device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a laptop computer personal digital assistants cellular telephones smartphones music players web pads tablet computer systems game devices electronic book readers or other devices with like capability. Each mobile computing device may include a display . The display may comprise for example one or more devices such as liquid crystal display LCD screens gas plasma based flat panel displays organic light emitting diode OLED displays electronic ink displays or other types of display devices etc.

Each mobile computing device may be configured to execute various systems such as a testing management layer one or more mobile applications an operating system and or other systems. The testing management layer is executed to facilitate management of the particular mobile computing device for the mobile application verification service . To this end the testing management layer may be configured to enable initialization or reset of the mobile computing device installation of mobile applications performance monitoring and or other features related to management of testing. In one embodiment the testing management layer may incorporate the commercially available ANDROID Monkey application. The mobile applications correspond to the particular subset of the mobile applications from the data store which are loaded onto the mobile computing device for testing. The mobile applications may be configured to render a user interface on the display .

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. The components executed on the computing device for example include an application source system and other applications services processes systems engines or functionality not discussed in detail herein. The application source system is executed to transfer one or more mobile applications from a source entity e.g. a developer publisher and so on to the computing environment for testing and or verification by the mobile application verification service . In embodiments including an application marketplace the application source system may request that a mobile application be included in the application marketplace.

Next a general description of the operation of the various components of the networked environment is provided. To begin a developer publisher or other source entity employs the application source system to transfer a mobile application to the computing environment for testing and or verification for inclusion in the application marketplace. Alternatively the source entity may provide the mobile application for testing for internal quality assurance purposes.

The mobile application verification service initializes the testing environment by automatically initializing a system state of each one of the mobile computing devices to be used for testing. In one embodiment the mobile application verification service then automatically transfers and deploys the mobile application to several different mobile computing devices for testing. In another embodiment the mobile application verification service configures the mobile computing devices to obtain the mobile application from the application source system . The mobile application may be deployed to all of the different models and platforms of mobile computing devices or a selected subset of the mobile computing devices as desired. In one example the selected subset may correspond to a most popular set of mobile computing devices in the application marketplace.

Using the testing management layer the mobile application verification service initiates the instances of the mobile application provides simulated user input to the instances and monitors the performance of the instances. In one embodiment the simulated user input may merely be randomized user input. For example the simulated user input may include randomized button presses text entries swipe gestures multi touch gestures and so on. In other embodiments the simulated user input may be generated based at least in part on static analysis data manual review data automated analysis and recognition from screen capture data a manifest from the source entity which describes the user input and or other data. The simulated user input may be generated in advance and stored or on demand for all instances or for each instance of the mobile application .

In monitoring the performance the mobile application verification service may assess the length of time that the mobile application stays at a particular activity the resources consumed lifecycle events associated with state changes in the mobile application data accessed or loaded by the mobile application e.g. configuration files etc. and or other information. The mobile application may be instrumented to collect performance information. Also the testing management layer may interact with the operating system by way of an application programming interface API to collect performance information. In one embodiment the operating system may have an activity manager which manages the activities in the mobile computing device . The testing management layer may register with the activity manager to receive notifications of state changes related to the execution of the mobile application e.g. whether the mobile application has become unresponsive has crashed etc.

The performance information for each of the instances may be compared with one another to determine whether the mobile application performs poorly on some mobile computing devices versus others. This comparison may be used to identify potential incompatibilities. The overall performance across the instances may be evaluated as well. The performance may be evaluated by the evaluation criteria to determine whether the mobile application may be included in the application marketplace and or various parameters relating to offering the mobile application in the application marketplace e.g. supported devices categories recommendations pricing etc. . Also the performance and or verification results may be reported to the source entity or other entities by way of network pages emails and or other forms of communication. For example it may be reported to the developer or to customers of an application marketplace regarding on which devices the testing of the mobile application failed.

Turning now to shown is another example of a networked environment according to various embodiments. In the networked environment the testing environment includes a plurality of emulated mobile computing devices . . . N. Similarly to the mobile computing devices each of the emulated mobile computing devices includes a testing management layer one or more mobile applications an operating system and a display which may correspond to a virtualized display and on which a user interface may be rendered. Each of the emulated mobile computing devices may correspond to an emulator executed in a computing device for example within the computing environment . In some cases multiple emulators may be executed in a single computing device.

The mobile application verification service may function similarly in as in . In some embodiments the testing environment may incorporate both emulated mobile computing devices and actual mobile computing devices .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the mobile application verification service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the mobile application verification service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the mobile application verification service obtains a mobile application from a source entity. For example a developer may upload the mobile application to the application marketplace system or the mobile application verification service from the application source system . Alternatively the mobile application verification service may configure the mobile computing devices to obtain the mobile application from the application source system . In box the mobile application verification service prepares the testing environment . In some cases the mobile application verification service may reinitialize the mobile computing devices in the testing environment using the corresponding device images . Alternatively the mobile application verification service may simply uninstall previously tested mobile applications from the mobile computing devices .

In box the mobile application verification service deploys the mobile application to different mobile computing devices and or different emulated mobile computing devices in the testing environment . To this end the mobile application verification service may transmit the mobile application to the mobile computing devices and or emulated mobile computing devices and install the mobile application on the respective devices. In box the mobile application verification service generates a user input profile for the mobile application . To this end the mobile application verification service may perform a static analysis on the mobile application and or perform manual review of the mobile application by way of the manual review service . The generation of the user input profile will be further discussed with reference to the flowchart of .

In box the mobile application verification service initiates execution of the installed instances of the mobile application in the testing environment . In box the mobile application verification service provides simulated user input generated according to the user input profile to the executing instances of the mobile application in the testing environment . In box the mobile application verification service evaluates the performance of the executing instances of the mobile application . The mobile application verification service may measure resources consumed determine time spent at particular activities determine whether the instance of the mobile application has prematurely exited or has become unresponsive and so on. The mobile application verification service may record the observed performance in the evaluation performance data .

In box the mobile application verification service determines whether the performance of the mobile application meets the evaluation criteria . If the performance of the mobile application meets the criteria the mobile application verification service permits inclusion of the mobile application in the application marketplace. In some cases the evaluation criteria may be evaluated across all of the instances for an aggregate determination of acceptability for the application marketplace. In other cases the evaluation criteria may be evaluated for each instance such that particular mobile computing devices may be indicated as supported or unsupported in the application marketplace. The mobile application verification service continues to box .

If the performance of the mobile application does not meet the criteria the mobile application verification service instead moves from box to box . In box the mobile application verification service disallows inclusion of the mobile application in the application marketplace. In some cases the mobile application verification service may allow the mobile application to be generally included but with specific models or platforms of mobile computing devices indicated as unsupported. The mobile application verification service moves to box .

In box the mobile application verification service reports the observed performance and or the evaluation results to the source entity associated with the mobile application customers of the application marketplace and or other entities. Thereafter the portion of the mobile application verification service ends.

Moving on to shown is a flowchart that provides one example of the operation of another portion of the mobile application verification service according to various embodiments. In particular the flowchart of relates to the generation of the user input profile . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the mobile application verification service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the mobile application verification service performs a static analysis on the mobile application to generate the static analysis data . In box the mobile application verification service executes the mobile application in one or more mobile computing devices and or emulated mobile computing devices . In box the mobile application verification service captures the output of the mobile application which may be stored as the captured application output .

In box the mobile application verification service provides at least a portion of the captured application output to the manual review service for manual review. In box the mobile application verification service obtains an indication of the user input e.g. type content actual sample input etc. from the manual review service . The user input indicated by the manual review service corresponds to that which is to be provided to the mobile application at the particular time or activity associated with the captured application output . The results of the manual review may be stored as manual review data .

In box the mobile application verification service generates the user input profile based at least in part on the user input indication from the manual review service the static analysis data a manifest associated with the mobile application and or randomization. In one embodiment the resulting simulated user input is entirely automatically generated. In another embodiment the resulting simulated user input may be based at least in part on manual configuration supplied by the manual review service. Thereafter the portion of the mobile application verification service ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the application marketplace system the mobile application verification service the manual review service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the application marketplace system the mobile application verification service the manual review service the testing management layer and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the mobile application verification service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the application marketplace system the mobile application verification service the manual review service and the testing management layer that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

