---

title: Best match processing mode of decision tables
abstract: An input combination of at least one condition value to be evaluated against at least one rule of a decision table is received. The at least one rule includes at least one condition and the rule is associated with a result. The at least one rule is evaluated against the input combination to determine conditions fulfilled for the at least one condition value. In one aspect, a rule from the at least one rule that best matches the input combination is determined and a result associated with the rule that best matches the input combination is outputted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09031893&OS=09031893&RS=09031893
owner: SAP SE
number: 09031893
owner_city: Walldorf
owner_country: DE
publication_date: 20121220
---
Decision tables are a known approach for modeling complex logic. Decision tables are used to describe and analyze problems that involve decision situations that may be characterized by one or more conditions whose state determines further actions. Such situations may be too complex to be described by flowcharts if then else or do case statements or other similar conditional expressions. Commonly the process of describing a decision situation by a decision table involves on one hand identifying the conditions and actions associated with the situation and on the other indicating which actions are to be executed for various combinations of conditions. The decision table itself serves as a concise notational tool for listing these conditions and actions as decision rules.

Typically the decision rules of a decision table are evaluated for one or more inputs to identify a decision rule that matches the input. Commonly a result is returned only if the input satisfies all conditions of at least one decision rule. In case an input does not satisfy all conditions of any of the rules defined in the decision table no result is returned. For example a result may not be returned if the decision rules defined in the decision table are too specific. Usually specific decision rules cannot cover a wide range of situations. However often at least one result is expected to be returned by decision tables. Thus returning no result may be problematic.

Embodiments of techniques for best match processing mode of decision tables are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In one embodiment a decision rule of a decision table may represent a unique combination of conditions within the table. In one embodiment a condition of a decision rule may be an expression that requires evaluation. For example a condition of a rule may be a combination of explicit values ranges of values constants variables operators and functions that are interpreted according to the computational principles of the particular computer system. Values can be of various types including but not limited to numbers strings and Booleans. Similarly a result of a rule may also be an expression that requires evaluation and be a combination of values variables formulas operators functions etc.

In addition to representing related decision rules in a tabular form a decision table implements business and other logic encoded in a programming language executed by a processor. In one embodiment a decision table is an expression type in a business rules management system BRMS such as SAP NetWeaver Business Rules Management SAP NetWeaver BRM provided by SAP AG. Expression of type decision table defines a self contained computational unit with a predefined logic. In one embodiment decision tables may use context or nest other decision tables or other expressions to calculate determine or derive a result. In one embodiment decision tables can be reused as a nested building block for a decision rule.

In one embodiment each row of a decision table corresponds to a single rule with the columns defining the conditions and also the actions or results of the rules. For example each row of decision table corresponds to a rule from rules . Column Source Location column Target Location and column Weight define the conditions of rules e.g. conditions and respectively . Column Carrier defines results to be returned in case respective rules are satisfied.

Decision rules are evaluated for one or more inputs to identify one or more rules that match the input e.g. a rule whose conditions are satisfied for the input. In one embodiment rules of decision table are processed sequentially e.g. in the order of the rows. In one embodiment if all conditions in a row are met the corresponding result value in the row is returned. Following course of action may be determined based on the result returned by the decision table.

Commonly decision tables can work in two modes of operation e.g. a single match mode and a multiple match mode. In the single match mode processing of the decision table stops at the first matching rule thus returning a single result. A matching rule is a rule the conditions of which are satisfied for the input combination of condition values. Since the processing of the decision table stops at the first matching rule the single match mode of operation may also be described as a first match mode.

Decision table may be configured to operate in a single match mode. For example first processed is rule . If the value of the input condition Source Location is Shanghai and the value of the input Target Location is Hamburg and the value of the input Weight is less than 1000 KG then as a result DHL is returned as Carrier . Result is returned only if conditions are satisfied. If any one condition from conditions is not satisfied then rule is processed next. Similarly result is returned only if conditions are satisfied for the input combinations of values. Rule is a more generic version of rule . Accordingly if a combination of input condition values satisfies rule then the same input combination satisfies rule as well. For example in case the values of the input conditions Source Location and Target Location are the same as conditions and of rule but the weight is not less than 1000 kg then rule is not satisfied rule as more generic is satisfied and a result TNT is returned. The processing of decision table continues until a matching row is found. If rules do not match the input combination of condition values and if Source Location is Shanghai then rule is satisfied and DHL is returned as Carrier .

In case the input does not satisfy any of rules rule is triggered and TNT is returned as a result. Rule is defined as a generic default rule. A default generic rule is a rule that includes at least one default condition. For example a default condition may be a blank condition or a condition that is fulfilled correct or true for any input. Rule is defined to include default conditions . Rule is also constructed as a default generic rule because it includes default conditions e.g. conditions and .

In both the single match and the multiple match processing modes a result is returned if the input combination of condition values satisfies all conditions of at least one rule in the table. In both the single match and multiple match processing modes if a matching combination of conditions is not found in the table a result is not returned. Typically to prevent situations of returning no result decision tables are constructed to include one or more default generic rules that will return result if no other rule in the decision table is satisfied. Defining generic rules in decision tables ensures that a result will be returned regardless of the input combination of condition values. The objective is to construct a decision table that covers all possible situations within the predefined problem area. However defining default generic rules may have several disadvantages. One disadvantage is that a single generic rule may not return proper result for a wide range of situations. Therefore often multiple generic rules are defined to return results for various situations and input combinations. In practice the number of default generic rules increases proportionally to the number of condition types defined in the condition columns. For example for one or more condition types corresponding generic rules are defined. Defining many generic rules may be disadvantageous because the readability and understandability of a decision table may be obscured.

Further rules of a decision table with generic default conditions are non exclusive or overlapping. Rules are overlapping or non exclusive if one input combination of condition values can satisfy the overlapping rules. For example rule overlaps with rule and rule overlaps with rule . In a decision table with non exclusive rules an input combination of condition values can satisfy more than one rule. When a table is constructed to include non exclusive decision rules the order of the rules in the table is used to determine which of the satisfied overlapping rules to return a result. Usually in the single match mode the first matching rule in the sequence of rules applies. A decision table with non exclusive rules may be disadvantageous because various optimizations that can be applied to tables that comprise of mutually exclusive rules could not be applied to tables with non exclusive rules. For example the order in which the rules are evaluated does not determine the result to be returned. Whereas the order of the rules evaluation affects the result determination in a table with non exclusive rows. An input combination of condition values may satisfy only one of the mutually exclusive rules. Table 1 below illustrates examples of mutually exclusive rules.

A best match mode of operation of decision tables is implemented. In the best match mode all rules of a decision table are processed to determine a rule that best matches the input combination of condition values. Decision tables that are set to operate in the best match mode identify a best matching result for the input combination of condition values. Decision tables when processed in the best match mode return a result even when the input does not satisfy all conditions of any of the rules defined in the decision table. Moreover the result returned is associated with the rule that best matches the input combination. Thus a decision table that is configured to operate in the best match mode returns a result even when no default generic rules are defined in the table.

At weight is assigned to each condition type. Thus condition columns are associated with corresponding weights. In one embodiment a weight is a quantitative value assigned to a condition type to determine a degree of significance of the condition type to the overall decision process automated by the decision table. In particular a weight of a condition may represent the relative significance of the condition for the rules of the decision table. Depending on the condition type of a condition of a rule the condition is associated with the respective weight of the condition type. In one embodiment the weight may be a percentage. If the weight of each condition type is a percentage the sum of the weights of the condition types will be equal to one hundred percent. In one embodiment the condition types of a decision table may be associated with a weight that equals one. In such case all conditions have equal degree of significance to the overall decision process automated by the decision table.

At decision rules of the decision table are generated. The rules are constructed to include conditions from the generated condition types. In one embodiment the decision rules correspond to rows of the decision table. For example in each rule from decision rules correspond to a row of decision table and each rule includes conditions from condition types and . In one embodiment decision rules may be business rules expressed in a decision table. Decision rules may specify business logic in a formal way. For example decision rules of a decision table may be logical statements that determine and control the business functions of an organization. Examples of business rules may include but are not limited to business habits manuals policies lines of computer code etc.

In one embodiment a weight may be assigned to each condition of each rule. For example a weight may be associated with each cell of the table that represents a condition of a rule. Thus weights may be assigned to conditions instead of to condition types e.g. per condition cell instead of per condition column. In such case it is possible that conditions from the same condition type are assigned different weights.

At an empty rank list is generated. The rank list will include a rank of each decision rule of the decision table. In one embodiment the rank list may be generated to initially include ranks of the rules that equal zero. In one embodiment each row is associated with the rank of the corresponding rule represented by the row. To determine a rank of a decision rule conditions of the rule are evaluated against input condition values to determine fulfilled or satisfied conditions for the input. The rank of the decision rule equals the sum of weights of the fulfilled conditions. In one embodiment the rank of the decision rule may be equal to the number of fulfilled conditions of the rule.

At a result list is generated. The result list includes results associated with the rules of the decision table. Thus the result of every rule respectively of every row is to be included in the result list. At a decision table that is configured to operate in the best match mode is generated.

At a rule from the number of rules is selected to be evaluated against the input combination of condition values. In one embodiment rules are selected to be processed according to their order in the sequence of rules in the table. At each condition of the selected rule is evaluated against a corresponding condition value from the input combination of condition values. Conditions are compared with corresponding input condition values to determine the conditions that are fulfilled based on the comparison.

At for each fulfilled condition of the selected rule add a weight associated with the fulfilled condition to determine a rank of the selected rule. At the rank of the selected rule is determined as a sum of weights of the fulfilled conditions of the rule. In one embodiment each fulfilled condition of the selected rule is counted and the rank of the rule is determined to be equal to the number of fulfilled conditions of the rule.

At the determined rank of the selected rule is included to a rank list of ranks of the rules. At a check is performed to determine whether all rules from the decision table are selected. If there are unselected rules to be evaluated next unselected rule in the sequence of rules is selected. If all rules from the decision table are selected at a rule with the highest rank from ranks in the rank list is determined. Based on the ranks included in the rank list a best matching rule is determined as the rule with the highest rank.

At a rule from the decision rules that best matches the input combination of condition values is determined. In one embodiment to determine the best matching rule each condition of each rule is evaluated against a corresponding input condition value to determine conditions fulfilled for the input condition value. Based on determined fulfilled conditions of the rules ranks of the rules are determined. For example in one embodiment for each fulfilled condition of a rule the weight associated with the fulfilled condition is added to determine a rank of the corresponding rule. Ranks of all rules are kept in a rank list of the decision table. The best matching rule is determined based on the ranks of the rules included in the rank list. The best matching rule is the rule with the highest rank from the ranks in the rank list. In one embodiment to determine the best matching rule conditions that are fulfilled for corresponding input condition values are counted and the best matching rule is determined as the rule with most conditions fulfilled. Thus in one embodiment ranks of rules may be equal to the number of fulfilled conditions of the respective rules.

At a result of the rule that best matches the input combination of condition values is outputted. In one embodiment results of rules are kept in a result list where the order of the results in the list corresponds to the order of the rules in the table according to one embodiment. A result from the result list of the table that is associated with a corresponding row representing the best matching rule is returned. Thus the best matching rule is applied and the result of the best matching rule is returned. Even if all conditions of the best matching rule are not satisfied the result associated with the best matching rule is still returned. In one embodiment to be outputted the result of the best matching rule may be retrieved from the result column based on the row representing the best matching rule. Thus results are optionally stored in a result list.

Due to the sequential processing of the rules defined in the table from top to bottom e.g. from the first row to the last row often rules are defined starting with the most specific combination of conditions in the first row followed by rules with a decreasingly specific combination of conditions. In one embodiment more than one rule may be best matching. For example if two or more rules have equal rank that is also the highest rank. In such a case the first best matching rule in the sequence of rules may be applied and the corresponding result of the rule is returned. Thus the best matching rule from the best matching rules with the lowest row number may be selected to return a result. In the best match processing mode order of the rules in the table may be optionally decisive for determination of the result. In one embodiment a notification including the rest of the equally best matching rules may be sent. Alternatively the results of all the best matching rules may be returned.

Based on evaluation of rules in the best match mode rank list of table will contain respective ranks of rules . In one embodiment initially ranks of rules may be equal to zero. Result list of table will contain result 1 result 2 and result 3 of rules respectively that are included in result column .

In one embodiment an input combination of condition values is supplied to decision table . At runtime the input combination of condition values is compared against defined conditions in rules e.g. conditions and . In one embodiment processing of rules is sequential starting with the first row. All cells are evaluated by checking the cell value against the corresponding input condition value. For each cell a Boolean result is returned either true or false . Result true is returned in case the condition is satisfied for the corresponding input condition value. Alternatively result false is returned by a cell in case the input condition value does not match the condition. In one embodiment in the best match mode the processing of the rules may not be performed necessarily in increasing order of the rows because all rules are evaluated to identify the best matching rule.

Rules are processed in the best match mode of operation of table . In one embodiment table sequentially processes rules starting with rule in the first row. Condition is fulfilled for the corresponding input condition value and result true is determined. Weight 1 associated with the fulfilled condition is added to rank of rule . Conditions and are not satisfied thus weight 2 and weight 3 associated with conditions and are not added to rank . Rank of rule equals weight 1 e.g. 30 percent. Result 1 of rule is added to result list . Next processed is rule . Conditions and are fulfilled and condition is not fulfilled. Thus rank of rule equals the sum of weight 1 and weight 3 associated with fulfilled conditions and e.g. rank equals 50 percent. Next added to result list is result 2 of rule . Next processed is rule . No condition from conditions of rule is satisfied. Thus rank of rule equals 0 percent. Weights of unfulfilled for the input conditions are not added to a rank of a rule. Next result 3 of rule is added to result list . Based on rank list rule is determined as the rule with the highest rank. Thus for the supplied input combination of condition values decision table returns as a result result 2 of rule . In one embodiment result list is reduced to include the result of the one or more best matching rules e.g. result 2 .

In one embodiment in case a condition is a default or blank it may not be awarded the full weight which is assigned to the condition but only partial weight e.g. 50 of the weight. Because default conditions are assumed to be true the relative significance of default conditions to the overall rank of a rule may be specified to be less than a regular condition from the same condition type. Thus a differentiation is made between a condition satisfied for the input value and a blank condition. A condition satisfied for the input value could be seen as a better match than a default condition which is satisfied for any input value. For example in case condition is a default generic one then only half of the full weight 1 may be added to rank e.g. 15 percent instead of the full weight of 30 percent. In such case rank of rule would be 35 percent.

Processing in the best match mode does not require that a matching combination of conditions is found for the table to return a result. For example no rule from rules of table has all conditions satisfied for the input combination of condition values. Nevertheless table outputs a result associated with the rule with the highest rank. In one embodiment a decision table configured to operate in a single or multiple match mode may be further configured to operate in the best match mode.

The input combination of condition values is received at decision table . In response to the received input processing of decision table is triggered. Decision table coupled to processor evaluates decision rules of decision table against the input combination of condition values. Based on the evaluation of the rules ranks of the rules are stored in rank list . Based on the ranks included in rank list a best matching rule is identified. The rule with the highest rank may be determined as the best matching rule. Result list is reduced to include the result of the identified best matching rule. Decision table returns the result of the best matching rule to computer application .

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. A computer readable storage medium may be a non transitory computer readable storage medium. Examples of non transitory computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

