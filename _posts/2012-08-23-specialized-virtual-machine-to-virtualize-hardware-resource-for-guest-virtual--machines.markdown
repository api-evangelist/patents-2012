---

title: Specialized virtual machine to virtualize hardware resource for guest virtual  machines
abstract: A computing system includes a graphics processing unit (GPU) and main processing circuitry to execute computer program instructions forming a hypervisor, a control virtual machine (VM) and a specialized rendering VM for graphics processing. An application program of a guest VM generates graphics commands and data according to a graphics API such as Direct 3D. The rendering VM includes a graphics driver native to the GPU and is assigned pass-through access to the GPU by the control VM. The rendering VM receives the graphics information from the application program via an inter-VM communication channel, and it uses the graphics driver to control the GPU to perform graphics rendering. The use of the rendering VM enables native graphics performance to be achieved without constraining the control VM to use a compatible operating system. The technique is generally applicable to virtualization of hardware resources by specialized VMs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146762&OS=09146762&RS=09146762
owner: Citrix Systems, Inc.
number: 09146762
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20120823
---
The present invention is related to the field of computer systems and in one aspect to processing of specialized hardware resources such as computer graphics units.

In the field of computer graphics it is known to use specialized graphics processing units or GPUs to provide hardware based acceleration of certain graphics operations. As an example a contemporary GPU may perform operations such as texture mapping high speed polygon rendering and shading in hardware circuitry having a highly parallel structure for high processing throughput. Processing performed by a GPU is generally for purposes of rendering graphical images of an application program on a graphical display. GPUs are especially useful for many graphics intensive computer applications including video games and high end graphical composition and editing tools for example.

There can be challenges to efficient use of a GPU or similar specialized hardware resource in computer systems that employ virtualization technology i.e. computer systems having host hardware and software that supports execution of multiple virtual computers or virtual machines VMs . A GPU is not divisible like memory or storage and thus cannot be assigned for use by different VMs on that basis.

One approach to GPU virtualization is used in virtual computing systems based on the so called XEN architecture which features an open source hypervisor and a control VM running the Linux operating system. Linux provides native support for a graphics application programming interface API known as OpenGL. Systems running the Windows operating system generally utilize a different graphics API of a family referred to as DirectX. In particular a specific DirectX API used for three dimensional graphics is referred to as Direct 3D or D3D . In a XEN virtual computing system in which guest VMs are running Windows it has been necessary to employ an open source conversion program known as Wine to provide conversion between the D3D API and OpenGL. The Wine program is deployed in the control VM and the guest VMs are configured with special drivers that route D3D function calls generated by application programs to the control VM. At the control VM Wine processes the D3D function calls using OpenGL operations.

However the use of a converter and separate graphics API such as Wine and OpenGL can impose performance penalties as compared to systems using a native D3D driver for the GPU. First is the conversion process itself which imparts extra delay and may reduce graphics throughput. Additionally functions provided by D3D but not by OpenGL must be executed in some alternative manner such as some form of emulation for example which can greatly reduce performance over GPU assisted execution. It would be desirable for Linux based virtual computing systems such as XEN systems to provide support for the Windows D3D API without unduly sacrificing graphics performance.

A technique for virtualizing a specialized hardware resource such as graphics hardware is disclosed that overcomes limitations of prior virtualization techniques such as discussed above providing for flexibility in deployment without a need for performance reducing conversion and emulation. While the technique may be particularly useful in open source platforms such as XEN based platforms it has more general applicability to systems based on other architectures.

In one respect a disclosed computing system includes a graphics processing unit and main processing circuitry that is operative to execute computer program instructions forming a hypervisor a control virtual machine and a specialized rendering virtual machine used for graphics processing. The hypervisor provides for virtualization of hardware of the computing system as in conventional virtual computing platforms while the control virtual machine manages the rendering virtual machine and guest virtual machines of the computing system. The technique supports shared use of the graphics processing unit by application programs of the guest virtual machines that generate graphics information generally including graphics commands and graphics data according to a specified graphics API such as the D3D API.

The rendering virtual machine includes a graphics driver that is native to the graphics processing unit and it is assigned pass through access to the graphics processing unit by the control virtual machine. That is the rendering virtual machine is able to directly communicate with the GPU to control its operation without virtualization by the hypervisor as is done for other hardware resources. The rendering virtual machine receives graphics information from an application program via an inter virtual machine communication channel and uses the graphics driver to control operation of the graphics processing unit to perform graphics rendering operations based on the graphics information.

Because the rendering VM is separate from the control VM it can use an operating system that supports the native graphics driver such as Windows while the control VM may use a different operating system that may not be compatible with the driver but has other advantages such as open source availability such as Linux . The control VM is not directly involved in the graphics processing so that performance reducing conversion between different graphics APIs is not necessary. Additionally due to its specialized nature the rendering virtual machine may be realized as a relatively low function machine it may not require functions such as network access a complicated file system a user interface etc.

Thus it may use a so called embedded operating system which is less resource intensive and less expensive than a full function operating system such as normally used in general purpose VMs.

The disclosed technique has broader application to virtualization of other types of hardware resources.

As shown the hardware includes video interface circuitry VIDEO INTFC including a graphics processing unit GPU . The video interface circuitry provides an interface to a graphical display device such as an LCD display not shown . The GPU includes circuitry specially tailored to performing graphics rendering operations. Such circuitry may also be referred to as a graphics accelerator . In particular in one embodiment the GPU includes a capability of three dimensional 3 D rendering.

The control VM is a special VM used for management and control of the computer including the instantiation of the rendering VM and guest VMs as well as configuration and control of certain aspects of their operation. This control function is indicated in by control connections .

The control VM may be referred to alternatively as a control domain domain 0 or dom0 the latter designations being applicable in a system in which successively instantiated VMs are given corresponding sequential numbers 0 1 2 . . . . The control VM also provides an interface to a human operator of the computer such as by a console or similar user interface program as generally known in the art. In one embodiment the control VM executes the Linux operating system. Certain specific functions of the control VM are described below. The guest VMs are typically full function VMs that are preferably as close to fully virtualized as possible meaning that they can execute software especially an operating system with little modification from a non virtualized form. As shown each guest VM includes an operating system O S and one or more application programs APPL . In one embodiment the operating system may be the Windows operating system as used in personal computers. It should be noted that different guest VMs may execute different types of operating systems .

The operating system is shown as including a graphics pseudo driver PSEUDO DRV that is operatively coupled to the rendering VM via an inter virtual machine inter VM communication channel . The inter VM communication channel is realized using a first inter VM V TO V channel interface V V in the guest VM and a second inter VM channel interface in the rendering VM these are referred to as client type and server type respectively below . In this respect the operating system is specifically modified for execution in a virtualized computing system such as that of . In a non virtualized setting the operating system typically includes a graphics driver operatively coupled directly to graphics processing circuitry such as a GPU to control its execution of graphics operations at a fairly low level e.g. programming parameters and operation codes monitoring status and completion of operations etc . The pseudo driver in contrast functions primarily to merely transfer graphics commands responses and data collectively graphics information between the application program and the rendering VM via the inter VM communication channel . Actual processing of graphics commands is performed by the rendering VM and GPU as described below.

The rendering VM is a special purpose VM providing graphics processing capability to the guest VMs . It is assigned direct pass through access to the GPU meaning that a native driver NTV DRV controls and communicates directly with the GPU as in a conventional non virtualized setting with no virtualization being provided by the hypervisor . The rendering VM employs an operating system that may be relatively less functional than the operating system of the guest VMs because of the special purpose nature of the rendering VM . For example the operating system may not support a conventional file system or rich user interface and it may support only limited storage and provide little or no user extensibility. In one embodiment the operating system may be a so called embedded or real time operating system a type used for a variety of specialized computing devices including cell phones as generally known in the art. In one embodiment the operating system may be a member of the Windows Embedded family of embedded operating systems.

The operating system is shown as including inter VM channel interfaces each operatively coupled to a respective inter VM communication channel and the native driver . In operation each inter VM channel interface operates complementarily with its corresponding inter VM channel interface effecting the transfer of graphics information between the native driver and the application programs via the inter VM communication channels .

In the hypervisor and VMs are shown as separate from the hardware which is a typical and useful depiction for purposes of description. It should be understood that these software implemented components effectively include the main processing circuitry during their execution. Thus the hypervisor for example includes the main processing circuitry of the hardware when executing instructions of a hypervisor program. A similar description can be applied to the VMs .

The arrangement of may be particularly suited for use with application programs having a graphics intensive workload such as video games for example. In this case it may be a personal device such as a desktop console or mobile platform. Nonetheless the arrangement may also find use in a server type computing device such as a server providing for remote display of rendered graphics for an application program executing on the server. In prior systems it has been known to provide a graphics driver within a control VM to provide guest VMs with shared access to graphics hardware e.g. using an inter VM channel similar to the inter VM channel . Such a control VM may employ the Linux operating system and with it an open source graphics driver operating according to the so called OpenGL application programming interface API . In contrast guest VMs may use other operating systems such as those of the Windows family that may use a different graphics API of a proprietary family known as DirectX one version of which is called Direct 3D or D3D and used for 3 dimensional graphics rendering. In these kinds of systems it has been necessary to employ a conversion program known as Wine to convert between the D3D and OpenGL APIs. Because not all graphics functions provided by D3D are available in OpenGL graphics performance in such systems is typically lower than in non virtualized systems using native D3D drivers for the graphics hardware.

One of the advantages of the structure of is the ability to use the native driver for the GPU e.g. a D3D driver notwithstanding that the driver may be incompatible with the operating system e.g. Linux of the control VM . The native driver is placed within the specialized rendering VM which uses a compatible operating system e.g. Windows and the control VM establishes the inter VM communication channels to enable graphics information e.g. D3D function calls and data to be transferred between the guest VMs and the shared native driver . The native driver is also provided with the pass through access to the GPU as described above. The use of a Linux based control VM does not affect graphics performance because it is not directly involved in graphics processing as in prior systems using OpenGL and Wine.

At the server type inter VM interface passes the received graphics information to the native driver .

At the native driver controls operation of the graphics processing unit to perform graphics rendering operations using the received graphics information. This control will be in the form of programming parameters and operation codes monitoring status and completion of operations etc. as discussed above.

In a system such as shown in in which the GPU is part of local video interface circuitry the result of the rendering operations by the GPU may represent a screen to be displayed on a local display device such as the screens discussed above. In some cases the result may be used in a different manner. One general alternative is the use of a remote display device i.e. a local application generates graphics information for a screen to be displayed on a display device attached to another physical computer. In this case the result of the rendering operations may be returned to the requesting application for example to enable the application to send the result to the other computer where the result will be displayed. Other back end processing of the rendering result is possible.

While the above description focuses on methods and apparatus to support graphics operations in particular these may be slightly generalized to provide for shared access to a hardware resource for other than graphics operations. With respect to GPUs for example there is increasing use of contemporary GPUs for non graphics tasks that employ vector and other calculations that are performed in hardware by the GPU. In this type of use the GPU may be referred to as a general purpose GPU . With respect to the structure of the only major modification to support such use is that the drivers and support whatever API is used by an application program to access the hardware resource.

The disclosed technique may also be generalized to take advantage of the use of a specialized VM analogous to the rendering VM that is more compatible with the guest VMs than is the control VM . In this respect it is assumed that guest VMs employ an operating system of a first type such as Windows while the control VM uses a second operating system of a different type such as Linux and that there is either no support or only limited support under the second operating system for a system function that is more fully supported by the first operating system. In this case the system function or control software for the system function such as a device driver can be deployed on a specialized VM akin to the rendering VM which runs the first operating system and an inter VM communication scheme can be employed to enable the function to be accessed from the guest VMs . This arrangement enables a virtualizing computer which is based on the second operating system to support functions of the first operating system in a native fashion.

