---

title: Allocating method, allocating apparatus, and computer product
abstract: An allocating method is executed by a computer. The allocating method includes transmitting to any one given apparatus among multiple apparatuses capable of executing an identical process and respectively having a different processing performance, a command for the process; duplicating the command and transmitting resulting duplicated commands to an apparatus group that is not executing the process and among the apparatuses; measuring for the given apparatus and each apparatus of the apparatus group, a utilization rate acquired when the command is executed; identifying based on the utilization rate for the given apparatus, an apparatus to be switched among the apparatus group; and switching a transmission destination of the command, from the given apparatus to the apparatus to be switched.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08751658&OS=08751658&RS=08751658
owner: Fujitsu Limited
number: 08751658
owner_city: Kawasaki
owner_country: JP
publication_date: 20120127
---
This application is based upon and claims the benefit of priority of the prior Japanese Patent Application No. 2011 080723 filed on Mar. 31 2011 the entire contents of which are incorporated herein by reference.

Recently the market for client virtualization solutions in which the execution environment is moved to the server side unlike client terminals that are directly operated by users on the client side has expanded. For example technologies have been disclosed where in a thin client system having a client terminal that executes the least processing necessary and a server that executes most of the processing functions of the client terminal is virtualized and PC functions of several dozen PCs are integrated into one server.

The introduction cost of a conventional thin client system is high and therefore a Desktop As A Service DaaS system has been offered that is small scale and can be inexpensively introduced. The DaaS system is a system that applies client virtualization in a cloud environment and that supplies to a client terminal a desktop environment of an OS of a virtual machine operating on a server hereinafter virtual desktop environment .

The client terminal in the DaaS system has to use the virtual desktop environment through a network. In this case by allocating to the virtual machine a graphic card that is connected to the server a graphic process is executable at a high speed even in the virtual desktop environment. Consequently a user of the client terminal is able to use in a stress free manner application software hereinafter application that accompanies high speed graphic processing such as computer aided design CAD and regeneration of a moving image.

For example a technology is disclosed of distributing load using multiple parallel modes in a computer having multiple graphics processing units GPUs as a technology concerning apparatus allocation. A technology is disclosed of dynamically and efficiently allocating processes to processor cores according to the execution state of the processes in an example of a multi core processor system that has multiple cores as a technology concerning allocation to apparatuses see e.g. Published Japanese Translation of PCT Application Publication No. 2007 512613 and Japanese Laid Open Patent Publication No. 2008 90546 . A process is an execution unit of a program that is executed by a central processing unit CPU .

For example a technology is disclosed of selecting a processor of a server such that the requested performance of the server connected to a storage system is not higher than the processing performance of the processor that corresponds to an interface of the storage system as another technique concerning the allocation. A technology is present of extracting log data operated by an operator and reproducing the log data see e.g. Japanese Laid Open Patent publication Nos. 2005 321854 and 2007 140954 .

When a server in the DaaS system allocates a graphic card to a virtual machine by applying any one of the conventional technologies the processing performance of the graphic card allocated may be too high or too low for application used by a user of the virtual machine. If the processing performance of the graphic card allocated is too high for the application running on the virtual machine that made the request although no problems arises since the request of the application operating on the corresponding virtual machine has been satisfied graphic cards allocated by the server are limited and therefore a problem arises in that when another virtual machine desires to use a graphic card having high processing performance such graphic cards may have already been allocated.

According to an aspect of an embodiment an allocating method is executed by a computer. The allocating method includes transmitting to any one given apparatus among multiple apparatuses capable of executing an identical process and respectively having a different processing performance a command for the process duplicating the command and transmitting resulting duplicated commands to an apparatus group that is not executing the process and among the apparatuses measuring for the given apparatus and each apparatus of the apparatus group a utilization rate acquired when the command is executed identifying based on the utilization rate for the given apparatus an apparatus to be switched among the apparatus group and switching a transmission destination of the command from the given apparatus to the apparatus to be switched.

The object and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the claims.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention as claimed.

Preferred embodiments of the present invention will be explained with reference to the accompanying figures.

The allocating apparatus includes multiple graphic cards to each having a different processing performance. n is an integer that is two or larger. The graphic cards to may be directly connected to the allocating apparatus or may be connected to an extension box that is connected to the allocating apparatus . For example four or eight graphic cards may be connected to the extension box.

Each of the graphic cards executes operations to display a picture or characters on a screen. The graphic card includes a GPU and video random access memory VRAM . For example the graphic card includes a GPU and VRAM . Similarly the graphic card includes a GPU and VRAM and the graphic card includes a GPU and VRAM . The GPU executes graphic processing. The VRAM is memory that retains an image processed by the GPU .

The terminal apparatus includes a display . By the virtual desktop environment an image in the VRAM generated by the graphic card is displayed on the display .

The allocating apparatus executes a virtual machine monitor . The virtual machine monitor is software that virtualizes a computer and controls the computer to be able to execute multiple OSs. In the example depicted in the virtual machine monitor causes a virtual machine VM and a management OS to operate.

The VM is a virtual computer that is operated by the allocating apparatus . For example the VM is software that virtualizes hardware resources of the allocating apparatus such as the CPU memory and the graphic card and provides a virtualized execution environment to the software executed on the VM. The VM depicted in is correlated with the terminal apparatus executes an application such as CAD and regenerates moving images according to an instruction from the terminal apparatus .

The management OS has a function of managing a portion of the hardware and the virtual machine in the allocating apparatus . For example when the management OS receives a drawing command from the VM the management OS allocates any one of the graphic cards among the graphic cards to the VM .

When the application for the VM to use the graphic card is started up the allocating apparatus according to the first embodiment and including the above hardware and software outputs to the graphic cards to the drawing commands transmitted from the application. In the example depicted in it is assumed that the drawing commands transmitted are drawing commands to draw a circle and to draw a triangle.

According to the drawing commands the graphic cards to generate images in the VRAMs to . At this time the management OS transmits to the terminal apparatus any one of the images in the VRAMs to . For example the management OS transmits to the terminal apparatus the image in the VRAM .

The management OS measures the utilization rate of the graphic card during generation of an image. The utilization rate of the graphic card is the utilization rate of the GPU in the graphic card . The utilization rate of the GPU refers to the rate of the processing capacity of the GPU that is used. When the utilization rate is for example 0 the GPU does not execute processing at all and when the utilization rate is for example 100 the GPU executes processing at a processing capacity that is equal to the processing capacity of the GPU .

In the example depicted in the GPU utilization rate of the graphic card is 40 and the graphic card has high processing performance and a processing capacity that is higher than that demanded by the application affording a margin in terms of processing capacity. The GPU utilization rate of the graphic card is 100 and the graphic card has low processing performance is unable to draw a triangle and the processing capacity of the graphic card does not satisfy the processing capacity demanded by the application. The GPU utilization rate of the graphic card is 85 and this state corresponds to a state where the processing capacity of a graphic card satisfies the processing capacity requested by the application. As to the processing capacity requested by the application the management OS may designate for example a utilization rate range of 80 to 90 as the processing capacity requested by the application.

In this case the management OS identifies the graphic card as a graphic card whose processing capacity satisfies the processing capacity requested by the application and allocates the graphic card to the VM . Consequently the allocating apparatus is able to allocate a graphic card that is suitable for the processing capacity demanded by the source of the request.

The CPUs and control the entire allocating apparatus . The allocating apparatus may include three or more CPUs. In this manner the allocating apparatus according to the first embodiment may be configured as a multi core processor system. The multi core processor system is a system of a computer that includes a processor having multiple cores. A single processor may be employed that has multiple cores or a processor group may be employed that includes single core processors in parallel when the system has multiple cores. In the embodiment description will be made taking an example of a configuration of parallel CPUs that are respectively a single core processor.

The allocating apparatus according to the first embodiment may be a single core processor system that has one core. The CPUs and may each have cache memory.

The ROM stores therein programs such as a boot program. The ROM may further store therein an allocation program . The RAM is used as a work area of the CPUs and . The HDD stores data written under the control of the CPU controls the reading. The allocation program may be stored by the HDD .

The NIC is connected to a network such as a local area network LAN a wide area network WAN and the Internet through a communication line and is connected to other apparatuses through the network .

The remote connection card is a card that transmits display data of the virtual desktop environment to the terminal apparatus according to PC over IP . For example the remote connection card receives output from the graphic card as the display data encrypts the output according to the PC over IP and transmits the encrypted data to the terminal apparatus through the network . The terminal apparatus converts the data received decrypts the data as the display data and displays the data on the display . The remote connection card and the graphic card are present in one to one correlation.

The terminal apparatus includes a CPU ROM RAM an HDD a NIC a keyboard a mouse and the display respectively connected by a bus . The CPU to the NIC are similar to the CPU to the NIC and therefore will not again be described.

The keyboard includes for example keys for inputting letters numerals and various instructions and performs the input of data. The keyboard may be a touch panel type input pad or numeric keypad etc. may be adopted. The mouse is used to move the cursor select a region or move and change the size of windows. A track ball or a joy stick may be adopted provided each respectively has a function similar to a pointing device.

The display displays for example data such as text images functional information etc. in addition to a cursor icons and or tool boxes. A cathode ray tube CRT a thin film transistor TFT liquid crystal display a plasma display etc. may be employed as the display .

The allocating apparatus also includes a graphic device pseudo virtualization front end driver hereinafter PV f driver a guest OS a pseudo virtualization back end driver hereinafter PV b driver and a graphic card driver .

The allocating apparatus further includes a GPU manager a process monitor a GPU state monitor a GPU command flow monitor a GPU command analyzer a GPU VRAM monitor and a VM manager .

The GPU management table is a table that stores therein information such as the allocation state of the graphic cards . Details of the GPU management table will be described later with reference to . The setting table is a table that stores therein the number of allocated graphic cards and threshold values referred to by the functional units. Details of the setting table will be described later with reference to . The GPU temporary allocation table is a table for determining the graphic cards to be finally allocated and temporarily allocated when the virtual machine is started up. Details of the GPU temporary allocation table will be described later with reference to .

The PV f driver is executed on the VM receives a graphic process from the application and transmits a command for the graphic process to the management OS . Hereinafter a command for graphic processing will be referred to as a GPU command . The graphic process from the application is a 3 D graphic process such as OpenGL or DirectX.

The guest OS is an OS executed on the VM. For example the guest OS supplies a library and an application programming interface API etc. used by the application .

The PV b driver is executed on the management OS duplicates the GPU command and simultaneously notifies multiple graphic card drivers of the duplicated GPU command. When the GPU manager identifies the most suitable graphic card the PV b driver switches to the identified graphic card the transmission destination of the command which is the duplication source for the graphic process.

The graphic card drivers to are executed on the management OS and are device drivers that control the graphic cards to 

The application is a process that is started up on the VM. A process is an execution unit of a program executed by the CPU. For example the application is an application that executes a 3 D graphic process such as OpenGL DirectX etc. for the graphic cards to 

The application may be an application that requests the graphic cards to for an execution of a general purpose process other than the image processing. A technology such as general purpose computing on GPU GPGPU is disclosed as a technology of using the computing resources of the GPU for a purpose other than image processing. In the following description a command to use the GPU as the GPGPU will be handled to be included in the GPU command.

The GPU manager is executed on the management OS identifies the most suitable graphic card and allocates the identified graphic card to the VM. The process monitor is executed on the VM and monitors whether the graphic card has been accessed by the application .

The GPU state monitor is executed on the management OS and measures the GPU utilization rate of the graphic card to be monitored. For example the GPU state monitor invokes the API capable of acquiring the GPU utilization rate and thereby refers to the GPU utilization rate. When no API capable of acquiring the GPU utilization rate is supplied the GPU state monitor may measure the GPU utilization rate by referring to the temperature of the graphic card a queue for the PV b driver etc.

The GPU command flow monitor is executed on the management OS and counts the flow of the GPU commands that pass through the PV b driver . The GPU command analyzer analyzes the GPU commands that pass through the PV b driver . As to the content of the analysis the GPU command analyzer acquires the operation type of the GPU command passing through the PV b driver according to the format of the GPU command. The GPU command analyzer judges through the analysis that the GPU command passing through the PV b driver is a command to start drawing or a command to draw a triangle.

The GPU VRAM monitor monitors the updated amount of the VRAM of the graphic card . For example after the most suitable graphic card is identified the GPU VRAM monitor monitors the updated amount between the VRAM of the graphic card before the switching and that after the switching.

The VM manager has a function of managing the VM currently executed by the allocating apparatus . For example the VM manager acquires identification information of the VM currently executed and starts up and shuts down the VM.

The GPU allocation destination information field stores therein identification information of a virtual machine that is the allocation destination of the target graphic card . The GPU performance information field stores therein processing information of the GPU included in the target graphic card . The performance information is represented by the result of measurement by a bench mark software a catalog value of the graphic card etc. The GPU performance information field may store therein the GPU utilization rate acquired when a given GPU command is executed.

The GPU allocation state field stores therein any one state among five states that include unallocated final allocation temporary allocation to be allocated and to be released which indicate the state of the allocation of the target graphic card to the virtual machine. The unallocated state represents a state where the target graphic card is not allocated to any virtual machine. The final allocation state represents a state where the virtual machine currently uses the target graphic card . The temporary allocation state represents a state where the target graphic card is a candidate for the most suitable graphic card .

The to be allocated state represents a state from when the target graphic card is identified as the most suitable graphic card until the final allocation state is established. The to be released state represents a state where the target graphic card while in the temporary allocation state is identified to not be the most suitable graphic card and can be released at any time. A graphic card in the to be released state transitions to the unallocated state when the graphic card in the to be allocated state transitions in the final allocation state.

To simplify the description the graphic cards . . . will hereinafter respectively be referred to as GPU GPU . . . GPU n .

For example in the example depicted in the VM is allocated with the GPU whose GPU performance information indicates 500 GFLOPS floating point number operations per second FLOPS for the final allocation state and the GPU whose GPU performance information indicates 100 GFLOPS for the temporary allocation state and the VM is allocated with the GPU whose GPU performance information indicates 800 GFLOPS and the GPU n whose GPU performance information indicates 1 TFLOPS for the to be released state.

The GPU utilization rate field stores therein a threshold value to judge the most suitable graphic card for a user. The GPU utilization rate field further includes sub fields that include a lower limit value sub field and an upper limit value sub field. The lower limit value sub field stores therein a lower limit value of the threshold value and the upper limit value sub field stores therein an upper limit value of the threshold value.

The command flow threshold value field stores therein a threshold value to judge whether the switching of the graphic card is executable. The command flow threshold value field further includes sub fields that include a command flow sub field and an idle period sub field. The command flow sub field stores therein a setting value to judge that the switching of the graphic card is executable when the number of commands flowing in a monitoring period is less than or equal to the threshold value. The command flow sub field further includes sub fields that include a number of commands sub field and a monitoring period sub field. The number of commands sub field stores therein a threshold value for a monitoring period and the monitoring period sub field stores therein the monitoring period. The idle period sub field stores therein a setting value to judge that the switching is executable when the command flow is zero during an idle period.

The VRAM updated amount threshold value field stores therein a threshold value to judge that the switching of the graphic card is executable. The VRAM updated amount threshold value field further includes sub fields that include a same GPU sub field and a switching destination sub field. The same GPU sub field stores therein a threshold value to judge whether comparison is executable with the VRAM of the graphic card that is the switching destination when the updated amount of the VRAM is less than or equal to the threshold value since the last monitoring in the graphic card to be finally allocated . The switching destination sub field is a setting to judge that a timing is established at which the switching of the graphic card is executable when the difference is less than or equal to the threshold value between the VRAM of the switching source and that of the switching destination and stores therein the threshold value to judge the switching of the graphic card to be executable.

For example in the setting table depicted in the number of graphic cards temporarily allocated is indicated to be two in the number of temporarily allocated GPUs field. The setting table indicates that the GPU temporary allocation table is stored at 0x10000000 and also indicates that when the GPU utilization rate of the target graphic card is between 80 and 90 in a GPU utilization rate field the management OS identifies the target graphic card to be the most suitable graphic card .

The setting table also indicates based on the command flow sub field that the management OS judges that the switching of the graphic card is executable when the number of commands is five or smaller within a monitoring period of three second and also indicates based on the idle period sub field that the management OS judges that the switching of the graphic card is executable when the command flow is zero in 5 000 millisecond .

The setting table also indicates based on from the same GPU sub field that after judging that the switching of the graphic card is executable the management OS judges that comparison with the VRAM of the switching destination is executable when the updated amount of the VRAM of the switching source is less than or equal to 500 pixel and also indicates that the management OS judges that a timing is established at which the switching of the graphic card is executable when the difference is less than or equal to 100 pixel between the VRAM of the switching source and that of the switching destination.

The GPU temporary allocation table includes four fields that include a pattern number field a finally allocated GPU field a temporarily allocated GPU field and a temporarily allocated GPU field. The pattern number field stores therein a number that uniquely identifies the finally allocated GPU. The finally allocated GPU field stores therein identification information of the graphic card designated by the VM. The temporarily allocated GPU and the temporarily allocated GPU fields respectively store therein temporarily allocated GPUs and that correspond to the finally allocated GPU.

For example in when the finally allocated GPU is the GPU the management OS designates a pattern number and selects the GPU and the GPU as the temporarily allocated GPUs. Similarly when the finally allocated GPU is the GPU the management OS designates a pattern number and selects the GPU and the GPU as the temporarily allocated GPUs. The same selection method is executed for each of pattern numbers to n that are registered in . In the GPU management table depicted in the GPU is the finally allocated GPU and therefore the pattern number is designated and the GPU and the GPU are selected as the temporarily allocated GPUs.

When no graphic card is designated from the VM the management OS searches the GPU management table for a graphic card whose GPU allocation state is the unallocated state and designates the graphic card as the finally allocated GPU. Thereafter the management OS selects a temporarily allocated GPU in a manner similar to the method for the VM to designate the graphic card .

The graphic card in the temporarily allocated GPU field may be a graphic card whose processing performance is lower than that of the graphic card stored in the finally allocated GPU. The graphic card in the temporarily allocated GPU field may be a graphic card whose processing performance is higher than that of the graphic card stored in the finally allocated GPU. In a case where the graphic card allocating operation is executed based on these conditions when the processing performance is high or low of the graphic card that is finally allocated first the graphic card can be switched to a more suitable graphic card.

The determiner to the transmitter and the switcher are included in the PV b driver . The measurer is included in the GPU state monitor and the identifier is included in the GPU manager . The judger is included in the GPU command analyzer . The judger is included in the GPU VRAM monitor .

The determiner has a function of determining based on any one apparatus apparatuses that are candidates for the most suitable apparatus among a group of apparatuses not executing any operations. For example the determiner determines the GPU and the GPU to be candidates for the most suitable apparatus based on the GPU which is in the final allocation state. The GPU and the GPU that have been determined to be candidates for the most suitable apparatus are put in the temporary allocation state. Information related to the determination is stored in the GPU management table .

The duplicator has a function of duplicating a command notified from the PV f driver . The command is a GPU command for the graphic card . For example the duplicator duplicates a GPU command to start drawing a GPU command to draw a triangle etc. The GPU command duplicated is stored to the cache memory the RAM etc. of the allocating apparatus .

The transmitter has a function of transmitting a command for an operation to any one apparatus among multiple apparatuses that are capable of executing the same operation and respectively have a different processing performance. The multiple apparatuses refers to the GPU to the GPU n. For example the transmitter transmits a GPU command to the GPU which is in the final allocation state. For example the transmitter transmits the GPU command to the graphic card driver that corresponds to the GPU .

The transmitters and each have a function of transmitting a command duplicated by the duplicator to the apparatuses that are candidates for the most suitable apparatus determined by the determiner . For example among the GPU to the GPU n the transmitter transmits a duplicated GPU command to the GPU which has been determined by the determiner to be a graphic card in the temporary allocation state. The transmitter also transmits the duplicated GPU command to the GPU .

A group of the graphic cards in the temporary allocation state may include the graphic cards whose processing performance is lower or higher than that of the graphic cards in the final allocation state. For example a case is assumed where the processing performance of the GPU is 200 GFLOPS that of the GPU is 300 GFLOPS that of the GPU is 400 GFLOPS and that of the GPU is 500 GFLOPS . In this case when the GPU is designated the apparatus to receive transmission of the command from the transmitter the transmitters and transmit duplicated commands to the GPU whose processing performance is lower than that of the GPU and to the GPU or the GPU whose processing performance is higher than that of the GPU .

The processing performance of each graphic card among the group of graphic cards in the final allocation state or the temporary allocation state may differ from each other at equal intervals. The graphic card having the median processing performance among the group of the graphic cards in the final allocation state or the temporary allocation state may be a graphic card in the final allocation state.

The measurer has a function of measuring for each apparatus the utilization rate acquired when a command is executed. For example the measurer measures for each of the GPU to the GPU the utilization rate acquired when the GPU command is executed. A specific method of measuring the utilization rate can be for example a measuring method that uses the API of the graphic card or without any API supplied a measuring method that uses the temperature of the graphic card . The method will be described later in detail with reference to . The measured utilization rate is stored to the cache memory the RAM etc. of the allocating apparatus .

The identifier has a function of identifying among the group of the apparatuses and based on the utilization rate for any one apparatus an apparatus to be switched. For example the identifier may identify an apparatus whose utilization rate is less than 100 and is higher than that of any one apparatus as the apparatus to be switched. For example a case is assumed where the GPU utilization rate of the GPU is 40 that of the GPU is 100 and that of the GPU is 85 . In this case the identifier identifies the GPU as the apparatus to be switched.

The identifier may identify among the utilization rates of each apparatus and as the apparatus to be switched an apparatus whose utilization rate is between a predetermined upper limit value and a predetermined lower limit value. The predetermined upper limit value is a value in an upper limit value field of the setting table and the predetermined lower limit value is a value in a lower limit value field of the setting table . For example a case is assumed where the predetermined upper limit value is 90 the predetermined lower limit value is 80 the GPU utilization rate of the GPU is 40 that of the GPU is 87 and that of the GPU is 85 . In this case the identifier identifies either one of the GPU and the GPU as the apparatus to be switched.

The identifier may identify among the utilization rates of each apparatus and as the apparatus to be switched an apparatus whose utilization rate is less than a predetermined upper limit value and is highest. For example a case is assumed where the predetermined upper limit value is 90 the GPU utilization rate of the GPU is 40 that of the GPU is 87 and that of the GPU is 85 . In this case the identifier identifies the GPU as the apparatus to be switched.

The identifier may identify among the utilization rates of each apparatus and as the apparatus to be switched an apparatus whose utilization rate is less than a predetermined upper limit value and whose performance is worst. For example a case is assumed where the predetermined upper limit value is 90 the GPU utilization rate of the GPU is 40 that of the GPU is 87 and that of the GPU is 85 . In this case the identifier identifies the GPU as the apparatus to be switched. It is further assumed that the processing performance of the GPU is 400 GFLOPS that of the GPU is 300 GFLOPS and that of the GPU is 200 GFLOPS . In this case the identifier identifies the GPU as the apparatus to be switched. Identification information concerning the identified apparatus to be switched is stored to the cache memory the RAM etc. of the allocating apparatus .

The switcher has a function of switching the transmission destination of a command from any one apparatus to the apparatus to be switched. For example the switcher switches the GPU command that is the original GPU command prior to duplication from the graphic card to the graphic card . The switcher may execute a switch when the judger judges that the number of transmissions of commands per unit time is less than or equal to a predetermined number. The switcher may execute a switch when the judger judges that the updated amount according to a command is less than or equal to a predetermined amount. The switcher may execute a switch when the judger judges that the difference is less than or equal to a predetermined threshold value.

The judger has a function of judging whether the number of transmissions of commands per unit time is at most the predetermined number. The predetermined number per unit time can be acquired by calculating the number of commands in the setting table the monitoring period in the setting table . The judgment result is stored to the cache memory the RAM etc. of the allocating apparatus .

The judger has a function of judging whether an updated amount according to a command in an image storage area in any one apparatus is at most the predetermined amount. The image storage area is the VRAM . The predetermined amount is the value in the same GPU sub field in the setting table . For example the judger judges whether the updated amount of the VRAM in any one apparatus is less than or equal to 500 pixel .

The judger may judge whether the difference between the image storage area in any one apparatus and that in the apparatus to be switched is at most a predetermined threshold value. The predetermined threshold value is the value of the switching destination field in the setting table . For example a case is assumed where the one apparatus is the GPU and the apparatus to be switched is the GPU . In this case the judger judges whether the difference between the VRAMs of GPU and the GPU is less than or equal to 100 pixel . The judgment result is stored to the cache memory the RAM etc. of the allocating apparatus .

As described the allocating apparatus accesses the GPU management table to the GPU temporary allocation table and allocates the most suitable graphic card .

The explanatory diagram denoted by the reference numeral explains a method of identifying the graphic card to be allocated based on the utilization rate of the graphic card that is altered by the duplication of the access. The explanatory diagram denoted by the reference numeral explains the timing of switching from the graphic card that is the allocation source to the graphic card to be allocated.

The allocating apparatus denoted by the reference numeral selects a graphic card that is an allocation candidate from among graphic cards . For example when an ID GPU is designated in the allocating apparatus and the VM is started up the GPU manager refers to the GPU temporary allocation table and sets the GPU allocation state of the GPU to be the final allocation state and that of the GPU and the GPU to be the temporary allocation state. The method of referring to the GPU temporary allocation table is the method that is described with reference to . When the management OS receives the GPU command the management OS notifies the GPU which is in the final allocation state of the GPU command.

The allocating apparatus denoted by the reference numeral is in the state where the allocating apparatus duplicates the GPU command on the graphic cards that are allocation candidates. For example when an application that accesses the graphic card is started up by the VM the PV f driver notifies the PV b driver of the GPU command. The PV b driver duplicates the GPU command and outputs the duplicated GPU command to the GPU whose GPU allocation state is the final allocation state and the GPU and the GPU whose GPU allocation state is the temporary allocation state respectively.

The allocating apparatus denoted by the reference numeral measures the utilization rate of the graphic card that is an allocation candidate acquired when the GPU command duplicated is executed. For example the GPU state monitor measures the GPU utilization rate of the GPU as 40 that of the GPU as 100 and that of the GPU as 85 . The method of measuring the GPU utilization rate will be described later with reference to .

Based on the utilization rates measured for the graphic cards that are allocation candidates the GPU manager refers to the setting table and selects the most suitable graphic card . In the example denoted by the reference numeral the GPU manager identifies as the most suitable graphic card the GPU whose utilization rate in the GPU utilization rate field in the setting table depicted in is between the lower limit value of 80 and the upper limit value of 90 .

In addition to the method of identifying the most suitable graphic card based on the threshold value a method of monitoring the queue in the PV b driver is present as the method of identifying the most suitable graphic card . The method of identifying the most suitable graphic card by monitoring the queue in the PV b driver will be described later with reference to . As the result of the identification the GPU manager sets the GPU allocation state of the GPU to be the to be allocated state and sets that of the GPU to be the to be released state.

Finally the allocating apparatus denoted by the reference numeral depicts a switching timing from the GPU that is the allocation source to the GPU that is the allocation destination. For example the GPU command flow monitor monitors the command flow and when the command flow becomes lower than a threshold value set in the setting table judges that the comparison of VRAMs is executable. An example of the state of a given GPU command flow causing the switching of the graphic card to be executable will be described later with reference to .

When the updated amount of the VRAM becomes lower than the threshold value set in the setting table the GPU VRAM monitor copies the data of the VRAM of the GPU into the VRAM of the GPU . An example of the specific state of the VRAM causing the switching of the graphic card to be executable will be described later with reference to . After this copying the GPU manager sets the GPU allocation state of the GPU to be the final allocation state and sets those of the GPU and the GPU to be the unallocated state.

A GPU critical temperature table depicted in includes two fields that include a graphic card ID field and a critical temperature field. The graphic card ID field stores therein the identification information of the graphic card . The critical temperature field stores therein the critical temperature of the GPU of the graphic card stored in the graphic card ID field. The GPU critical temperature table may be included in the setting table .

In for example the critical temperature of the GPU is shown to be 85 C. . Similarly the GPU critical temperature table stores therein the critical temperatures of the GPU to the GPU n.

A method will be described of calculating the GPU utilization rate by using a calculation equation denoted by a reference numeral and referring to the calculated current temperature of the graphic card and the GPU critical temperature table . The GPU state monitor calculates the GPU utilization rate using equation 1 below. GPU utilization rate current GPU temperature critical temperature 100 1 

For example when the current temperature of the GPU is 80 C. the GPU state monitor calculates the GPU utilization rate of the GPU as below based on equation 1 . GPU utilization rate 80 85 100 94 

The GPU state monitor may perform calculation using equation 1 based on the room temperature as a reference temperature. For example the GPU state monitor may calculate the GPU utilization rate in a manner expressed in equation 2 below. GPU utilization rate the current GPU temperature the room temperature the critical temperature the room temperature 100 2 

Using equation 2 the utilization rate can be calculated for temperature increases consequent to a load.

The GPU command is formatted according to the format . The format includes a command field a return value field and an argument field. For example the source code represents source code to draw a triangle. When the source code is compiled and is executed in a process on the virtual machine the GPU command takes a value such as that denoted by a reference numeral .

For example the command field stores therein an identifier that indicates drawing of a triangle. The identifier indicating drawing of a triangle may be D3DPT TRIANGLELIST as depicted in the source code . The return value field stores therein the value of a variable ret . The argument field stores therein pt that is a pointer of a D3DVERTEX type arrangement.

The state is a state where 49 GPU commands pass through the PV b driver in 10 seconds. The number of GPU commands per unit time in the state is 49 10 4.9 1.7 and is larger than the predetermined threshold value. Therefore the switching is not executable in this state. The state is a state where 7 GPU commands pass through the PV b driver in 10 seconds. The number of GPU commands per unit time in the state is 7 10 0.7 1.7 and is smaller than the predetermined threshold value. Therefore the switching is executable in this state.

Condition 1 is a case where the updated amount of the VRAM is less than or equal to 500 pixel in the graphic card that is the switching source. When condition 1 is satisfied the GPU VRAM monitor is able to determine a state in which the screen is not frequently updated. The GPU VRAM monitor acquires the threshold value of 500 pixel of condition 1 from the same GPU sub field of the setting table .

Condition 2 is a case where the difference is less than or equal to 100 pixel between the VRAM of the graphic card that is the switching source and that of the graphic card that is the switching destination. Condition 2 is checked because the processing performance differs for each graphic card and therefore one graphic card may have already completed drawing an image while another graphic card has not yet completed drawing an image. When the difference is small between the VRAM of the switching source and that of the switching destination and therefore condition 2 is satisfied the GPU VRAM monitor is able to judge that the state is a state where the contents on the screen do not significantly change during the switching. The GPU VRAM monitor acquires the threshold value of 100 pixel of condition 2 from the switching destination field of the setting table .

An example of a case where the conditions 1 and 2 are satisfied will be described with reference to an explanatory diagram denoted by a reference numeral . In the explanatory diagram denoted by the reference numeral the states are displayed of the VRAMs of the graphic card that is the switching source and the graphic card that is the switching destination at time points t to t. In to simplify the description description will be given using  src indicating the switching source  dst indicating the switching destination and  tx indicating any one time point tx among the time points t to t for the VRAMs .

At the time point t the GPU VRAM monitor compares the VRAM  src t with the VRAM  src t and thereby judges whether the updated amount is at most 500 pixel . The updated amount of the VRAM  src at the time point t is 9000 pixel and therefore the GPU VRAM monitor judges that the graphic cards cannot be compared with each other.

At the time point t the GPU VRAM monitor compares the VRAM  src t with the VRAM  src t and thereby judges whether the updated amount is at most 500 pixel . The updated amount of the VRAM  src at the time point t is 480 pixel and therefore the GPU VRAM monitor judges that the graphic cards can be compared with each other. The GPU VRAM monitor compares the VRAM  src t with the VRAM  dst t and thereby judges whether the difference is at most 100 pixel . The difference at the time point t is 1 800 pixel and therefore the GPU VRAM monitor judges that the switching of the graphic cards is not executable.

At the time point t the GPU VRAM monitor compares the VRAM  src t with the VRAM  src t and thereby judges whether the updated amount is at most 500 pixel . The updated amount of the VRAM  src at the time point t is 100 pixel and therefore the GPU VRAM monitor judges that the graphic cards can be compared with each other. The GPU VRAM monitor compares the VRAM  src t with the VRAM  dst t and thereby judges whether the difference is at most 100 pixel . The difference at the time point t is 500 pixel and therefore the GPU VRAM monitor judges that the switching of the graphic cards is not executable.

At the time point t the GPU VRAM monitor compares the VRAM  src t with the VRAM  src t and thereby judges whether the updated amount is at most 500 pixel . The updated amount of the VRAM  src at the time point t is 36 pixel and therefore the GPU VRAM monitor judges that the graphic cards can be compared with each other. The GPU VRAM monitor compares the VRAM  src t with the VRAM  dst t and thereby judges whether the difference is at most 100 pixel . The difference at the time point t is 90 pixel and therefore the GPU VRAM monitor judges that the switching of the graphic cards is executable. The GPU VRAM monitor judges that the switching between graphic cards at t is executable.

A flowchart for executing the operations described with reference to will be described with reference to . For it is assumed that the graphic card designated by the VM has an ID that is ID GPU .

Thereafter in the GPU management table the management OS changes from the unallocated to the temporary allocation the GPU allocation state field of the graphic card that corresponds to the temporarily allocated GPU field of the selected record step S . When multiple temporarily allocated GPU fields are present in the GPU temporary allocation table as depicted in the GPU allocation state of the GPU that corresponds to each of the temporarily allocated GPU fields is changed from the unallocated to the temporary allocation . For example the GPU is designated in and therefore the management OS changes from the unallocated to the temporary allocation each of the allocation states of the GPU stored in the temporary allocation GPU field and that of GPU .

Subsequently the management OS judges whether the VM has started up a process to use the graphic card step S . When the management OS judges that the VM has not yet started up the process step S NO the management OS again executes the operation at step S upon the elapse of a predetermined time period. If the management OS judges that the VM has already started up the process step S YES the management OS notifies the GPU state monitor of the start of the monitoring step S . Next the management OS notifies the GPU manager of the start of the monitoring step S and notifies the PV b driver of the start of the duplication step S .

Subsequently the management OS judges whether a given time period has elapsed step S . If the management OS judges that the given time period has not yet elapsed step S NO the management OS again executes the process at step S. When the management OS judges that the given time period has elapsed step S YES the management OS notifies the GPU state monitor of the suspension of the monitoring step S . Thereafter the management OS proceeds to step S.

As depicted in the management OS refers to the records of the GPU management table acquires from the GPU state monitor the GPU utilization rate of the graphic card whose GPU allocation destination information field stores therein the VM and notifies the GPU manager of the GPU utilization rate step S . The management OS refers to the GPU utilization rate field of the setting table based on the utilization rate and identifies a GPU x to be the most suitable graphic card step S . The specific method of identifying the graphic card is the method described with reference to B and .

Next the management OS judges whether the GPU x is the GPU step S . If the management OS judges that the GPU x is the GPU step S YES the management OS changes from the temporary allocation to the unallocated the GPU allocation state field of the record whose GPU allocation destination information field stores therein the VM and whose state is the temporary allocation state in the GPU management table step S .

If the management OS judges that GPU x is not the GPU step S NO the management OS changes from the temporary allocation to the to be allocated the GPU allocation state field of the record for the GPU x in the GPU management table step S . The graphic card that is the switching source is the GPU and the graphic card that is the switching destination is the GPU x. The management OS changes from the temporary allocation to the to be released the GPU allocation state field of records for GPUs other than the GPU and the GPU x in the GPU management table step S . After this changing when a route including step S NO or step S NO is taken the management OS notifies the GPU command flow monitor of the start of the monitoring step S .

Next the management OS judges whether the GPU is currently executing graphic output step S . If the management OS judges that the GPU is currently executing graphic output step S YES the management OS notifies the GPU VRAM monitor of the start of the monitoring step S . After this notifying or when the management OS judges that the GPU has not executed the graphic output step S NO the management OS proceeds to step S. A case where the graphic output has not been executed can be for example a case where the process on the VM uses the GPU as the GPGPU.

As depicted in the management OS waits for the time period indicated in the monitor time period field of the setting table to elapse step S . After this time period elapses the management OS judges whether the command flow is less than or equal to the value of the number of commands sub field in the setting table step S . If the management OS judges that the command flow is larger than the value of the number of commands sub field step S NO the management OS proceeds to step S. If the management OS judges that the command flow is less than or equal to the value of the number of commands sub field step S YES the management OS notifies the GPU command flow monitor of the suspension of the monitoring step S .

Next the management OS judges whether the GPU is currently executing graphic output step S . If the management OS judges that the GPU is currently executing the graphic output step S YES the management OS judges whether the VRAM updated amount of the GPU is at most a value in the same GPU sub field in the setting table step S . If the management OS judges that the VRAM updated amount is larger than the value in the same GPU sub field step S NO the management OS proceeds to step S.

If the management OS judges that the VRAM updated amount is less than or equal to the value in the same GPU sub field step S YES the management OS judges whether the difference between the VRAMs of the GPU and the GPU x is at most a value in the switching destination field in the setting table step S . If the management OS judges that the difference is larger than the value in the switching destination field step S NO the management OS proceeds to step S.

If the management OS judges that the difference is less than or equal to the value in the switching destination field step S YES the management OS notifies the GPU VRAM monitor of the suspension of the monitoring step S . Thereafter the management OS judges whether the difference between the VRAMs of the GPU and GPU x is zero step S . If the management OS judges that the difference is not zero step S NO the management OS copies the difference into the VRAM of the GPU x step S .

After this copying or when the management OS judges that the difference is zero step S YES or when the management OS judges that the GPU is not currently executing graphic output step S NO the management OS sets the command transmission destination of the PV b driver to be the GPU x step S . After this setting the management OS notifies the PV b driver of the suspension of the duplication step S . Next the management OS changes from the to be allocated to the final allocation the GPU allocation state field of the record for the GPU x step S .

The management OS changes to unallocated the GPU allocation state field of records for GPUs other than the GPU x among the records whose GPU allocation destination information is VM in the GPU management table step S . After this changing the management OS causes the graphic card allocating operations of the management OS to come to an end.

After this changing the GPU manager selects a record whose final allocation GPU field stores therein the designated GPU in the GPU temporary allocation table step S . Next the GPU manager changes from the unallocated to the temporary allocation the GPU allocation state field of the graphic card that corresponds to the temporary allocation GPU field of the selected record in the GPU management table step S .

Subsequently the GPU manager judges whether the start of the monitoring from the GPU state monitor has been received step S . If the GPU manager judges that the start of the monitoring has not been received step S NO the GPU manager executes the operation at step S after a given time period elapses. If the GPU manager judges that the start of the monitoring has been received step S YES the GPU manager notifies the PV b driver of the start of the duplication step S .

After this notifying or after the result is NO at step S the GPU manager judges whether the VM that is to be monitored has already suspended operation step S . If the GPU manager judges that the VM has already suspended operation step S YES the GPU manager sets to unallocated the GPU allocation state of the record whose GPU allocation destination information is the VM that is to be monitored in the GPU management table step S . After this setting the GPU manager notifies the GPU state monitor of the suspension of the monitoring step S . Next the GPU manager notifies the PV b driver of the suspension of the duplication step S and causes the graphic card allocating operations of the GPU manager to come to an end. If the GPU manager judges that the VM to be monitored has not suspended operation step S NO the GPU manager proceeds to step S.

As depicted in the GPU manager judges whether the end of the process has been received from the GPU command analyzer step S . If the GPU manager judges that the end of the process has been received step S YES the GPU manager notifies the GPU state monitor of a GPU utilization rate acquisition request and the suspension of the monitoring step S . After this notifying or when the GPU manager judges that the end of the process has not been received step S NO the GPU manager judges whether a release request for the graphic card has been received from the GPU command analyzer step S .

If the GPU manager judges that a release request for the graphic card has been received step S YES the GPU manager changes from the temporary allocation to the to be released the GPU allocation state field of the graphic card for which the request is received in the GPU management table step S . After this changing or if the GPU manager judges that a release request for the graphic card has not been received step S NO the GPU manager judges whether the GPU utilization rate has been received from the GPU state monitor step S . If the GPU manager judges that the GPU utilization rate has not been received step S NO the GPU manager proceeds to step S.

If the GPU manager judges that the GPU utilization rate has been received step S YES the GPU manager refers to the GPU utilization rate field of the setting table and based on the GPU utilization rate identifies a GPU x to be the most suitable graphic card step S .

Operations at steps S to S will not be described because these operations are substantially identical to the state where the executing main entity is changed from the management OS to the GPU manager in the operations at steps S to S described with reference to .

For example the operations at steps S to S correspond to those at steps S to S operations at steps S to S correspond to those at steps S to S and operations at steps S to S correspond to those at steps S to S. In the following description steps S S and S whose operations are different from those described as above will be described.

In the flowchart depicted in after the operation at step S comes to an end the GPU manager judges whether the end of the process has been from the GPU command analyzer step S . If the GPU manager judges that the end of the process has not been received step S NO the GPU manager proceeds to step S. If the GPU manager judges that the end of the process has been received step S YES the GPU manager proceeds to step S.

In the flowchart depicted in after the operation at step S comes to an end the GPU manager judges whether the end of the process has been received from the GPU command analyzer step S . If the GPU manager judges that the end of the process has not been received step S NO the GPU manager notifies the GPU command flow monitor of the suspension of the monitoring step S . After this notifying or if the GPU manager judges that the end of the process has been received step S YES the GPU manager judges whether the GPU is currently executing the graphic output step S . If the GPU manager judges that the GPU is not currently executing the graphic output step S NO the GPU manager proceeds to step S.

If the GPU manager judges that the GPU is currently executing the graphic output step S YES the GPU manager receives the executable switching judgment result from the GPU VRAM monitor step S and judges whether the executable switching judgment result indicates that the switching is executable step S . If the GPU manager judges that the result indicates that the switching is executable step S YES the GPU manager notifies the GPU VRAM monitor of the suspension of the monitoring step S and notifies the GPU VRAM monitor of a copying request for the difference of the VRAM step S . Next the GPU manager notifies the PV b driver of command transmission destination switching to set the command transmission destination to be the GPU x step S and the GPU manager proceeds to step S. If the GPU manager judges that the result indicates that the switching is not executable step S NO the GPU manager proceeds to step S.

If the process monitor judges that a request for accessing the graphic card has been issued step S YES the process monitor notifies the GPU state monitor of the start of the monitoring step S and judges whether the process has ended step S . If the process monitor judges that the process has not ended step S NO the process monitor judges whether a given time period has elapsed step S . If the process monitor judges that the given time period has not elapsed step S NO the process monitor proceeds to step S. If the process monitor judges that the given time period has already elapsed step S YES or if the process monitor judges that the process has ended step S YES the process monitor notifies the GPU state monitor of the suspension of the monitoring step S and causes the operation of the process monitor to come to an end.

If the GPU state monitor judges that the VM to be monitored has not suspend operation step S NO the GPU state monitor judges whether a suspension of the monitoring has been received from the GPU manager or the process monitor step S . If the GPU state monitor judges that a suspension of the monitoring has not been received step S NO the GPU state monitor proceeds to step S. If the GPU state monitor judges that a suspension of the monitoring has been received step S YES the GPU state monitor notifies the GPU manager of the GPU utilization rate step S . After this notifying the GPU state monitor causes the operations to come to an end. If the GPU state monitor judges that the VM that is to be monitored has suspend operation step S YES the GPU state monitor causes the operations thereof to come to an end.

After this counting the GPU command flow monitor judges whether a suspension of the monitoring has been received from the GPU manager step S . If the GPU command flow monitor judges that a suspension of the monitoring has not been received step S NO the GPU command flow monitor proceeds to step S. If the GPU command flow monitor judges that a suspension of the monitoring has been received step S YES the GPU command flow monitor causes operations thereof to come to an end.

If the GPU VRAM monitor judges that the updated amount is less than or equal to the value in the same GPU sub field step S YES the GPU VRAM monitor judges whether the difference between the VRAMs of the graphic cards that are switching source and the switching destination is at most a value in the switching destination field in the setting table step S . The GPU allocation state of the graphic card that is the switching source is the final allocation state and that of the graphic card that is the switching destination is the to be allocated state. If the GPU VRAM monitor judges that the difference is less than or equal to the value in the switching destination field step S YES the GPU VRAM monitor notifies the GPU manager of the switching judgment result indicating that the switching is executable step S .

If the GPU VRAM monitor judges that the updated amount is greater than the value in the same GPU sub field step S NO or if the GPU VRAM monitor judges that the difference is greater than the value in the switching destination field step S NO the GPU VRAM monitor notifies the GPU manager of the switching judgment result indicating that the switching is not executable step S . After this notifying the GPU VRAM monitor proceeds to step S.

After notifying that the switching is executable the GPU VRAM monitor judges whether a suspension of the monitoring has been received from the GPU manager step S . If the GPU VRAM monitor judges that a suspension of the monitoring has not been received step S NO the GPU VRAM monitor executes the operation at step S after a given time period elapses. If the GPU VRAM monitor judges that a suspension of the monitoring has been received step S YES the GPU VRAM monitor judges whether a request for copying the difference of the VRAM has been received from the GPU manager step S . If the GPU VRAM monitor judges that a request for copying the difference has been received step S NO the GPU VRAM monitor executes the operation at step S after a given time period elapses.

If the GPU VRAM monitor judges that a request for copying the difference has been received step S YES the GPU VRAM monitor judges whether the difference is zero between the VRAMs of the graphic cards that are the switching source and the switching destination step S . If the GPU VRAM monitor judges that the difference is not zero step S NO the GPU VRAM monitor copies the difference into the VRAM of the graphic card that is the switching destination step S and causes the operations thereof to come to an end. If the GPU VRAM monitor judges that the difference is zero step S YES the GPU VRAM monitor causes the operations thereof to come to an end.

After this starting up the PV b driver duplicates the GPU command step S . For example the PV b driver copies the received GPU command into the storage area of the graphic card driver to be duplicated in. The PV b driver transmits the GPU command that is the duplication source to the graphic card that is in the final allocation state step S .

After this transmitting the PV b driver transmits the GPU command duplicated to the graphic card that is in the temporary allocation state or the to be allocated state step S . After this transmitting the PV b driver judges whether switching of the command transmission destination has been received from the GPU manager step S . If the PV b driver judges that switching of the command transmission destination has not been received step S NO the PV b driver judges whether a suspension of the duplication has been received from the GPU manager step S .

If the PV b driver judges that a suspension of the duplication has not been received step S NO the PV b driver proceeds to the operation at step S. If the PV b driver judges that switching of the command transmission destination has been received step S YES the PV b driver sets the transmission destination of the GPU command in the graphic card that is the switching destination step S . The PV b driver sets the VRAMs that are the GPU command writing destination and the referring destination in the VRAM of the graphic card that is the switching destination step S .

After this setting or when the PV b driver judges that a suspension of the duplication has been received step S YES the PV b driver causes the GPU command analyzer to suspend operation step S . After this suspension the PV b driver suspends the duplication of the GPU command step S and causes the operations to come to an end.

After starting the analysis the GPU command analyzer judges whether a GPU command that imposes a high load or consumes a large amount of memory has been received step S . A GPU command that imposes a high load can be for example anisotropic filtering that is a kind of texture filtering or shadow processing. A GPU command that consumes a large amount of memory can be for example texture processing.

If the GPU command analyzer judges that a GPU command that imposes a high load or consumes a large amount of memory has been received step S YES the GPU command analyzer acquires the GPU utilization rate step S . After this acquisition the GPU command analyzer judges whether a graphic card is present whose GPU utilization rate is greater than or equal to a value in the upper limit value sub field of the setting table step S . If the GPU command analyzer judges that a graphic card is present whose GPU utilization rate is greater than or equal to the value in the upper limit value sub field step S YES the GPU command analyzer causes the duplication and distribution of the GPU command to be suspended for the corresponding graphic card step S . After this suspension the GPU command analyzer notifies the GPU manager of a request for releasing the corresponding graphic card step S and proceeds to the operation at step S.

If the GPU command analyzer judges that a graphic card is not present whose GPU utilization rate is greater than or equal to the value in the upper limit value sub field step S NO the GPU command analyzer proceeds to step S. Configuration may be such that after the operation at step S comes to an end the GPU command analyzer proceeds to step S without executing the operations at steps S to . By executing the operations at steps S to the GPU command analyzer is able to release the graphic card that is already under a high load before the operation of identifying the most suitable graphic card is executed.

If the GPU command analyzer judges that a GPU command that imposes a high load or consumes a large amount of memory has not been received step S NO the GPU command analyzer judges whether a GPU utilization ending command has been received step S . If the GPU command analyzer judges that a GPU utilization ending command has not been received step S NO the GPU command analyzer proceeds to step S. If the GPU command analyzer judges that a GPU utilization ending command has been received step S YES the GPU command analyzer causes the duplication of the GPU command to suspend step S . After this suspension the GPU command analyzer notifies the GPU manager that the process comes to an end step S and causes the operations to come to an end.

As described according to the allocating method the allocating apparatus and the allocation program a command is duplicated on a graphic card that has not executed any process and the transmission destination of the command is switched from the graphic card that is the command transmission destination to a graphic card whose utilization rate becomes appropriate after the switching. Thereby the allocating apparatus is able to execute allocation of a graphic card that is suitable for the processing capacity demanded by the source of the request. Therefore the allocating apparatus does not have to allocate any graphic card whose processing performance is too high or too low and is able to reduce the states where graphic cards having high processing performance are already in use when a VM requiring high processing performance is executed.

Configuration may be such that the allocating apparatus identifies a graphic card whose utilization rate is between the predetermined upper limit value and the predetermined lower limit value as a suitable graphic card. Consequently the allocating apparatus is able to allocate an apparatus suitable for the processing performance requested by the VM.

Configuration may be such that the allocating apparatus identifies a graphic card whose utilization rate is lower than the predetermined upper limit value and is highest as a suitable graphic card. Consequently the allocating apparatus is able to allocate a graphic card whose processing performance is lowest among the graphic cards that satisfy the processing performance required by the VM.

Configuration may be such that the allocating apparatus identifies a graphic card whose utilization rate is lower than the predetermined upper limit value and whose processing performance is lowest as the suitable graphic card. For example when commands accumulate in the queue the processing performance of the allocating apparatus is insufficient compared to the capacity required by the application. The processing performance is static and therefore the allocating apparatus is able to be applied with the embodiment even when the allocating apparatus allocates a graphic card whose utilization rate is not measurable because the allocating apparatus is unable to acquire the temperature information etc.

Configuration may be such that when a suitable graphic card is identified the allocating apparatus suspends the duplication of the command for the rest of the graphic cards. Consequently the allocating apparatus is able to release the rest of the graphic cards and reduce the load on the allocating apparatus. The released graphic cards are able to respond to an allocation request from another VM.

The graphic card group transmitting duplicated commands may include graphic cards whose processing performance is higher or lower than that of the graphic card that is the command transmission destination. Consequently the allocating apparatus is able to identify a more suitable graphic card even if the graphic card that is the command transmission destination is a graphic card whose processing performance is too high or one whose processing performance is too low.

Configuration may be such that when the number of command transmissions per unit time is lower than the predetermined number the allocating apparatus switches the command transmission destination. When this switching is executed in a case where the number of command transmissions per unit time is too large the difference in the number of commands processed is significant between the graphic card before the switching and the graphic card that is the switching destination. If the switching is executed at this point in time reflection of the difference takes a long time and a user may feel as if the processing has stopped. Therefore the allocating apparatus is able to execute the switching without causing the user any uncomfortable feeling by executing the switching when the number of command transmissions per unit time is less than or equal to a predetermined number.

The allocating apparatus may execute the allocating operations for an apparatus other than the graphic cards. For example when the allocating apparatus is connectable to multiple digital signal processors DSPs respectively having different processing performances the allocating apparatus can execute the allocating operations with respect to the DSPs.

Further configuration may be such that when the updated amount of the VRAM in the graphic card that is the switching source is less than or equal to the predetermined amount the allocating apparatus executes the switching. When the allocating apparatus executes the switching in a state where the updated amount of the VRAM is large for example a scene may be lost or a previous scene may again be displayed for moving image software as the process on the VM. Therefore the allocating apparatus is able to execute the switching without causing the user any uncomfortable feeling by executing the switching when the updated amount of the VRAM is less than or equal to a predetermined amount.

The allocating apparatus may execute the switching when between the graphic cards that are the switching source and the switching destination the difference in the VRAMs is less than or equal to a predetermined threshold value. In a case where the allocating apparatus executes the switching when the difference is significant the copying operations for the difference takes a long time and the user may feel as if the processing has stopped. Therefore the allocating apparatus is able to execute the switching without causing the user any uncomfortable feeling by executing the switching when the difference in the VRAM is less than or equal to a predetermined threshold value.

An allocating apparatus according to a second embodiment will be described for a case where the graphic cards allocated in the temporary allocation state or the to be released state to the VM that is to be monitored receive from a VM other than the VM that is to be monitored allocation notification as the final allocation state. In this case the GPU manager suspends the duplication of the GPU command and the measurement of the GPU utilization rate. In the description of the allocating apparatus according to the second embodiment changes made to the allocating apparatus of the first embodiment will be described.

Hardware of the allocating apparatus according to the second embodiment is same as the hardware of the allocating apparatus of the first embodiment depicted in and therefore will not again be described. Software of the allocating apparatus according to the second embodiment has the same functions excluding the function of the GPU manager and therefore will not again be described.

As depicted in the flowchart in after passing through step S NO the GPU manager judges whether a graphic card allocation notification has been received from a VM other than the VM that is to be monitored step S . In the description below with reference to a graphic card that has received allocation notification will be referred to as corresponding graphic card . If the GPU manager judges that allocation notification has been received step S YES the GPU manager judges whether the corresponding graphic card is a graphic card whose GPU allocation destination information field in the GPU management table indicates the VM that is to be monitored step S .

If the GPU manager judges that the corresponding graphic card is a graphic card whose GPU allocation destination information field indicates the VM that is to be monitored step S YES the GPU manager judges whether the corresponding graphic card is a graphic card whose GPU allocation state field indicates the temporary allocation state step S . If the GPU manager judges that the corresponding graphic card is a graphic card whose GPU allocation state field indicates the temporary allocation state step S YES the GPU manager changes the GPU allocation state field of the corresponding graphic card to the unallocated state step S and proceeds to the operation at step S.

The GPU allocation state is changed to the unallocated state and therefore the corresponding graphic card is excluded from those to be measured at step S by the GPU state monitor . Therefore the measurement of the GPU utilization rate of the corresponding graphic card is not executed. Similarly the corresponding graphic card is excluded from those that are the transmission destinations of the GPU commands duplicated at step S by the PV b driver and therefore no GPU command is distributed thereto.

If the GPU manager judges that allocation notification has not been received step S NO the GPU manager proceeds to the operation at step S. If the GPU manager judges that the corresponding graphic card is not a graphic card whose GPU allocation destination information field indicates the VM that is to be monitored step S NO or when the GPU manager judges that the corresponding graphic card is not a graphic card whose GPU allocation state field indicates the temporary allocation state step S NO the GPU manager proceeds to the operation at step S.

As depicted in the flowchart in after passing through step S NO or after the operation at step S the GPU manager executes the operations at steps S to S. Here the operations at steps S and S are same as the operations at steps S and S and therefore will not again be described. If the flow passes through step S YES the GPU manager judges whether the corresponding graphic card is a graphic card whose GPU allocation state field indicates the to be released state step S . If the GPU manager judges that the corresponding graphic card is a graphic card whose GPU allocation state field indicates the to be released state step S YES the GPU manager changes the GPU allocation state field of the corresponding graphic card to the unallocated state step S and proceeds to the operation at step S.

If the judgment result is NO at step S if the judgment result is NO at step S or if the GPU manager judges that the corresponding graphic card is not a graphic card whose GPU allocation state field indicates the to be released state step S NO the GPU manager proceeds to the operation at step S. If the judgment result is NO at step S the GPU manager proceeds to the operation at step S.

As described according to the allocating method the allocating apparatus and the allocation program when allocation notification is received as the final allocation from another VM the graphic card allocating operations executed for the corresponding graphic card is suspended. Consequently the allocating apparatus is able to execute the graphic card allocating operations without interfering with the graphic card allocation of another VM.

An allocating apparatus according to a third embodiment will be described for a case where graphic card allocating operations for multiple VMs simultaneously occur. In a case where the operations simultaneously occur when the GPU utilization rate is measured the process that accesses the graphic card may be unable to achieve its original performance and accurate measurement of the GPU utilization rate is not possible. Therefore when the graphic card allocating operations simultaneously occur the allocating apparatus according to the third embodiment allocates the VM that is to be monitored to the physical CPU whose CPU utilization rate is low. In the description of the allocating apparatus according to the third embodiment changes made thereto from the allocating apparatus according to the first embodiment will be described. The third embodiment is also applicable to the allocating apparatus according to the second embodiment.

Hardware of the allocating apparatus according to the third embodiment is same as the hardware of the allocating apparatus of the first embodiment depicted in and therefore will not again be described. Software of the allocating apparatus according to the third embodiment has the same functions excluding the function of the GPU manager and therefore will not again be described.

As depicted in the flowchart in when the flow passes through step S YES the GPU manager judges whether a VM other than the VMs that are to be monitored is currently executing graphic card allocating operations step S . If the GPU manager judges that a VM other than the VMs to be monitored is currently executing the graphic card allocating operations step S YES the GPU manager judges whether any physical CPU is present that is available for the allocation and whose CPU utilization rate is less than or equal to a predetermined threshold value step S . The predetermined threshold value may be registered as a field in the setting table . For example it is determined whether the CPU utilization rate is at most 10 as the predetermined threshold value.

The CPU utilization rate is calculated using the ratio of the CPU execution time period per unit time as the load amount and may be calculated based on the number of operations allocated to the CPU as another calculation method. The CPU utilization rate may be calculated using as the load amount for the CPU the total amount of processing indicated in processing amount information appended to each process allocated to the CPU. The processing amount information is generated by preliminarily measuring the amounts of processing.

If the GPU manager judges that no physical CPU is present whose CPU utilization rate is less than or equal to the predetermined threshold value step S NO the GPU manager judges whether the CPU utilization rate of a virtual CPU originally allocated is at most a predetermined threshold value step S . If the GPU manager judges that the CPU utilization rate of the virtual CPU is greater than the predetermined threshold value step S NO the GPU manager proceeds to the operation at step S. If the GPU manager judges that the CPU utilization rate of the virtual CPU is less than or equal to the predetermined threshold value step S YES the GPU manager proceeds to the operation at step S.

If the GPU manager judges that a physical CPU is present whose CPU utilization rate is less than or equal to the predetermined threshold value step S YES the GPU manager allocates the VM that is to be monitored to the physical CPU step S . After this allocation the GPU manager sets the virtual CPU originally allocated to an off line state step S and proceeds to the operation at step S. If the virtual CPU is set to the off line state the virtual CPU is not usable by the VM. If the GPU manager judges that a VM other than those that are to be monitored is not currently executing the graphic card allocating operations step S NO the GPU manager proceeds to the operation at step S.

As depicted in the flowchart in after the operation at step S the GPU manager judges whether the VM that is to be monitored has been allocated to the physical CPU step S . If the GPU manager judges that the VM that is to be monitored has been allocated to the physical CPU step S YES the GPU manager sets the virtual CPU originally allocated to an on line state step S . Consequently the virtual CPU becomes usable by the VM. After this setting the GPU manager releases the physical CPU step S .

After this release the GPU manager proceeds to the operation at step S. If the GPU manager judges that the VM that is to be monitored has not been allocated to the physical CPU step S NO the GPU manager proceeds to the operation at step S.

As described according to the allocating method the allocating apparatus and the allocation program when the graphic card allocating operations is currently executed by other VMs the VM that is to be monitored is allocated to a CPU that has a low load. Consequently the allocating apparatus is able to execute the graphic card allocating operations with its original performance.

An allocating apparatus according to a fourth embodiment will be described for a case where a user table is accessed that stores therein the graphic cards identified in the past. If a VM started up by an operation of a user has been started up in the past with the graphic card allocated thereto the allocating apparatus again executes the operations of allocating the graphic cards identified in the past. In the description of the allocating apparatus according to the fourth embodiment changes made to the allocating apparatus according to the first embodiment will be described. The fourth embodiment is applicable also to the second or the third embodiment.

Hardware of the allocating apparatus according to the fourth embodiment is same as the hardware of the allocating apparatus of the first embodiment depicted in and therefore will not again be described. As to software of the allocating apparatus according to the fourth embodiment graphic card allocation preprocessing is added to the GPU manager and the graphic card allocating operations of the GPU manager are not changed and therefore will not again be described. Other functional units excluding a determiner and a duplicator have the same functions as those in the first embodiment and will not again be described.

The determiner according to the fourth embodiment determines the apparatuses that are to be candidates for the most suitable apparatus. The number of apparatuses determined corresponds to the amount of memory used by commands notified from the PV f driver . The used memory amount is stored in the user table . A state is assumed where the value in the number of GPUs temporarily allocated field is for example two. In this case if the used memory amount is greater than or equal to a predetermined upper limit value the determiner determines the number of GPUs temporarily allocated to be for example 2 1 1 and determines one graphic card to be a candidate apparatus. If the used memory amount is less than or equal to a predetermined lower limit value the determiner determines the number of GPUs temporarily allocated to be for example 2 1 3 and determines three graphic cards to be candidate apparatuses.

The duplicator according to the fourth embodiment duplicates a command for the number of apparatuses that have been determined as candidates for the most suitable apparatus. A state is assumed where the value in the number of GPUs temporarily allocated field is for example two. In this case if the number of GPUs temporarily allocated is one the duplicator duplicates the original command thereby acquiring one duplicated command. If the number of GPUs temporarily allocated is three the duplicator duplicates the original command thereby acquiring three duplicated commands.

The used memory amount field stores therein the amount of memory used for the previous execution of the GPU command and has sub fields that include an average value sub field and a maximum value sub field. The average value sub field stores therein the average amount of memory previously used. The maximum value sub field stores therein the maximal amount of memory previously used.

For example for a user A depicted in the password is a password A and a used VM thereof is the VM . The graphic card previously allocated to the used VM is the GPU . The amount of memory used on average is 1.5 Mbyte where the maximum is 1.8 Mbyte .

If the GPU manager judges that a graphic card identification request has been received step S YES the GPU manager acquires the user ID from the VM manager step S . After this acquisition the GPU manager judges whether a record is present whose user ID coincides with the acquired user ID in the user ID field step S .

If the GPU manager judges that the record is present step S YES the GPU manager acquires the identification information of the graphic card stored in the graphic card ID field in the record found step S . The identification information of the graphic card may not be stored in the graphic card ID field of the record. In this case the GPU manager may execute the route that includes step S NO assuming that the record is not present.

After this acquisition the GPU manager refers to the GPU management table and thereby judges whether the acquired graphic card has been allocated by another VM step S . If the GPU manager judges that the acquired graphic card has not been allocated by another VM step S NO the GPU manager sets the GPU allocation state of the acquired graphic card to the final allocation state step S . If the GPU manager judges that the acquired graphic card has been allocated by another VM step S YES the GPU manager refers to the GPU performance information field of the GPU management table and sets the GPU allocation state of the graphic card having a close value and in the unallocated state to final allocation step S .

After setting the graphic card allocated at steps S and S the GPU manager determines the number of graphic cards to be temporarily allocated based on the used memory amount field of the record found step S .

The GPU manager prepares an upper limit value and a lower limit value as the predetermined threshold values as a specific method of determining the number of graphic cards to be temporarily allocated. These values may be stored as fields in the setting table . In this state the GPU manager may determine the number of graphic cards to be temporarily allocated to be the value in the number of GPUs temporarily allocated field in the setting table 1 if the value in the used memory amount field is greater than or equal to the upper limit value or the value in the number of GPUs temporarily allocated field 1 if the value is less than or equal to the lower limit value.

In a case where the VM of the record found is a VM that frequently issues GPU commands that respectively use a large amount of memory like the texture process when the temporarily allocated quantity is large accesses to the memory may increase and may occupy the band of the bus . Therefore for a user who uses a large amount of memory the GPU manager can prevent other users from being affected by such a user by reducing the temporarily allocated quantity.

After this determination the GPU manager selects a record whose final allocation GPU field stores therein a graphic card set to the final allocation state in the GPU temporary allocation table step S . After this selection the GPU manager sets to the temporary allocation state the GPU allocation state of the graphic cards of the determined number from the temporarily allocated GPU field group of the record selected step S and proceeds to the operation at step S. If the determined number is larger than the number of temporarily allocated GPU field groups the GPU manager may set the GPU allocation state of each graphic card in the temporarily allocated GPU field groups. If a graphic card is present whose GPU allocation state is final allocation the GPU manager may set the graphic card present to the temporary allocation state .

If the GPU manager judges that a record is not present step S NO the GPU manager selects any one record among those in the GPU temporary allocation table step S . For example as a method of selecting the record the GPU manager may search for a record based on the following given condition sequentially from the record at the head of the GPU temporary allocation table and may select the corresponding record. The given condition is for example that the three graphic cards are stored in the finally allocated GPU field the temporarily allocated GPU field and the temporarily allocated GPU field are respectively unallocated.

After the selection the GPU manager sets to the final allocation state the GPU allocation state of the graphic card stored in the finally allocated GPU field of the record selected step S . After this setting the GPU manager sets to the temporary allocation state the GPU allocation state of the graphic card of the value in the number of GPUs temporarily allocated field from the temporarily allocated GPU field group of the record selected step S and proceeds to the operation at step S.

As depicted in the flowchart in the GPU manager notifies the GPU command analyzer of the start of the measurement of the used memory amount step S . The GPU command analyzer receives the start of the measurement and stores the used memory amount when the graphic card accesses the memory. After this notification the GPU manager executes the graphic card allocating operations step S . The graphic card allocating operations executed are any one of the series of graphic card allocating operations described in the first to the third embodiments. The operations at steps S to S are executed in the graphic card allocating operations and therefore do not need to be executed.

After the graphic card allocating operations to an end the GPU manager acquires the used memory amount for the GPU command from the GPU command analyzer step S . After this acquisition the GPU manager selects a record that coincides with the acquired user ID in the user ID field in the user table step S . If no such record is present the GPU manager generates a new record and adds this record to the user table . In this case the GPU manager acquires the user ID field the password field and the VMID field of the record generated from the VM manager and stores these fields.

After this acquisition the GPU manager stores to the graphic card ID field of the selected record the identification information of the graphic card identified by the graphic card allocating operations for the user table step S . The GPU manager stores to the used memory amount field of the selected record the amount of memory used by the acquired GPU command step S and causes the graphic card allocation preprocessing to come to an end.

As described according to the allocating method the allocating apparatus and the allocation program the graphic card allocating operations is executed using the information on the graphic card that is previously allocated. Consequently the allocating apparatus is able to reduce the possibility that the graphic card is switched during the graphic card allocating operations.

The allocating apparatus may duplicate a command and transmit the command to the apparatus group that is of a number that corresponds to the memory amount used by the command. For example the allocating apparatus may reduce the number of apparatus groups when the used memory amount is high. Consequently when the used memory amount is high the allocating apparatus is able to reduce the number of graphic cards that are to be temporarily allocated and avoid occupation of the bus associated with access to the memory. When the used memory amount is low the allocating apparatus may increase the number of graphic cards that are to be temporarily allocated. Consequently the allocating apparatus temporarily allocates many graphic cards and thereby easily finds a more suitable graphic card.

An allocating apparatus according to a fifth embodiment will be described for a case where the measured GPU utilization rate is reflected on the GPU performance information in the GPU management table . In the description of the allocating apparatus according to the fifth embodiment the description will be made based on the allocating apparatus according to the first embodiment. The fifth embodiment is also applicable to the second the third or the fourth embodiment.

In the description of the allocating apparatus according to the fifth embodiment an example of software and the contents stored in a command retaining table will be described and thereafter a GPU utilization rate measuring operation will be described of measuring the GPU utilization rate for each of the graphic cards .

Hardware of the allocating apparatus according to the fifth embodiment is same as the hardware of the allocating apparatus of the first embodiment depicted in and therefore will not again be described. As to software of the allocating apparatus according to the fifth embodiment graphic card allocation preprocessing is added to the GPU manager and the graphic card allocating operations of the GPU manager are not changed and therefore will not again be described. Other functional units have the same functions as those in the first embodiment and will not again be described.

The command retaining table is a table that stores therein the GPU commands notified from the VM. For example when the GPU manager executes the graphic card allocating operations the PV b driver stores the GPU command notified from the VM to the command retaining table . At this time the GPU state monitor also stores the GPU utilization rate measured to the command retaining table . The GPU manager accesses the command retaining table and executes the GPU utilization rate measuring operations.

For example the command retaining table depicted in indicates that the address to a command list is 0x10002000 and that when the command list is executed the GPU utilization rates are 82.3 for the GPU 27.9 for the GPU and 96.4 for the GPU . The GPU utilization rate of the GPU n is not measured. The command list depicted in stores therein a GPU command group to generate a window and draw a triangle after initializing the graphic card .

As depicted in the GPU manager executes GPU utilization rate recording operations. Those in the GPU command group used in the GPU utilization rate recording operations are the GPU commands to be duplicated at step S the step at which the operations of the GPU command analyzer are executed. The GPU command analyzer stores the GPU commands to be duplicated to the command list .

The GPU manager notifies the PV b driver of the start of the duplication of the GPU command stored in the command list step S . After this notification the GPU manager judges whether a graphic card is present whose GPU utilization rate corresponding to the command list has not been measured and whose GPU allocation state is the unallocated or the to be released state step S . If the GPU manager judges that a graphic card is not present whose GPU utilization rate has not been measured and whose GPU allocation state is the unallocated or the to be released state step S NO the GPU manager executes the operation at step S after a given time period elapses. Consequently for each graphic card in the final allocation the temporary allocation or to be allocated state the GPU utilization rates thereof can be measured after the allocation is released.

With reference to hereinafter a graphic card whose GPU utilization rate has not been measured and that is in the unallocated or the to be released state will be referred to as corresponding graphic card . If the GPU manager judges that a corresponding graphic card is present step S YES the GPU manager notifies the PV b driver of the start of the distribution of the GPU commands to the corresponding graphic card step S . The PV b driver receives the start of the distribution of the GPU commands and transmits the duplicated GPU commands to the corresponding graphic card by the operation at step S.

The GPU manager notifies the GPU state monitor of the start of the monitoring of the corresponding graphic card step S . The GPU state monitor receives the start of the monitoring and measures the GPU utilization rate of the corresponding graphic card by the operation at step S.

After this notification the GPU manager judges whether allocation notification to the corresponding graphic card has been received from a VM other than the VMs that are to be monitored step S . If the GPU manager judges that allocation notification from another VM has been received step S YES the GPU manager notifies the GPU state monitor of the suspension of the monitoring of the corresponding graphic card step S . After this notification the GPU manager notifies the PV b driver of the suspension of the distribution of the commands of the corresponding GPU step S and proceeds to the operation at step S. If the GPU manager judges that allocation notification has not been received from another VM step S NO the GPU manager proceeds to step S.

Is depicted in the flowchart in the GPU manager judges whether GPU utilization rate measurement has been completed for the corresponding graphic card step S . If the GPU manager judges that the measurement has not been completed step S NO the GPU manager proceeds to the operation at step S after a given time period elapses. If the GPU manager judges that the measurement has been completed step S YES the GPU manager sets the GPU utilization rate of the corresponding graphic card in the GPU utilization rate field of the command retaining table step S .

After this setting the GPU manager judges whether GPU utilization rate measurement has been completed for each of the graphic cards step S . If the GPU manager judges that the measurement has not been completed step S NO the GPU manager proceeds to the operation at step S. If the GPU manager judges that the measurement has been completed step S YES the GPU manager reflects the value in the GPU utilization rate field of the command retaining table to the GPU performance information field of the GPU management table step S .

As a reflecting method if no value is stored in the GPU performance information field the GPU manager stores the value stored in the GPU utilization rate field of the command retaining table to the GPU performance information field. When the value is stored to the GPU performance information field the GPU manager may store to the GPU performance information field for example an average value of the value stored in the GPU performance information field and the value stored in the GPU utilization rate field.

After this reflection the GPU manager notifies the GPU state monitor of the suspension of the monitoring of the corresponding graphic card step S . After this notification the GPU manager notifies the PV b driver of the suspension of the distribution of the commands of the corresponding GPU step S and causes the GPU utilization rate measuring operations to come to an end.

As described according to the allocating method the allocating apparatus and the allocation program a command actually transmitted is transmitted to all of the graphic cards and the respective GPU utilization rates thereof are measured. As a result the allocating apparatus is able to acquire more accurate processing performance for each of the graphic cards.

The allocating method described in the present embodiment may be implemented by executing a prepared program on a computer such as a personal computer and a workstation. The program is stored on a computer readable medium such as a hard disk a flexible disk a CD ROM an MO and a DVD read out from the recording medium and executed by the computer. The program may be distributed through a network such as the Internet. However the computer readable medium does not include a transitory medium such as a propagation signal.

According to an aspect of the present invention allocation is effected that can be executed according to the processing performance of the source of the request.

All examples and conditional language recited herein are intended for pedagogical purposes to aid the reader in understanding the invention and the concepts contributed by the inventor to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions nor does the organization of such examples in the specification relate to a showing of the superiority and inferiority of the invention. Although the embodiments of the present invention have been described in detail it should be understood that the various changes substitutions and alterations could be made hereto without departing from the spirit and scope of the invention.

