---

title: Scalable architecture
abstract: Exemplary embodiments may employ techniques for dynamically dispatching requests to resources operating in a distributed computing environment, such as a computing cloud, according to one or more policies. Embodiments may further dynamically adjust resources in the computing environment using predictive models that use current loads as an input. Embodiments may still further maintain a state for a processing environment independent of the type or configuration of a device used to access the environment on behalf of a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08918511&OS=08918511&RS=08918511
owner: The MathWorks, Inc.
number: 08918511
owner_city: Natick
owner_country: US
publication_date: 20120531
---
The instant patent application is a divisional application of U.S. patent application Ser. No. 12 651 284 filed Dec. 31 2009 now U.S. Pat. No. 8 380 880 which is a continuation in part application of U.S. patent application Ser. No. 12 021 856 filed Jan. 29 2008 which claims priority to U.S. Provisional Patent Application No. 60 899 228 filed on Feb. 2 2007 the contents of which are incorporated herein by reference in their entirety.

Computing applications may be used in technical disciplines such as mathematics engineering physical sciences medicine etc. to solve technical problems. For example these applications may be used to find solutions to problems that describe a physical system e.g. a control system and may display results for the solutions. These computing applications can be operated in standalone environments where the application is installed and run on a local computer such as a desktop computer operated by a user.

Some users may find that standalone environments are unsatisfactory when attempting to solve complex problems. For example standalone environments may be unsatisfactory because of memory limitations e.g. inadequate memory processing limitations e.g. insufficient processing power and or processing architectures that cannot be scaled to adequately handle complex processing tasks display limitations e.g. unsatisfactory display hardware outdated software e.g. processing software that is not up to date etc. Attempting to work on complex processing tasks such as processing tasks for solving technical problems using standalone environments may produce system crashes unacceptably long processing times inferior display resolution and or erroneous results.

The following detailed description of implementations consistent with principles of the invention refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following detailed description does not limit the invention. Instead the scope of the invention is defined by the appended claims and their equivalents.

Previously known computing applications may be inadequate for solving certain types of problems such as technical problems that can be encountered in the fields of science engineering medicine economics etc. For example a conventional computing application may perform processing operations using a single device e.g. a client device operating in a standalone environment where the single device may or may not support an environment that adequately solves certain technical problems e.g. complex technical problems . Alternatively the client device may attempt to remotely perform technical processing operations on a single server over a network. In certain situations the single server may not support an environment that adequately solves technical problems on behalf of the client device. Inadequate processing resources may lead to unacceptably long processing times. Alternatively inadequate processing resources may not allow certain types of processing tasks to be performed e.g. tasks that include large and or complex computations .

Exemplary embodiments may alleviate problems associated with conventional computing applications by providing a scalable remote processing architecture that can be adapted to efficiently solve substantially any type of problem e.g. large and or complex technical computing problems . For example an embodiment may use remote processing code that allows a client device to make use of one or more remote processing resources provided over a network such as the Internet. In one embodiment the client may download the remote processing code from one or more servers and in another embodiment the client may run the remote processing code remotely on one or more servers via a web service.

Remote processing as used herein refers to substantially any type of processing that is remote with respect to a requesting device. The requesting device may be a client device. For example remote processing can include distributed processing where a number of devices perform processing on behalf of a requesting device. Remote processing can further be performed on one or more processing devices that can be embodied in hardware based logic and or software based logic. For example remote processing can be performed on microprocessors clusters labs etc. Remote processing may further be performed over a network a direct connection e.g. a link bus cable etc. etc.

Remote processing code may adaptively select one or more remote processing resources based on client defined parameters or based on parameters defined by another device such as a server operated by a service provider. For example the remote processing code may select processing resources based on availability of the resources based on a scaled pricing structure e.g. where the client can use additional processors simultaneously for a larger fee based on the type of problem being solved e.g. a complex simulation application may use more processors as compared to the number of processors that a less complex simulation application uses based on a priority associated with the client based on a time of day e.g. a client performing processing during non peak hours may get more processing resources than a comparable client that performs processing during peak hours etc.

Remote processing resources e.g. devices operating on behalf of the client may operate in a number of configurations. For example a processing resource may be embodied as a unit of execution where a unit of execution can be a hardware based or software based entity that performs processing on behalf of a client. Units of execution can be implemented as single entities e.g. a single processor or as multiple entities e.g. multiple processors . A client may use one or more units of execution to perform processing operations on its behalf. In another embodiment two or more units of execution may be arranged in clusters on a network and a client may use one two or more clusters to perform processing operations on its behalf. Exemplary embodiments may switch units of execution and or clusters into or out of processing operations for a client according to a schedule and or based on other parameters e.g. complexity of a problem a priority assigned to the client etc. .

Assume for sake of example that a user has a 100 100 array that needs to be processed. The user may send the array to a server for remote processing. The server may determine that each column or row should be processed on a separate unit of execution when at least 100 units of execution are available. The server may parse the array into columns or rows and may send one column row to each of 100 units of execution. The 100 units of execution may process the columns rows substantially simultaneously and may send results back to the server. Alternatively the server may determine that only ten units of execution are available to operate on the array. The server may send one tenth of the array to each unit of execution and the ten units of execution may operate on the array portions substantially simultaneously to produce ten results that are sent back to the server. In yet another embodiment the server may split the array into unequal sections and distribute those sections to units of execution for processing. Still other implementations may process the array in other ways using a number of units of execution.

Exemplary embodiments may perform remote processing on behalf of one or more clients in serial or in parallel. Determinations about processing a particular problem e.g. serial parallel etc. may be made according to client determined parameters and or according to other parameters. For example a server may retrieve resource parameters e.g. unit of execution availability information and may use the retrieved parameters to determine how to process the problem.

As used herein parallel processing can refer to task parallel processing data parallel processing and or stream parallel processing. Task parallel processing may refer to parallel processing where a number of tasks are processed at substantially the same time on a number of processing resources. In task parallel processing each task may be processed independently of other tasks executing at the same time e.g. a first processor executing a first task may not communicate with a second processor executing a second task .

In another embodiment parallel processing may refer to data parallel processing where data e.g. a data set is parsed into a number of portions that are executed in parallel using two or more processing resources. In data parallel processing processing devices and or data portions may communicate with each other as processing progresses.

In still another embodiment parallel processing may refer to stream parallel processing also referred to as pipeline parallel processing . Stream parallel processing may use a number of processing resources arranged in series e.g. a line where a first processor produces a first result that is fed to a second processor that produces a second result. Stream parallel processing may be prevalent in certain fields such as signal processing image processing etc.

Other embodiments may combine two or more of task data or stream parallel processing techniques alone or with other types of processing techniques to form hybrid processing techniques without departing from the spirit of the invention.

Exemplary embodiments may include a hardware infrastructure that allows a number of services to be offered to a client. For example a remote processing hardware configuration may allow services to be modularly deployed to a client. In one embodiment a client can be provided with one or more services that can include a collaborative service e.g. collaborative coding service etc. a competition service e.g. a coding competition service etc. a testing service e.g. code testing service real time testing service etc. a remote processing service e.g. distributed processing service parallel processing service serial processing service etc. a pre computing service e.g. a constant pre computing service an eigenvalue pre computing service etc. an analysis service e.g. a data analysis service etc. a game service e.g. coding game service video game service text game service etc. a puzzle service e.g. coding puzzles etc. These services may be offered to the client on a subscription basis a per use basis free of charge in exchange for information products services etc. received from the client etc.

Client may include a device that sends data to or receives data from another device such as server . Data as used herein may refer to any type of machine readable information having substantially any format that may be adapted for use in one or more networks devices applications etc. Data may include digital information or analog information. Data may further be packetized and or non packetized.

In an embodiment client may be a computer such as a desktop computer a laptop computer a client a server a mainframe a personal digital assistant PDA a web enabled cellular telephone a smart phone smart sensor actuator or another computation or communication device that executes instructions to perform one or more activities and or generate one or more results.

Network may include a network that transfers data e.g. packet data or non packet data . Implementations of network may include local area networks LANs metropolitan area networks MANs and or wide area networks WANs such as the Internet that may operate using substantially any network protocol such as Internet protocol IP asynchronous transfer mode ATM synchronous optical network SONET user datagram protocol UDP IEEE 802.11 etc.

Network may further include network devices such as routers switches firewalls and or servers not shown . Network may be a hardwired network using wired conductors and or optical fibers and or may be a wireless network using free space optical radio frequency RF and or acoustic transmission paths. In one implementation network may be a substantially open public network such as the Internet. In another implementation network may be a more restricted network such as a corporate virtual network. Implementations of networks and or devices operating on networks described herein are not limited to any particular data type protocol architecture configuration etc. For example in one embodiment network may be a quantum network that uses quantum compatible networking protocols.

Server may include a device that receives data from and sends data to another device and or network. For example server may include one or more server devices computers e.g. a workstation mainframe desktop computer laptop computer PDA web enabled cellular telephone smart phone Wi Fi device smart sensor actuator or another type of device .

Implementations of server and or other devices in system can include substantially any type of computing architecture components such as silicon based components and or supporting architectures quantum based components and or supporting architectures optical based components and or supporting architectures etc. Server may be implemented as a standalone device a distributed arrangement of devices e.g. a cluster or pool of devices arranged in substantially any type of configuration e.g. star ring grid etc. . Distributed implementations of server may further include devices such as load balancers network devices etc. to allow distributed implementations of server to operate in a determined manner.

In one implementation server may provide a service to other devices in system such as client . For example server may provide remote processing services to client via network . In an embodiment server may send code to client and client may install and run the code to perform remote processing operations using server . In another embodiment client may perform remote processing operations using code that operates on server . In this embodiment server may send results such as display data to client . In another embodiment client may operate in a hybrid configuration. In a hybrid configuration client may download a portion of the remote processing code from server and may also use code that remains on server when performing remote processing operations.

Service provider may include a device that makes a service available to another device. For example service provider may include an entity e.g. an individual a corporation an educational institution a government agency etc. that provides one or more services to a destination using server and or other devices. Services may include instructions that are executed by a destination to perform an operation. Alternatively a service may include instructions that are executed to perform an operation on behalf of a destination.

Assume for sake of example that a telecommunications provider operates a web server that provides one or more web based services to a destination such as client . The web based services may allow client to perform remote processing using hardware that is operated by the telecommunications provider e.g. server . For example client may use service provider hardware to perform remote processing when client subscribes to the offered web service. In one implementation a customer e.g. client may receive services on a subscription basis. A subscription may include substantially any type of arrangement such as monthly subscription a per use fee a fee based on an amount of information exchanged between service provider and the customer a fee based on a number of processor cycles used by the customer a fee based on a number of processors used by the customer etc.

Display may include a device that renders information to a user such as a user of client . Display may include a cathode ray tube CRT device a liquid crystal display LCD device a plasma display device a projection based display device e.g. digital light projection DLP a touch sensitive display device etc. Display may display text and or graphics to a user based on instructions associated with client server or another device such as another device on network not shown in . In one embodiment display may display a web browser to a user. Browser may include logic that displays text and or graphics to a user and or that may execute code e.g. applets plug ins etc. . Embodiments of browser can include any type of application that allows a user to access information on a remote server such as a Unix wget command an file transfer protocol ftp client an email client etc.

Web client may include logic operating on client that makes use of a web service such as web service . In one embodiment web client may display browser on display . Web client may also interact with web services that provide remote processing capabilities to client . Web client may communicate with server using secure connections e.g. via using secure socket layer and or insecure connections.

In an embodiment web client may operate within a virtual machine such as asynchronous JavaScript and extensible markup language AJAX Flash by Macromedia now Adobe Java virtual machine etc. A virtual machine may refer to running multiple instances of code that run on a host computer but behave as if the code instances were running on separate host computers. For example server may run multiple instances of a virtual operating system where each instance of a virtual operating system operates independently of another instance of a virtual operation system on server . Virtual machines can operate in hierarchies e.g. one virtual machine can operate within another virtual machine or in parallel.

Server may include servlet and web service . Servlet may include code that receives a request and returns a response. For example servlet may receive a request from web client and may return a response that includes text images instructions etc. In one embodiment servlet may receive multiple requests and may generate multiple responses that can be grouped in for example one or more sessions.

Web service may include logic that supports machine to machine interactions over network . For example web service may include code that makes one or more remote processing services available to client . By way of example a first web service may send code to client and client may execute the code to use distributed processors that perform remote processing operations. A second web service may display information on client using a browser and may receive remote processing requests from client . The second web service may execute the requests on behalf of client and may send remote processing results to client .

Web service may include software such as one or more application program interfaces APIs for sending information to and for receiving information from a destination e.g. client . In one embodiment web service may communicate with client using one or more standards such as simple object access protocol SOAP . Web service may further use a type of message such as hypertext markup language HTML extensible markup language XML etc. when communicating with client . Embodiments of web service may expose TCE to client so that client can perform remote processing or computing operations over network and or LAN .

LAN may include a private network that allows server to securely communicate with one or more UEs . Other embodiments of LAN may be configured in other ways e.g. as an open network .

UE may include logic that performs processing activities on behalf of another device. Embodiments of UE may be hardware based e.g. a hardware unit of execution software based e.g. a software unit of execution and or based on a combination of hardware and software. For example in one embodiment UE may perform remote processing on behalf of client using a single processing device. In another embodiment UE may perform remote processing e.g. parallel processing on behalf of client using two or more processors cores etc. Implementations of UE may perform remote processing in a number of ways such as by performing remote processing activities related to task parallel processing data parallel processing stream parallel processing etc. Implementations of UE may be configured in substantially any manner. For example a first UE may include a copy of TCE and a second UE may not include a copy of TCE .

UE may perform unidirectional communication with server and or client and or may perform bi directional communication with server and or client . In unidirectional communication UE may receive a command and send a result to server or client . In contrast bidirectional communication may allow UE to perform robust two way communication with server and or client . For example UE may send a request to server for code additional memory space additional processing resources etc. Alternatively UE may make remote display requests to client to allow UE to operate a display device on client . Bidirectional communication between a requesting device and a UE is described in co pending application Ser. No. 11 706 805 entitled Bi directional Communication In A Parallel Processing Environment filed Feb. 14 2007 the contents of which are incorporated herein by reference in their entirety. UE may be identified using a parameter such as a parameter that indicates that UE is available to perform remote processing on behalf of server and or another device. In other embodiments UE may be identified using other techniques.

Engine socket may include logic that operates as the endpoint of a communication link such as a bi directional communication link. In one embodiment server may include an engine socket not shown in that communicates with engine socket on UE . Engine socket may support encrypted or non encrypted exchanges with server . Embodiments of engine socket may be implemented in hardware based logic and or software.

Technical computing environment TCE may include hardware and or software based logic that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that requires the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In an alternative embodiment TCE may be used to execute tasks not formally related to conventional technical disciplines but still requiring execution of computations.

In one implementation TCE may include a dynamically typed language e.g. a dynamically typed programming language that can be used to express problems and or solutions in mathematical notations familiar to those of skill in the relevant arts. For example TCE may use an array as a basic element where the array may not require dimensioning. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics finance image processing signal processing control design life sciences education discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . In another implementation TCE may provide these functions as block sets. In still another implementation TCE may provide these functions in another way such as via a library etc. TCE may be implemented as a text based environment a graphically based environment or another type of environment such as a hybrid environment that is both text and graphically based.

Clients can include a number of computers operated by a corresponding number of users or by a number of users that differs from a number of computers. Clients may be related to each other such as computers used by employees of a corporation or may be unrelated to each other such as residential computers operating in a number of households.

Network may include one or more load balancers to balance operational loads on network and or devices operating with network such as servers . For example a number of clients may attempt to access TCEs at substantially the same time using network . Logic in network such as load balancer may identify destinations being contacted types of processing being sought by clients etc. and may route certain clients to certain destination resources such as servers . For example load balancer may route client and client to server and may route client to server N. In alternative embodiments load balancer may be located elsewhere in system and or load balancing functionality may be incorporated into other devices such as server UE farm manager etc.

Servers may operate with farm manager when operating on requests from clients . For example servers may include web servers that interact with browsers operating on clients . Servers may or may not include actual processing hardware that is used to perform computations such as technical computations on behalf of clients . Servers may use a device such as farm manager to select or deselect processing resources in a manner that provides at least a subset of clients with desired levels of performance e.g. with desired processing times accuracies pricing etc. .

Farm manager may include a device that maintains information about a number of processing resources and that uses the information to select processing resources on behalf of a requesting device. For example farm manager may include a server that maintains information about a number of UEs that perform processing operations on behalf of a requesting device. Farm manager may select one or more processing resources based on determined criteria such as complexity of a problem a type of processing problem a determined processing interval a processing cost etc. Farm manager may be configured to manage processing resources statically e.g. according to fixed criteria and or dynamically e.g. according to changing criteria such as network loading processing complexity priorities etc. .

UEs and or other devices can be arranged in groups such as clusters in one or more exemplary embodiments. Clusters may allow resources to be managed in efficient ways as compared to resources managed without clusters . For example it may be determined that grouping certain UEs into clusters will enhance processing services provided to customers. In one embodiment UEs and may be grouped into cluster because these UEs may include a specialized hardware software configuration that allows a certain type of problem to be more efficiently processed in parallel among the UEs of cluster than if the problem were processed by devices not arranged in a cluster. In this embodiment it may further be determined that other UEs should operate individually such as UE and UE .

Clusters may be formed according to substantially any type of criteria such as a type of problem to solve a fee charged to customers an anticipated processing load or network load a particular hardware or software configuration a scalability parameter an operational redundancy parameter a processing latency value a geographic configuration etc.

Servers UEs farm manager and or clusters may be operated by an entity such as service provider in an exemplary embodiment. In other embodiments servers UEs farm manager and or clusters may be operated by a number of separate entities.

An embodiment of database may store user information revision control information and resource information. Other embodiments of database may store other types of information. User information may include user identifiers passwords privileges account information code e.g. simulation modeling analysis etc. software configuration information e.g. hardware preferences etc.

Revision control information may include revision identifiers revision dates size information etc. For example revision control information may include identifiers for particular versions of TCE that operate on certain UEs . Revision control information may further include information that identifies differences between versions releases of hardware or software operating in system such as differences between versions releases of TCEs UEs servers etc.

Resource information may include identifiers for resources in system . For example resource information may identify available UEs that can be used to operate on a task submitted by client . Embodiments of database may allow processing resources e.g. UEs and or clusters to be managed cost effectively as compared to managing resources without database . Resource information may be static or dynamic depending on configurations of system .

Information in database may be used for many purposes such as for generating reports. For example service provider can generate reports for users that identify types of processing performed number of UE processing cycles used remote processing costs etc. Information in database may be processed using for example an anonymizer to remove user identifiers so that information about system can be made available to a destination without identifying a source from which the data was gathered. Information in database may further be used to gather statistical information about devices in system . Statistical information can be used to identify development areas for service provider to identify hardware purchases to configure load balancing devices etc.

In one embodiment enclosure may include host computer A application server and TCE servlet . Host computer A may include logic that provides an operating system that supports server functionality such as web serving database read write operations user authentication billing etc. Host computer A may include logic based on open standards specifications e.g. UNIX and or proprietary standards specifications.

Application server may include logic that serves content such as web pages to one or more destinations such as clients . Application server may be based on open standards specifications and or proprietary standards specifications. TCE servlet may include logic that operates with application server to provide TCE functionality to a destination. For example TCE servlet may receive a request from client and may generate a response where application server makes the response available to client via network .

Other implementations of host computers such as host computer B to N may include logic that differs from the logic included in host computer A. For example host computer B may include TCE and one or more virtual operating systems OS . Virtual OS may include partitions within a device such as a server on which software is executed. For example a server may include three partitions such as is shown in host computer N where each partition includes a copy of virtual OS running a copy of TCE . Virtualization allows a single device to run multiple copies of software as if each copy of software were operating by itself on the device. Virtualization is used to allow a device such as a server to support multiple users simultaneously without exposing one user s information e.g. proprietary data to information associated with another user.

Exemplary embodiments can launch or terminate copies of virtual OS dynamically such as based on user demands. In addition exemplary embodiments can launch or terminate software applications operating within one or more copies of virtual OS as needed to provide scalable processing for substantially any number of users e.g. clients .

A user of client may enter a universal resource locator URL into browser where the URL is associated with a destination that provides remote processing resources. For example the user may enter URL into browser and client may send URL to server via network . Server may return login information to client such as a login screen displayed in browser .

The user may enter a user identifier e.g. a user name and or a password and client may send username and password to server . Server may forward username and password to database where database performs a lookup operation to determine whether the username and password are valid. Database may send a session list to server when the username and password are valid. Database may further maintain information about sessions in which the user and or client are engaged. Server may provide information from session list to client via session list page . Session list page may include a listing of sessions from which the user can choose.

The user may select one or more sessions from session list page . Client may send session name for a selected session to TCE servlet . TCE servlet may process session name and may return TCE page to client where TCE page allows the user to enter information such as a command that is compatible with TCE .

The user may enter an instruction such as command into browser and client may send command to TCE servlet . TCE servlet may process command and may forward information in command to TCE . TCE may process information in command and may generate an output such as a result produced by executing an equation contained in command . TCE may send TCE output to TCE servlet and TCE servlet may forward TCE output to client . The user may view information in TCE output such as the result in browser .

Assume for sake of example that a university may include a number of computing centers that each include a number of processing devices where each processing device is considered a UE. The university may further include management logic that allows the computing centers to collectively operate as a data center that can be accessed by a user wishing to perform remote processing. A data center may be capable of processing problems that are more complex than problems that can be solved by a UE or a group of UEs e.g. cluster .

Accounting may include logic that performs accounting operations on behalf of server . Accounting may include a database that stores user information expense information related to users credits that users may obtain e.g. when a user makes its processing devices available to other users wishing to perform remote processing report generating logic e.g. report generating components report templates etc. audit logic etc. In one embodiment accounting may maintain an electronic wallet for a user where the user can deposit credits into the wallet and where debits incurred by the user are removed from the wallet. Electronic wallets may provide users with a convenient technique for managing costs associated with remote processing activities.

In one embodiment service provider may make its processing resources available to service provider periodically continuously etc. to allow service provider to service additional users and or users with complex processing tasks. Alternatively service provider can provide processing resources to service provider to allow service provider to better serve its users. Exemplary embodiments can operate with any number of service providers etc. data centers UEs clusters etc. without departing from the spirit of the invention.

Processing logic may include logic to process instructions or data related to activities. For example processing logic may instruct other logic to perform operations may parse a user problem into a number of portions that can be sent to different UEs combine results received from different UEs into a single result perform arithmetic operations etc.

Interface logic may send information to or may receive information from another device component object e.g. a software object etc. In one implementation interface logic may include a code based interface e.g. an application program interface API and in another implementation may include a hardware interface such as a network interface card NIC .

Scheduling logic may coordinate activities of devices components objects etc. on server . For example scheduling logic may maintain a list of available resources that can be used for distributed and or parallel processing e.g. UEs . Scheduling logic may send information to a determined number of available resources so that the resources can perform parallel processing activities using the information. For example scheduling logic may determine that four UEs are required to perform a simulation on behalf of client . Scheduling logic may determine how to schedule portions of the simulation among the four UEs . Scheduling logic may send the simulation portions to the four UEs via interface logic .

Storage logic may store information related to server . In an embodiment storage logic may store instructions equations functions data communication protocols availability information for devices e.g. UEs etc.

Accounting logic may perform operations that monitor client activities and or activities of other devices associated with server . For example accounting logic may measure the amount of time processor cycles memory types and number of applications or modules etc. used by client when client is performing remote processing activities via server . Accounting logic may also compute charges and or credits for client . Accounting logic may operate with other devices such as electronic banking devices external to server when performing accounting operations on behalf of server .

Security logic may perform operations that identify and or verify the identity of a user related to client and or the identities of devices that perform remote processing activities on behalf of the user. For example security logic may verify user identifiers and or passwords client network addresses may establish communication tunnels on behalf of a client etc.

Data structure may include identifier entry and collectively entries . Identifier may include information that uniquely identifies an activity performed by server such as publishing casting serving etc. Entries may include information related to an entry identified using identifier . For example server may perform publishing in entry activities using network . Publishing may include activities that make information available to a destination. For example server based publishing in entry may make content such as remote processing content available to a destination e.g. client using a server e.g. server etc. . In a server based publishing embodiment a client may access content associated with the server when the client wants to perform remote processing activities.

User based publishing in entry may allow client to make content available to other devices. For example a user of client may write a simulation application that can be used by other clients on system . Client may make the simulation application available to other clients directly or via a proxy e.g. client may post the application on a web page maintained by a server .

Blog publishing in entry may allow information related to remote processing to be made available to destination devices via a web log.

Service based publishing in entry may make information about remote processing available to destinations as part of a service such as a subscription based service.

 Casting in identifier may refer to distributing content to destinations using techniques such as really simple syndication RSS feeds entry and or other techniques. Service in identifier may refer to services that can be offered using server where the services can be related to remote processing. For example server may host one or more contests in entry that are related to remote processing. Examples of contests are but are not limited to coding competitions where participants attempt to write the most compact fastest most accurate etc. code for a given problem first to solve competitions where the first user to successfully solve a problem wins etc.

Another type of service is a collaborative service in entry that allows users to share and or collaboratively develop code amongst each other. For example a first user may write an application to solve a certain problem and a second user may improve the application. A third user may use the improved application to solve the problem and may provide feedback to the first and or second user about the performance of the improved application.

Implementations of data structure and or other machine readable structures compatible with client server and or other devices in A C and can be used locally on a device e.g. stored read copied transferred from one component to another component in that device or may be sent from one device to another device over a communication medium e.g. a wired link a wireless link a network a bus etc. . Therefore embodiments of data structures discussed herein are not limited to any particular implementation format language device configuration etc. For example some or all of data structure can be used as code based interfaces e.g. APIs or embedded in hardware to facilitate the exchange of information in exemplary embodiments.

User interfaces described herein may receive user inputs via input devices such as but not limited to keyboards pointing devices e.g. a mouse stylus trackball touchpad joystick other types of motion tracking devices etc. biometric input devices touch sensitive displays microphones etc. User interfaces described herein may be user configurable e.g. a user may change the size of the user interface information displayed in a user interface color schemes used by the user interface positions of text images icons windows etc. in the user interface etc. and or may not be user configurable.

Interface may be displayed to a user via display and may include menu selection icons display area information window login information session information and cursor . Menu may include information associated with menus that are accessed by the user. For example in one embodiment menu may identify items such as File Edit View etc. that can be selected by a user e.g. via cursor to open one or more drop down menus. Drop down menus may provide the user with substantially any number of items that can be selected by the user to invoke various types of functionality on the user s behalf. For example selecting File may open a drop down menu that includes Open Close Save Save As Print Print Preview etc. Interface may further include icons that let the user perform actions such as moving to a previous display returning to a home display or page printing the contents of a portion of interface etc.

Icons may include mechanisms that perform predetermined functions on behalf of the user based on a user input. For example an icon may include an arrow that points in a first direction and allows the user to scroll back to a previous display when the arrow is selected by the user. In an embodiment icons may be associated with a piece of executable code e.g. a widget that performs an operation on behalf of a user when icon is selected. Display area may include a portion of display that is used to display information to a user.

Information window may include a portion of a display region that is used to display information to a user such as information about remote processing performed by the user. Information window may display text or graphics to the user. For example information window may display login information such as user identification ID and password session information etc. to a user of client . In addition information window may display information about UEs a status of a parallel remote processing task source code debugging information that allows the user to diagnose code a dashboard to provide the user information about a remote processing session etc.

Cursor may include a mechanism that can be positioned by a user or device to identify and or select information in interface . Cursor may be positioned within interface via a pointing device a spoken command a keyboard input etc.

Graphics window may interact with the user such as by allowing the user to select portions of plot . For example the user may move cursor over plot within graphics window . Cursor may operate with logic e.g. executable code that displays information about the position of cursor in text window . For example text window may display coordinate information for cursor to the user.

An authorized user client may select local or remote execution act . For example a user may select local execution when the user wants to execute a portion of remote processing code locally on client . In contrast the user may select remote execution when the user does not want to execute remote processing code on client . In certain applications a user may not wish to download code for local execution because downloading code may delay execution of remote processing activities until the download is complete. A user may further not wish to download code for local execution when the user is operating a client with limited processing capabilities. For example a thin client may not have adequate processing power to execute remote processing code locally.

Client may determine whether local or remote execution is desired based on the user selection in act act . When remote execution is selected by the user client may send a command to server for remote execution act . For example client may send a simulation problem to server where the simulation is to be run using remote processing resources connected to server . Server may parse the simulation into pieces and may send the pieces to two or more UEs for processing. Server may receive results from UEs and may assemble the results into a final result. Client may receive the final result from server via network act .

When client selects local execution at act client may download code from server via network act . For example server may send code to client that parses a problem into pieces determines what UEs are available sends the problem pieces to identified UEs and assembles UE results into a final result. The user may enter and run a remote processing command locally at client act . Client may interact with two or more UEs to produce a final result for the user. Client may receive two or more results from UEs and may assemble the results into a final result act . Client may display the final result to the user via display .

Server may receive a login request from client using web service act . For example server may receive message . Server may process the login request and may authorize client act . For example server may use security logic and or user information from database to authorize client .

Server may select local or remote execution based on information received from client or based on information in database act . For example server may receive a request for local or remote execution from client . Alternatively server may maintain information in database as to whether client should run in a local or remote mode. For example database may include information that indicates client has only rudimentary processing capabilities and therefore client should always run via remote execution i.e. client should not run remote processing code locally .

Server may determine that client should operate via remote execution act and server may receive a command from client where the command is for remote processing act . Server may process the command e.g. may process command and may send the processed command to one or more UEs . For example server may determine that the command should be sent to two UEs operating individually and to one cluster that includes three UEs. Server may send the command and any necessary data e.g. data that will be operated on by the command to the two individual UEs and to the cluster act .

Server may receive results from devices performing remote processing on behalf of client act . For example server may receive a first result from a first one of the two individual UEs a second result from the second UE and a third result from the cluster. Server may assemble the results into a final result where the final result includes information from the first result the second result and the third result. Server may send the final result to client via network act . Client may display the final result to the user via for example browser .

When server determines that local execution should be used in act server may send code to client or to a user of client act 

Server may identify appropriate remote processing resources act . For example server may determine that the command should be operated on by cluster and data center . In one embodiment server may make this determination based on the availability of cluster and data center . In another embodiment server may make the determination based on a priority associated with the command and or client based on a fee that client is willing to pay for remote processing etc.

Server may determine whether parallel processing should be performed on the command and or data operated on using the command act . When server determines that parallel processing should be performed server may identify resources that can perform the parallel processing.

Server may parse the command and or data act . For example server may determine that cluster and data center are the most desirable resources to perform parallel processing on the command however when server attempts to send the request to data center data center may inform server that it is busy and cannot perform processing on behalf of client . Server may dynamically adjust configuration of parallel processing resources based on the busy status of data center and may send a portion of the command to data center .

Server may send parsed information such as the command to devices that perform parallel processing on behalf of client act . The remote devices may operate on their portions of the command and may produce results that are sent to server . Server may assemble the results into a final result act and may send the final result to client .

In act server may determine that parallel processing should not be performed. Server may send a command received from client and or data received from client to a single processing device act where the single device performs processing for client . Server may receive a result from the processing device act and may send the result to client .

Exemplary embodiments may be deployed in a number of arrangements to perform types of remote technical computing tasks. For example embodiments may participate in remote computing using various communication link configurations using a quick command service using scheduled sessions using a number similar software applications using resources that compute results within a determined time interval using logic that monitors computing applications and using published code. Examples of these embodiments will be further described below.

Client may operate in a number of configurations to perform remote processing using two or more units of execution. illustrate high level schematics of selected exemplary configurations that can be used to provide client with a number of remote processing services via UEs .

In the embodiment of client may dynamically set up and or teardown links . For example client may set up or teardown links based on processing needs computation costs etc. By way of example assume that UE finishes processing before another UE e.g. UEs and . Further assume that client tears down link when client receives results from UE while leaving links to the other UEs in place. Alternatively client may teardown a link to another UE e.g. UE and may shift traffic from that link to UE via link .

Cluster may send the requests for the remote testing service the remote processing service and the remote coding competition service to UEs outside cluster . For example cluster may send the remote testing service request to UE the remote processing service request to UE and the collaborative coding service request to UE . In the embodiment of UE and UE may be able to communicate with each other via path e.g. a bus or another type of interconnect to allow sharing of processing resources between the two UEs. In the embodiment of firewall may send requests to services via fixed links e.g. link and or wireless links such as wireless link .

Other exemplary embodiments may take other forms when providing remote services to one or more clients without departing from the spirit of the invention. For example an exemplary embodiment may provide a window that allows a user to quickly evaluate a technical computing command without requiring that the user be running a technical computing application locally on the user s device e.g. client .

Quick command service may include software that provides a browser based quick command window to client . In one embodiment quick command service may be configured to quickly execute commands on behalf of a user. For example a browser based quick command service may execute single commands much faster than the single commands can be executed locally on client when client is running a local version of a technical computing application e.g. a MATLAB software application .

Assume for sake of example that a user wishes to execute a MATLAB command on his local machine. The user may launch a MATLAB application on his computer and may have to wait for thirty seconds while the application loads on the local machine. Using the quick command service the user may type a command into a quick command window while working in an application while the MATLAB application is not open loaded or resident on the local machine. The user may type the command into the quick command window and a result for the command may be displayed to the user without requiring that the user wait for the MATLAB application to load. In fact the result may be displayed to the user almost instantaneously once the user enters the command. In one embodiment the quick command service may use a MATLAB application is that always running on a remote device with respect to the local machine such as a server connected to the local machine via a network.

Embodiments of quick command service may be implemented as widgets to allow a user to interact with a window such as a quick command window within browser . In one embodiment the window may be an HTML input window that is interfaced to an output region on browser e.g. an output window .

A result may include text graphics audio etc. For example quick command service may process x 1 10 and plot x and may produce textual results and graphical results. Quick command service may send the textual and graphical results to client . Web client may process the received results and may send them to browser . Browser may display the textual portion of the results in a text output region and the graphical portion of the results in graphic output region . In one embodiment text output region and or graphic output region may include windows for displaying results to the user.

Quick command service may let users rapidly prototype and or understand how certain commands functions etc. perform. In addition quick command service may let the user quickly obtain help regarding a command function etc. Assume for sake of example that a user is interacting with an application e.g. a spreadsheet application that is implemented in a statically typed programming language such as the C programming language via user interface . The user may wish to evaluate an expression using a dynamically typed programming language to quickly determine whether the expression is acceptable for inclusion into the spreadsheet application. The user may wish to prototype the expression in the dynamically typed language because processing the expression in the spreadsheet application may take too long.

In this example the user may wish to interact with a technical computing application to evaluate the expression. The user may be able to evaluate the expression in the technical computing application via quick command service . The user may select quick command widget while the spread sheet application is open in browser . Selecting quick command widget may associate a remote application here the technical computing application with quick command widget so that the expression can be evaluated.

The user may enter the expression in quick command window and the remote application may receive the expression. The remote application may use one or more remote processing resources e.g. UEs to evaluate the expression using the technical computing application to produce a result. The remote application may send the result to client where the result may be displayed in user interface .

The user may view the result and may decide that he she wants to perform additional computations using the remote application. For example the user may wish to write scripts that can be executed on the remote application to produce other results. The user may launch the remote application by for example selecting a launch application button on user interface . Selecting the launch application button may send a request from client to a device hosting quick command service and the device may provide the full capabilities of the remote application to client via user interface . For example the spreadsheet application may be closed and a user dialog screen for a remote technical computing application may be provided to the user. The user may be able to access all of the capabilities of the remote technical computing application via the dialog screen. For example the user may be able to execute a number of MATLAB commands using the remote technical computing application to produce a number of results.

Other embodiments of quick command service can be implemented in a variety of ways. For example another embodiment of quick command service may include a special key on a user s keyboard. Depressing the special key may open a quick command widget that allows a user to quickly enter and evaluate a command. Depressing the special button a second time may close the quick command widget and may remove displayed quick command results from the user s display device.

Other exemplary embodiments may perform other types of remote tasks on behalf of a client. For example an embodiment may run scheduled sessions using a technical computing application.

Referring to user interface may include code name field runtime field report identifier field add remove buttons and check boxes . Interface may be displayed on client using for example browser . A user of client may use interface to set up a scheduled session.

Code name field may include user entries that identify file contents to be run. For example code name field may include the names of jobs files folders etc. that include content that will be executed via the remote technical computing service.

Runtime field may include entries that identify when corresponding file contents identified under code name field should be run. For example runtime field may include start times start dates etc. that identify when a respective job file folder etc. should be executed via a remote technical computing service.

Report identifier field may include entries e.g. file names that identify data structures for holding results produced when entries under code name field are run.

Add remove buttons may allow a user to add or remove entries from interface . For example selecting the add button may open a window in interface or may move a cursor to a position within interface that allows the user to enter a filename in code name field a runtime value in runtime field or a filename in report indenter field . In contrast selecting the remove button may let a user delete information from interface . Check box may let a user select which reports to run. For example a user may double click on the check box proximate to FINANCE.m and a check mark may appear in check box . The check mark may indicate that an output file named AUG 18 07.TXT will be generated when FINANCE.m is run at 0600 hours.

Exemplary embodiments may generate a new user interface when a report is run for an entry in . For example a results window may be generated that contains information about each file that was processed. Assume for sake of example that a user specifies a number of jobs and start times for the jobs in interface . Further assume that the designated start times arrive. A scheduler may operate as part of the remote technical computing service and may identify available remote processing resources.

For example the scheduler may receive the job information and start times from interface . The scheduler may identify remote processing resources e.g. UEs that are available to perform remote processing on the jobs. The scheduler may send the jobs to available remote processing resources at the identified start times and may receive results from the remote processing resources when processing is complete. In one embodiment the scheduler may divide a job into parts and may send a first part to one remote processing resource and may send another part to another remote processing resource. The scheduler may receive a first result for the first part and a second result for the second part when processing activities are complete. The scheduler may assemble the first result and the second result into a complete result or final result that can be displayed to the user via interface or stored in a storage device.

In an embodiment the scheduler may dynamically schedule jobs among a number of remote processing resources. In dynamic scheduling the scheduler may allocate or de allocate jobs among remote processing resources while processing is performed. Dynamic scheduling may allow real time load balancing of processing for a particular job or for a particular arrangement e.g. cluster or pool or remote processing resources. Dynamic scheduling may further allow remote processing resources to be identified and or selected based on criteria such as processing costs processing speeds memory sizes locations e.g. geographic locations of remote processing resources input speeds for remote processing resources output speeds for remote processing resources security policies for remote processing resources etc.

Embodiments such as the ones illustrated in may run reports for substantially any type of information such as financial information test data weather data population data sports data education data etc.

Other embodiments can be used to perform other tasks such as comparing the operation of various versions e.g. releases of one or more software applications. For example an engineering manager may be running two different versions of a technical computing application e.g. MATLAB software Simulink software etc. within his group. The engineering manager may wish to determine if both versions of the software produce the same results when run against a particular input such as some or all of the problems models data sets etc. used within the group.

In another example the engineering manager may be considering whether to upgrade legacy versions of technical computing applications to a most recent version of the application. Before investing in the new software the manager may wish to determine if the new version produces the same results as the legacy versions of the technical computing application.

Other exemplary embodiments may perform other types of remote tasks on behalf of a client. For example an embodiment may allow a manager to compare operation of multiple versions of a technical computing application and or another type of application simultaneously.

By way of example server in may include a module that runs multiple versions of a technical computing application against each other using a predetermined input e.g. problem model data set etc. . Assume client identifies a problem and versions of a software application e.g. a technical computing application that will be run against the problem in parallel e.g. at substantially the same time . In one embodiment server may dynamically determine available versions of a technical computing application associated with client and or available from other locations or sources e.g. a latest version of the technical computing application available from a manufacturer or distributor . Server may display information about available versions of the technical computing applications to client via pop up windows and or other techniques using browser .

Further assume server executes the selected versions of the technical computing application against each other line by line. For example server may execute the first application on a first remote processing resource and the second application on a second remote processing resource. Server may stop executing and may provide an error and or intermediate result to client when answers between two or more compared versions begin to diverge. Alternatively server may identify locations in compared versions where results begin to diverge and may continue running the versions until a fatal error is encountered or until final results are produced even if the final results vary between the compared versions.

In one embodiment server may use synchronization logic to perform line by line execution between two versions of a technical computing application even when the two versions may contain a different number of lines of code with respect to each other may be written in different languages may run on different platforms e.g. different operating systems etc.

Input name may include information that identifies the name of a problem data set model etc. against which multiple versions of the software application are run. Input name may include for example a filename a link an address etc. that identifies information input to two or more software applications. Output name may include information that identifies a result produced by the two or more software applications when run against the filename link address etc. identified in input name . Output name may include a filename a link an address etc. Information associated with output name may include text graphics audio video etc. depending on the types of results produced by the two or more software applications.

Revision identifier may include information that identifies software applications that will be run against a problem data set model etc. identified by input name . Revision identifier may include a filename link address etc. For example revision identifier may include version names or version numbers for respective software applications that will be run against a particular problem. In revision identifiers may include names like release of a MATLAB software application release .of a MATLAB software application or release of a MATLAB software application. Other embodiments may include information identifying other types of programs.

Information identifier may include types of information that further elaborate on entries in revision identifier . For example information identifier may indicate a release date for a software application indicate a size of a software application indicate the last time a software application was used etc. Platform identifier may include information that identifies a platform on which a software application is run. For example platform identifier may include operating system identifiers hardware platform identifiers e.g. type of microprocessor memory configuration etc. and or other types of information related to a platform on which a software application is run.

Add remove buttons can include logic that allows a user to enter or delete information from user interface . User interface may further include check boxes that can be used to activate or deactivate entries. For example placing a check mark next to an entry in user interface may cause a software application associated with the entry to be run against a problem identifier in input name .

User interface may allow client to compare the operation of two or more software applications against each other with respect to a single problem. For example a problem for a control system can be identified via input name and an output file can be identified via output name . Client may further identify three versions of a MATLAB software application to run against the control system problem namely release release . and release . In addition some of the software applications may be run on multiple platforms against the control system problem e.g. release .which can be run on LINUX UNIX and Windows XP and release which can be run on an Imac compatible operating system and UNIX .

Server may run the identified software applications against the problem in parallel and may generate a result file that includes results from the respective software applications. For example in one embodiment two versions may be started at the same time so as to operate in parallel. In another embodiment a first version may be started at a first time and a second version may be started at a second time that occurs after the first time. As long as the two versions are operating at the same time for at least one time increment the two versions are considered to be running in parallel.

Embodiments may store and or display information to a user via a results file on client . In one embodiment result information may be displayed on client in an arrangement that lets a user of client quickly compare results among the software versions that were run in parallel against the problem. For example a user may view a first result for a first version of a software application and a second result for a second version of the software application via browser . The user may evaluate the performance of the first and second versions with respect to an input to determine which version performed best. Embodiments may further store results for the compared versions via a storage device.

User interface may further include an expand collapse arrow black triangle in that can be used to expand and or collapse information related to a software application. For example user interface may provide summary results for each software application and a user may select an expand collapse marker to see additional information about results for a particular software application.

User interface may further include text output graphics output and launch to desktop button for release . and text output graphics output and launch to desktop button for release .

Alternative embodiments that compare execution of two or more versions of a software application may include threshold logic that is used to determine when results for the two applications diverge. For example a user may specify a threshold value that identifies a minimum or maximum acceptable deviation between a first result produced by a first version of a software application and a second result produced by a second version of the software application. Parallel execution of the two versions may stop when deviation between the first result and the second result meets or exceeds the threshold value.

In still other alternative embodiments that compare two or more revisions of a software application intermediate results may be generated. For example each version of the software application may contain three code modules where each module produces an intermediate result when executed. A user may specify a threshold value for each module and or a threshold value for the entire application. In this example three intermediate results may be generated when the two versions of the software application are executed against each other in parallel.

Other exemplary embodiments may perform other types of remote tasks on behalf of a client. For example an embodiment may perform a number of calculations within a predetermined interval for client .

Assume for sake of example that a financial analyst has a number of financial calculations that must be performed before financial markets open the next day. The analyst may use an exemplary embodiment to perform the financial calculations within a determined interval. The analyst may identify a time by which the calculations must be performed and or other parameters such as cost security protocols etc. For example the analyst may be able to specify that calculations must be complete by 7 00 AM the next day and that the calculations should be performed as inexpensively as possible.

An embodiment may accept inputs on behalf of the analyst and may distribute computations that use the inputs among a number of remote processing resources that run technical computing applications for performing processing activities on behalf of a requesting device. The embodiment may include logic that estimates the number of resources and or computational power of resources required to perform desired calculations within a specified interval here 7 00 AM the next day . In addition the embodiment may dynamically identify and or reserve remote processing resources based on calculations to be performed and or other parameters e.g. cost etc. . The embodiment may parse the calculations into portions and may send the portions to reserved resources for remote processing. The reserved resources may send results to the embodiment when remote processing is complete and the received results may be assembled into a format that is useful to the analyst. For example the embodiment may display results to the analyst in a format that allows the analyst to make predications about how financial markets will perform when they open the following day.

Command window may include a window for receiving user inputs. For example a user may enter commands functions scripts etc. in command window . Information entered in command window may be used to process data perform simulations generate graphical displays etc. Data files window may include information that is operated on by commands in command window to produce results. For example data files window can include the names of files that include financial data that is processed to produce one or more results. In other embodiments data files window may include links addresses etc. that identify data used with interface .

Options window may include information related to remote processing activities performed on behalf of client . For example a user may enter criteria associated with the remote processing into options window . For example a user may enter a completion time names of the processing resources that will be used in the remote processing addresses for the processing resources costs associated with the processing resources an estimated completion time storage requirements for results generated by the processing etc.

In an embodiment a user may modify information in options window . For example the user may remove an identifier e.g. name for a resource that has a high cost. The user may enter information for one or more other resources having lower costs in place of the removed resource and may run calculations using the lower cost resources. For example the user may delete the name of one high cost resource and may replace it with the names of two lower cost resources. In another embodiment interface may include a dial slider etc. that allows the user to change processing resource names speeds memory sizes etc. For example a user may move a graphical dial clockwise and names progressively faster processing resources may appear in options window . In contrast when the user moves the graphical dial counter clockwise names for lower speed processing resources may appear in options window .

Graphics output window may include graphical information related to processing performed on behalf of client . In one embodiment graphics output window may include plots images etc. of results produced when data files are operated on by commands in command window . In another embodiment graphics output window may include graphs of performance data e.g. percent completion CPU usage of remote resources workspace usage etc. related to remote processing activities performed on behalf of client .

In one embodiment a user may run a technical computing application at client e.g. a local copy or a remotely accessed copy . The user may access remote processing resources that will perform a desired calculation prior to a determined time. In one embodiment remote processing resources may be provided via a virtualized operating system that can be served from a number of CPU s e.g. CPUs associated with a number or remote processing devices . Use of virtualized resources facilitates dynamically moving a processing task from one resource to another resource e.g. a processing task can be moved from a slower resource to a faster resource during a calculation . In an embodiment the user may request resources that are operated by the user i.e. the user may own the resources or an organization to which the user belongs e.g. a corporation that employs the user or the user may request resources that are owned by a third party with respect to the user e.g. the user may rent processing resources from the third party .

In the embodiment of logic may determine the number and types of devices required to perform desired processing on behalf of the user. For example the logic may determine whether processing should be performed by remote clusters or a number of individual remote devices and or whether single core or multicore machines should be used. The logic may further determine whether machines with high speed processors are needed or whether machines with standard speed processor are satisfactory. The logic may also make other determinations such as whether machines with large memory capacities are needed to complete the processing before the determined time.

Other exemplary embodiments may perform other types of remote tasks on behalf of a device. For example an embodiment may be used to monitor activities performed by a number of users.

For example a technical computing application may be hosted as a web service e.g. within a corporation . The hosted technical computing application may be used by a number of users e.g. developers at any given time. The hosted technical computing application may include a module that monitors usage of the application by the developers. For example server in may include monitoring logic that determines how often each developer runs the hosted application the types of operations performed by the developers e.g. writing code compiling code debugging code and or executing code etc.

Manager may include a computing device that interacts with developers . For example a supervisor of a software engineering group may operate manager to monitor and or coordinate activities of software developers working at developers . The supervisor may issues tasks receive time cards receive reports monitor usage etc. of developers using manager . Assume that the supervisor wants to determine how a software application is being used within an organization so that decisions can be made with respect to the software application individuals working with the software application etc. The supervisor may use manager to monitor developers activities with the software application. For example the supervisor may determine how often developer interacts with the software application.

Engineering database may store and or process information related to developers manager and or software applications used in system . For example engineering database may store information about usage of software applications operated in system . Database may further process the stored information and may generate reports for manager .

Window may include information that identifies versions of a software application e.g. number of seats installed usage information for the installed versions etc. For example window may indicate the number of seats of a technical computing application e.g. MATLAB software that are installed in an engineering department at a corporation. For example installed information may identify the number of seats installed within the engineering department. Window may further include information related to the installed seats. For example used information may indicate the number of seats used within determined intervals e.g. within the last 30 days 60 days 90 days etc. Used information may further identify seats that have not been used within a determined interval e.g. not used within 90 days. Information about seat usage may be used by the engineering manager to perform for example wear based analysis on the software applications e.g. by identifying worn applications which are applications that are frequently used .

Window may further include detail button that can be selected to display additional information about one or more of used information . For example a supervisor may double click on detail button 30 day Detail to obtain additional information about seats used within the last 30 days.

Window may include engineer identifier that identifies an individual or a device used by the individual e.g. developer that is associated with one or more seats of a software application. For example Ned Gulley may be an engineer that is associated with a seat that has been used within the last 30 days. Time in application may include information that identifies usage information for a seat. For example Ned may have used the software application for 220 hours in the last 30 days.

Time writing code may include information that identifies an amount of time that an individual or device spent writing code or other material e.g. documentation . For example Ned may have spent 10 hours of the 220 hours that he was using the software application actually writing code. Time running code may include information that identifies an amount of time that was spent running code. For example Ned may have spent two hours running code that he wrote during the last 30 days. Time debugging code may include information that identifies an amount of time that was spent debugging code. For example Ned may have spent 208 hours debugging code that he wrote during the last 30 days.

Information displayed in user interfaces and may help the supervisor make decisions about installed software applications and or individuals using the software applications. For example the supervisor may determine that 250 of the 1200 installed seats see are not needed because they have not been used within 90 days.

The supervisor working at manager may further use information from user interfaces and to make forward looking decisions such as purchasing decisions hiring decisions resource allocation decisions etc. For example the supervisor may decide that his group needs additional copies of certain software based on high usage rates. Or the supervisor may determine that faster hardware and or distributed processing capabilities are needed to reduce the amount of time required for running code.

Other exemplary embodiments may perform other types of remote tasks on behalf of a device. For example an embodiment may publish code for a technical computing application to the Web.

Assume that an engineering professor wants to teach his students about control theory. The professor may wish to have the students focus on a particular aspect of control theory e.g. feedback without becoming distracted by other aspects of control theory. The professor may determine that computer based exercises will help the students learn the desired material however the professor may not want the students spending time generating their own code for the exercises. The professor may decide that a good way for his students to learn is to interact with web based exercises that expose the students to all of the code used to implement an exercise while only letting the students change selected portions of the code e.g. portions of the code that alter feedback in a control system.

The professor may interact with a system that allows the professor to create exercises that operate with a technical computing application e.g. MATLAB software that runs in dynamically typed programming language e.g. an array based language . The system may further allow the professor to protect certain portions of the code e.g. by preventing editing copying etc. while leaving other portions of the code unprotected e.g. by allowing editing copying etc. . The system may further allow the professor to identify protected portions of the code and or unprotected portions of the code using various techniques such as highlighting labeling etc. . The system may allow the professor to publish an exercise that includes the identified code portions may allow students to interact with unprotected portions of the exercise may produce results for the students based on the user interactions with the unprotected portions and or may capture user interactions so that the professor can determine whether the students understood the exercise.

Instructor may include a device that executes instructions. In one embodiment instructor can include functionality of client or server . Instructor may be used to write code protect code label code e.g. with annotations or instructions for students send code and or receive code or other information e.g. questions answers etc. from students .

University server may include a device that executes instructions. In one embodiment university server may include functionality of server . In one embodiment university server may provide code from instructor to students via network . University server may include web service M file and HTML file . Web service may include logic that sends information to or receives information from a destination. For example web service may send code written by instructor to students and or web service may receive questions answers etc. from students .

M file may be a file that includes code written in the M language for use with MATLAB software. For example instructor may write an example problem for students in M. Instructor may receive an input from a user e.g. a professor teaching the class that identifies and or modifies portions of the M code. For example some of the inputs may identify a portion of M code e.g. one or more functions in the code as protected code. Protected code may include code that has restrictions placed on it by instructor . For example protected code may include restrictions that prevent certain types of activities such as copying editing saving displaying etc. In protected code may be visible on a display of student or N however protected code may not be edited by student or N.

Instructor may further receive a user input that identifies a portion of the M code as unprotected code. Unprotected code may include code that does not have restrictions placed on it. In an alternative embodiment unprotected code may include code having fewer restrictions placed on it as compared to a number and or type of restrictions placed on a piece or section of protected code. In unprotected code may be edited by student or N. For example instructor may label certain equations in the M code as unprotected where the labeled equations control certain aspects of the M code file.

Assume for sake of example that the professor wants his students to understand how certain activities may alter the performance of a system such as a control system. In particular the professor may want the students to understand how sample rates feedback and or damping contribute to stable and or unstable performance of the system. The professor may label code portions as protected portions when the code portions do not contribute to for example a sample rate of the system. For example the professor may protect code portions that create plot axes axes labels that set initial conditions for the system that vary feedback for the system etc. In contrast the professor may label other code portions as unprotected when these other code portions are related to the sample rate of the system. The students may be allowed to manipulate values and or operations in unprotected code portions to change how the system operates.

University server may pass information about M file to HTML file when protected and unprotected portions of M file are identified. HTML file may include information about the M code code or may include the M code itself. HTML file may include code that renders a dynamic HTML page on a device such as students . An embodiment of the HTML page may make use of a technical computing application e.g. MATLAB software to allow students to interact with unprotected portions of M file . The HTML page may identify protected and or unprotected portions of M file using substantially any technique such as shading highlighting contrasting colors contrasting fonts flickering fonts symbols audio signals tactile signals etc. In one embodiment a window may be placed around unprotected code and the unprotected code may be visible to a user. In contrast protected code may be blocked from view e.g. by covering the protected code with an opaque area or protected code may be identified by a type of shading that differs from shading associated with unprotected code.

University server may pass HTML file to web service for display to students . Information displayed to students via web service may be interactive so that user inputs can be received from students and passed to web service . For example web service may display an unprotected code portion on student . A user of student may enter a new value for a parameter in the unprotected code portion and web service may pass the new value to an M code function operating on university server . The function may be evaluated using the new value to produce an updated result. Web service may receive the updated result and may display the updated result to the user via a display device on student .

The embodiment of can be modified to operate in other ways. For example functions performed by university server may be offered as a service that allows full access to all of the M code for a first price and that allows access to a portion of the M code for a second price that is lower than the first price. Subscribers may vary payments to university server depending on the number and or type of modifications they wish to make to the M file.

Instructions may include text graphics symbols audio video images etc. Instructions may inform a user about information included in code window . For example instructions may inform a user e.g. a student about entering information into code window may inform a user about lessons that should be learned by interacting with code window may explain what other text graphics etc. in code window do etc. Instructions may further include information that identifies portions of code that should be labeled as protected code and or unprotected code.

Operational code may include text graphics symbols audio video images etc. In an embodiment operational code may include text based code that implements one or more functions that produce results when executed. For example in operational code may receive user inputs process user inputs generate data values plot data values display data values etc.

Page may be created and or edited using instructor . When page is complete it can be sent to university server where page can be formatted for publishing via web service . For example page can include an M file that implements one or more functions that generate results. M file may be converted into an HTML file that can be published via web service .

Window may include a portion of a display area that includes user inputs unprotected code and or protected code . Window may be defined using borders and or other techniques in an embodiment.

Unprotected code may include code that can be modified by a user. For example unprotected code may include a portion of a published M file that allows a user to enter values before running the M file. In an embodiment unprotected code may include fields that identify a region where user inputs can be entered. The published M file may read values in fields when the M file is run and may generate results using read values.

Protected code may include a portion of the published M file that cannot be modified by a user. For example protected code may include code that reads values from fields that processes the values that generates results based on the processed values and that plots the results on a display device or printed output or that stores the results in a storage device.

Run button may include logic that runs the published M file using values in fields . For example a user may enter a value of 7 for dt and a value of 100 for xMax into fields and may select run button via a pointing device. The published M file may run and may produce one or more results based on the values 7 and 100 . For example the published M file may generate a plot.

A user may re run the published M file using different values to determine how the operational code operates with the different values. For example in display page may be displayed via browser . The user may interact with unprotected code in page and may enter new values in fields . For example the user may change 7 to 10 for dt and may change 100 to 40 for xMax. The user may re run the published M file by selecting run button .

The published M file may run using 10 and 40 as inputs and may produce a result. illustrates an exemplary plot that is produced when the published M file is run with these updated inputs. For example page may be displayed to the user when the published M file is run with 10 and 40 as input values. In an embodiment information in plot may change when the published M file is run with 10 and 40 . The embodiment may help a user make decisions based on results displayed in pages and . For example the user may determine whether the published M file produces more desirable results with 7 and 100 as input values or with 10 and 40 as input values.

In an embodiment information entered by the user may be sent back to university server and or instructor . For example the professor may determine whether his students completed an entire exercise obtained correct results etc. by examining information received from pages and or .

Bus may include one or more interconnects that permit communication among the components of client server . Processor may include any type of processor microprocessor or processing logic that may interpret and execute instructions e.g. an FPGA a application specific integrated circuit ASIC an analog processing device a quantum based processing device etc. . Processor may include a single device e.g. a single core and or a group of devices e.g. multi core .

Memory may include a random access memory RAM or another type of dynamic storage device that may store information and instructions for execution by processor . Memory may also be used to store temporary variables or other intermediate information during execution of instructions by processor .

ROM may include a ROM device and or another type of static storage device that may store static information and instructions for processor . Storage device may include a magnetic disk and or optical disk and its corresponding drive for storing information and or instructions.

Input device may include any mechanism or combination of mechanisms that permit an operator to input information to a device that includes architecture such as a keyboard a mouse a touch sensitive display device a microphone a pen based pointing device and or a biometric input device such as a voice recognition device and or a finger print scanning device. Output device may include any mechanism or combination of mechanisms that outputs information to the operator including a display a printer a speaker etc.

Communication interface may include any transceiver like mechanism that enables a device to communicate with other devices and or systems such as client service provider UE farm manager etc. For example communication interface may include one or more interfaces such as a first interface coupled to network and or a second interface coupled to another device such as farm manager . Alternatively communication interface may include other mechanisms e.g. a wireless interface for communicating via a network such as a wireless network. In one implementation communication interface may include logic to send code to a destination device such as a destination device that can include general purpose hardware e.g. a personal computer form factor dedicated hardware e.g. a digital signal processing DSP etc.

A device that includes architecture may perform certain functions in response to processor executing software instructions contained in a computer readable medium such as memory . A computer readable medium may be defined as one or more memory devices and or carrier waves. In alternative embodiments hardwired circuitry may be used in place of or in combination with software instructions to implement features consistent with principles of the invention. Thus implementations consistent with principles of the invention are not limited to any specific combination of hardware circuitry and software.

Exemplary embodiments can be configured to dispatch requests according to policies. For example a client such as client may make a request for processing activities storage service operations application level services etc. An embodiment of the invention can intelligently handle the requests according to one or more policies that are used to determine how to handle the request. For example a policy may be used to identify the most appropriate remote processing resource to handle a processing request from the client given certain constraints such as a maximum latency for obtaining a result a cost threshold an accuracy threshold a security constraint etc.

Client network and server may be devices as described in connection with and display and LAN may be devices as described in connection with . Client may include application programming interface API and other devices in system may include similar APIs and or generally referred to as API . API may be comprised of software that invokes a service. For example API may invoke a service that performs processing on behalf of client while another API such as API may invoke a service that stores information on behalf of a requesting device. API may be on a device that invokes the API may be remote with respect to a device that invokes the API or API may be sent to a requesting device so that the requesting device can invoke the API locally once received.

In system API may dynamically determine where a software service should be run to satisfy a request. System may use one or more policies with API to determine where to run a software service on behalf of the requesting device. For example client may use API for requesting a processing service. API may be used to dynamically determine whether a local service i.e. a processing service resident on client should be used or whether a remote processing service should be used. If a remote service should be used API alone or in combination with other software in system may determine a particular remote processing resource for performing the service.

In an embodiment the APIs may be selected according to policies that can include but are not limited to a security policy a cost policy a bandwidth policy a state policy a latency policy a configuration policy a location policy a quality of service policy a topology policy an affiliation policy a licensing policy a rights policy an accuracy policy etc.

For example a security policy may require that resources used to satisfy the request must meet a certain security threshold e.g. must be on a certain type of network that processing resources are associated with certain entities that the processing resources provide an uncontaminated environment to the requesting device etc. A cost policy may include pricing metrics that cannot be exceeded by resources processing a request e.g. a cost per mega flop of CPU time a cost per mega byte of storage an access cost for a resource etc.

A bandwidth policy may determine a throughput for a network or device associated with performing processing on behalf of a requesting device e.g. a network connection may need to have a certain guaranteed bandwidth to comply with the policy. A state policy may identify a state that a processing resource needs to satisfy in order to perform processing on behalf of a requesting device e.g. a processing device may need to establish a processing environment from scratch before processing the request to eliminate chances that old information is residing in the environment when the request is processed.

A latency policy may identify a time interval within which a result must be produced received etc. once a request is dispatched to a processing resource. A configuration policy may identify a particular hardware software or combination of hardware and software configuration that must be present on a processing resource operating on a request.

A location policy may indicate that processing resources need to be at a certain location e.g. a geographic location in order to be used to process the request. A quality of service policy may identify a minimum threshold for the quality of service of a network device etc. used to process a request. A topology policy may identify one or more network topologies e.g. that may include devices in a cloud computing network or characteristics of the topologies that should be satisfied by devices and or networks used to process a request. Example characteristics may include but are not limited to proximity between two or more elements within the topology as measured by for example network bandwidth latency and or network addresses e.g. network domain network sub domain etc. .

An affiliation policy may identify affiliations for entities or devices used to process a request. For example an affiliation policy may indicate that only processing resources associated with an educational institution can be used to process a request. A licensing policy may indicate that processing resources need to comply with certain licenses in order to process a request. For example processing devices may need to have valid licenses for a technical computing environment in order to operate on a request received from a client.

A rights policy may identify certain legal rights that need to be complied with by processing resources operating on a request. For example a rights policy may indicate that processing resources need to satisfy patent copyright trademark export compliance etc. laws with respect to hardware and or software used to process a request. An accuracy policy may identify a threshold that identifies a minimum accuracy that processing resources must satisfy in order to operate on a request. Other embodiments of the invention may employ one or more other types of policies with or without the policies discussed above without departing from the spirit of the invention.

Server may include an API repository that stores APIs for use in system . For example when client requests a service and client does not have an appropriate API locally available an API such as API may be retrieved from API repository and made available to client . Client may use API to access the requested service.

Remote storage device may provide remote storage services to client . Remote storage device may include API that may be required to provide storage services to client in an embodiment. In another embodiment server may retrieve an API from API repository and may provide it to client or to remote storage device so that client can access remote storage services. In still another embodiment client may have an appropriate API in local storage and may use the API to access storage services.

System may include one or more remote processors to N generally remote processors that perform remote processing operations on behalf of a requesting device such as client or server . Remote processors may include APIs e.g. API for accessing remote processing services or APIs may be stored elsewhere in system . In an embodiment remote processor may make API available to client when client requests a remote processing service. API may determine which ones of remote processors are most appropriate for providing a requested processing service to client based on a remote processing policy associated with system .

Referring to a task may be identified act . For example client may have a processing task a storage task a communication task application level task etc. that needs to be performed. In an embodiment the task may be performed using a device that provides a service on behalf of the client where the device may be local e.g. performed on client or remote with respect to client . Once the task is identified a determination may be made as to whether adequate local resources are available on client for performing the task act . If adequate local resources are available the task may be processed locally using a service resident on client act . However if adequate local resources are not available an available service may be dynamically identified act . In an embodiment when a task is processed locally at act another service may be requested via path and dynamically identified via act .

Once a service is identified a determination may be made as to whether an API is available for the identified service act . When an API for the required service is available the API is loaded act . In contrast when an API is not available for example locally at client an appropriate API may be retrieved act . The retrieved API at act may then be loaded act .

The loaded API may be used to dispatch a request that includes the task to an identified service act . For example a task may be sent from client to remote storage device using server . Remote storage device may provide a storage service to client . In an embodiment remote storage device may provide a confirmation message indicating that the storage request was satisfied. Client may receive the confirmation identified as a result in via network act .

Embodiments of the invention can be configured to dynamically scale remote processing resources according to current processing demands and according to predicted processing demands. For example an embodiment may use predictive models that accept current processing loads as an input and use other information such as historical processing data along with one or more algorithms to generate estimates of future processing loads. These future processing loads may be for a determined time interval such as a number of seconds minutes hours days etc.

By way of example a number of clients may be using remote processing resources to perform calculations. The clients may be placing a current demand on these resources and the current demand may be used as an input to a predictive model that uses the time of day and date information to predict remote processing loads for the next hour. The model may produce a result that indicates the current demand will likely increase by 25 within the next hour. The model result may be used by a scheduler operating in server to bring additional remote processing resources online and to make the additional resources available to clients . The additional resources may include enough processing devices to handle a processing demand increase of 25 without adversely impacting response times processing speeds processing accuracy etc. for clients .

An initial resource buffer may be created using outputs from the predictive model act . For example a buffer of 5 may be maintained where the 5 indicates that enough processing resources are provided so that no more than 95 of available processing resources are being used at a given time. Embodiments may establish buffers based on various parameters associated with a distributed processing environment. For example a buffer may be established based on overall processing load on a system based on particular types of processing loads e.g. image processing loads cell processing loads etc. . In addition a buffer may represent an aggregation of two or more different types of buffers that individually may be established according to different system parameters. Buffers may further be based on hardware resource loads software resource loads availability of specialized hardware resources availability of specialized software resources e.g. software applications software toolboxes operating system configurations virtual machine configurations etc. . Still further buffers may be established or modified based on a rate of change for a load on a system. For example buffers may account for rates of change for a number of users types of processing e.g. image processing cell processing filtering etc. system latencies quality of service accuracies of results device failures errors etc. over a determined interval such as a number of seconds minutes hours days etc.

Processing loads and or other activities may be monitored in the environment using the predictive model act . Information related to the monitored activities may be fed to the predictive model to update the model with current information about demands being placed on the environment act .

The processing may determine whether a current buffer size is adequate based on a result from the updated predictive model act . When the buffer size is adequate no change to the buffer size may be made act . However when the current buffer size is not adequate at act a determination may be made as to whether the current buffer size is too small act . When the current buffer size is too small additional resources may be brought online act . In contrast when the current buffer size is too large some resources may be rendered unavailable e.g. taken offline act .

Referring to worker provider service may be a generic interface that describes lifecycle events for managing workers such as workers used to perform remote processing activities on behalf of a client. For example worker provider service may reserve a worker may recycle a worker e.g. by returning the worker to a pool or resources for performing remote processing and or by cleaning the worker for reuse may store or retrieve policies associated with a worker etc. In an embodiment of the invention workers that perform remote processing may be MATLAB workers or MATLAB compatible workers and may operate as part of a computing cloud that is configured to perform technical computing operations on behalf of clients.

Abstract worker provider service may be a base class that implements reusable methods of the worker provider service interface . In an embodiment the abstract worker provider service may implement a subset of the methods defined in worker provider service .

Worker provider chain implementation may include an implementation of worker provider service that aggregates several worker provider implementations . In an embodiment worker provider implementations may include logic needed for using a heterogeneous collection of workers. The heterogeneous collection of workers may include both local and cloud based workers.

Worker provider local implementation may be an extension of the abstract worker provider service that is suitable for managing a collection of local workers. For example in an embodiment local workers may be workers local with respect to an internal network or machine i.e. may not be cloud based .

Worker provider cloud implementation may include an implementation of the worker provider service interface that embodies logic for managing life cycle events of workers that run in a computing cloud. In an embodiment the workers may be MATLAB workers or MATLAB compatible workers and the computing cloud may be a commercially available cloud or may be a cloud customized for one or more applications. In the embodiment of an element of the logic embodied in worker provider cloud implementation can include the implementation of an event based including time driven mechanism for creating new workers checking on the health including network accessibility validity of the technical computing environment etc. of workers and or recycling sick workers e.g. workers that fail to meet health requirements of the system

Scalability strategy interface may include an interface that defines methods e.g. key methods invoked during dynamic scaling decision making e.g. poll workerLookupService rules cloudService recycle workerLookupService rules machineId . Scalability strategy interface allows the worker provider implementation or to apply different strategies based on configuration properties or other aspects of a system.

Scalability strategy implementation may include an implementation of scalability strategy interface . Alternative implementations of scalability strategies may use different cloud resource providers evaluate respective rules at different rates selectively apply some rules and not others etc. without departing from the spirit of the invention.

Worker provider rules may include a set of policies that are applicable during scalability strategy evaluation. Examples of policies may include but are not limited to setting dynamic scaling on off terminating sick machines not terminating n sick machines so these machines can be examined adjusting strategy algorithms based on time of day day of week etc.

Machine worker lookup service may include an interface that describes a service which allows clients to lookup specific workers or discover generically described workers and associated technical computing resources. These technical computing resources may include machines e.g. virtual machines in a cloud computing environment . In an alternative implementation the workers may be MATLAB workers operating in a cloud computing environment.

Machine worker lookup service implementation may include an implementation of the Machine Worker Lookup Service. Machine worker lookup service implementation may be responsible for providing lookup and discovery services for the collection of all resources needed to support a technical computing environment worker e.g. worker DAO interface . In an implementation machine DAO may represent a single type of resource needed to support worker interface .

Worker DAO may include an interface that defines a data access object DAO that manages a collection of worker resources. In an implementation the worker resources may be MATLAB workers. In one implementation the MATLAB Workers may be dependent on a collection of technical computing resources an example of which is machine technical computing resource DAO .

Machine technical computing resource DAO may include an interface that defines a data access object that manages a collection of computing resources required by Worker DAO . In an implementation the worker DAO may be a MATLAB worker DAO.

Worker DAO implementation may include an implementation of worker DAO interface . Machine DAO implementation may include an implementation of the machine DAO interface .

Worker selector DO may include a data object used to generically describe a type of worker that meets a set of specified characteristics. In an alternative implementation worker selector DO may describe a type of worker that satisfies a specific MATLAB Worker instance.

The embodiment illustrated in and discussed above is illustrative and other embodiments may include more software modules fewer software modules and or software modules that differ from those illustrated in and or discussed above.

Exemplary embodiments may be configured to maintain a state of an environment in which a user performs computing operations. For example a user may be working within a technical computing environment to perform computations associated with a model of a dynamic system. The environment may include data plots instructions a workspace for storing variables and other information etc. This information may collectively determine a state for the environment in which the user operates. In some embodiments this state may change over time. For example the environment may have a first state when the model is at a first time step during execution and a second state when the model is at a second time step.

Conventional environments may not allow a user to resume computing operations from where the user left off because the conventional environment may not be able to duplicate the state of the environment that was present when the user previously logged off of the environment. The conventional environment may further pose problems when for example the user was initially working on a desktop machine logged off and then tried to log in using a wireless device such as an iPhone made by Apple Inc. . The conventional environment may not be able to synchronize the state of the desktop environment with the iPhone for several reasons such as but not limited to format incompatibilities between the wireless device and desktop device differences in processing capabilities between the wireless device and the desk top device e.g. the wireless device may not be able to handle all of the information making up the state of the desktop device licensing issues between software in the desktop environment and software on the wireless device etc.

The technical computing environment may receive user inputs act and may perform processing activities based on the received inputs act . For example the user may enter a command to process data and the technical computing environment may retrieve the data from storage and may process the data using commands specified by the user. The technical computing environment may store states for the environment periodically act . For example the state may include a most recent instruction entered by the user stored variables and or data plots generated by the user display window configurations keyboard shortcuts etc. State may further include among other things information about an operation performed using the technical computing environment an output a sample time e.g. a sample time used by a model executing in the environment an event e.g. a user initiated event or a device initiated event a configuration e.g. a configuration of the environment or a device a flag an error message a device identifier e.g. a network address host ID etc. an operating system identifier etc.

In one implementation the user may log off of a device such as client on which the processing was performed once the state is stored in act . In another embodiment the device e.g. client may remain running once the state is stored in act . For example the client may continue processing data using the technical computing environment.

A user may be detected act . For example the user may have walked away from client to attend a meeting and may be logging into the technical computing environment from a wireless device such as an iPhone or the user may log on from a publicly available computer. The technical computing environment may obtain device information for the device that the user is currently associated with act .

The technical computing environment may load state information from memory act . For example the technical computing environment may load a most recent state that represents a current state of the environment. The processing may determine whether the loaded state is a static state or an advancing state act . For example a static state may be a state that is not changing such as when a user logged out of the technical computing environment and left nothing running. In this situation the retrieved state is the most recent state and may be provided to the user via the wireless device act . The processing may convert the state into a format compatible with the wireless device before sending the state information to the user.

When the status of the state is advancing a current state may be accessed act . For an advancing state the current state may be retrieved from volatile memory e.g. RAM or from non volatile memory e.g. hard disk depending on the speed of the memory devices the rate at which the state is changing etc. The current state may be provided to the user via the wireless device act . After act or processing flow may return to act and the technical computing environment may receive additional user inputs. To the user the state observed via the wireless device may be identical to the state that the user would observe if the user were at the desktop device. When the user logs off of the wireless device and logs back onto the desktop device the state may appear just as it would if the user remained logged in via the wireless device.

Many alternative embodiments are possible based on the foregoing description. Examples of some alternative embodiments are but are not limited to those described below.

For example a first alternative embodiment may host a collaborative coding environment that encourages a group of programmers to develop quality code that can be used in remote processing applications such as remote processing applications that use one or more TCEs. For example a web site may allow programmers to submit remote processing code that can be tested edited enhanced etc. by other programmers that in turn post the tested edited enhanced etc. code to the web site. Still other programmers may use or may make enhancements to the code to further improve the code. Collaborating programmers and or end users may rate pieces of code in terms of parameters such as speed accuracy compactness etc. to allow still other users to make informed decisions about a piece of collaboratively developed code.

A second alternative embodiment may provide integration logic in conjunction with remote processing code to allow integration of remote processing code with other applications on a device e.g. client . For example a piece of integration logic may include software that allows a data acquisition application running on client to exchange acquired data with remote processing code operating locally on client . The remote processing code may send the acquired data to two or more processing devices such as UEs that process the data using a dynamically typed language and may receive a result from the UEs. The remote processing code may send the result to a display application running on client so that the result can be displayed to a user of client .

A third alternative embodiment may include a statistics module that operates with server where the statistics module acquires information about users that participate in remote processing activities. For example server may acquire information about problems e.g. size complexity etc. data user locations user demographics etc. when the users are engaged in remote processing using server . Server may use the statistics to direct development efforts debugging efforts marketing efforts purchasing efforts e.g. to determine what types of processing hardware to buy etc.

A fourth alternative embodiment may provide remote processing services on a tiered basis where different tiers have different cost structures. For example server may provide a first tier to a user where the first tier allows the user to use a fixed number of UEs for remote processing. The first tier may have a first cost associated with it e.g. a cost per month a cost per job etc. . Server may provide a second tier to another user where the second tier allows the user to use a number of UEs that is determined based on the complexity of a problem. The second tier may have a variable cost associated with it where the cost is determined by the number of UEs used for a particular processing task.

A fifth alternative embodiment may include a server that performs pre computing tasks based on a user s past behavior based on a type of problem operated on by server or based on other parameters. For example server may know that the user typically performs remote processing tasks that generate certain constants and or other information. When the user initiates a session or performs activities prior to remote processing activities server may pre compute the constants so that they are ready when the user begins remote processing. Pre computing constants and or other information on behalf of the user may reduce the amount of time taken to operate on the user s problem and or may reduce the amount of remote processing resources required to solve the user s problem.

A sixth alternative embodiment may run a first TCE and a second TCE with a timing interval between them where the timing interval allows one TCE to compute a result before the other TCE computes the result. For example a user may run a problem on a first TCE and a second TCE where the first TCE runs ten seconds ahead of the second TCE. If the first TCE encounters an error or crashes the second TCE may have debugging logic turned on so that the second TCE is running in debug mode when the second TCE executes the code portion that caused the error or crash. The second TCE may provide detailed debugging information that could not be obtained from the first TCE to allow the user to quickly and accurately debug incorrect code.

A seventh alternative embodiment may include a real time testing environment that includes a client and a number of UEs. The UEs may further be configured with various types of hardware such as specialized test hardware. A client may select a particular UE based on the type of real time testing that is being performed. For example a first UE may have a first test device attached thereto. The client may send an instruction and or data to the first UE when the client desires to have real time testing performed on the first test device. Real time test environments may include other types of hardware such as target devices and or code generators for creating code that can be run on the target devices. The client and the selected UE may exchange bi directional messages while the UE performs real time testing on behalf of the client.

An eighth alternative embodiment may provide games puzzles etc. using server and or remote processing devices such as UEs clusters and etc. For example server may host a game where the winner is the participant that can solve a problem using the fewest lines of code. This contest may operate like a golf game where the fewest strokes here lines of code identifies the winner. Alternatively server can post puzzles that participants try to solve using remote processors. Other embodiments may allow users to post contests puzzles etc. from one or more clients .

A ninth alternative embodiment may implement TCE using one or more text based products. For example a text based TCE may be implemented using products such as but not limited to MATLAB by The MathWorks Inc. Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence or Modelica or Dymola from Dynasim. The text based TCE may support one or more commands that support remote processing using one or more UE s .

A tenth alternative embodiment may implement TCE in a graphically based TCE using products such as but not limited to Simulink Stateflow SimEvents etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic Ptolemy from the University of California at Berkeley or aspects of a Unified Modeling Language UML or SysML environment. The graphically based TCE may support remote processing using one or more UE s .

An eleventh alternative embodiment may be implemented in a language that is compatible with a product that includes a TCE such as one or more of the above identified text based or graphically based TCE s. For example MATLAB a text based TCE may use a first command to represent an array of data and a second command to transpose the array. Another product that may or may not include a TCE may be MATLAB compatible and may be able to use the array command the array transpose command or other MATLAB commands. For example the product may use the MATLAB commands to perform parallel processing using one or more UEs .

A twelfth alternative embodiment may be implemented in a hybrid TCE that combines features of a text based and graphically based TCE. In one implementation one TCE may operate on top of the other TCE. For example a text based TCE e.g. MATLAB may operate as a foundation and a graphically based TCE e.g. Simulink may operate on top of MATLAB and may take advantage of text based features e.g. commands to provide a user with a graphical user interface and graphical outputs e.g. graphical displays for data dashboards to monitor UE etc. .

A thirteenth alternative embodiment may employ a copy of TCE on both client and UE where the TCEs allow workspace sharing. For example client may maintain a first workspace with a copy of TCE running on client and UE may maintain a second workspace with a copy of TCE running thereon. Client may create variables in the first workspace and UE may request the variables from the first workspace and may store the variables in the second workspace when performing parallel processing. UE may further make variables in the second workspace available to another UE e.g. UE client farm manager etc. to further facilitate parallel processing on behalf of client and or another device. Alternatively only client may have a workspace and client may communicatively couple the workspace to UE so that UE can access information therein.

A fourteenth alternative embodiment may allow client to perform parsing operations to facilitate remote processing for by way of example a model on client . For example client may run a Simulink model that includes a number of subsystems. Client may parse the model based on the subsystems and may send a first subsystem to a first UE and may send the second subsystem to a second UE where the first and second UE s are each configured as MATLAB UE s e.g. by running a version of MATLAB on each UE . The first and second UE s may process their respective subsystems and may request variables from client or from other devices e.g. from server . For example client may have a sharable workspace that is communicatively coupled to the first and second UE to allow the UE s access to variables needed to perform processing. The first and second UE s may each produce a result file that is sent back to client where client combines the files and performs a compilation operation to compile the model. Alternatively the first and second UE s may send the result files to a third UE where the third UE combines the result files and compiles the model on behalf of client .

A fifteenth alternative embodiment may perform remote e.g. parallel processing using stream processing techniques. For example a first UE may perform code generation for a model received from client . The first UE may send a result to a second UE and the second UE may perform a portion of a build operation on the generated code. The second UE may send its result to a third UE that performs a compile operation on the result received from the second UE. The third UE may generate a result that includes the compiled code and may send the result to client .

A sixteenth alternative embodiment may perform parallel processing on behalf of a client using one or more commercial computing grids. For example client may send a request for remote processing to a server that operates with a commercial computing grid where the commercial computing grid provides remote processing resources to clients for a fee e.g. a fee based on an amount of processing resources used by client . The commercial computing grid may contain one or more clusters that can be associated with one or more providers e.g. computing service providers . Client may rent time e.g. during a rental period on the grid and may perform remote processing during the rental period. For example client may exchange bi directional messages with one or more clusters within the grid one or more devices within a cluster etc. during the rental period. Rented resources may request state information from client e.g. information about available memory information about variables information about programming code information about functions etc. . Rented resources may also task client to perform operations e.g. processing activities sending information etc. on behalf of the rented resources. For example a device in a cluster may request that client perform processing to convert a data value from a first format to a second format before client sends the data value to the requesting device. Client and the cluster s used to perform remote processing on behalf of client may operate in a homogeneous or heterogeneous configuration depending on particular implementations used to perform remote processing.

In a seventeenth alternative embodiment a first UE can act as a client with respect to a second UE a third UE etc. For example client may request that the first UE perform parallel processing. Client and the first UE may exchange bi directional messages while the first UE performs remote processing. The first UE may determine that it can use additional remote processing resources from a second UE and a third UE. The first UE may perform bi directional communication with the second UE and the third UE to allow the second UE and third UE to assist the first UE with performing remote processing on behalf of client . Configurations can include substantially any number of clients and UE s arranged in any type of hierarchical relationship without departing from the spirit of the invention.

In an eighteenth alternative embodiment clients may be able to selectively become network hosts for versions of TCE residing thereon. For example client may download a version of TCE and code to perform remote processing using server . Client may perform a remote processing task using for example UE and may obtain a result. Client may wish to make its TCE version available for another client to use. Client may host its TCE and client N may make use of TCE to perform standalone processing or to perform remote processing using another device.

Embodiments described herein produce useful and tangible results. For example tangible results e.g. results that can be perceived by a human can be produced when a result is displayed to a user when a device makes a sound vibrates performs an operation e.g. moves interacts with a person etc. etc. Useful results may include but are not limited to storage operations transmission operations e.g. sending information or receiving information display operations displacement operations etc. Tangible and or useful results may include still other activities operations etc. without departing from the spirit of the invention.

Implementations may provide devices and techniques that perform remote processing on behalf of a device over a network.

The foregoing description of exemplary embodiments of the invention provides illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example while a series of acts has been described with regard to the order of the acts may be modified in other implementations consistent with the principles of the invention. Further non dependent acts may be performed in parallel.

In addition implementations consistent with principles of the invention can be implemented using devices and configurations other than those illustrated in the figures and described in the specification without departing from the spirit of the invention. Devices and or components may be added and or removed from the implementations of A C A E and depending on specific deployments and or applications. Further disclosed implementations may not be limited to any specific combination of hardware.

Further certain portions of the invention may be implemented as logic that performs one or more functions. This logic may include hardware such as hardwired logic an application specific integrated circuit a field programmable gate array a microprocessor software wetware or a combination of hardware and software.

No element act or instruction used in the description of the invention should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on as used herein is intended to mean based at least in part on unless explicitly stated otherwise.

