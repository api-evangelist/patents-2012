---

title: Policy-based switching between graphics-processing units
abstract: The disclosed embodiments provide a system that configures a computer system to switch between graphics-processing units (GPUs). In one embodiment, the system drives a display using a first graphics-processing unit (GPU) in the computer system. Next, the system detects one or more events associated with one or more dependencies on a second GPU in the computer system. Finally, in response to the event, the system prepares to switch from the first GPU to the second GPU as a signal source for driving the display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08564599&OS=08564599&RS=08564599
owner: Apple Inc.
number: 08564599
owner_city: Cupertino
owner_country: US
publication_date: 20121130
---
The disclosed embodiments relate to techniques for switching between graphics processing units GPUs in a computer system. More specifically the disclosed embodiments relate to techniques for policy based switching between GPUs in a computer system.

Power management is critically important for many electronic devices. For example portable electronic devices such as laptop computers mobile phones and personal digital assistants PDAs need to conserve power to operate for any length of time on battery power. At the same time many of these portable electronic devices are beginning to incorporate high resolution high power graphics technology. Rapid developments in this area have led to significant advances in 2D and 3D graphics technology providing users with increasingly sophisticated visual experiences in domains ranging from graphical user interfaces to realistic gaming environments. Underlying many of these improvements is the development of dedicated graphics rendering devices or graphics processing units GPUs . A typical GPU includes a highly parallel structure that efficiently manipulates graphical objects by rapidly performing a series of primitive operations and displaying the resulting images on graphical displays.

Unfortunately there are costs associated with these increased graphics capabilities. In particular an increase in graphics performance is typically accompanied by a corresponding increase in power consumption. Consequently many computer systems and portable electronic devices may devote a significant amount of their power to support high performance GPUs which may decrease battery life and cause heat dissipation problems.

One solution to this problem is to save power during low activity periods by switching from a high power GPU that provides higher performance to a low power GPU with lower performance. Computer system designers are beginning to develop hardware structures to support such systems. However it remains a challenging problem to determine precisely when to switch between low power and high power GPUs.

Hence what is needed is a method and an apparatus that facilitates determining when to switch between GPUs in a system with multiple GPUs.

The disclosed embodiments provide a system that configures a computer system to switch GPUs. During operation the system drives a display using a first graphics processing unit GPU in the computer system. Next the system detects through application programming interfaces APIs or system events related to the GPU an event associated with a dependency on a second GPU in the computer system. In response to the detection the system initiates a switch from the first GPU to the second GPU as a signal source for driving the display.

In some embodiments the API is associated with a graphics library video playback or a window manager.

In some embodiments parts of the system such as the window manager are able to control switching between GPUs to compensate for processes or events that might otherwise cause a switch between GPUs.

In some embodiments the system also switches the signal source back to the first GPU after all dependencies on the second GPU are removed.

In some embodiments the first GPU is a low power GPU which is integrated into a system chipset and the second GPU is a high power GPU which resides on a discrete GPU chip. The first GPU and the second GPU can have substantially identical circuitry and similar capabilities or dissimilar circuitry and or capabilities.

In some embodiments the first GPU is a general purpose processor running graphics code and the second GPU is a special purpose GPU.

In some embodiments the offline GPU which is presently not driving the display can be used to perform other tasks. For example an online integrated GPU can be dedicated to the window manager s user interface UI while an application performs work asynchronously using the discrete GPU.

The following description is presented to enable any person skilled in the art to make and use the embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing code and or data now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore methods and processes described herein can be included in hardware modules or apparatus. These modules or apparatus may include but are not limited to an application specific integrated circuit ASIC chip a field programmable gate array FPGA a dedicated or shared processor that executes a particular software module or a piece of code at a particular time and or other programmable logic devices now known or later developed. When the hardware modules or apparatus are activated they perform the methods and processes included within them.

The disclosed embodiments provide a method and system for switching between multiple graphics processing units GPUs in a computer system. The computer system may correspond to a laptop computer personal computer workstation and or portable electronic device containing an embedded GPU and a discrete GPU. The embedded GPU may consume less power than the discrete GPU while the discrete GPU may provide better graphics performance than the embedded GPU. As a result the rendering and display of graphics in the computer system may involve a tradeoff between performance and power savings.

More specifically embodiments provide methods and systems for policy based switching between multiple GPUs in the computer system. The policy may associate events in the computer system with dependencies on individual GPUs events associated with higher graphical performance requirements may have dependencies on more powerful GPUs while events associated with lower graphical performance requirements may have dependencies on less powerful GPUs and or the removal of dependencies on more powerful GPUs. Note that an event can generally include any change in the hardware or software operating state of the computer system whereas a dependency is an association between an event and the use of a specific GPU. For example an event with a dependency on a discrete GPU may trigger a switch from an embedded GPU to the discrete GPU to drive the display of the computer system. Dependencies on GPUs may also be based on user preferences associated with graphical performance in the computer system. For example a user preference for higher performance graphics may create more dependencies on a powerful GPU than a user preference for lower performance graphics.

After a switch is made to a higher performance GPU to drive the display a switch back to a lower performance GPU may not be made until all dependencies on the higher performance GPU are removed. For example a discrete GPU may drive the display during execution of applications that require video playback use graphics libraries request GPU support and or are otherwise graphics intensive. Once all graphics intensive applications and or operations are terminated the computer system may switch to an embedded GPU to save power. Policy based switching between GPUs in the computer system may thus increase graphics performance for applications that have higher graphics processing loads while conserving power when such applications are not being executed. As discussed below policy based switching may additionally allow for the dynamic configuration of graphics processing in the computer system that is independent of the applications installed on the computer system as well as seamless switching between GPUs through events that trigger the configuring of a GPU in the background prior to switching to the GPU.

During operation display stream from discrete GPU and display stream from embedded GPU both feed into data inputs of GMUX . Source select signal feeds into a select input of GMUX and determines which one of the two graphics sources will drive display . In the illustrated embodiment source select signal is produced by bridge chip which includes specific logic for generating source select signal . Note that source select signal can also be produced by a logic block other than bridge chip . For example source select signal can be produced by one or more processing units . The display stream from the selected graphics source then feeds into display .

In one embodiment discrete GPU and embedded GPU communicate through data path to synchronize their display streams. Note that synchronizing the display streams can involve synchronizing both the respective timing signals and the respective data signals.

In one embodiment discrete GPU is a high performance GPU that consumes a significant amount of power relative to embedded GPU a lower performance GPU that consumes a smaller amount of power. In this embodiment when the graphics processing load is light the system switches from using discrete GPU to using embedded GPU to drive display and subsequently powers down discrete GPU thereby saving power. On the other hand when the graphics processing load becomes heavy again the system switches graphics sources from embedded GPU back to discrete GPU .

Although we have described a system that includes a discrete GPU and an embedded GPU the disclosed technique can generally work in any computer system comprising two or more GPUs each of which may independently drive display . Moreover GPUs in the same computer system may have different operating characteristics and power consumption levels. For example the computer system may switch between a general purpose processor in one or more processing units e.g. central processing unit CPU and a special purpose GPU e.g. discrete GPU to drive display . Hence the disclosed technique is not limited to the specific embodiment illustrated in .

Also note that the above described process for switching between graphics sources does not involve shutting down or reinitializing the computer system. As a result the switching process can take substantially less time than it would have if a reinitialization had been required. Consequently the disclosed technique facilitates rapid and frequent switching between the graphics sources.

In one or more embodiments computer system provides policy based switching between discrete GPU and embedded GPU as the signal source for driving display . In particular computer system may select discrete GPU or embedded GPU to drive display based on a policy related to graphical performance in computer system . The policy may associate events in the computer system with dependencies on individual GPUs events associated with higher graphical performance requirements may be associated with discrete GPU while events associated with lower graphical performance requirements may be associated with embedded GPU .

Computer system may begin by using embedded GPU as the signal source for driving display until an event associated with a dependency on discrete GPU is detected through an application programming interface API associated with a graphics library video playback and or a window manager. When an application makes function calls through one or more predetermined APIs the system can infer that either more powerful or less powerful graphics processing capabilities will be needed by the application. In response to the one or more function calls the system can initiate a GPU switch. For example the dependency may correspond to use e g. linking loading method calls etc. of OpenGL OpenGL is a registered trademark of Silicon Graphics Inc. in the computer system and or QuickTime QuickTime is a registered trademark of Apple Inc. playback of decodable e.g. encrypted compressed encoded etc. video content. The dependency may also be triggered by individual applications and or users through explicit requests to switch from embedded GPU to discrete GPU e.g. through the graphics library and or window manager during application execution and or user preferences associated with graphical performance in the computer system.

Note that the GPU switch is not necessarily triggered by or associated with an explicit API call. More specifically the GPU switch may be triggered by an event which corresponds to 1 launch of an application associated with the dependency on the second GPU 2 termination of an application associated with a dependency on a GPU 3 invocation of the request to switch from the first GPU to the second GPU e.g. by an application 4 switching modes or functions within an applications and 5 use of a graphics library and or video playback of decodable e.g. digital rights management DRM content. Events and or dependencies associated with policy based switching between GPUs are discussed in further detail below with respect to .

In response to the event computer system may switch from embedded GPU to discrete GPU as the signal source for driving display . During the switch threads that depend on discrete GPU may be blocked until discrete GPU is fully driving display . A switch back to embedded GPU as the signal source may be made after all dependencies on discrete GPU are removed. For example computer system may revert to embedded GPU as the signal source after video playback of hardware decodable content use of graphics libraries and or execution of applications associated with discrete GPU is complete.

Because switches between discrete GPU and embedded GPU are based on events associated with graphics processing requirements in computer system computer system may include functionality to respond rapidly to changes in the graphical performance requirements of applications and users thereby improving both graphical performance and power savings. Furthermore the detection of such events through one or more APIs in computer system may allow the display of graphics in computer system to be dynamically configured independently of the applications installed on computer system . Finally the use of an adaptable policy to govern switching between GPUs may allow individual applications and or users associated with computer system to modulate the use of embedded GPU and or discrete GPU in driving display .

These data clock signals and feed into clock MUX which selects one of data clock signals and to be forwarded to display stream assembler . In one embodiment the GMUX controller provides select signal to clock MUX . Alternatively select signal can be provided by other sources such as a processor in one or more processing units or another controller.

Next display streams and with data clocks separated feed into data buffers and respectively. Data buffers and examine display streams and to determine when blanking intervals occur and produce respective blanking interval signals and . Data buffers and also produce output data streams that feed into data MUX .

Blanking interval signals and feed into GMUX controller which compares blanking intervals and to determine how much overlap if any exists between the blanking intervals of display streams and . Note that blanking interval signals and can indicate vertical or horizontal blanking intervals. If GMUX controller determines that blanking intervals and have a sufficient amount of overlap GMUX controller asserts select signal as the blanking intervals begin to overlap. This causes clock MUX and data MUX to switch between display streams and during the period when their blanking intervals overlap. Because the switching occurs during the blanking intervals the switching process will not be visible on display .

Finally the output of data MUX and the selected data clock feed into display stream assembler which re serializes the data stream before sending the data stream to display .

As shown in events may be associated with use of a graphics library video playback and or actions of a window manager . Graphics library may allow applications to use graphics hardware acceleration on the computer system. As a result use of graphics library may be associated with higher graphical performance requirements and trigger use of a discrete GPU . For example a three dimensional 3D computer game may use OpenGL to render complex scenes and characters using graphics hardware acceleration. Moreover the 3D computer game may require the functionality of a discrete GPU to render and display graphics in real time.

In particular use of the discrete GPU may be triggered if the application does not implicitly support both GPUs meaning the offline renderer is unsupported during a call to graphics library and or an application makes an explicit request for the discrete GPU through a call to a function in graphics library to use the discrete GPU . On the other hand if an application supports offline rendering the policy may not dictate an immediate switch to the discrete GPU. Instead the policy may allow the application to configure the use of both GPUs through additional method calls to graphics library . Moreover an application may remove a previously created dependency on the discrete GPU through a subsequent explicit request to use the embedded GPU.

As mentioned previously use of graphics library may correspond to linking to graphics library loading of graphics library during application execution and or method calls to graphics library by an application. As a result a switch to the discrete GPU may be triggered before application execution during application execution and or during the use of graphics hardware acceleration by the application. In addition events such as linking or loading may be used to configure the discrete GPU so that a seamless switch to the discrete GPU may be made when the application finally utilizes graphics hardware acceleration through graphics library . See for example the description with respect to for more details.

Video playback may be associated with a dependency on the discrete GPU if decodable content and or high resolution high bitrate playback are involved. For example the discrete GPU may be used for playback if the video content is encoded encrypted and or compressed using mechanisms that allow for decoding decryption and or decompression by the discrete GPU. The use of the discrete GPU to decode video content may further be determined by the resolution and or bitrate of the video being played. For example the policy may specify decoding by the CPU of the computer system for low resolution video and decoding by the discrete GPU for high resolution high bitrate video. Alternatively the discrete GPU may be used in an offline context to decode video content that is then displayed on the computer system by the embedded GPU. Dependencies related to video playback may be removed once video playback stops .

An action with window manager may also trigger a switch to the discrete GPU for example in the event of a captured display explicit request and or connection of an external display . More specifically the capturing of a display by an application wherein the application assumes full control over what is presented on the display screen e.g. full screen may change the configuration of displays in the computer system and trigger the use of graphics library which in turn may prompt the use of discrete GPU . Similarly an application may make an explicit request to use the discrete GPU and or request GPU support through window manager thus triggering a switch to the discrete GPU . The connection of an external display to the computer system may also increase the graphical performance demands of the computer system and cause the discrete GPU to be used . When these triggering conditions stop for example because of release of a captured display stopping of GPU support an explicit request to use the embedded GPU and or disconnection of the external display the stoppage may trigger the removal of one or more dependencies on the discrete GPU.

Finally the policy may specify the use of the embedded GPU after all dependencies on the discrete GPU are removed . In other words a single dependency on the discrete GPU may trigger a switch to the discrete GPU while the embedded GPU is used when no executing applications have dependencies on the discrete GPU.

Those skilled in the art will appreciate that different policies for switching between GPUs may be used based on user preferences application requirements and or GPU features associated with the computer system. For example dependencies associated with use of a GPU s features may exist if some of the features are not available on other GPUs in the computer system. Along the same lines user preferences for higher performance graphics may prompt the identification of additional dependencies on the discrete GPU in the policy while user preferences for lower performance graphics may decrease the number of dependencies on the discrete GPU in the policy.

Also note that all of the dependencies for an application can be removed upon termination of the application.

Initially a display is driven using a first GPU in the computer system operation . The first GPU may correspond to a low power and or low performance GPU such as a general purpose processor executing graphics code and or an integrated GPU. Next an event associated with a dependency on a second GPU in the computer system is detected through an API operation . The second GPU may be associated with higher performance and power consumption than the first GPU. For example the second GPU may correspond to a discrete GPU if the first GPU is an integrated GPU or the second GPU may correspond to a special purpose GPU if the first GPU is a CPU. The API may be associated with a graphics library video playback and or a window manager. As a result events detected through the API may be used to assess the graphical performance requirements of the computer system and trigger switches between the first GPU and second GPU.

In response to the event a switch from the first GPU to the second GPU as a signal source for driving the display is made operation . As described above a seamless switch between the first GPU and the second GPU may be facilitated by configuring the second GPU prior to the switch. For example configuring of the second GPU may begin upon loading of a graphics library into an application s executable while the switch to the second GPU may not occur until the application performs a draw operation using the graphics library.

The second GPU may continue to be used as the signal source until all dependencies on the second GPU are removed operation . For example the second GPU may continue to drive the display until all graphics intensive applications and or operations specified by a policy associated with the computer system have completed execution. If dependencies still exist the second GPU continues to be used as the signal source operation . However if dependencies on the second GPU no longer exist the signal source is switched back to the first GPU operation to conserve power in the computer system.

Initially the display is driven using the first GPU operation . Next in response to detecting an initial event or function call the system configures the second GPU for a GPU switch operation . In one embodiment the switch to the second GPU occurs immediately so that the display is driven by the second GPU. In another embodiment the switch takes place in response to detecting a subsequent event or function call operation .

The foregoing descriptions of various embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention.

