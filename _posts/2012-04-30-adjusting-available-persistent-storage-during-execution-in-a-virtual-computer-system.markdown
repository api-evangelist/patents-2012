---

title: Adjusting available persistent storage during execution in a virtual computer system
abstract: The amount of virtual disk space available for use by software executing within a virtual machine (VM) may be dynamically adjusted while the VM is running in a virtual computer system. A method for reservation of disk space from a virtual machine is provided. A request is received at a first VM relating to reserving a portion of a virtual disk used by the first VM. In response, the first VM allocates additional storage in the virtual disk to a guest file stored in the virtual disk, wherein the guest file is not used to store meaningful data and then communicates sectors of the virtual disk corresponding to the additional storage to the virtualization layer. The virtualization layer provides to a second VM access to sectors of the physical storage space that correspond to the sectors of the virtual disk that were allocated as additional storage to the guest file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694713&OS=08694713&RS=08694713
owner: VMware, Inc.
number: 08694713
owner_city: Palo Alto
owner_country: US
publication_date: 20120430
---
This application is a continuation of and claims the benefit of U.S. patent application Ser. No. 12 111 155 U.S. Pat. No. 8 195 866 filed on Apr. 28 2008 and entitled Adjusting Available Persistent Storage During Execution in a Virtual Computer System which further claims the benefit of U.S. Provisional Application No. 60 926 347 filed Apr. 26 2007 both of which are incorporated herein by reference in their entirety.

One or more embodiments of the present invention relate to allocating resources in a virtual computer system and in particular to adjusting the amount of persistent storage that is available within a virtual machine in a virtual computer system.

A computing system such as a general purpose computing platform has various resources that are made available to software that executes on the computing system. Examples of the computing system resources include processor time I O bandwidth memory space and disk space. As used herein the term host system refers to a computing system including various resources that may be shared by software that executes on the host system.

One type of software that may execute on a host system is virtualization software. A host system running virtualization software may be referred to as a virtual computer system. As described in existing literature including prior patents and patent applications from VMware Inc. the assignee of this patent application virtual computer systems come in many different varieties including some that are hosted and others that are unhosted. In the case of a hosted virtual computer system a distinct host operating system may provide certain functionality such as for interfacing with input output I O devices for use by the core virtualization software and or by other software executing in the computer system. In an unhosted virtual computer system the core virtualization software itself may include some or all of the functionality provided by the host operating system in a hosted system. Virtual computer systems may involve full virtualization of a hardware architecture or they may involve only partial virtualization including so called paravirtualized systems. Virtual computer systems may also support a virtual machine that has the same general hardware architecture as the underlying physical system or they may support virtual machines that have a virtual hardware architecture that is substantially different from the underlying physical hardware architecture. Many other possibilities also exist or may be subsequently developed. This invention may be implemented in a wide variety of such virtual computer systems.

Virtualization software virtualizes the underlying resources of the host system such that an operating system and applications that run in a virtual machine only see virtual system resources that the virtualization software makes available in the virtual machine. The operating system running in a virtual machine is referred to herein as a guest operating system while applications running in a virtual machine are generally referred to as guest applications. More generally software running in a virtual machine not including software that supports or forms part of the virtualization software is generally referred to as guest software. The virtual system resources made available to the guest software may be a portion of the host system resources that are allocated to the virtual machine such as a portion of the host memory for example or they may be emulated virtual system resources that do not directly correspond with host system resources such as a physical USB Universal Serial Bus port with a connected USB flash memory device being emulated as an attached SCSI Small Computer System Interface hard drive for example. The virtual machine is an abstraction supported by the virtualization software. The virtual machine appears to the guest operating system and guest applications as a physical host system.

Multiple virtual machines may execute on the same host system. One or more thin layers of software may operate between each virtual machine and the underlying host system hardware. In some implementations this software is referred to as a virtual machine monitor VMM or a hypervisor. In this patent application the software that supports such virtual machines will be referred to as virtualization software. The term virtualization software is used in a broad sense herein to generally refer to any and all software that supports the operation of one or more virtual machines including for example a host operating system in a hosted virtual computer system and also including software that runs within the virtual machine which nonetheless supports the operation of the virtual machine. Virtualization software does not however include ordinary software that is commonly executed in physical computer systems that do not involve the use of virtual machines such as ordinary operating systems ordinary applications ordinary drivers etc. that can execute in ordinary non virtualized computer systems.

As will be described in greater detail below one function of the virtualization software is to control host system resource allocation among virtual machines. As mentioned above one host system resource that may be allocated is persistent storage such as hard disk storage. A host system may have access to one or more physical disk drives or other persistent storage devices locally attached to the host system or accessible to the host system via a network or some other interface. The description below focuses on physical disk storage although it also applies to other types of persistent storage. On a host system with no virtualization a host operating system can be used to divide a disk into logical portions referred to as partitions or volumes depending on the operating system being used. Once the physical disk is partitioned into logical partitions or volumes a file system may be created on one or more of the partitions. The file system typically encompasses a portion of physical disk space that is fixed at boot up time. The size of the fixed portion is typically selected to accommodate the operating system and initial applications and to allow for future growth. The file system includes data structures that define file formats and organizational structure.

In a virtual computer system supporting one or more virtual machines each virtual machine may be given a fixed amount of the physical disk space of the host system in the form of a virtual disk or other virtual storage. One method for virtualizing disk space involves the use of one or more files within the file system of the host system where the one or more files in the host system may be used to store the contents of a virtual disk in the virtual machine. The virtualization software emulates a virtual disk for use by guest software but the data that is written to the virtual disk is stored in one or more files in the host file system. For example a 10 gigabyte file may be created on the host system to support the emulation of a 10 gigabyte virtual disk in the virtual machine. The physical disk space used to store the data written to a virtual disk need not be contiguous. Instead the virtualization software provides a mapping functionality between locations on the virtual disk as they appear to the guest software and corresponding locations in the physical disk space.

Each virtual machine in a virtual computer system may have its own guest operating system and its own file system s . Like the case where no virtualization is present the amount of disk space provided to each virtual machine at boot up time is typically enough space to store the guest operating system and guest applications plus some additional space to allow for future growth.

When a fixed amount of disk space is provided to a virtual machine at boot up time and a file system is implemented within the disk space it is difficult to later change the amount of disk space encompassed by the file system. For example changing the amount of disk space would typically require modification of a file system s internal data structures. Since some file systems are proprietary such modification might require reverse engineering. In addition different operating systems and file systems may be loaded on different virtual machines each requiring custom programming to modify the amount of disk space allocated to the respective file system.

In order to avoid having to change the disk space provided to virtual machines sufficient disk space may be provided to each virtual machine at boot up time to account for all anticipated future growth. For example if a virtual machine requires 5 gigabytes of storage to accommodate its initial footprint it may be desirable to allocate 10 gigabytes of storage to the virtual machine as an initial allocation to allow for 5 gigabytes of future growth. However it is often difficult to predict the growth needs of an individual virtual machine. If the initial allocation is more than will be needed the number of virtual machines that execute on the host computer system may be unnecessarily limited and or the amount of physical disk space required for the host computer system may be unnecessarily large. If the initial allocation is too small the virtual machine may not be able to support a sufficient number of guest applications or other software.

Another option is to initially refrain from allocating all of the physical disk space required to store the contents of an entire virtual disk. In the example above instead of creating a 10 gigabyte file in the host system for the emulation of a 10 gigabyte virtual disk the file in the host system may be smaller than 10 gigabytes. For portions or blocks of a virtual disk that have not yet been written to the virtualization software may defer allocating corresponding physical disk space until those portions are written to by guest software. As more of the virtual disk is written to the size of the file increases to contain the increased data content of the virtual disk. Virtual storage for which all of the corresponding physical storage space is not initially allocated so that there is no corresponding physical storage reserved for virtual storage that has not yet been written to is referred to herein as sparse virtual storage.

With the use of sparse virtual storage the storage resources of a host computer system may be overcommitted. In other words the sum of all of the virtual storage space that is provided to virtual machines in a virtual computer system may exceed the physical storage space of the host computer system. For example suppose that a virtual machine is presented with a 10 gigabyte virtual disk. If the guest software in the virtual machine is only presently using 2 gigabytes of this virtual disk then the contents of the virtual disk may be contained in a file that only occupies about 2 gigabytes of disk space. The remaining 8 gigabytes of physical storage that has not yet been allocated to the virtual machine may be used for other purposes instead such as to store the data of other virtual disks used by other virtual machines including other sparse virtual disks.

Suppose now that each of 10 virtual machines is presented with its own 10 gigabyte virtual disk. Suppose further that the guest software in each virtual machine initially uses only 2 gigabytes of its respective virtual disk. Suppose further that the host system has only a 50 gigabyte disk drive. In this case the host disk is overcommitted by 50 gigabytes. As the disk utilization of the virtual machines increases the available physical storage space will gradually be utilized. At some point the guest software in one of the virtual machines may issue a write operation that causes the physical disk capacity of the host system to be exceeded. When this occurs the disk hardware reports a write error. If this write error propagates to the guest operating system the guest operating system may interpret it as a write error due to a disk failure because the guest operating system will still see available disk space on its own virtual disk. The guest operating system may reattempt the write operation but the reattempt will also fail because the host disk is full. In this situation the virtual machine may shut down or fail.

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals or states where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable code can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

In addition while described virtualization methods have generally assumed that virtual machines present interfaces consistent with a particular hardware system persons of ordinary skill in the art will recognize that the methods described may be used in conjunction with virtualizations that do not correspond directly to any particular hardware system. Virtualization systems in accordance with the various embodiments implemented as hosted embodiments non hosted embodiments or as embodiments that tend to blur distinctions between the two are all envisioned. Furthermore various virtualization operations may be wholly or partially implemented in hardware. For example a hardware implementation may employ a look up table for modification of storage access requests to secure non disk data.

Many variations modifications additions and improvements are possible regarding the degree of virtualization. The virtualization software can therefore include components of a host console or guest operating system that performs virtualization functions. Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

The subject matter described herein includes methods systems and computer program products for reservation of disk space from a virtual machine in a computing system. According to one aspect a method for reserving storage space for a first virtual machine VM for use by a second VM is provided. According to the method a request is received at the first VM relating to reserving a portion of a virtual disk used by the first VM wherein the virtual disk is stored as at least one file stored in physical storage space managed by a virtualization layer supporting the first VM. In response to the request the first VM allocates additional storage in the virtual disk to a guest file stored in the virtual disk wherein the guest file is managed by a guest operating system running in the first VM and is not used to store meaningful data and then communicates sectors of the virtual disk corresponding to the additional storage for the guest file to the virtualization layer. The virtualization layer then provides to the second VM access to sectors of the physical storage space that correspond to the sectors of the virtual disk that were allocated as additional storage to the guest file in the first VM.

Embodiments of this invention include methods systems and computer program products for adjusting the amount of persistent storage that is available for use within a virtual machine in a virtual computer system. is a block diagram illustrating an exemplary virtual computer system in which an embodiment of this invention is implemented. In host system includes physical hardware host software memory disk storage or other persistent storage and one or more peripheral devices . Hardware may include one or more central processing units CPUs that execute instructions for controlling the operation of the computing system. A memory management unit along with system level host software may control allocation of memory to devices and software of host system . The memory management unit may be implemented within the processor . Additional hardware devices such as network cards and I O interfaces are generically represented as devices . The operation of these devices is not essential to explaining the subject matter described herein and hence will not be described.

In this patent application the following terminology will be used to distinguish between different types of physical and virtual disk space physical disk space that is accessible from within the host system is referred to as physical disk space physical disk space that has not yet been allocated is referred to as available physical disk space physical disk space that has been allocated is referred to as utilized physical disk space virtual disk space that is presented to the guest software in a virtual machine often in the form of one or more virtual disks is referred to as designated virtual disk space virtual disk space that has been allocated within a virtual machine not including virtual disk space occupied by disk space regulation files which are described below is referred to as utilized virtual disk space virtual disk space that has not yet been allocated within a virtual machine either for a disk space regulation file or otherwise is referred to as available virtual disk space designated virtual disk space minus virtual disk space occupied by disk regulation files is referred to as effective virtual disk space and virtual disk space for which corresponding physical disk space contains data that has been written to the virtual disk space is referred to as backed virtual disk space. 

Disk storage of host system may include one or more physical disks . Physical disks may be located in host system or they may be accessible to the host system via a network or other interface and made available to host system . For example physical disks may be part of a storage area network SAN or network attached storage NAS accessible by host system . One aspect of some embodiments of this invention is an ability to increase or decrease the amount of virtual disk space that is available for use from within a virtual machine after the initial virtual disk space for the virtual machine has been designated and after the guest software has begun using the designated virtual disk space including setting up a file system thereon.

In the illustrated example host software includes a host operating system and virtualization software . In other embodiments as described briefly above there may not be a separate host operating system and some or all of the functionality provided by the host operating system may be performed instead by the virtualization software . Virtualization software may comprise one or more virtual machine monitors or hypervisors. As illustrated in virtualization software includes a storage resource manager . Host operating system includes a host file system driver . File system driver defines the file system data structures used to store data on physical disks allocated to host operating system . Everything in the host system may be substantially the same as in existing virtual computer systems except as described below. For example except as described below the host system may be implemented by an installation of the Workstation virtualization product from VMware Inc. on a compatible desktop computer.

The virtualization software acts as an interface to host system for virtual machines . In some implementations the virtualization software runs directly on top of host system hardware and thus functions as a host operating system for the virtual machines. In other implementations host operating system may be interposed as a software layer between the virtualization software and the physical hardware. Either type of configuration is intended to be within the scope of this invention along with other possible configurations. Additional configurations that are also intended to be within the scope of this invention include configurations in which there is a separate virtual machine monitor for each virtual machine in the virtual computer system. In some such configurations each virtual machine monitor may be configured as part of its respective virtual machine. Also for some configurations multiple virtual machine monitors may be different instances of the same computer software or they may comprise multiple distinct software modules. Alternatively a single virtual machine monitor may act as an interface to host system for multiple virtual machines.

Storage resource manager may be a component that resides outside of i.e. executes outside of the context of virtual machines . As described below storage resource manager may control the amount of virtual disk space available to guest software executing in each virtual machine at run time. Storage resource manager may communicate with software modules within each virtual machine to determine the disk resource needs of each virtual machine and dynamically adjust the amount of available virtual disk space within each virtual machine. The functionality of the storage resource manager will be described in greater detail below in connection with .

Each virtual machine includes virtual hardware resources such as one or more virtual processor s virtual memory designated virtual disk space and virtual devices . Thus for example virtual machine includes virtual hardware resources such as one or more virtual processor s virtual memory designated virtual disk space and virtual devices

Each virtual machine also includes a guest operating system which may include drivers including a guest file system driver . Thus virtual machine includes a guest operating system which may include drivers including a guest file system driver . Drivers control and communicate with virtual devices and . One or more software applications may execute within each virtual machine . For example shows applications and executing in virtual machine . Each virtual machine may also have a user level regulation file manager application RFM . Thus for example shows a user level regulation file manager executing within virtual machine . Except as described below everything within the virtual machines may be substantially the same as the contents of virtual machines in existing virtual computer systems. For example except as described below the virtual machine may be substantially the same as a common virtual machine within the Workstation virtualization product from VMware Inc. installed on a compatible desktop computer with a standard operating system such as a version of a Microsoft Windows operating system or a version of the Linux operating system installed in the virtual machine along with one or more compatible software applications. The functionality of the regulation file manager is described in greater detail below in connection with . In other embodiments functionality comparable to that of user level regulation file manager may be implemented in a regulation file manager driver which can be loaded into the guest operating system as one of the drivers .

Guest operating system and file system driver may provide one or more Application Programming Interfaces APIs for use by applications running on the guest operating system including applications and such APIs including a file system API . This file system API may provide standard functionality for creating and using files within the guest file system including functionalities such as creating a file opening a file reading from a file writing to a file and closing a file. Also of relevance to some embodiments of this invention the API may provide functionality for setting a specified length for a file.

Similarly guest operating system and file system driver may provide one or more APIs for use by applications running on the guest operating system including applications and such APIs including a file system API . Again this file system API may provide standard functionality for creating and using files within the guest file system including functionalities such as creating a file opening a file reading from a file writing to a file closing a file and setting a specified length for a file.

The virtual disk may appear to the guest operating system and the file system driver to be a conventional physical disk drive with sectors blocks etc. having its own amount of designated virtual disk space. Similarly the virtual disk may appear to the guest operating system and the file system driver to be a conventional physical disk drive having its own amount of designated virtual disk space. The virtualization software may emulate conventional interface cards that provide conventional disk interfaces for use by the file system drivers and for accessing their respective virtual disks . For example the disk interfaces may both be SCSI interfaces. Alternatively either or both of the interfaces may be another type of storage interface. Thus the file system drivers and may interact with their respective virtual disks as if they are physical disk drives through the virtual interface cards over their respective disk interfaces . Thus for example the file system drivers and may issue read commands or write commands to their respective virtual disks for specified block numbers. The file system drivers and will specify block numbers for blocks where they think the data they want is located on what they think is a physical disk drive. However the disk drives they are accessing are actually virtual disks instead of physical disks. The block numbers specified by the file system drivers and typically will not correspond to block numbers on physical drives at which the desired data may be found. Instead the block numbers issued by the file system drivers and will typically need to be mapped to block numbers for the appropriate physical disk where the desired data is actually stored. Thus the block numbers issued by the file system drivers and may be referred to as virtual block numbers although the file system drivers and believe them to be physical block numbers.

The virtualization software receives disk commands on the disk interfaces that are directed to the virtual interface cards. The virtualization software then effectively maps the virtual block numbers issued by the file system drivers and to the correct locations for the actual physical storage . For an implementation in an unhosted virtual computer system the virtualization software may interface directly with the physical storage . For example the virtualization software may contain its own file system driver.

However the implementation of involves a hosted virtual computer system. In such an implementation the virtualization software interfaces with host operating system and file system driver to access the physical storage . Host operating system and file system driver may provide one or more APIs for use by applications running on the host operating system including a file system API . Virtualization software and storage resource manager may gain access to this file system API through various means including loading an application on top of host operating system . In this case a communication link may be established between the virtualization software and the application loaded onto the host operating system. Virtualization software may then direct the application to access the API as needed.

Host file system driver may establish and maintain a host file system on the storage in a conventional manner. File system API may provide standard functionality for creating and using files within the host file system including functionalities such as creating a file opening a file reading from a file writing to a file and closing a file.

File system driver uses a disk interface to access the storage . The disk interface may be a conventional disk interface such as described above in connection with disk interfaces . Thus for example file system driver may read a block of data from a specified block number or write a block of data to a specified block number. In this case the specified block number may be referred to as a physical block number because it identifies a specific block on the actual physical storage . Host file system driver uses the disk interface to create and maintain host file system on physical storage .

As described above data written to a virtual disk by guest software within a virtual machine may actually be stored within one or more files in a file system in the actual physical storage. In this case a file that contains the data for a virtual disk may be referred to as a backing file as it backs the data written to the virtual disk. shows a first virtual disk file and a second virtual disk file within the host file system . Virtual disk file is created and maintained by host file system driver to back virtual disk . Similarly virtual disk file is created and maintained by host file system driver to back virtual disk . Thus virtual disk file contains the data that is written to virtual disk including guest file system while virtual disk file contains the data that is written to virtual disk including guest file system . The guest file systems and are shown with solid lines inside the storage because this is where the guest file systems and along with their associated files and data are actually stored. In contrast guest file systems and are shown with dashed lines inside their respective virtual disks because the guest file systems along with their associated files and data only appear to be stored in the respective virtual disks from the perspective of the guest software executing in the respective virtual machines 

Virtualization software uses the API as described above to access virtual disk files and through host file system driver . Thus the virtualization software actually maps virtual block numbers from the guest file system drivers and into appropriate offsets into the corresponding virtual disk files . The file system driver then maps the offsets into the virtual disk files to the correct physical block numbers in a conventional manner and issues appropriate commands to the physical storage .

Except as described below all of the components illustrated in may be substantially the same as corresponding components in an existing virtual computer system such as a computer system loaded with the Workstation virtualization product from VMware Inc. with a standard supported operating system installed in the virtual machine along with one or more compatible software applications.

Now suppose that the host system illustrated in has been loaded up with all desired software and data including host operating system and virtualization software except that virtual machines and have not yet been created. Suppose further that the storage has an available physical disk space capacity of 10 gigabytes for the exclusive use of virtual machines and . Next suppose that virtual machines and are created and each virtual machine is given a designated virtual disk space capacity of 10 gigabytes where the virtual disk space is to be backed by virtual disk files respectively. Suppose further that the virtual disks are set up as sparse virtual disks. Under these circumstances the physical storage is overcommitted by 10 gigabytes. Next suppose that guest software is loaded into each virtual machine including guest operating systems and guest applications . Suppose that the total disk space occupied by guest software and guest data in each virtual machine is 2 gigabytes such that each of the virtual disk files take up approximately 2 gigabytes of disk space. Thus at this point the available virtual disk space on each virtual disk is 8 gigabytes but there are only 6 gigabytes of available physical disk space remaining. Under this scenario the guest software in the virtual machines may continue writing data to the virtual disks until all of the physical disk space is utilized possibly resulting in the disk hardware reporting a write error as described above.

Now suppose that an embodiment of this invention is implemented in the virtual computer system illustrated in . In particular virtualization software includes storage resource manager and user level regulation file managers and are executing in their respective virtual machines . Regulation file manager uses guest file system driver to create and use a disk space regulation file within guest file system on virtual disk . Regulation file of course is actually stored within virtual disk file within storage . Similarly regulation file manager uses guest file system driver to create and use a disk space regulation file within guest file system on virtual disk . Again regulation file is actually stored within virtual disk file within storage . Again the regulation files are shown in dashed lines in the virtual disks in because the files only appear to guest software to be stored in the virtual disks 

In some embodiments of this invention disk space regulation files do not contain any meaningful data. Instead regulation file managers and increase or decrease the size of their respective regulation files so that the regulation files occupy more or less of the virtual disk space on the respective virtual disks without writing meaningful data. If the respective guest file system driver provides functionality to set the size of a file to a specified file size then the regulation file manager may set its regulation file to a desired size without writing any data. Otherwise the regulation file manager will generally need to write or delete some data from the regulation file even if the data is meaningless such as by writing all zeros for example. So the regulation file managers adjust the size of the regulation files to adjust the amount of virtual disk space that is available for use by guest software in the respective virtual machine . The available virtual disk space is equal to the designated virtual disk space minus the utilized virtual disk space minus the amount of disk space occupied by the respective regulation file . If the size of the regulation file is increased then the available virtual disk space on the virtual disk that is available for use by other guest software within virtual machine decreases accordingly and vice versa.

One possible use of the regulation file managers and regulation files is to prevent the type of disk write error situations due to overcommitted physical disk space described above. Suppose that regulation file manager sets the size of regulation file to 5 gigabytes and regulation file manager sets the size of regulation file to 5 gigabytes. Now each of the virtual disks has 5 gigabytes of effective virtual disk space and there are only 3 gigabytes of available virtual disk space on each of the virtual disks . Then if the utilization of virtual disk space by the guest software in either of the virtual machines increases by 3 gigabytes the respective guest operating system and or the respective file system driver will perceive that the respective virtual disk is full and will not permit the writing of any more data. This would ensure that the guest operating systems and or the guest file system drivers keep their respective virtual disks from increasing in size to the point that the physical disk space required to back the virtual disks does not exceed the actual storage capacity of storage .

The regulation file managers may determine appropriate sizes for their respective regulation files by various means. For example the regulation file managers may receive information from a system administrator specifying the desired sizes for the respective regulation files 

In other embodiments of the invention a communication link is established between the regulation file managers and the storage resource manager and the storage resource manager may specify appropriate file sizes for the respective regulation files . Existing literature including prior patents and patent applications from VMware Inc. describe various techniques that may be used to establish a communication link between the regulation file managers and the storage resource manager . Messages that may be communicated over the communication link from storage resource manager to regulation file managers may include requests to create inflate or increase the size of deflate or decrease the size of or delete a regulation file. Parameters associated with the requests may include requested regulation file size inflation amount or deflation amount. Commands communicated by regulation file managers to storage resource manager may include acknowledgments indicating whether a given request was successfully executed or not.

The storage resource manager may use any of various different algorithms and various different types of information to select appropriate file sizes for the regulation files . For example the storage resource manager may determine the amount of available physical disk space remaining and the amount of available virtual disk space for each of the virtual disks . The storage resource manager may also receive various other types of information such as anticipated storage growth required for each virtual machine and relative priorities for the two virtual machines . This information may be received from various sources such as from user input from an administrator of the virtual computer system or from another software module that determines the information through any of various means such as through predictive algorithms. The storage resource manager may then dynamically adjust the available virtual disk space available to guest software in each virtual machine using the respective regulation file managers and the respective regulation files 

During operation of the virtual computer system the storage resource manager may effectively reserve a portion of the virtual disk space that was designated for use by guest software in a particular virtual machine by increasing the size of the respective regulation file through the respective regulation file manager . For example regulation file may be increased in size to reduce the amount of effective disk space available to guest software within virtual machine . This assures that the guest software within virtual machine cannot consume an amount of physical disk space corresponding to the virtual disk space utilized by regulation file effectively reserving that amount of physical disk space. The reserved portion of physical disk space may then be used for any suitable purpose. For example the reserved portion may be made available for use by other virtual machines. One advantage of using regulation files to increase or decrease the amount of effective disk space available to a virtual machine is that this mechanism generally does not require rebooting of the host computing system or any software executing within the context of the virtual machine.

In one exemplary application of the subject matter described herein a virtual machine may be initially designated a larger virtual disk or portion of physical disk storage than it needs. After the initial designation regulation file manager may create regulation file to reserve disk space from guest operating system so that the space can be made available to other virtual machines. In one implementation regulation file may consist of reserved sectors of physical disk resources without requiring that guest operating system write any data to regulation file . In an alternate implementation regulation file may include predetermined characters such as all zeros or another code that signal to storage resource manager that the space has been reserved by guest operating system and is available for allocation to other virtual machines.

Although in the illustrated example regulation file managers are implemented as user level applications the subject matter described herein is not limited to such an implementation. In an alternate implementation regulation file managers may be implemented as drivers loaded into the respective guest operating systems as described above. Any user mode or kernel mode executable capable of creating a file communicating the file s existence and location to storage resource manager and varying the size of the file in response to commands from storage resource manager to increase or decrease the amount of disk space reserved is intended to be within the scope of the subject matter described herein.

Returning to in step the first virtual machine is activated. For example in virtual machine may be loaded into memory of host system and the virtual machine may begin execution using host processor .

Returning to in step during operation of the first virtual machine a portion of the fixed portion of disk space designated for use by the first virtual machine is reserved. In storage resource manager may issue a request to regulation file manager to create a regulation file of a particular size corresponding to the amount of disk space desired to be reserved. Continuing with the example above if the virtual disk designated for use by virtual machine is initially 100 gigabytes and virtual machine only needs 20 gigabytes for its initial disk image the regulation file may initially be sized at 50 gigabytes which would allow virtual machine 30 gigabytes of growth beyond its initial size and 50 gigabytes that can be reclaimed or allocated to other virtual machines at run time. Once regulation file is created regulation file manager communicates an acknowledgement of the successful creation to storage resource manager .

Guest operating system preferably ensures that no other entities within virtual machine write to any of the space reserved for regulation file . In addition regulation file manager preferably communicates to storage resource manager the location of the physical storage that is reserved for regulation file . In one implementation regulation file manager may communicate the locations of the sectors of physical storage that are reserved for regulation file to storage resource manager . In an alternate implementation regulation file manager may write all zeros to regulation file and storage resource manager may recognize the storage sectors that are all zeros as available for allocation to other virtual machines. In yet another alternate implementation regulation file manager may write predetermined characters or one or more patterns of characters to regulation file that indicate to storage resource manager that the storage is reserved and available for allocation to other virtual machines.

Returning to in step use of the reserved portion is controlled from outside of the first virtual machine. In one example the portion of disk space reserved to the first virtual machine may be made available for use by a second virtual machine. In once storage resource manager receives confirmation from regulation file manager of creation of regulation file storage resource manager may signal to another virtual machine such as virtual machine that additional disk space is available by decreasing the size of the regulation file associated with the other virtual machine. For example if two virtual machines each have 100 gigabyte disks and 50 gigabyte regulation files storage resource manager may instruct the second virtual machine to decrease its regulation file by 30 gigabytes to give it access to 30 of the 50 gigabytes reserved by the regulation file of the first virtual machine. The subject matter described herein is not limited to making the portion of disk space reserved from one virtual machine available for use by another virtual machine. For example the reserved portion of disk space may be used by the virtualization software to limit or control the size of the first virtual machine without making the reserved portion available to other entities. In yet another example the reserved portion of disk space may be made available to an application or an operating system outside of the first virtual machine. Any suitable use for the reserved portion of disk space is intended to be within the scope of this invention.

An additional application of the ability to dynamically reserve disk space from a virtual machine is in moving a sparse virtual disk from one host to another even if the target disk is too small to hold the sparse virtual disk at its maximum size. For example an existing virtual machine may be copied from a disk drive to a flash memory based portable storage device or thumb drive. Because these devices commonly have lower capacities or higher cost per capacity than hard drives limiting space consumption is more important. For example the sparsely stored virtual machine may occupy 4 gigabytes but may initially be allocated 10 gigabytes of storage. A 6 gigabyte regulation file could be created after the virtual machine is created on the source computing system to limit the size of the virtual machine to 4 gigabytes so that the virtual machine will fit on a 4 gigabyte target disk. Even though the regulation file reserves 6 gigabytes only a small amount of data that indicates its existence and the reserved physical disk sectors are required to be transferred to the target disk.

An additional specific application of the ability to dynamically reserve disk space from a virtual machine is in creating all virtual disks at the largest size supported by the interface between the virtual machine and the host system but then immediately bounding the size of their backing storage using regulation files. For example if a virtual machine is allowed by its associated virtual machine monitor a maximum of 100 gigabytes of host disk space the virtual machine may be allocated 100 gigabytes of host disk space. A regulation file of 60 gigabytes may then be created so that only 40 gigabytes of actual host disk space are required to be kept as backing storage for the virtual machine. More broadly one or more virtual machines may be provided with designated virtual disk space that is arbitrarily large and then a portion of the designated virtual disk space may be reserved for other uses as described above. Here arbitrarily large means that the designated virtual disk space is not related to any anticipated or predicted storage needs of the virtual machine. Instead the effective virtual disk space remaining after the reservation of a portion of the designated virtual disk space may relate to an anticipated or predicted storage usage of the virtual machine.

Another potential application of the ability to dynamically reserve disk space from a virtual machine involves adapting to the movement or migration of a virtual machine from a first physical computer to a second physical computer. For example suppose that a plurality of virtual machines are already executing on the second physical computer. Then suppose that another virtual machine is to be migrated from the first physical computer to the second physical computer. If the physical disk space utilized by the migrating virtual machine is not shared between the first physical computer and the second physical computer then the migration may cause or exacerbate issues relating to overcommitment of the storage resources that are accessible from within the second physical computer. Based on various physical and virtual disk space data such as the available physical disk space on the second computer the utilized and or effective virtual disk space for each of the virtual machines already executing on the second computer and the utilized and or effective and or designated virtual disk space on the migrating virtual machine the effective virtual disk space of the migrating virtual machine and or the effective virtual disk space of one or more of the virtual machines that are already executing on the second physical computer may be dynamically adjusted to alleviate overcommitment issues while attempting to provide each of the virtual machines with the necessary or desired effective virtual disk space. Such dynamic adjustment may be particularly useful in the case of a template virtual machine that may be instantiated on various different physical computers having access to different amounts of physical disk storage. The effective virtual disk space provided to the virtual machine may be adjusted based on the particular physical computer on which the virtual machine is to be executed.

Yet another potential application of the ability to dynamically reserve disk space from a virtual machine is in overcommitting disk space on a computing system and then releasing it back to virtual machines in a metered fashion avoiding write errors. As described above disk space on a computing system may be overcommitted when virtual disks are sparsely stored based on their initial disk image sizes but the total initial designation of disk space to the virtual disks exceeds the total disk storage space of the host. When this occurs regulation files may be used in each virtual machine to trigger operating system specific prompts to a user based on the effective disk space provided to a virtual machine to prevent the total disk space of the host from being exceeded. For example on a Windows machine when the Windows operating system detects that the designated disk space is almost 100 utilized the Windows operating system will prompt the user to delete some files to free up disk space. Without the regulation file it is possible for a sparsely stored virtual machine that thinks it has more disk space than it actually has to issue a write operation that would cause the amount of host disk space to be exceeded. In this situation the write operation would fail and the virtual machine may crash attempt to initiate misguided attempts at disk recovery or otherwise malfunction. When the host disk is overcommitted and a write occurs the hardware returns a write error without indicating that the write error was caused by overcommitment. The guest operating system interprets the write error as being caused by a disk failure since it believes the disk to have available space. The guest operating system could attempt recovery of the data being written and reattempt the write to another location which would also fail. Thus one option for dealing with a write error of unknown cause is to shut down the virtual machine that performed the write.

Using regulation files this condition may be avoided because even though the host disk is overcommitted the regulation files cause warning mechanisms to be triggered when disk space utilization by a virtual machine approaches the effective virtual disk space provided to the virtual machine to prevent actual overutilization of the host disk from occurring. For example each of 10 virtual machines with initial footprints of 2 gigabytes each may be designated to have 10 gigabytes of storage at creation time where the backing for each virtual disk is sparsely stored on a 50 gigabyte host disk. A 6 gigabyte regulation file may be created within the context of each virtual machine. As a result of the 6 gigabyte regulation file each virtual machine has an effective virtual disk space of 10 6 4 gigabytes. Accordingly when disk utilization of a virtual machine approaches 4 gigabytes operating system specific warnings will be triggered to prompt the user to delete some files. Because the trigger will be initiated at 4 gigabytes for each of the virtual machines the likelihood of a virtual machine failing due to over utilization of host system resources is reduced.

Yet another specific application of the ability to dynamically reserve disk space from a virtual machine is in adding storage to a virtual machine on demand without needing to add additional virtual hardware partitions or file systems. For example in order to add disk space to a virtual machine storage resource manager may simply instruct that virtual machine to reduce the size of its regulation file. By reducing the size of the regulation file the virtual machine will have additional available disk space for other uses. For example a virtual machine may have an initial virtual disk size of 10 gigabytes with 4 of the 10 gigabytes reserved using a 4 gigabyte regulation file. Thus the virtual machine will have an effective virtual disk space of 6 gigabytes. In order to dynamically increase the amount of effective disk space available to the virtual machine the regulation file may be deflated by a predetermined amount such as 2 gigabytes. If the regulation file is reduced in size to 2 gigabytes the virtual machine will have 8 gigabytes of effective virtual disk space. The deflating of the regulation file can be performed at run time without requiring that the virtual machine be rebooted. Also if additional physical disk space is made available to the host system the regulation file of one or more virtual machines executing on the host system may be deflated as desired to enable the virtual machine s to make use of the newly added physical disk space.

Once a portion of disk space is reserved from a virtual machine its size can be controlled from outside of the virtual machine. Returning to storage resource manager may reside outside of virtual machines and may control the sizes of their respective regulation files. By controlling the sizes of their respective regulation files storage resource manager controls the size of reserved disk space of each virtual machine that is available for use by other virtual machines.

It will be understood that various details of the presently disclosed subject matter may be changed without departing from the scope of this invention. Furthermore the foregoing description is for the purpose of illustration only and not for the purpose of limitation.

