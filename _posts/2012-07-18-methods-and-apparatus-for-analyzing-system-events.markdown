---

title: Methods and apparatus for analyzing system events
abstract: Apparatus and methods facilitate analysis of events associated with a plurality of computer systems. Event occurrence items are compared with event rules of event rule sets associated with each computer system to determine whether the items are potentially significant as determined by matching with the event rule sets. A scorer associated with each computer system assigns a score to each event occurrence item to provide a relative indication of the potential significance of the event occurrence item. An interface is used to query the scored event occurrence items from each of the plurality of computer systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949169&OS=08949169&RS=08949169
owner: 
number: 08949169
owner_city: Dallas
owner_country: US
publication_date: 20120718
---
The present Application for Patent is a Continuation in Part of pending patent application Ser. No. 12 947 626 entitled METHOD AND APPARATUS FOR ANALYZING SYSTEM EVENTS filed Nov. 16 2010 which claimed benefit under 35 U.S.C. 119 of Provisional Patent Application No. 61 261 959 filed on Nov. 17 2009 all of which are hereby expressly incorporated by reference herein.

The present disclosure relates generally to analyzing events occurring in systems such as computer network systems. More particularly the present disclosure relates to apparatus and methods by which to identify event occurrences such as intrusion attempts that are significant score the identified event occurrences with quantitative scores and to efficiently store or cache the scores for multiple network systems such as in a Managed Security Services Provider MSSP arrangement monitoring numerous client networks.

Modern computer networks and systems are often times complex. Such systems typically are formed of a set of interacting or interdependent system components that together form and define the system. During system operation many varied system events occur both events internal to the system as well as external events that potentially affect and threaten operation of the system. A manager or operator of the system in order fully to be aware of the system operation should be aware of system related events particularly events that might deleteriously affect operation of the system.

In a complex network or system a large number of events such as intrusion attempts might occur daily. Logging of the occurrences of such events when detected permits subsequent review of the events by the system manager or operator. At the subsequent review the system manager or operator is able to then take responsive action. Because of the potentially large number of event occurrences the log of the event occurrences is potentially very lengthy and review of the logged event occurrences might well be time consuming. Furthermore if a small number of significant event occurrences are interspersed amid a large number of insignificant event occurrences a reviewer might not properly notice significant event occurrence entries in the log.

While various mechanisms are available by which to provide for alerts to be generated to highlight selected event occurrence entries general review and analysis is still carried out in a conventional sequential and iterative manner. Accordingly an improved manner by which to provide for review and analysis of system event occurrences would be beneficial. Additionally if an operator or system manager monitors multiple systems the multiple log reviews and redundancy of log entries of system event occurrences across the multiple monitored systems adds to the time and complexity of reviewing and analyzing system event occurrences.

It is in light of the above problems that the presently disclosed methods and apparatus beneficially provide improved system operation and management particularly for review and analysis of system events across multiple monitored systems or networks such as by an MSSP.

The present disclosure provides apparatus and associated methods for analyzing events occurring at a system such as a computer network system.

According to an aspect an apparatus for facilitating analysis of system events for a plurality of computer systems is disclosed. The apparatus includes a plurality of collected event matchers each configured to identify collected system event information items that match at least an event rule of an event rule set in a respective computer system. The apparatus further includes a plurality of scorers each configured to score each system event information item identified by a respective collected event matcher using at least a scoring rule of a scoring rule set the score of each scored system event information item used to prioritize the scored system event information items. Further the apparatus includes an interface configured to query in parallel scored system event information items from each of the plurality of scorers.

According to another aspect a method for facilitating analysis of system events for a plurality of computer systems is disclosed. The method includes identifying collected system event information items over a plurality of computer systems that match at least an event rule of an event rule set in a respective computer system of the plurality of computer systems. Furthermore the method includes scoring system event information item identified using one or more scorers each associated with a respective computer system using at least a scoring rule of a scoring rule set the score of each scored system event information item used to prioritize the scored system event information items. Additionally the method includes querying the one or more scorers in parallel for scored system event information items from each of the plurality of computer systems.

According to still another aspect computer program product comprising a computer readable medium is disclosed. The medium includes code for causing a computer to identify collected system event information items over a plurality of computer systems that match at least an event rule of an event rule set in a respective computer system of the plurality of computer systems. Additionally the medium includes code for causing a computer to score system event information item identified using one or more scorers each associated with a respective computer system using at least a scoring rule of a scoring rule set the score of each scored system event information item used to prioritize the scored system event information items. Further the medium includes code for causing a computer to query the one or more scorers in parallel for scored system event information items from each of the plurality of computer systems.

Referring to an exemplary system or systems shown generally at includes one or more entities such as work stations or servers as merely a couple examples that are communicatively coupled to respective networks . In the example of each network may also be communicatively coupled to a management station or configured to monitor and store event occurrences that may occur in the networks . The network management stations may also be in communication with the entities by way of the network . Information messages generated by the entities or responsive to inquiry generated at the network management station are provided to the management station by way of the network . It is noted that each network station may be associated with a particular client and all of the associated clients stations interface with a user interface data collection unit which will be discussed in more detail later. The stations may be implemented by an Application Programming Interface API or some other type of software hardware or combinations thereof.

The illustrated networks may be representative of a private network placeable in connectivity with a public network such as the internet and may also include there between a firewall . Messages generated external to the private networks and delivered to the firewalls by way of the public network are also routable by way of the networks to the network management stations .

The system is representative of any various networks such as a business network a manufacturing network a medical network system etc. While the following description shall describe exemplary operation with respect to an exemplary implementation in which the network system comprises a computer network system in which the network entities comprise computer servers work stations and the like the network system is more generally representative of any of various network systems with the network entities being any various entities. Additionally the exemplary configuration shown in is by way of example only. In other implementations the system may be configured in other manners and include three or more networks and or network management stations .

The network management stations each include an exemplary apparatus . The apparatus facilitate analysis of operation of the network systems by collecting information related to the occurrence of events at the network system in a manner that provides a manager or operator of the network system with indications of events that are considered to be significant thereby to permit the manager or operator more quickly to take responsive action. Apparatus is functionally represented and may be implementable in any desired manner including for instance by hardware elements firmware elements algorithms executable by processing circuitry and combinations thereof. Additionally while the elements of the apparatus are in the illustrated implementation formed at a single physical entity in other implementations the elements may be distributed among more than one physical entity.

Each apparatus includes a data collector a matcher a normalizer a scorer a prioritizer a database and an input output I O . The I O may be configured to generate and transmit information to be used and displayed at a common user interface . User interface is configured for monitoring multiple stations and associated networks .

The data collectors operate as event collection engines utilizing for example a SYSLOG or SNMP or other analogous collection algorithm. Data collected by data collectors pertain to events occurring within or related to the network system e.g. the associated network and various network entities . The collected event occurrence information comprising raw data is stored in the databases or and thus available for subsequent retrieval. In one implementation the data collectors may comprise a component capable of loading dynamic plug ins that support a myriad of vendors in order consistently to pulse more unique data on remote vendor systems.

The collected data stored in databases or immediately collected by collector are accessible by matchers . Matchers operate to match the collected data with predetermined conditions or event rules thereby forming event occurrence items. The event rules are user defined rules or are otherwise defined. Matchers match selected ones of the event rules with the event occurrence items that have been collected by the data collector. If the event occurrence item corresponds with an event rule then the event occurrence item is considered to be a potentially significant event occurrence. Matching operations may be performed on all or selected portions of the event occurrence items collected by the data collector. Event occurrence items that match the event rules may then be normalized by normalizers . Normalizers operate to extract or otherwise identify the significant portions of the matched event item occurrences. The normalizers are also capable of accessing the databases to be provided with the event occurrence items matched by the matcher. In addition normalized event occurrence items are also cached or stored at the database .

The scorers also are capable of accessing the database . The scorers operate to score i.e. provide a quantitative value to the normalized matched event occurrence items. Scoring is performed by comparing the normalized event occurrence item with score event rules. If the event occurrence item corresponds with the score event rule then a match is made and a score associated event occurrence item is incremented. In the exemplary implementation each normalized event occurrence item is scored against multiple score event rules. If a normalized event occurrence item matches multiple score event rules then the score of the event occurrence item is of a greater value than an event occurrence item that matches fewer or no score event rules. The score associates a score with the event occurrence item and the score associated with the event occurrence item is stored at the database indexed together with the associated event occurrence item.

Prioritizers access the databases to obtain or to be directly provided with the scores associated with the event occurrence items. Prioritizers prioritize the event item occurrences based upon the score assigned to the individual ones of the event occurrence items by scorers . The prioritizers prioritize the event occurrence items e.g. in numerical order from highest score to lowest score to prioritize the event occurrence items from potentially most significant based upon the score to least significant based upon the score. The prioritized item entries are used for example to form a list of event occurrence items. Priority indications are also associated with the event occurrence items stored at the databases or immediately provided to the I O . If all of the event occurrence items are considered to be an initial set then the event occurrence items that the matchers indicate to match with the event rules form a subset of the initial set. The scorers score only the event occurrence items of the subset. In addition the prioritizers prioritize the items of the subset.

The I O may be configured to generate information pertaining to a prioritized listing as well as information relating to the prioritized event occurrence items. This information is provided to or queried by the user interface to permit a network system manager or operator to view the event occurrence items considered to be of greatest significance prior to lesser prioritized event occurrence items. Additionally through matching operations performed by the matchers and subsequent normalization by the normalizers the large numbers of event occurrence items are reduced so that insignificant event occurrence items are removed from further consideration. The items remain available however in one implementation at the database if subsequent analysis necessitates review of this additional information. It is noted that the querying of the interface may be effected as a hook that pulls data from the stations without necessarily a query or request per se.

In an exemplary configuration of the system is configured as an MSSP type arrangement where a central security provider monitors multiple systems such as stations and associated networks . In this case the system includes a user interface configured to effect database sharding in order to achieve better efficiency especially when monitoring numerous client stations . Database sharding is a known shared nothing partitioning scheme that is advantageous when using large databases e.g. across a number of servers e.g. stations that affords better database performance and scalability. This is accomplished in part by breaking down the collective database down into smaller chunks called shards that are spread across a number of distributed servers.

Further the system may include the use of a distributed memory caching algorithm Application Protocol Interface API or system such as open source software Memcached by Danga Interactive for example. The memory caching as illustrated by cache in interface may be used for storing data such as the correlation data e.g. scored events in memory with a temporal aspect i.e. a timeout for storing data after which the data is purged or overwritten . In a particular aspect the use of Memcached s API as one example provides a large hash table distributed across multiple machines e.g. stations . When the hash table is full subsequent inserts cause older data to be purged in a least recently used LRU order. By using such distributed memory caching the system may be sped up which is particular advantageous in threat detection and security systems. It is noted that although the cache is illustrated within interface this is merely exemplary and the cache may be located in a separate device communicatively couple with stations and interface .

Still further with respect to it is noted that each client s station may interface with the interface via a network such as the internet or world wide web e.g. or alternatively may communicate directly as indicated by the dashed arrows from stations to interface . In the case of a web interface or web portal interface code or an API indicated by block may effect web interface with client stations or with another client device not shown . Additionally features of the web interface may include the functionality of allow clients to create user privileges allowing change to configurations such as ruleset to be discussed further in later portions of this application as well as user rights assignments for allowing access. Furthermore the interface affords the ability for a client with multi tenants to create their own rulesets as well as accommodate different systems such as Unix or Windows systems. It is also noted that interface may be virtually effected or hosted in a cloud computing environment across multiple and varied servers.

Block illustrates that information event dashboards or other display methods and historical data reporting may be effected by parallel queries to the event data shards stored across multiple databases e.g. in system . Furthermore real time cached data from the NoSQL Resident memory pool e.g. cache may be accessed as shown by arrow . This affords current event occurrence information of threats or other types of activity in real time without the need for large SQL database storage.

Turning next to a process is shown representative of operation of at least a portion of each apparatus shown in . As indicated by block even data is acquired or generated either by network system entity origination external origination or responsive to network system request. The data are related to the occurrence of events that pertain to the network system i.e. comprise event occurrences. In an aspect the event occurrences may be collected as event occurrence items by the data collectors or shown in .

As indicated by arrow the acquired data is then queued for input to event normalization . After normalization an alerts queue is generated for processing by event correlation . Here the event data may be correlated or matched through use of a rule set that utilizes a decision tree algorithm and or fuzzy logic effected by matchers and scorers as an example. Event occurrence items that match the rules with which the items are then output for further processing as indicated by arrow and storage as indicated by event storage e.g. databases .

Additionally a module is a container of similar triggers rule groups and rules. A module can also contain information regarding the module including its name description devices that the module supports versioning information and any other appropriate further documentation related to the module. The nesting of the rule groups facilitates grouping similar rules together. In order for rules to be processed within a rule group the rule group must match the event occurrence item that is compared against the rule group. In addition when a rule group is nested a match of both the rule group and the sub rule group is required.

In operation when an indication of an event occurrence is received the received indication is processed by a receiving engine represented in by the data collector . Examples of receiving engines include the aforementioned SMNP SYSLOG and other algorithms. A role of the receiving engine is to convert the received information into a normalized event. The normalized event is represented e.g. by a hash table comprising related information of the indication of the event occurrence including e.g. network address information a received time stamp and the payload of the message of the received indication. The normalized event is provided to an event matching module represented by matchers in .

The event matching module is responsible for taking the initial normalized event and matching the indication of the event against the pre defined rule set. The is carried out through recursive functionality providing a tree like structure such as the decision tree for data management. The rule set modules include e.g. compiled modules and a textural rule set. Binary compiled modules are not defined by behavior and are able to accomplish matching by any available manner or by taking advantage of textual rule sets.

Textual rule sets are separated into three basic classifications that provide for matching. The first class type is defined as a trigger. A trigger such as the trigger is a regular expression that must match in order for the rules within the module to continue processing. Additionally a list of triggers can be specified. Upon matching of a first successful trigger processing of the associated module continues. A subsequent separating stage comprises the multi decision tree structure in which any desired number of peer or child nodes for any specified node within the tree structure can be created. Each requires a successful matching before matching against a child node thereof within the decision tree. Rule grouping allows like rules to be grouped together in as many levels as desired thereby to improve the speed of matching against a lengthy rule list.

A rule contains all of the information required for improved matching correlation and scoring. Each rule contains the alert name a category a knowledge base identification host and network packet information as well as audit procedure information for compliance monitoring and scoring. A final rule upon a successful match permits assignation of the specific information to a normalized has table to the event occurrence item. In addition a final rule allows for multiple matching rules as well as a logical no indication. Once all activities are complete the event is passed into a processing queue for archiving scoring and performing additional correlation.

The process further includes the additional optional operations indicated at the block of performing a textual rule set match. A determination is made indicated by the decision block as to whether a match is made. If so the yes branch is taken to the block and the even occurrence is added to the processing queue. Otherwise the no branch is taken to the log block and the lack of match is logged.

First and as indicated by the block the event is received from a processing queue. Then and as indicated by the block the event occurrence item is inserted into a database. In addition as indicated by the block Bayesian scoring is performed. Then and as indicated by the block Boolean rules of a score rule set are compared with the event occurrence item.

Additionally the present process further includes a vulnerability assessment in conjunction with the Boolean comparison in block as indicated in block . The vulnerability management may utilize fuzzy logic or an equivalent thereof to compare how closely two strings match. For example if two compared strings are 70 percent in the closeness the management block may return a score of X . If the compared strings even more closely match such as 90 percent match the vulnerability management block may assign another higher score of Y whereas if the match is not close e.g. 10 then the block might return a zero score as part of the vulnerability management. This vulnerability management affords current assessment of vulnerabilities rather than rely upon potentially much delayed assessment based on Common Vulnerability Exposure CVE data.

Finally as indicated by the block a summed score i.e. a cumulated or cumulative score of matches of score rules of a score rule set and the event occurrence item is obtained.

An event occurrence item is received matched normalized and correlated based upon relative information. Then a score is assigned to the event occurrence item. The score value is determined from a variable length rule set that determines a successful or unsuccessful match against the unique rules of the rule set. Each rule of the score rule set can have multiple arguments and in the exemplary implementation implemented as a Boolean rule as a positive or negative value. The score responsive to a successful match of a specific score rule is summed together with other score rule results in order to arrive at a final overall score. The overall score is responsible for relating importance acting upon thresholds etc.

An event is any event that might be of interest such as a user action a log entry a security notification or a performance statistic. A message identifying an event occurrence is originated at any of various devices including e.g. an information security device a network appliance a computer server and a computer work station. In addition once an event occurrence item is read from a processing and scoring queue the information related thereto is written to a database scored against a multitude of scoring mechanisms and the total score is updated against the newly processed event.

In the exemplary implementation before an event is compared against rules of a score rule set a Na ve Bayesian score is determined. The score is determined by first taking the necessary data chunks out of each required string. The strings are extracted from any of various places including e.g. the alert name category type and payload part of the event occurrence item message.

The Bayesian score is included with existing event properties that are processed by the score rule sets. A rule set is any list of rules that is associated with a positive or negative score. When a rule set matches against a provided event the associated score is added to the existing score. The initial score is zero. Once all of the rules have been compared against an event a total score is determined and associated within a database to the initial event information permitting future actions to be taken based upon a score threshold.

The following are exemplary actions that define score rules that are matched against an event occurrence item. An alert name regular expressions an alert category regular expressions audit actions Bayesian score count by host alert a count by host category a host either destination or source an event payload a port either destination or source an alert priority a resource and a time stamp are exemplary rules of a score rule set that are utilized in various implementations define matches that are scored.

When a Bayesian score is utilized a Bayesian histogram analysis algorithm is utilized to uniquely fingerprint known security and performance issues while establishing a base line for positive or neutrally acceptable network traffic utilizing standard deviation. The algorithm identifies unique attributes within a specified target event. The activity in conjunction with standard deviation facilitates pattern matching. Thereby both known or trained information is matched and through use of standard deviation target events that have not been trained or identified are also matched. An operating baseline is thereby established.

After block an internal event cache processing is effected as shown in block . Processes as part of this processing are illustrated by block and where different key value data are entered with the key indicating the type of data and value being the actual data. The types of data inserted in blocks through is not meant to be exhaustive and is merely exemplary. Examples of various contemplated keys and their corresponding descriptions that may be cached are indicated in Table 1 below.

After population of data in the cache matching of Boolean Event Rules is effected based on the stored data as indicated in block .

Alternatively at block if the ruleset does not match flow proceeds to block where a comparison of whether each rule within a ruleset matches as indicated in block . If an event rule matches flow proceeds to block to determine if the end of the rules within the ruleset has occurred i.e. all rules in the ruleset have been examined . If not flow proceeds back to block . On the other hand if the end of the rules has occurred as determined in block flow proceeds to block to indicate a successful match has been returned and flow proceeds back to block to compare to a next ruleset.

If the rule does not match as determined in decision block flow proceeds to block wherein a failure match is returned and flow then proceeds to the next ruleset.

In light of the foregoing apparatus and methods are provided by which to facilitate analysis of events that are related to a network system across multiple network or computer systems. Event occurrence items that are considered to be potentially significant are scored and the score is used to prioritize the sequence order of potentially significant event occurrence items that are analyzed by a network system manager or operator. These may then be queried by a central or main interface such as to further process the event information items.

Those of skill will further appreciate that the various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as computer software as well as hardware or logic or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module or API executed by a processor or combinations thereof. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium or computer program product known in the art. An exemplary storage medium or computer program product may be coupled to the processor such the processor can read information from and write information to the storage medium. The storage medium computer readable medium or computer program product is fixed and non transitory and is configured to include or store code or programming instructions that when executed by a processor or computer effect the methods or algorithms disclosed herein.

The word exemplary is used herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments. Additionally the previous descriptions are of preferred examples for implementing the presently disclosed methods and apparatus and the scope thereof should not necessarily be limited by this description. The scope of the present invention is defined by the following claims.

