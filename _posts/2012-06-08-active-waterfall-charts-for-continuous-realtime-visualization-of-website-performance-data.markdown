---

title: Active waterfall charts for continuous, real-time visualization of website performance data
abstract: A processor-implemented method includes providing an analytic dashboard with a graphical user interface (GUI) that outputs aggregated results streaming in real-time of a load test performed on a target website. The load test consists of a plurality of virtual users simulated by one or more load servers that execute a test composition on one or more webpages of the website. A waterfall chart is produced on the analytic dashboard that includes a plurality of timeline bars. Each of the timeline bars represents an aggregated result for a resource of the one or more webpages across all of the virtual users. The timeline bars change in real-time as the load test progresses.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09229842&OS=09229842&RS=09229842
owner: SOASTA, Inc.
number: 09229842
owner_city: San Jose
owner_country: US
publication_date: 20120608
---
This application is a continuation in part CIP application of Ser. No. 12 804 338 filed Jul. 19 2010 entitled REAL TIME MULTI TIER LOAD TEST RESULTS AGGREGATION which is assigned to the assignee of the present CIP application.

The present disclosure relates generally to methods and apparatus for processing data generated from load testing of websites or browser based applications. Still more particularly the present disclosure relates to methods apparatus and executable computer instructions for generating waterfall charts as a performance analysis tool.

In recent years enterprises and developers have sought an easy and affordable way to use cloud computing as a way to load and performance test their websites and web based applications. Cloud computing gets its name from the fact that the machine storage and application resources exist on a cloud of servers. In cloud computing shared resources software and information are provided on demand like a public utility via the Internet. Cloud computing is closely related to grid computing which refers to the concept of interconnecting networked computers such that processing power memory and data storage are all community resources that authorized users can utilize for specific tasks.

A web site is simply collection of files on a remote server. When a user accesses a website via a browser Hypertext Transfer Protocol HTTP or HTTP Secure HTTPS message intercommunications take place with the target website. In very simple terms when a user wishes to view a webpage HTTP requests each of the various files or objects that make up the webpage. These objects may include text images JavaScript files etc. Each of these objects is typically delivered from the host server to the user s browser in a serial manner. That is a series of communicative actions needs to occur between the browser and server in order for the user to view a specific page of a website. Essentially the files and objects which comprise the webpage are loaded one by one. Due to the request and response nature of HTTP there is a latency associated with each file that is loaded.

Load testing a web based application or website can involve simulating a very large number e.g. up to or beyond 1 000 000 of virtual website users via HTTP or HTTP Secure HTTPS message intercommunications with a target website. For very large tests sending and aggregating the test results data generated from all of the load servers to a database available to a dashboard in real time has been problematic. The huge overhead of receiving and processing a very large number of HTTP messages containing all of the requests and responses sent from each of the many load servers to the analytic servers responsible for analyzing the test results data can easily overwhelm the resources of the server. In addition communications bottlenecks can occur wherein messages get queued up in long stacks or lines such that the test results are no longer sent to the database in real time and therefore are not available in the dashboards in real time. In extreme cases the load test servers can also back up causing them to not generate the appropriate load on the customers websites or web applications.

A waterfall chart is another visual tool that developers and businesses use to analyze webpage performance. Waterfall charts are diagrams that allow a user to visualize data that is generated cumulatively and sequentially across the process of loading a webpage. A waterfall chart for a website provides the user with a visual representation of all of the series of actions that occur between a user s browser and the website server when that user wishes to view a specific page of the website. A typical waterfall chart consists of a series of colored bars that extend horizontally across a timeline. Each of the colored bars represents a different activity that happens as the associated object is delivered to the user s browser. For example a dark green bar may represent a Domain Name System DNS lookup wherein the browser looks up the domain of the object being requested. An orange bar may represent a Transmission Control Protocol TCP connection process by which the browser and server send and receive acknowledgement that a connection has been made. A bright green bar may represent the so called time to first byte the window of time between when the browser asks the server for content until the first byte of content is received back. A blue bar may be used in a waterfall chart to indicate the time it takes for the entire content to be sent from the server to the browser.

One problem with existing waterfall charts is that they are entirely static meaning that once the webpage is fully loaded the timeline information shown by the various colored bars is static on a per user basis i.e. it does not change. A more useful metric to a developer or website owner would be an active waterfall chart that aggregates and updates website webpage performance on a continuous real time basis across a changing number of virtual users and or multiple webpages associated with a target website.

In the following description specific details are set forth such as server types cloud providers structural features process steps visual objects charts etc. in order to provide a thorough understanding of the subject matter disclosed herein. However persons having ordinary skill in the relevant arts will appreciate that these specific details may not be needed to practice the present invention. It should also be understood that the elements in the FIG.s are representational and are not drawn to scale in the interest of clarity.

References throughout this description to one embodiment an embodiment one example or an example means that a particular feature structure or characteristic described in connection with the embodiment or example is included in at least one embodiment. The phrases in one embodiment in an embodiment one example or an example in various places throughout this description are not necessarily all referring to the same embodiment or example. Furthermore the particular features structures or characteristics may be combined in any suitable combinations and or sub combinations in one or more embodiments or examples.

In the context of the present application the term cloud broadly refers to a collection of machine instances storage and or network devices that work together in concert. A public cloud refers to a cloud that is publically available i.e. provided by a cloud provider that a user may access via the Internet in order to allocate cloud resources for the purpose of utilizing or deploying software programs and also for running or executing those programs thereon. Some public clouds deliver cloud infrastructure services or Infrastructure as a Service IaaS . By way of example Amazon Elastic Compute Cloud also known as EC2 is a web service that allows users to rent computers on which to run their own computer applications thereby allowing scalable deployment of applications through which a user can create a virtual machine commonly known as an instance containing any software desired. The term elastic refers to the fact that user can create launch and terminate server instances as needed paying by the hour for active servers.

Cloud platform services or Platform as a Service PaaS deliver a computing platform and or solution stack as a service. An example PaaS cloud provider is the Google App Engine which lets anyone build applications on Google s scalable infrastructure. Another leading software platform in the cloud provider is Microsoft Azure an application platform in the cloud that allows applications to be hosted and run at Microsoft datacenters.

A private cloud is a cloud that is not generally available to the public and which is typically located behind a firewall of a business. Thus a private cloud is only available as a platform for users of that business who are behind the firewall.

The term server broadly refers to any combination of hardware or software embodied in a computer i.e. a machine instance designed to provide services to client devices or processes. A server therefore can refer to a computer that runs a server operating system from computer executable code stored in a memory and which is provided to the user as virtualized or non virtualized server it can also refer to any software or dedicated hardware capable of providing computing services.

A message generally refers to a unit of data that can be sent via an electronics communications network e.g. the Internet to another computational or communications system or device e.g. to a server. By way of example a message could represent a communication sent to a queuing system a REST call or a Hypertext Transfer Protocol HTTP request. A message could also be instantiated entirely or partially as a single operation such as a web service call in any one of a variety of forms e.g. XML JMS HTML JSON etc. A message clip or clip for short comprises a set of one or more messages that includes a specification of the location timing and or dependencies of objects or elements specified within that set of messages. A clip typically comprises a plurality e.g. hundreds or thousands of sequenced messages that form part of a larger load test composition.

In the context of the present disclosure load servers also referred to as Maestro or test servers are servers deployed and utilized primarily to generate a test load on a target website. That is load servers play the test composition generating a load on a target customer website and web applications. Load servers also function to report back results of the load test and statistics in real time. Analytic or result servers are deployed and utilized primarily to collect the real time test results from the load servers aggregate those results stream the results to real time dashboards and store them in a database.

The term real time refers to a level of computer responsiveness that a user senses as sufficiently immediate or that enables the computer to keep up with some external process for example to present visualizations of load test results as it constantly changes . Thus real time is a mode of computer operation in which the computer collects data analyzes or computes with the data reports e.g. visually displays and or stores the results nearly simultaneously i.e. within seconds or milliseconds.

A grid or test grid refers to a collection of interconnected load servers and result servers that may be used to run a load test on a target website or web applications. As disclosed herein a computer program or grid wizard may be utilized to automatically determine the global cross cloud resources needed to execute a test by examining the test plan or script also referred to as a test composition . Furthermore the computer program can automatically allocate those server resources required for the test across multiple different cloud providers verifies that the allocated servers are operational and that the allocated servers are running proprietary load testing software or computer program product correctly. The computer program or product also monitors the allocated servers replacing non operational servers when allocated and during execution of the test and displays results from multiple globally distributed clouds in a real time streaming dashboard which requires no user initiated refresh.

In the context of the present disclosure a waterfall chart refers to a diagram that allows a viewer to visualize data that is generated cumulatively and sequentially across a process. As they relate to website performance waterfall charts are used to let someone see the series of actions that occur between a user and a server in order for that user to view a specific webpage page for short of a particular website. Each row of a waterfall chart for a website typically represents a different object i.e. text image JavaScript files etc. contained on a given page. For instance an average webpage may typically include 40 80 different objects and files that need to be delivered from the remote server to the user s web browser.

In one embodiment a method and system is provided for calculating load test aggregated test results at three architectural levels first at the load server level second at the analytics server level and lastly at the system wide data store level. In a specific implementation detailed level raw data the content of a request sent to a website e.g. to access a homepage is not sent from any of the load servers to any analytic server. Thus system resources on the load server side are not wasted for the continual sending of raw data. Similarly system resources on the analytics server side are conserved since the need to receive and process raw data sent from the load servers is obviated.

Instead of sending the raw data web pages responses and their statistics obtained during a load test from each of the load servers to the analytic servers a level of aggregation is added within each of the load servers. That is in one embodiment each load server includes an embedded component or client referred to as a Results Service Client that performs analytics server functions at the load server level. This Results Service Client aggregates test result data and generates various results statistics or metrics e.g. average response time average response size average time to first byte etc. from the raw data that the load server received from the target website or application. The statistics computed by the Results Service Client in each of the load servers are then sent to their associated analytic server at periodic intervals e.g. once every five seconds .

In another embodiment a user interface is provided that allows a user to display a waterfall chart on an analytic dashboard that aggregates and updates website webpage performance on a continuous real time basis across a changing number of virtual users and or multiple webpages associated with a target website.

Target website is shown connected to a public cloud via Internet cloud . Public cloud includes a main instance coupled to a database . Database may be used to store test results store metadata indicative of the test definition and to store monitoring data e.g. CPU metrics generated during the load test. Main instance is also shown coupled to a pair of analytic servers and a pair of load servers within cloud consistent with a snapshot view of the start of a process of deploying a test grid. It is appreciated that cloud may comprise multiple clouds associated with multiple different cloud providers. In the example shown main instance is a virtual machine deployed on a server provided in cloud that communicates with a browser application. In one embodiment main instance may include a results service designated as a reader results service as opposed to all of the other remote write results services which reads data from database and serves it to a web application which in turn formats the data and serves it to an analytic dashboard in the browser. In operation main instance executes the coded sequence of computer executed steps e.g. from code stored in a memory that allocates the server resources required for the test across one or multiple different cloud providers. The same application that allocates verifies server resources may also verify that the allocated servers are operational to conduct the website load test. The main instance may also execute code that implements the multi tiered load test results aggregation steps disclosed herein.

Additionally main instance may also execute code that generates the GUI described herein that allows a user to generate a continuous i.e. looping waterfall chart in real time on the screen for large number of virtual users.

Connected to the front end of cloud through Internet cloud is a laptop computer associated with a user who may orchestrate deployment of the test of target website . It is appreciated that in other implementations computer may comprise a desktop computer workstation or other computing device that provides a graphical user interface that allows a user to create and execute the test composition define the parameters of the grid initiate the load test as well as analyze review results of the test in real time. This GUI also provides the ability to creating a continuous real time waterfall chart for visual display to the user. The GUI may be web based so it can be accessed from any computer having web browser capabilities from any location in the world without installation of specialized software.

Persons of skill in the art will understand that the software which implements main instance may also be downloaded to the user s laptop computer or implemented on a separate hardware appliance unit located either at the user s premises e.g. behind the firewall or anywhere in clouds or . It is further appreciated that laptop is representative of a wide variety of computer devices such as workstations personal computers distributed computer systems etc. that may be utilized by the user to launch the method for provisioning running the cross CloudTest grid analyzing streaming real time results monitoring the performance of the actual load test and generating one or more charts e.g. waterfall for visual display on an analytic dashboard. In other words the GUI described herein may also run on a computer or data processing system local to the user.

The computers servers and computing devices described and referenced herein may comprise any of the computers servers or electronic processing devices for coupling or connection with a communications network. Such devices typically comprise a number of basic subsystems including a processor subsystem a main memory and an input output I O subsystem. Data may be transferred between the main memory system memory and the processor subsystem over a memory bus and between the processor subsystem and I O subsystem over a system bus. Computing devices may also comprise other hardware units modules coupled to the system bus for performing additional data processing algorithmic or communication functions. Alternatively these functions may be performed by one or more processors of the processor subsystem which typically comprises one or more processors.

Continuing with the example of the application program running on main instance operates to create a GUI that allows a user of laptop to remotely interact with the application view monitor the test results in real time and modify parameters test conditions dynamically during the actual test. For purposes of the present disclosure the grid wizard is considered synonymous with the application program or system program that performs the method and operations described herein. In one embodiment main instance may include an embedded load server for running a relatively small load test that does not require the deployment of other load servers and an embedded results i.e. analytic server for collecting aggregating the real time test results. In another embodiment. the main instance and the database provide a basic Cloudiest testing environment that can be used to launch establish one or more grids with one or more cloud providers being utilized to provision each grid.

The overall testing process begins with the user creating a sophisticated test plan or composition via a GUI of either the same application program running on main instance or a GUI associated with another web browser application. The GUI may be utilized that generate complex parallel message streams for website testing. In one example the test plan may be created in the form of a visual message composition analogous to a music composition for testing and demonstrating web services such as that described in U.S. patent application Ser. No. 11 503 580 filed Aug. 14 2006 now U.S. Pat. No. 7 844 036 which is herein incorporated by reference.

The process of deploying the test grid for a large scale test may start with the user of laptop indicating to main instance the number of virtual users wanted on each track of the test composition. For example the user of the system may wish test the target website with a load equal to 1000 users on each track of a test composition. The user may indicate the number of virtual users through an input entered on a browser page of the GUI as described below or alternatively invoke a grid wizard that automatically makes an intelligent allocation of the proper amount of resources needed to conduct the test based on examining the composition that this grid will be running. By way of example the system may determine that a single load server should be allocated to accommodate every 1000 virtual users.

Similarly the system via a grid wizard may determine a proper allocation of result servers needed to accommodate the number of load servers specified. In one implementation users can specify how many load servers and how many result servers they want in each cloud and region. Alternatively users may employ the grid wizard to specify all parameters. That is users can simply specify a defined test composition and the grid wizard automatically analyzes the composition and determines how many servers they need in each cloud and region. It is appreciated that the determination of the number of load servers and result servers is typically made based on considerations that ensure each virtual user has a satisfactory amount of bandwidth CPU memory resources etc. such that it correctly simulates or behaves as a real world browser.

Once the test has been defined and the parameters set e.g. number of servers server locations etc. via the grid wizard upon user input the user main instance starts the process of actually deploying and allocating the specified resources by interacting with an application programming interface API of one or more cloud providers. By way of example a user may click on a Deploy Instances button provided in a page of the CloudTest load testing program GUI in response the system software contacts all of the different cloud APIs it needs and starts to allocate the required servers.

For example if 1000 servers are to be allocated in EC2 there may be 40 simultaneous requests issued each request being for 25 servers. If another 200 servers need to be allocated in Microsoft Azure in two different geographically located data centers two simultaneous requests may be issued each for 100 servers in each data center due to the fact that Azure does not support allocating smaller groups into one single deployment . In other words the user may simply click on an icon button of a GUI to initiate the deployment allocation of resources e.g. machine instances needed to execute the test composition with the requests necessary to achieve that allocation being issued handled in an automated manner i.e. without user intervention.

Each of result servers is connected to a plurality of associated load Maestro servers . Each load server is shown having an embedded component or Result Service client which computes metrics or statistics from the raw data e.g. web pages received from the target website or application. As discussed previously the function of each load server is to provide a load to the target website by creating one or more virtual users that access information on the target website. Within each Maestro server is Result Service client which functions to compute statistics such as average response time average response size and the like. In one embodiment instead of sending all of the raw data received from the target website Result Service client computes relevant statistics and discards the data. Then once an interval e.g. every five seconds the statistics computed by client are sent to the associated result server .

Each of the result servers takes all of the statistics received from all of its associated load servers and further aggregates those statistics. In other words each result server aggregates the aggregated results received from all of the load servers that it is connected to. The resulting aggregated data is then further aggregated when querying database . Thus statistics such as average response time across all of load servers for the load test is stored in database and available on a real time basis to browser via database queries performed by the main instance which can perform further aggregation grouping filtering etc.

Practitioners in the art will appreciate that aggregating statistical results data on multiple levels beginning at the point closest to the actual load test results creation allows a user to view results in real time on an analytic dashboard GUI thereby permitting real time analysis across the entire testing infrastructure.

In a specific implementation each load server includes a Result Service client which in turn includes accumulators that stores the statistically aggregated data e.g. average response time computed on a second by second basis. Periodically e.g. every 5 seconds each Result Service client sends an appropriate number of messages e.g. 5 messages one for each second to its associated result server . That is one batched message is sent every 5 seconds the batched message including data about all of the previous 5 seconds. Each message contains the data metrics computed every one second interval. These fine granularity metrics are then further aggregated in database . It is appreciated that by computing statistics metrics on a second by second basis the analytic dashboard running on browser can analyze the results on various levels of granularity. In other words the user may want to view statistical results of the load test on a minute by minute basis or all the way down to a second by second basis. Thus the architecture described herein allows a user to view real time streaming results in an analytic dashboard of various performance test metrics on a second by second basis even when there are millions of virtual users on thousands of load servers.

As shown a set of combined charts are shown graphically in various window fields. For example field illustrates the number of virtual users shaded area and the send rate heavy line as a function of test time. As can be seen the number of virtual users is ramped up from zero to a final total number e.g. 10 000 over a span of time e.g. 50 minutes . The example shown in field shows the load test continuing for an additional time period after the number of virtual users reaches a peak or final number. Practitioners in the art will appreciate the usefulness of charting a test metric over time as the number of virtual users slowly ramps up. For instance a developer or website owner can easily observe in real time as the load test is actively running the aggregate performance result of the target website as the number of virtual users increases from zero users to a very large number of users over an extended time period.

Field illustrates error count vertical dark lines and the number of virtual users shaded area versus test time. Field shows the number of bytes sent and received vertical dark lines and the number of virtual users shaded area as a function of test time. It is appreciated that the user may select view a wide variety of charts combined correlated etc. using tabs . Collectively the charts provided in window allow a user to view analyze and monitor test results and information in real time so as to help identify root causes of performance problems their website or web application may be experiencing.

Persons of skill in the arts will appreciate that shows how the entire test grid comprising a huge number of interconnected load and result servers works in concert to send load receive responses aggregate and analyze those responses into a real time streaming graphical result displayed to the user. All this is accomplished regardless of how many server instances and different cloud providers are utilized to run the load test. Moreover the various result charts may be viewed in one or many real time streaming analytic dashboards. In each of the charts displayed on analytic dashboard window the user may change the time format or legend of the horizontal axis for reporting the testing analytics in real time on a varying time e.g. hour by hour minute by minute or second by second basis.

During the playback of the test composition and while the user is monitoring viewing the test results displayed on GUI window the user may pause or stop the test. Stopping the test closes the result and unloads the running test composition from all of the load servers. On the other hand pausing or temporarily halting the test stops the load from all of the load servers but keeps the test composition loaded and ready to resume playing into the same result. For example the user may temporarily halt or pause the test after identifying a problem that requires adjustment of the load balancer on the target website. It should be understood that when the test is temporarily halted in this manner the grid remains fully provisioned and running. In other words the composition and running of the load test is independent from the provisioning and running of the grid. After any adjustments or reconfiguration of the target website the user may continue with the execution or playback of the test composition either beginning at the place where it was halted or re starting the test from the beginning. Persons of skill in the art will appreciate that the ability to start re start the test without affecting the state of the grid in conjunction with the ability to view test results metrics in real time e.g. second by second provides a powerful advantage over prior art methods for testing a customer website.

The GUI described herein also allows a user to create an active waterfall chart that functions as an analytical tool with the chart displaying results aggregated in real time across a large number of virtual users who are continually loading one or more webpages over and over again. In the case of an active waterfall chart more fine grained information is collected than just average response time. That is test result information is collected within each resource e.g. blocking DNS look up connection sending waiting receiving etc. In other words the information collected is even more finely grained than simply providing an average time it takes to load a given webpage across a given number of virtual users. For instance an active waterfall charts may visually provide information regarding average time to load individual objects and files within the page e.g. a specific JavaScript file or the average DNS lookup time across all the virtual users for a specific object of a webpage. Additionally the multi tiered architecture described herein is advantageously utilized to produce an active waterfall chart in real time i.e. as the load test is running with the information displayed changing in real time as the test progresses continuously in the case where the test keeps looping and loading one or more webpages over and over again .

As described above a user or application developer viewing an active waterfall chart of one or more webpages running in a browser window may identify one or more slowest resources pause the test optimize the website and or specific webpages and restart the test to generate a new active waterfall chart following the optimization.

The aggregated test results computed by the chant running on each load server are periodically sent to their associated analytic server. Block The period at which the aggregated results are sent to the analytic servers may be equal to or greater than the period at which the aggregated test results are computed within each load server. In a typical implementation aggregated test result data is computed by each load server every second with the results of those computations being sent to the analytic servers from each of the load servers every five seconds.

Next at each analytic server the aggregated test result data received from each of the associated load servers is further aggregated. In other words each analytic server produces aggregated test result data across all of its associated load servers. Block For example if each analytic server is associated i.e. connected with fifty load servers each analytic server aggregates statistics metrics across the aggregated test result data received from each of the fifty load servers.

Finally at block the aggregated data produced by each analytic server is further aggregated at the system wide data store in real time. For instance Structured Query Language SQL queries to the database can perform aggregation functions e.g. AVG SUM etc. against tables rows that have been inserted from the individual analytics servers thereby producing further third level aggregated results.

As explained above the results of this final level of aggregation are available in real time to a browser executing an analytic dashboard that provides a graphical display of the multiple results in various charts. The results are maintained in the dashboard in real time since the browser continues to produce the latest changes in each result set by querying the database for all of the rows that have changed since the last time that the queries ran.

A delta change document containing updated data and statistics may be produced and sent to the browser which merges the changes into the currently displayed chart. In one embodiment if the multi result chart is combined or correlated the dashboard may produce more than one delta change document and merge all of the different changes into the multi result chart. If the multi result chart is correlated the widget code may wait or pause until both data points from each result set are available for a given point in time. In other words a new point is shown in the statistical correlation chart once the data is available for each result set.

As shown each line or row of the waterfall chart illustrates a horizontal timeline associated with each GET of an object file or resource identified under the Uniform Resource Locator URL heading. The timeline associated with each row of active waterfall chart advances from left to right in real time as the test composition progresses and or loops. As can be seen each timeline consists of a series or sequence of horizontal bars that are shaded so as to indicate the various operations or functions performed. For instance in the implementation shown positioning the cursor over one of the timelines produces a key that shows the constituents or components of the timeline along with the associated total time aggregated for all of the virtual users currently participating in the load test. For example key illustrates component times for Blocking DNS Lookup Connecting Sending Waiting and Receiving for the selected object file or resource. The far right hand column of key also lists the cumulative time again aggregated over the total virtual users currently expended to GET that particular object file or resource. Note that the example snapshot of GUI window shown in is taken 760 milliseconds after commencing the load test.

Persons of ordinary skill will appreciate that the information provided in the active waterfall chart illustrated in the example GUI window snapshots of changes in real time as the load test runs. That is to a user viewing the waterfall dashboard on a display screen the various timeline bars would appear to advance horizontally and change in real time as the test progresses and or loops. Persons of skill will further appreciate that the number of virtual users participating in the load test may range anywhere from a very few e.g. tens to a very large number e.g. tens of millions . A typical load test ordinarily is designed to ramp up from zero users to a final total number of users e.g. a million over a certain period of time e.g. 1 2 hours . Thus the active waterfall chart generated on the user s analytic dashboard allows the user to visually see exactly how the target website webpage s perform during the ramp up period of the test composition where the number of virtual users slowly increases. The achievement of an active waterfall chart that provides aggregated results across all of the virtual users in a real time analytic dashboard provides a user with a powerful ad hoc analytical investigative tool to better understand the performance of a target website.

Next the aggregated test results computed by the client running on each load server are periodically sent to a tier of associated analytic or results servers. There at each analytic server the aggregated test result data received from each of the associated load servers is further aggregated to produce aggregated test metrics for all the virtual users in real time. Block In one implementation aggregated test result data is computed by each load server every second with the results of those computations being sent to the analytic servers from each of the load servers every 2 5 seconds.

The aggregated results across all of the virtual users may be output in real time to a browser providing an analytic dashboard that provides a GUI that outputs aggregated results streaming in real time of the load test performed on a target website. An active waterfall chart is produced i.e. displayed on the analytic dashboard that includes a plurality of timeline bars each of the timeline bars representing an aggregated result for a resource of the one or more webpages across all of the virtual users. The timeline bars change in real time as the load test progresses. For instance the timeline bars typically advance horizontally from left to right as the test time increases and the number of virtual users ramps up. Each of the timeline bars consists of a plurality of timeline activities e.g. Blocking DNS look up connecting sending waiting and receiving times .

The aggregated test results are maintained in the dashboard in real time since the browser continues to produce the latest changes in the multiple rows of horizontal timeline bars displayed in the active waterfall chart. That is to a user viewing the active waterfall chart each of the horizontal timeline bars appear to move and change continuously in real time in accordance with the aggregated information about the associated webpage resource as the load test continues to run. Block 

It should be understood that elements of the disclosed subject matter may also be provided as a computer program product which may include a machine readable medium having stored thereon instructions or code which may be used to program a computer e.g. a processor or other electronic device to perform a sequence of operations. Alternatively the operations may be performed by a combination of hardware and software. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnet or optical cards or other type of machine readable medium suitable for storing electronic instructions.

Additionally although the present invention has been described in conjunction with specific embodiments numerous modifications and alterations are well within the scope of the present invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

