---

title: Apparatus and computer-readable media for processing HTTP requests determine scoping mapping between a mapped resource name extension and a content type
abstract: Various embodiments of the invention are directed to closely integrating functionality between an internet server and a WebDAV tool. Areas of specific focus in this document include delegation of duties between the internet server and the WebDAV tool, efficient management of a resource's content-type, support for segregation of a namespace into separate virtual roots, and determinations of whether to invoke certain processing extensions to handle requests for a given HTTP verb.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08359391&OS=08359391&RS=08359391
owner: Microsoft Corporation
number: 08359391
owner_city: Redmond
owner_country: US
publication_date: 20120120
---
This application is a continuation of and claims priority to U.S. patent application Ser. No. 12 749 454 filed Mar. 29 2010 which is a continuation Ser. No. 10 954 746 filed Sep. 30 2004 now U.S. Pat. No. 7 689 564 which is a continuation of and claims priority to U.S. patent application Ser. No. 10 382 943 filed Mar. 6 2003 now U.S. Pat. No. 7 457 805 which is a divisional application of and claims priority to U.S. patent application Ser. No. 09 360 776 filed Jul. 26 1999 now U.S. Pat. No. 6 629 127. The disclosures of all of the above identified applications are hereby incorporated by reference in their entireties as if set forth herein in full.

This invention relates to apparatus and computer readable media for implementing a method of processing HTTP requests. In particular the invention concerns apparatus and computer readable media for integrating web servers that are configured to handle certain types of HTTP requests with a WebDAV tool that is configured to handle WebDAV requests.

WebDAV is a technology that makes the Web a collaborative writeable medium. WebDAV stands for Web Distributed Authoring and Versioning. Today the Web is really read only where people mostly do downloading and reading operations. WebDAV makes it possible for web users wherever they are whether separated by two houses or two continents to write edit and save shared documents without scuttling each other s work regardless of which software program or Internet service they are using. Today when people want to collaborate on a document they usually pass it back and forth using email. This is a messy error prone process. Confusing email encoding problems can prevent successful sending of a document. Over time sending files back and forth leads to problems keeping track of all the old versions of the file. Plus in some companies emailing a big file can take a long time when the network is busy. With WebDAV the encoding problem goes away and information is immediately available after it is saved. Instead of emailing the entire file with WebDAV you just email the URL. WebDAV is also better than FTP because it is significantly faster is in the same namespace as the actual published documents and is consistent with other web tools. In addition WebDAV has overwrite prevention and property management operations both absent from FTP.

However WebDAV goes beyond just Web page authoring. WebDAV is a set of extensions to the Hypertext Transfer Protocol HTTP which is the standard protocol that allows Web browsers to talk to Web servers. WebDAV and HTTP can accommodate all kinds of content and so WebDAV can be used just as easily to collaboratively work on a word processing document a spreadsheet or an image file. Anything you can store in a file can potentially be authored using WebDAV gaining its advantages.

WebDAV has three main features overwrite prevention properties and namespace management. Overwrite prevention is important because it allows people to avoid the lost update problem that occurs as changes to a document are lost when several authors access and attempt to edit a file at the same time. By ensuring that people can work together without losing their changes overwrite prevention is the key to WebDAV s collaboration support.

WebDAV s properties feature is an efficient means of storing and retrieving what is known as metadata information about a web document such as the author s name copyright publication date and keywords that Internet search engines use to find and retrieve relevant documents. Finally WebDAV also has what is called namespace management capabilities which enables users to conveniently manage Internet files and directories including the ability to move and copy files. The process is similar to the way word processing files and directories are managed on a regular computer.

Another advantage of WebDAV is the ease with which individual Web pages can be made. On many sites the process for getting Web pages up and running is very complicated. WebDAV enabled applications can allow a person to just save to a URL thus avoiding the hassles of shell accounts FTP and the details of how file system directories are mapped into URLs.

Additionally many sites have a staged production process. This involves a content submission area one or more staging areas and a publicly visible area. Sites like this will not use WebDAV for the publicly visible area since they want to maintain the integrity of the site. However WebDAV offers a great deal for the content submission and staging areas. Big web sites often collect information from people across an organization and sometimes from several different organizations. Very frequently the contributors are geographically dispersed. WebDAV provides a standard way for contributors to submit their information. As a web site developer one can create a submission area hand out its URL and let people save directly to it.

While WebDAV is very useful insofar as its ability to enable distributed authoring and versioning integrating its functionality with existing Internet servers poses challenges that must be overcome if the two systems are to coexist peacefully. One such challenge relates to the processing of HTTP requests that operate on more than one file resource. In an HTTP environment a virtual namespace is exposed to clients. The virtual namespace defines resources in terms of a tree like directory and sub directory hierarchy. However this directory hierarchy does not necessarily correspond to the actual physical storage media upon which the resources reside. Rather virtual directories and sub directories often referred to as virtual roots are mapped to different physical storage locations that might not correspond to the virtual directory hierarchy.

HTTP requests of the past GET and HEAD requests in particular did not pose a problem in this environment because these requests simply operated upon one and only one specified resource. With the advent of WebDAV however it is more likely than not that requests will involve or specify operations on a plurality of different resources potentially involving disparate physical locations.

Along with this traversal operation arise concerns associated with integrating the conventional web server functionality with the newer WebDAV functionality so that operation is transparent to the client.

This invention arose out of concerns associated with providing methods and systems for integrating WebDAV with current Internet servers.

Methods and systems of processing HTTP requests are described. Aspects of the invention include a WebDAV tool and an internet server. In the described embodiment these components are integrated in a system for processing HTTP requests. The system receives a request that specifies an HTTP verb. The system determines whether the specified HTTP verb is one of a set of one or more predetermined HTTP verbs. If the specified verb is not one of these verbs then the system passes the request to the WebDAV tool for processing. Otherwise the system passes the request to the internet server. Other determinations can be made by the system based upon whether there appears to be any state associated with a request or whether the request is a request for data or a request for the source that generates the data.

In another aspect a WebDAV request is received that specifies a resource name extension and a content type. The system ascertains whether current mapping scenarios e.g. MIME maps that map resource name extensions to content types is adequate to map the specified name extension to its specified content type. A new mapping scenario is created if the current mapping scenarios are inadequate. The new mapping scenarios are defined by setting a property on a specified resource through the use of the property setting capabilities of WebDAV.

Another aspect of the invention involves segregating a namespace to have different physical locations each of which is associated with a different virtual root of the namespace. A plurality of rules are defined and relate to how particular resources are to be operated upon at the different physical locations. When an HTTP request is received that can involve operations at different physical locations the system ascertains based upon the rules whether execution of the request would violate one of the rules. If doing so would violate a rule then the request or at least a portion of the request fails. Different exemplary rules include those that are associated with different administrative properties or security settings that might be set at the different physical locations different authentication models that can be set at the different physical locations and whether or not an ISAPI extension is registered to handle the request to name just a few.

In accordance with another aspect of the invention the system ensures that requests that might traverse different physical locations do not undesirably change administrative attributes that are set at the physical locations. In the described embodiment execution of MOVE and COPY requests are performed in a manner that maintains the administrative attributes of the source and destination namespaces while permitting any MIME maps that are associated with the resource to follow the resource.

Other aspects involve resolving conflicts between child virtual roots of a specified namespace and physical storage locations when a request is capable of traversing multiple physical locations. Further aspects extent script mapping capabilities to provide for ISAPI extensions to be registered for definable HTTP verbs. Thus any client requests that contain specified verbs can be handled by their associated registered ISAPI extensions.

Various aspects are directed to closely integrating functionality between an internet server and a WebDAV tool. Areas of specific focus in this document include delegation of duties between the internet server and the WebDAV tool efficient management of a resource s content type support for segregation of a namespace into separate virtual roots and determinations of whether to invoke certain processing extensions to handle requests for a given HTTP verb.

Computer further includes a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from and writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the bus by an SCSI interface or some other appropriate interface. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks random access memories RAMs read only memories ROMs and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into computer through input devices such as a keyboard and a pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to the processing unit through an interface that is coupled to the bus . A monitor or other type of display device is also connected to the bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

Computer commonly operates in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment computer typically includes a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the bus via a serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described below.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks although it is recognized that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

The HTTP protocol is a request response protocol as the above example indicates. A client sends a request to the server in the form of a request method URI and protocol version followed by a MIME like message containing request modifiers client information and possible body content over a connection with a server. The server responds with a status line including the message s protocol version and a success or error code followed by a MIME like message containing server information entity meta information and possible entity body content. The reader is assumed to have some familiarity with HTTP methods or verbs. A set of common request methods for the HTTP 1.1 protocol include the following methods Head Get Put Post Delete Trace and Options. Each of these methods are briefly described in the table appearing just below 

WebDAV is an extension to the HTTP 1.1 protocol that allows clients to perform remote web content authoring operations. This extension provides a coherent set of methods headers request entity body formats and response entity body formats that provide operations for properties collections locking and namespace operations. With respect to properties WebDAV provides the ability to create remove and query information about Web pages such as their authors creation dates etc. With respect to collections WebDAV provides the ability to create sets of documents and to retrieve a hierarchical membership listing like a directory listing in a file system . With respect to locking WebDAV provides the ability to keep more than one person from working on a document at the same time. This prevents the lost update problem in which modifications are lost as first one author then another writes changes without merging the other author s changes. With respect to namespace operations WebDAV provides the ability to instruct the server to copy and move Web resources.

In HTTP 1.1 method parameter information is exclusively encoded in HTTP headers. Unlike HTTP 1.1 WebDAV encodes method parameter information either in an Extensible Markup Language XML request entity body or in an HTTP header. The use of XML to encode method parameters is motivated by the ability to add extra XML elements to existing structures provide extensibility and by XML s ability to encode information in ISO 10646 character sets providing internationalization support. In addition to encoding method parameters XML is used in WebDAV to encode the responses from methods providing the extensibility and internationalization advantages of XML for method output as well as input.

The following WebDAV HTTP methods use XML as a request and response format. The reader is assumed to have some familiarity with WebDAV HTTP methods or verbs. A brief description however of some pertinent WebDAV HTTP methods or verbs appears in the table immediately below 

One aspect of the invention is directed to allocating processing functions between the WebDAV tool and the internet server . shows a schematic of one way in which this can be done. There a request analysis tool is shown. The request analysis tool can be a separate software module or can comprise part of the internet server . When a request is received from client the request analysis tool analyzes the request based upon definable criteria and sends the request to the appropriate processing entity i.e. either the WebDAV tool or the internet server . There are different criteria that can be defined in order to give the request analysis tool the information it needs in order to make the appropriate selection between the WebDAV tool and the internet server . The criteria discussed below constitute exemplary criteria only and are not intended to limit the invention to the specifically discussed criteria.

The first criteria than can be used to assist in allocation of processing functions between the WebDAV tool and the internet server is a verb based criteria. Here recognition is made that certain HTTP verbs or methods are better handled by the internet server while other HTTP verbs or WebDAV verbs are better handled by the WebDAV tool . As an example consider the fact that over time internet servers have evolved to do a very limited and specific set of functions very well serve up resources and or data for access through HTTP. As a result of this evolution the internet servers have come to serve up the resources very quickly and efficiently. The primary HTTP method or verb of interest in this scenario is the GET method or verb and to a lesser degree the HEAD method or verb. WebDAV on the other hand is directed to the creation management and publishing of Web server content. To do this WebDAV uses a very different set of methods or verbs. Hence by recognizing that a logical division can be made between the HTTP verbs the request analysis tool can be configured to evaluate the HTTP verbs that are contained in the client s request and send the requests to the appropriate processing tool either the WebDAV tool or the internet server .

The second criteria than can be used to assist in allocation of processing functions between the WebDAV tool and the internet server is a state based criteria. Here the request analysis tool evaluates the client request to determine whether there is any state associated with the request. If there is state associated with the request then the WebDAV tool receives the request. If there is not state associated with the request then the internet server receives and processes the request. shows a flow diagram that describes steps in the method discussed just above. Step receives a client request. Step determines whether there is any state associated with the request. If there is no state associated with the request then step passes the request to the internet server for processing. If there is state associated with the request then step passes the request to the WebDAV tool .

In the described embodiment determination of whether there appears to be any state associated with a request can be ascertained by evaluating the headers that accompany the request. Specifically requests that have state associated with them have a special header an IF header that indicates that there is some pending state that should be used in the handling of the request. Thus when a request is received the request analysis tool evaluates the request headers looking specifically for an IF header. If such a header is found then in this example the request is passed to the WebDAV tool for processing. Otherwise the request is processed by the internet server .

Consider the following example The ability to lock a resource through use of the LOCK verb provides a mechanism for serializing access to that resource. Using a lock an authoring client can provide a reasonable guarantee that another principal will not modify a resource while it is being edited. In this way a client can prevent the lost update problem. A lock token is a type of state token represented as a URI which identifies a particular lock. A lock token is returned by every successful LOCK operation in the lockdiscovery property in the response body and can also be found through lock discovery on a resource. A client may submit the lock token in subsequent requests that are sent to the server. This is done by submitting the lock token in an IF header. Thus in this example the subsequent request has state associated with it. This being the case the request analysis tool recognizes the IF header and the associated state and passes the request to the WebDAV tool. This is important because subsequent GET request handling may possibly need to be blocked based on the state described by the state token.

The third criteria than can be used to assist in allocation of processing functions between the WebDAV tool and the internet server is a source access based criteria. Here recognition is made of the fact that some requests such as GET requests are interested in data that is the result of some computational processing while other requests are interested in the means by which the computational processing takes place i.e. the scripts that produced the data. For example if a client wants to publish or author a site then doing a GET request will produce only the data that is itself produced by a script. It will not produce the source of the data the script itself. The script itself is produced by requesting the source of the data. This is known as source access.

Although the three criteria discussed above are described separately it is to be understood that the request analysis tool can be configured to perform evaluations of an incoming request using each of the criteria or any combination thereof. It is also to be understood that criteria other than that which is specifically described in this document can be defined and used without departing from the spirit and scope of the invention. By allocating processing functions between the internet server and the WebDAV tool the two components are integrated and can coexist thereby providing a complete implementation without requiring each of the components to duplicate any part of the operations of the other. In addition request processing is streamlined and takes place in a time saving effective manner. Specifically and in the example above by leveraging the request processing capabilities of the internet server and passing all other requests to the WebDAV tool efficient use is made of the internet server .

Resources that are accessible through HTTP requests typically have content type data associated with them. The content type data is returned to the client with the requested resource. Content type data gives an indication of what kind of resource a given resource is i.e. the format of the resource so that it can be handled appropriately by a client. For example a given resource may be a document called foo.doc . This particular document may be a Microsoft Word document. In order for a client to know that the document is a Word document content type data is associated with the document at the internet server . In the described IIS embodiment the content type data association is made in a storage facility called the metabase. In this particular example the content type data would indicate that the .doc extension on a specified resource should be mapped to a content type application msword . The content type application msword then tells the client browser to invoke Word in order to serve up the document to the client.

When a client makes an HTTP request e.g. a GET request the request will specify a namespace that is associated with a resource of interest. For example the request may specify the namespace http www.document.com . This namespace may point to many different physical locations that contain resources that are associated with the namespace. The resources are simply unified under a common namespace that can be used in the client request. This type of a namespace is referred to as a virtual namespace because it may have one or more different physical locations associated with it where different resources are located. Thus when the server receives a client request that contains a virtual namespace it typically maps the virtual namespace to the one or more physical locations where the requested resources are located.

One way to maintain an association between content type data also referred to as content types and their associated file extensions is through the use of Multi purpose Internet Mail Extension maps or MIME maps. MIME maps correlate a resource name extension to the MIME content type that indicates the format of the resource. An example of this was given above. One feature of MIME maps that is particularly useful is that they are scoping in nature. This means that the association that is defined for the resource name extension and the content type holds true for all resources that have a namespace that is an extension of the namespace where the MIME map is stored. As an example consider the following Assume that there is a MIME map that is defined or stored for the namespace documents sales that maps all of the namespaces that have the log extension to a content type of application salestracker . Assume further that a client request is received that specifies a resource by the following namespace documents sales west coast.log . Because of the scoping nature of MIME maps the west coast.log resource would have a content type application salestracker that is defined for the namespace documents sales .

By using a MIME map to designate the content type of a resource the content type can be stored only once for as many resources that use the mapping. Otherwise the content type value would need to be stored once for each resource. Using MIME maps also assists the internet server in GET processing because it can retrieve the content type without having to know the format of the non content type properties of a given resource.

Embodiments of the invention are directed to closely integrating the functionalities of the WebDAV tool and the internet server insofar as MIME map use is concerned. When a request is received from a client the mapping scenarios are evaluated and adjustments are made if the mapping scenarios are not adequate to address mapping needs that might arise. In the described embodiment the mapping scenarios are capable of being adjusted on each resource on an individual basis. This can take place through the use of a WebDAV technique that sets a content type property on the resource that gets returned with the resource when a subsequent GET request is received. This is an improvement over past methods that only enabled content types to be defined at the folder level. There every file in a folder had a content type association that was defined for the folder. Here as will become apparent below one advantage is that many different files can be stored in a single folder with each file having a different content type that is associated with it and which gets returned when a GET request for that resource is received.

As an example of an inadequate mapping scenario consider the following Assume that there is a namespace called FS Documents and that this is a directory that is set up on a server. At the topmost level of the namespace a MIME map is defined that maps .doc extensions to Microsoft Word. A client can then publish Word documents to this location and no additional association is needed because the MIME map that is defined for that location scopes all of the resources that are stored there. Assume now that the MKCOL method is used to make another directory FS Documents Notes . Assume also that the client desires to publish a document to this directory called foo.doc that is not a Word document. This creates an internal inconsistency because of the scoping nature of MIME maps. That is when a client does a subsequent GET on the foo.doc resource the incorrect content type will be returned.

As another example of inadequate mapping scenarios consider the following A client wishes to publish through a PUT request a Word document and a Notes document to the same directory and using the same .doc extension. Because of the scoping nature of the MIME map the Notes document would be returned with an incorrect content type. There may also be situations arise where a content type for a resource is specified in a PUT request but there is no existing MIME map for that resource.

There may be situations where a PUT request specifies a content type for an extension that is different from a content type that is defined for that extension in a scoping MIME map. Step ascertains whether an existing MIME map specifies a different content type than the PUT request. If it does then step creates a new MIME map for the URL s complete namespace that contains only the mapping for the URL extension to the requested content type. This ensures that only the existing specified resource is scoped by this MIME map.

In the above examples new MIME maps can be created through the use of the property setting capabilities provided by WebDAV. Specifically content types for specific resources can be set as properties for that resource such that the correct content type is returned for the resource when the resource is requested. Hence the processing described just above ensures that GET request processing remains unchanged. That is content types that are specified by PUT requests are the very same content types that are returned by subsequent GET requests even when the content types are new different from or would be internally inconsistent with those that are already defined say for example in the same folder.

Embodiments of the invention also provide support for so called virtual roots that is roots of virtual namespaces. Recall that a virtual namespace is a namespace that can have roots i.e. virtual roots that point to different physical locations. Each virtual root may point to a different physical location but to the client it looks as if the different physical locations are just sub directories under a unified virtual namespace. The different physical locations can have different security settings different authentication models or any combination of administrative properties that apply to namespaces. Virtual roots gives an administrator the ability to scope namespaces with custom attributes.

The physical locations can be across a single or multiple machines. Further parts of the namespace could be on an exchange server a file system or on a web server. In the past GET methods have not posed any major problems when operating in an environment that includes virtual roots. This is largely because the GET method operates against only one resource at a time. Thus when virtual roots are not crossed by the HTTP method processing remains relatively uncomplicated. Complications can however arise when the particular HTTP methods or verbs cross or traverse multiple resources and or virtual roots and attempt to operate upon resources. There are several WebDAV verbs that fall into this category e.g. MOVE COPY PROPFIND and SEARCH. For example a client may wish to take a read only file from its current location and MOVE or COPY the file to a read and write location. As another example a client may do a PROPFIND on the www.foo.com namespace at a depth of infinity this gives the sets of properties for everything under this hierarchy . If the physical locations d fs web and e fs web are files locations then the PROPFIND will simply deliver up all of the files in these locations. The location m mbx is not however a file location. Rather it is an exchange store and the PROPFIND cannot deliver up any data from here.

When dealing with verbs that have the potential to traverse multiple resources and or virtual roots a number of limiting issues examples of which are given above arise that must be addressed.

Rule 1 provides a way of ensuring that a client is authenticated to operate against all of the resources that are covered by the request URL. Recall that the resources can be spread across different physical locations. In this case there may be instances where the different physical locations have authentication models or permissions that are different from those that are associated with the resources that are referred to by the request URL. In this instance the request for the additional resources must fail. Otherwise a possible security breach could result if the client were allowed to receive data for which they were not properly authenticated.

Rule 2 prevents a response that contains data that would more than likely be incorrect since any request directed at that resource would be handled by a registered ISAPI extension. This situation recognizes that there may be an ISAPI extension that is registered with the server to handle all of the requests that are received for a certain virtual root or resource. For example for any given folder there may be an ISAPI extension that is registered to handle requests for all .doc extension files that are contained in that folder. If the client does a PROPFIND at a depth of infinity on the namespace associated with that resource file then returning the file would be inappropriate since an ISAPI extension has been registered to handle all of the requests for those particular file extensions. In this case the request must fail.

Rule 3 addresses situations where there are so called wildcard script mapping scenarios that are defined for subsequent resources and that are not applicable to the specified resource. A script map is a mechanism that instructs the server to run certain ISAPI extensions in connection with certain resources. Wildcard script mapping allows for instructions that may do such things as specify an ISAPI extension for any specified resource or for any specified method. In this regard rule 3 determines whether there is an ISAPI extension that is associated with a subsequent resource similar to rule 2 and if so the operation on those subsequent resources fails.

Rule 4 addresses the situation that multiple virtual roots can grant access to a single file or resource. Accordingly without translating in terms of the request URL s namespace the response will look as if the resources returned do not satisfy the request.

Of course it is possible to have rules other than those described above without departing from the spirit and scope of the invention.

With the rules having been defined step receives a request that when implemented can traverse a plurality of the different physical locations that are associated with the virtual roots of a specified namespace. Step ascertains whether implementation of the request would violate any of the defined rules. If none of the defined rules would be violated then step executes the request. If however implementation of the request would violate one of the rules step returns an appropriate message to the client. In the described example the message that is returned to the client is a 502 response. The 502 or BAD GATEWAY response tells a client that the server could not get to the data requested via the specified request URL. When a client receives a 502 response the client can retry the requested operation directly against the URL for which the request failed. When this is done the namespace for the request URL and the resource share common attributes and the request response sequence can proceed.

Each namespace is capable of having a number of administrative attributes set for the namespace. Exemplary administrative attributes include internet ratings access permissions Internet Protocol restrictions and the like. When a client requests to MOVE or COPY a resource they are asking to operate against the data referred to by the request URL s namespace and not against the namespace itself Accordingly when WebDAV tool executes a COPY or a MOVE none of the administrative attributes that are explicitly set on the namespace that refers to the resource are moved or copied with the exception of any MIME maps that are associated with the resource such as those that are defined as properties as described above . This ensures that the destination namespace for the resource retains its administrative attributes.

Thus in this embodiment namespace configurations cannot be changed by performing an operation that traverses virtual roots. That is namespace configurations are maintained in both the source and destinations namespaces when a client executes a MOVE or a COPY request against the server.

As the above discussion indicates it is very possible that WebDAV requests will traverse different physical locations that are unified from the client perspective under a common namespace. The PROPFIND method is no exception. When a client makes a non zero depth PROPFIND request it is possible that the operation will transverse into a namespace that may or may not be physically separated. Thus the traversal needs to carefully track the structure of the namespace and not the physical layout of the file system. Specifically a PROFIND non zero depth will enumerate not only the specified URL resource but also the child virtual roots of the request URL. There is a possibility that there will be a conflict between a physical location and a child virtual root. If there is such a conflict then the namespace or child virtual root should be enumerated. Specifically if a collection resource i.e. a file system directory exists that would be accessible via a URL that is also a child virtual root then that directory would not be enumerated with the rest of the resources contained in the response. Instead the resources of the child virtual root would be enumerated. As an example consider . In this example the namespace www.foo.com is mapped to the physical location D Foo . There is a directory under the www.foo.com namespace called sub i.e. www.foo.com sub . This directory also a child virtual root is mapped to the physical location D Sub . Consider also that there is a physical location designated D Foo Sub . In this example the directory D Foo Sub would be accessible via a URL that is also a child virtual root i.e. www.foo.com sub . When a client does a PROPFIND however they do not want to have the contents of the directory D Foo Sub enumerated. Rather they want to have the contents of the physical directory D Sub enumerated. This is because the directory D Sub is the one that is properly mapped from the URL www.foo.com sub .

Thus with this approach and with the appropriate access rights a client can enumerate the virtual roots on a server.

A script map is a registration mechanism by which an ISAPI extension can register to handle certain file extensions. In Microsoft s IIS the script map is an entry in the metabase that defines what extension should be used to satisfy any given request based upon the URL s extension. For example Active Server Pages .asp scripts are handled by the ASP ISAPI extension because of an entry in the scriptmaps that associates the .asp URL extension to the ASP.DLL executable installed on the server.

In the described embodiment the registration of an ISAPI extension includes a list of HTTP verbs that are to get handled by the ISAPI extension. So for example an ISAPI extension can register to handle all verbs of a given type e.g. GET requests and all other verb requests can and should be handled by the default server processing.

Various embodiments described above integrate WebDAV processing with conventional internet servers. The integration techniques ensure that there is a delegation of duties between WebDAV tools and the web server. In addition measures are provided for accurately setting and retrieving appropriate content types that are associated with a particular resource. Further techniques are provided that support namespace segregation when such is done in the context of virtual roots. Consideration is given to the fact that WebDAV processing can traverse multiple virtual roots and therefore measures are taken to ensure that processing as perceived on the client end is not hampered. In addition techniques for registering ISAPI extensions in connection with HTTP verbs that are received in a client s request are provided that add flexibility to request handling.

Although the invention has been described in language specific to structural features and or methodological steps it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or steps described. Rather the specific features and steps are disclosed as preferred forms of implementing the claimed invention.

