---

title: Monitoring and managing memory thresholds for application request threads
abstract: A memory management system is implemented at an application server. The management system includes a configuration file including configuration settings for the application server and applications. The configuration settings include multiple memory management rules. The management system also includes a memory management framework configured to manage settings of resources allocated to the applications based on the memory management rules. The applications requests for the resources through one or more independently operable request threads. The management system also includes multiple application programming interfaces (APIs) configured to facilitate communication between the applications and the memory management framework. The management system further includes a monitoring engine configured to monitor an execution of the request threads and perform actions based upon the configuration settings. The actions include notifying the applications about memory related issues and taking at least one preventive action to avoid the memory related issues.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104480&OS=09104480&RS=09104480
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09104480
owner_city: Armonk
owner_country: US
publication_date: 20121115
---
The present disclosure relates to computers and more specifically to memory management in computers or other related devices.

Memory management is essential when memory is to be allocated to one or more process s or software application s dynamically on a system such as but not limited to a computer. Many programming languages like C C provide many utilities for managing an application s memory usage. However unlike other programming languages Java programming language does not expose or provide utilities to manage effectively an application s memory usage. A Java application developer may have to pay special attention to manage system resources for their internal objects or software applications. Likewise an application server administrator can thoroughly monitor applications which they deploy to ensure that there are no leaks in the application which could potentially degrade the server s performance. A new problem area has been exposed by systems which allow an end user increasingly granular control over a running application.

For example consider a mashable application targeted at line of business users which allows the user to provide a relational query to extract purchase information to use in a dashboard. The user wants to pull all purchases for customer X to display in their dashboard but neglects or forgets to specify the customer for which to pull the purchases. This may result in the user selecting all data from the purchase table if the table is sufficiently large for example 50 million rows then the user has just created a potential memory leak in the mashable application and potentially crashed the database server.

In light of above discussion and limitations of the existing techniques or solutions for memory management in Java there exists a need for systems and methods for managing memory in an effective manner.

Embodiments of the present disclosure provide a memory management system implemented at an application server. The memory management system includes a configuration file comprising a number of configuration settings for the application server and a number of applications. The configuration settings include a number of memory management rules. The memory management system also includes a memory management framework which is configured to manage granular settings of one or more resources allocated to the applications based on the memory management rules. The applications may request for the one or more resources through at least one request thread. The memory management system may also include a number of application programming interfaces APIs which are configured to facilitate communication between the applications and the memory management framework. The memory management system also includes a monitoring engine configured to monitor an execution of the at least one request thread and perform one or more actions based on the configuration settings. The one or more actions includes notifying about one or more memory related issues to the applications and taking at least one preventive action to avoid the one or more memory related issues.

An aspect of the present disclosure is to provide a memory management system for monitoring usage of the one or more resources such as memory by the one or more applications.

Another aspect of the present disclosure is to take one or more preventive actions such as interrupting or terminating a problematic request thread or application when a memory related issue arises.

Embodiments of the present disclosure also provide a computer implemented method for managing memory through an application server on a system. The method includes receiving by the application server a query of at least one application from a user of the system. The method also includes executing by a memory management framework at least one request thread for the application based on the received query. The method further includes monitoring by a monitoring engine the execution of the at least one request thread. The monitoring includes determining whether the number of one or more resources allocated to the at least request thread is exceeding a system threshold value for the application. The monitoring further includes sending at least one notification to the at least one request thread to interrupt or terminate it based on a memory related issue.

Embodiments of the also provide a computer program product embodied on a computer readable medium having instructions for managing memory through an application server on a system. The computer program product may perform the steps of receiving by the application server a query of at least one application from a user of the system. The computer program product may further include instructions for executing by a memory management framework at least one request thread for the application based on the received query. The computer program product may include instructions for monitoring by a monitoring engine the execution of the at least one request thread. The monitoring includes determining whether the number of one or more resources allocated to the at least one request thread is exceeding a system threshold value for the application. The monitoring step further includes sending a notification to the request thread to interrupt or terminate it based on a memory related issue.

Illustrative embodiments of the invention are described below with reference to the accompanying drawings in which some but not all embodiments of the invention are shown. Indeed the invention may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will satisfy applicable legal requirements. Like numbers refer to like elements throughout.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system . Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wired optical fiber cable RF cable etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in object oriented programming language such as Java programming language. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Prior to discussing the figures it is important to note that there are two solutions available to the application developer in Java environment or language. The first conventional solution is through the Java Database Connectivity JDBC specification which provides access to a database and also provides application programming interfaces APIs to limit the size of a query. The problem is that only very few JDBC drivers implement this. For example Derby and DB2 drivers do not implement it and do not provide any failsafe method for executing queries in Java applications.

The second conventional solution is based on Java system utilities that may allow the user to monitor memory and catch OutOfMemoryError OOME . These utilities fail to prevent the outcome from the above example because the Java Memory Management Bean only allows for monitoring of the entire Java heap not just for an individual application or a single request in an application. Therefore there is no real granular control on the memory usage by the application. Further catching an OutOfMemoryError through Java utilities is usually too late. When an OOME is thrown the system has already generated a core dump and which is generally not recoverable. The application developer can try to catch these errors but cannot effectively do anything to recover. In addition a direct call to Java s garbage collector to run does not guarantee that it will run and there is no way to force an immediate cleanup of memory.

Prior to a discussion of the figures the present disclosure pertains to a memory management framework for an application server that allows for management of resources that reside on application server. Details of the memory management features are best described in connection with the following figures.

With reference now to the figures and in particular with reference to an exemplary diagram of data processing environment is provided in which illustrative embodiments may be implemented. It should be appreciated that is only exemplary and is not intended to assert or imply any limitation with regard to the environment in which different embodiments may be implemented. Many modifications to the depicted environment may be made.

The memory management system is a runtime configurable framework that may be implemented at the application server . The memory management system is configured to provide runtime configuration for the application server and the one or more applications A N to define a granular level of resource usage allotment. By defining a granular level of resource usage it is possible to control from a macro point of view i.e. from the entire server as opposed to controlling from a micro point of view such as at the individual application level.

In an embodiment the resource can be memory or other objects which are required for execution of the request threads or the applications A N. The memory management system is also configured to monitor the execution of the at least one request thread associated with the applications A N. The memory management system may determine whether the number of one or more resources allocated to the request thread is exceeding a system threshold value for the application or not. The memory management system is also configured to send at least one notification to the at least one request thread to interrupt or terminate the request thread based on a memory related issue or the received notification. The memory management system is further configured to monitor stabilization in the consumption of the one or more resources in case the request thread has been terminated or stopped. Stabilization occurs when there is a return to normal usage from a larger or peak resource usage. The memory management system is further configured to determine and compare usage of the individual request threads to current overall usage of the system. The memory management system is also configured to notify individual request threads and the associated application of the applications A N that the current request has exceeded the allotment of the available resources and need to be terminated.

The memory management system may monitor the execution of the applications A N and identify one or more applications A N that should be terminated to avoid any memory related issue. The memory related issue can be such as a memory leak memory crash and so forth. The memory management system may monitor based on one or more predefined memory management rules for the application server and the applications A N. The memory management system is configured to terminate any runaway or problematic request threads or zombie threads which may not respond to the notifications sent by the memory management system . The memory management system is further configured to trigger a garbage collection to perform clean up operation for the interrupted or terminated request thread. The memory management system is also configured to notify the application associated with the terminated request thread or applications A N. In an embodiment the garbage collection may be performed through a Java garbage collection module. The memory management system may be deployed on the system such as the computer or a server in the network. The structural components of the memory management system are described in detail in .

The first memory threshold value may define an upper limit of memory for the application server before which the memory management framework should attempt at least one of a recovery or a deployment of one or more applications of the applications A N on another application server not shown . The deployment of one or more applications could be used when there are large request loads and it is desirable to service the requests. Using commercially available automated deployment scripts methodologies and once a preselected resource threshold is met a deployment of the same application is made to another application server. By making this deployment new in coming requests are spread across two application servers instead of one thus lowering the resource usage on the individual application server. The first resource threshold value may define an upper limit of number of system resources for each of the applications A N. In an embodiment the application server administrator may define the configuration settings for the application server .

Similarly the memory management rules for each of the applications A N may include a second memory threshold value and a second resource threshold value. The second memory threshold value may define an upper limit of memory for the each of the applications A N before the memory management framework should attempt at least one of a recovery or a deployment of one or more applications of the applications A N on the another application server not shown . The second resource threshold value may define an upper limit of number of system resources for an individual request thread associated with each of the applications A N. The memory management rules for each of the applications A N also includes one or more profiling options to allow the memory management framework to optimize the number of system resources for a particular resource to be allocated to the at least one request thread associated with each of the applications A N. Optimization is achievable because resource values such as maximum memory threshold are suggestions to the system. Using these suggestions the memory management framework then finds a balanced configuration that optimizes the available resources. In an embodiment a number of application developers may define the configuration settings for each of the applications A N.

The memory management framework may be configured to manage granular settings of one or more resources allocated to the applications A N based on the multiple memory management rules. The applications A N may request the one or more resources through at least one request thread associated with each of the applications A N. The memory management framework is further configured to manage the granular settings based on the memory management rules and applies the memory management rules at the application server . The memory management framework is also configured to calculate available memory of the system and also the memory allocated to each of the applications A N. The memory management framework may calculate memory by requesting the at least one request thread to determine its own size depending on the implementation of the memory management framework . The memory management framework may also calculate memory by attempting a recursive calculation of one or more objects or resources held by the request thread s associated with each of the applications A N. In an embodiment the memory calculation may be extended when Java extends memory management capabilities.

The multiple APIs A N may facilitate communication with the memory management framework . Examples of the APIs A N may include but are not limited to a warning API a terminate API a size request or getObjectSize API and so forth. The warning API may be called by the memory management framework to tell or notify one or more of the applications A N that they may need to begin saving current state and may need to shut down. The application is aware of the warning API and coded to react to it if it is to take advantage of the warning system. If the application is not aware of the warning API then the system will take the additional steps of terminating the thread. The terminate API may be called by the memory management framework to notify the one or more of the applications A N that they are about to be killed or terminated. The getObjectSize API may be called by the memory management framework to request a size of one or more objects associated with each of the applications A N.

The monitoring engine may be configured to monitor an execution of the at least one request thread associated with each of the applications A N. The monitoring engine is also configured to perform one or more actions based on the configurations settings. The one or more actions may include notifying about one or more memory related issues to the associated applications A N and taking at least one preventive action to avoid the one or more memory related issues. The monitoring engine may use or consume the configuration settings related information and may apply one or more memory management rules through the memory management framework and the APIs A N for monitoring and managing the system. Depending on whether the applications A N has implemented one or more APIs from the APIs A N the monitoring engine may communicate or notify the one or more of the applications A N about at least one memory related issue if any . The monitoring engine may also take at least one preventive action without notifying the applications A N. Examples of the preventive action may include but are not limited to attempts to free memory via a garbage collection option use of pluggable third party tools for memory management and request thread interruption or destruction or termination . The monitoring engine is further configured to notify application administrators associated with the applications A N depending on the severity of the at least one memory related issue of the applications A N or an individual application. The monitoring engine is also configured to perform at least one of an interrupt or terminate operation on at least one of the applications N based on the notification.

At step a query of an application of the application A N may be received at the application server from a user of the system. In an embodiment the applications A N may be Java applications. At step at least one request thread may be executed based on the received query. At step the monitoring engine may monitor the execution of the at least one request thread. At step it is checked whether a memory related issue is detected. Examples of the memory related issue may include but not limited to a memory leak a memory crash and so forth. At step if the memory related issue is detected then step is followed else control goes back to step . At step the monitoring engine may notify the at least one request thread or its associated application s about the memory related issue. Then at step the monitoring engine may either interrupt or terminate the execution of the request thread or its associated application depending on the notification or the severity of the memory related issue. why would the request thread be terminated if the related application is having problems but the related application itself would not be Monitoring engine is assuming that the resource utilization problems can be tracked to a thread. By dealing with a problem thread the resource problem is solved.

Thereafter at step garbage collection is performed to free memory for the problematic request thread. Request threads operate independently and are usable to service requests and create responses in an application server. For example if there are 100 request threads then each of those threads can be serviced concurrently. In an embodiment the garbage collection may be performed using a Java garbage collection module.

Further the memory management system can be implemented as hardware software firmware or combination of these. The memory management system may be deployed on the system such as a computer a laptop a server and so forth. In an exemplary scenario after deployment the application server administrator may define in the system configuration that no application can exceed 80 of total system usage. Similarly on deployment of the memory management system on the system the application developer may define in an application configuration that no request thread of the application can exceed 50 of total application resource usage. The resource may be memory or other objects associated with the system e.g. computer . When the application server starts up the memory management framework may start monitoring memory usage of the new request threads in relation to the system usage or performance. When a user defines a query in the application to select all rows from a purchase table the request thread is executed based on the query. The monitoring engine continuously monitors the execution of the at least one request thread. During the execution of the request thread the monitoring engine may detect that the request thread has begun to increase consumption of the system resources e.g. memory .

As the request thread continues it s execution the monitoring engine determines that the resource usage of the request thread has become critically close to the defined limits i.e. system threshold value s or resource threshold value s and may send a notification to the request thread to halt processing if possible. If after receiving the notification the application associated with or servicing the problematic request thread can terminate and clean up the action then the monitoring engine will be able to monitor stabilization in the resource consumption. Thereafter the monitoring engine may attempt to trigger garbage collection such as Java garbage collection to try and cleanup as necessary. If after receiving the notification the application servicing the problematic request thread either does not or cannot stop or clean up the action then the monitoring engine may attempt to sacrifice this request thread and interrupt or terminate the request thread based on the severity of the memory related issue. Thereafter the monitoring engine may attempt to invoke the garbage collection such as the Java garbage collection. As a result the monitoring engine may notify the specified system including the application associated with the problematic request thread.

Embodiments of the invention provide a runtime configurable memory management system for managing memory for runtime configurable applications A N typically Java applications. The disclosed memory management system also provides granular level control of the applications A N.

Embodiments of the invention are described above with reference to block diagrams and schematic illustrations of methods and systems according to embodiments of the invention. It will be understood that each block of the diagrams and combinations of blocks in the diagrams can be implemented by computer program instructions. These computer program instructions may be loaded onto one or more general purpose computers special purpose computers or other programmable data processing translator to produce machines such that the instructions which execute on the computers or other programmable data processing translator create means for implementing the functions specified in the block or blocks. Such computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means that implement the function specified in the block or blocks.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the various embodiments of the present invention has been presented for purposes of illustration but is not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

