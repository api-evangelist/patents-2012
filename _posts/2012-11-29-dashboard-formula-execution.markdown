---

title: Dashboard formula execution
abstract: Formulas in dashboards can be executed at a client executing web technologies such as HTML5 and JavaScript. The formulas specified by a spreadsheet file are transformed into a pre-defined notation format and then recursively evaluated. Related apparatus, systems, techniques and articles are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09367535&OS=09367535&RS=09367535
owner: BUSINESS OBJECTS SOFTWARE, LTD.
number: 09367535
owner_city: Dublin
owner_country: IE
publication_date: 20121129
---
The subject matter described herein relates to client side execution of formulas as part of visualizations of dashboard via various web technologies.

Dashboards are graphical interfaces that provide insight into data whether stored locally and or stored at one or more data sources through visual representations. Visual components used in dashboards can display data from a variety of sources including local sources such as the embedded EXCEL spreadsheet or remote data sources such as databases or RSS feeds. Dashboards can be designed and executed using a variety of software applications including for example SAP DASHBOARDS which is an application from SAP BUSINESS OBJECT S BUSINESS INTELLIGENCE. Various web technologies have been created that are optimized for mobile devices such as tablet computers. However certain dashboards are not compatible or fully compatible with such web technologies. For example difficulties can arise when executing various formulas specified by spreadsheets via browsers and other similar technologies.

In one aspect data comprising a spreadsheet file in a text based language independent data interchange format is received. The spreadsheet file includes at least one cell including at least one formula. Thereafter a request is accepted to evaluate the at least one cell followed by recursive evaluation of the at least one cell. Rendering of a dashboard is then initiated using the spreadsheet file a dashboard structure file and the recursive evaluation.

The dashboard can be rendered in a browser such as an ECMAScript enabled browser. The text based language independent data interchange format can be JAVASCRIPT OBJECT NOTATION JSON format. The dashboard can be further rendered using a dashboard structure file.

In some variations a representation of one or more cell having at least one formula can be transformed into a pre defined notation format such as a postfix notation. Each formula in the transformed notation can include one or more tokens. With such a variation the recursive evaluation can include creating a result stack and for each token in the transformed representation i if the token corresponds to a value pushing the token onto the result stack ii if the token corresponds to a function popping required arguments off the result stack evaluating the function and pushing the result of the function onto the result stack and or iii if the token corresponds to at least one cell reference recursively fetching the value of the at least one referenced cell. The tokens corresponding to a value can correspond to a literal or constant value. The value of the at least one reference cell can be recursively fetched if the cell comprises at least one formula.

The received data can be received from at least one server and the accepting evaluating and initiation of the rendering can be executed by at least one client remote from the at least one server.

Computer program products are also described that comprise non transitory computer readable media storing instructions which when executed by at least one data processor of one or more computing systems causes the at least one data processor to perform operations herein. Similarly computer systems are also described that may include one or more data processors and a memory coupled to the one or more data processors. The memory may temporarily or permanently store instructions that cause at least one processor to perform one or more of the operations described herein. In addition methods can be implemented by one or more data processors either within a single computing system or distributed among two or more computing systems.

The subject matter described herein provides many advantages. For example the current subject matter enables a web based viewing solution to render documents such as dashboard documents using only HTML5 JAVASCRIPT and standard web technologies with the corresponding formulas being evaluated on the client side. In particular while it is normally difficult to access and to evaluate the formula in a spreadsheet from within a spreadsheet examples herein do this. Also in particular dashboard documents can be converted to a AVASCRIPT friendly format which is then rendered in any modern browser and device including IOS devices. Such dashboard documents are complementary to those dashboard documents that are exported in other formats such as FLASH SWF . In addition the current subject matter is advantageous in that it can be used to provide a dashboard JAVASCRIPT viewer that obviates the need for an intermediate publishing step by converting the dashboard to its JSON representation from an XLF file directly.

The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings and from the claims.

The diagram of illustrates a three tier architecture with a client and a server coupled to a back end business intelligence BI suite that communicate over HTTP. With this arrangement the client can be a web browser while the server can be a JAVA web application bundle deployed on a web server such as APACHE TOMCAT or JETTY. The server can i parse and convert a dashboard container file to JAVASCRIPT Object Notation JSON if not in this format already ii determine prompts required to be answered for a data source and or iii retrieve data from remote data sources at the behest of the client .

The client can i display the visual components in the document after populating them with data ii request data from remote data sources from the server and or obtain local data iii evaluate formulae if any in the local data and populating a visual component with the final result and or iv display prompts in the dashboard if any to filter on available data from a remote data source. It will be appreciated that some or all of the functionality of the server can be executed on the client and or as part of an integrated BI suite . For example various conversions or transformations can be performed locally at a client or within the BI suite . By performing the conversions or transformations there this can reduce the need for an add on application middleware etc.

The current subject matter is applicable to various types of dashboard features and components. For example the current subject matter is applicable to data retrieved from a semantic layer overlying a data source for example SAP s Dimensional Semantic Layer DSL and spreadsheet data consumption on the fly Excel formula evaluation and various widgets such as visualizations charts e.g. pie line bar tables maps content holders tabs sheets interactivity elements controls e.g. sliders dials prompts and support for DSL prompting. Prompting is where a user is asked for input that parameterizes a query or how a result set is formatted.

A dashboard container file is used that can contain one or more metadata files and one or more spreadsheet files. Examples include files using the extension .XLF which is the extension used for SAP Dashboards dashboards. With this particular example the container file is an XLF file comprising an XLS spreadsheet and an XML document compressed into a single file. For example together in ZIP file format. XML in this regard refers to Extensible Markup Language XML a standardized data format notation as defined by the World Wide Web Consortium W3C . In some variations the XML format stores metadata about the dashboard in a dashboard structure file. This metadata includes information such as dashboard components component properties component association with cells in an associated spreadsheet data sources dashboard layouts dashboard behavior etc. Components can be organized into categories like functionality input components output components layout components. It will be appreciated that the current subject matter can apply in addition to XLF files to a wide variety of container files including bundles having multiple spreadsheet files and are collectively referred to as container files unless otherwise specified .

JavaScript Object Notation JSON is a lightweight text based language independent data interchange format. It was derived from JavaScript a programming language that implements the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data. While the disclosure is mainly directed to the use of JSON it will be appreciated that the current subject matter can use other data interchange formats having similar properties.

JSON is widely used for JavaScript based web applications because it is a native JavaScript data format. One obvious benefit of this is that web applications can avoid the overhead of converting to and from other data formats. This leads to leaner processing times and a smaller memory footprint for the application. To exploit the benefits of JSON listed above the metadata in the XML document can be converted into another format such as JSON. This is a one time conversion that occurs when the dashboard is opened for viewing. After the metadata is converted into JSON the web application uses the JSON representation of the document s metadata for all subsequent work.

With further reference to the diagram of the client sends a request to the web server via a DSL query to render a dashboard. This request can be in various formats and handled via various protocols including JSON REpresentational State Transfer REST and XML Simple Object Access Protocol SOAP . The web server in response to the request executes one or more remote data source queries of the BI suite . The BI Suite then delivers a container file e.g. an XLF format file responsive the remote data source queries to the web server . The web server can as will be further described below convert parse the XLF file to JSON. This can be offered as a web service. In addition a software development kit SDK can be implemented on a dashboards server which may be integral to the web server or coupled thereto to further the conversion to JSON. The web server can transmit data to the client comprising the JSON representation of the dashboard via REST protocol. The client can then render the dashboard using for example a browser executing HTML JavaScript SVG a JavaScript library to display given digital data into dynamic graphics and or using visualization tools such as Google Visualization and Data Driven Documents D3 .

A method to convert the XML document in the XLF file to a temporary DOM and from there into JSON is described in pseudo code below 

The spreadsheet file e.g. XLS document is the second file inside the container file e.g. zipped dashboards document XLF . The spreadsheet file can be for example a Microsoft Excel spreadsheet. The spreadsheet file comprises components such as sheets rows and cells. This spreadsheet file can be used in the dashboards document in a few different ways 

The web application can receive the metadata about the document in JSON format as part of the above described XML to JSON conversion process . To maintain consistency with this approach the data in the spreadsheet file e.g. XLS document can also be converted into JSON and passed into the web application.

Converting a spreadsheet file into the JSON format required by the web application can be done using an Apache POI library a Java based Excel parsing and converting library. Once the spreadsheet file is loaded by the Apache POI Library it can parse the contents and convert it into a first intermediate state an Apache POI Object . The parser can use a straightforward mechanism to pass over the spreadsheet rows and cells that make up the document to generate the object . The first intermediate state the Apache POI Object can be converted into JSON by one of two processes the operation of a Converter for Data in Apache POI Object to JSON and a Converter for Formulae in Apache POI Object to JSON . The data can be converted without use of further intermediate states into JSON format. The formulae can be handled by the Converter for Formulae in Apache POI Object to JSON that iterates over the spreadsheet rows and cells that make up the document and makes use of a further intermediate state. On encountering formulae the Converter for Formulae in Apache POI Object to JSON can extract the formulae. The Apache POI library s native formula representation is a postfix notation which is advantageous for programmatic stack based evaluation. The postfix representation of the formulae is a second intermediate state for converting to JSON. The Converter for Formulae in Apache POI Object to JSON can produce the postfix representation and then convert it to JSON . This postfix notation becomes the JSON representation of that formula for that particular cell.

Various types of XML parsers can be used including for example document object model DOM parsers pull parsers and push parsers. DOM based parsing reads the entire XML document into memory and builds a tree based data structure from which data can then be retrieved on demand. This increases the memory footprint of the application and can result in longer latencies since the entire document has to be read and loaded into main memory all at once. Pull parsing gives the calling application more control over the document that s being parsed by letting the calling application control the parser. Push parsing is the converse of pull parsing where the parser controls parsing events and the calling application has to respond to events from the parser.

In some implementations a pull parser can be utilized because it provides a smaller memory footprint and lower response times as well as letting the calling application retain control of the parsing process. For example a StAX parser such as that included in Oracle s Java 1.6 Software Development Kit SDK can be used. Using the parser a lightweight DOM representing the dashboard can be built in memory based on the metadata from the dashboard file.

The DOM representing the dashboard built in main memory is much smaller than the XML DOM that would have been built with a DOM based XML parser because it excluded properties that were not required. Once the custom DOM representing the dashboard is completely built in memory it is transformed to JSON and returned to the web browser. For example this is done when the web browser makes a request for it which request can include an ID corresponding to the DOM . The actual transformation of the DOM into a JSON string can be achieved by a depth first recursive traversal of the tree.

Once the web application requests and receives the JSON payload representing the dashboards document it is up to the client side JavaScript which may be part for example of a browser etc. on the client to display the visual components. is a screenshot that shows the two types of data sources that can be used to populate a visual component in a chart. Cells B1 through C4 show data stored in the spreadsheet. While cells G2 through H6 show the results of query not shown to a remote data source. When a dashboard document is received by the client in JSON format the information about the data sources can be preserved and available in the JSON object. On loading the JSON object from the server the client identifies the visual components present in the dashboard document. Each component is then rendered but only after the data that populates the component is available from a data source remote or local.

With further reference to Remote Bar Chart renders the results of the remote data source that it depends on while Local Pie Chart shows the data obtained from the local data source i.e. the spreadsheet document that was present in the container file e.g. an XLF file etc. . When the remote data source has finished retrieving its data it notifies the components listening to it such as a visual component that the data is available and the visual component renders itself using the supplied data. This form of notification is an example of events and event listening where an entity can register as a listener for any type of event on a different entity.

When the client receives the JSON representation of the dashboards document from the web server the document can be analyzed to determine the components data sources and their dependencies between each other in the dashboard. When a component depends on a data source it can register a listener to be notified whenever the data source fetches new data. A data source X can also register a listener on another data source Y if X depends on the result of Y.

If a component depends on a data source in order to render then the act of rendering that component can occur in multiple asynchronous steps. First the component can notify the data source that data is required. The component can then continue the flow of execution without blocking waiting for the data source knowing that once the data source has fetched data the component s listener will be notified of the new data. The data source can then schedule a fetch of the data the exact mechanics of this depends on the data source . When the data source finishes fetching the data all listeners including any components who notified the data source can be notified. At this point the original component and any other that notified the data source can perform the rendering.

By asynchronously triggering the data fetch fetching the data and notifying data source listeners the data sources need not perform the act of fetching data until required. This asynchronous technique can also allow data source fetching to be done in batches by potentially combining multiple fetches of the data into one. For example if multiple components attempt to render within a short window of time the data source may only fetch the data once and then notify all dependent components of the data change.

Spreadsheets can also contain inter cell dependencies when a formula depends on the value of another cell. An example of this can be seen in the diagram of . In B5 Formula A depends on cells B2 B3 and B4. When the value in B3 is changed to 2 from 5 then Formula A is notified of this change and cell B5 is updated. This type of notification and update management is native to some spreadsheet applications such as Microsoft Excel but needs to be carefully simulated in JavaScript so that the web application may take advantage of this type of event propagation.

Notification and update management can be achieved by iterating over the JSON representation of the spreadsheet file and finding all dependencies between all formulae. As seen in if Formula A depends on cells B2 B3 and B4 Formula A registers a listener on B2 B3 and B4. If either B2 B3 or B4 are updated then the event listener registered by Formula A is notified. Formula A treats this notification as a change to itself and can further notify all listeners that have registered with Formula A. In this way a change in a cell can be propagated through a chain of listeners without actually evaluating the formula itself. This approach can be advantageous in that that formulae are lazily executed which leads to a reduction in the memory footprint of the application.

One type of data source is the spreadsheet file which was converted to JSON at the web server and sent to the client . Spreadsheet cells can contain not only raw data but also formulae which might contain references to other cells or mathematical functions. If a visual component relies on cells that contain formulae these formulae have to be evaluated in order to display that component. As the formula is a JSON object like the rest of the document there is very little overhead in evaluating the formula in JavaScript. Postfix notation lends itself to straightforward evaluation on a stack based evaluator as seen below.

With reference to the diagram of a formula C5 contains a reference to B5 also a formula . When a cell contains a reference to another cell in its formula the formula can be evaluated using recursion. One example recursion technique is illustrated in the diagram of when formula C5 is evaluated B5 is recursively evaluated. In this manner a formula that was originally contained in an Excel spreadsheet can be received and evaluated using JavaScript in a client side application.

Dashboards can include functionality including prompts and answering prompts to provide input customizations drill downs etc. to the dashboard. Such prompts are normally answered by asking the user to input a value. An example of a prompt in a dashboard would be filtering values by a certain time period such as a year or a quarter. If a dashboard is designed to display sales for a certain quarter based on the answer to a prompt then when the user selects 1 as the quarter the dashboard displays sales for the first quarter.

On top of interactive prompting in dashboards prompts can be answered using values from certain cells. In the example above if the dashboard was set up to use the value in a cell e.g. C3 as the answer to the Quarter prompt then it would show all sales values for the first quarter just as if it had been specified in an interactive text field.

Cell values can also be designated as the output depositories of interactive components such as sliders. For example in the diagram of the value for a slider graphical user interface element for a pie chart can be changed from 1 to 4 and when the slider is moved cell C3 is updated with the slider s current value. If cell C3 is designated as both the input source for a prompt and the output depository for an interactive component then the answer to a prompt can be supplied from the cell value and updated as the value in the cell is updated.

The process of propagating the events that are fired when the cell is updated due to a change in the visual component all the way to the redrawing of the dashboard is described below. In the example of the slider writes its updated value to cell C3. The updated cell then broadcasts to its listeners that it has been updated. A subsequent query directly or indirectly consumes the content of a cell and launches a query using the output as is or modified as a prompt. The query results are populated in the designated result area. The listeners to this area are alerted on update. The listeners can include a chart.

Additionally dashboards can consist of a mixture of local and remote data sources. Documents that contain remote data sources usually refer to other objects deployed with the BI suite and thus require a working installation of the BI suite in order to retrieve data. However visual components that rely on local data sources such as the cells in the spreadsheet document do not need a working BI suite install in order to display correctly.

With the current subject matter a JavaScript dashboards viewer can be provided that allows a user to upload via client a dashboard to the server side service via server and view the visual components that rely on local data sources in the absence of a BI suite install. This arrangement can be achieved by identifying the local data sources and the components that depend on them during conversion of a dashboard container file e.g. XLF file to JSON without maintaining a copy of the file on the server. When the browser on the client receives the JSON representation of the document and renders the visual components the data from the local data sources exists in the JSON representation and can be retrieved immediately without any remote calls to the server . If the document has remote data sources then data retrieval from those data sources can fail in the absence of a BI suite install.

Thus a dashboard which would previously be viewed after publication and usually in a managed environment can now be viewable in an unmanaged state due to 

The following are a sequence of steps that can be performed each time a managed document with mixed local and remote sources is viewed using the server side service 

Various implementations aspects of the subject matter described herein may be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and may be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the term machine readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the subject matter described herein may be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well for example feedback provided to the user may be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user may be received in any form including acoustic speech or tactile input.

The subject matter described herein may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the subject matter described herein or any combination of such back end middleware or front end components. The components of the system may be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few variations have been described in detail above other modifications are possible. For example the logic flow depicted in the accompanying figures and described herein do not require the particular order shown or sequential order to achieve desirable results. In addition it will be appreciated that the current subject matter is applicable to different formats other than those specified herein. Furthermore it will be appreciated that the various conversion techniques of spreadsheet files and XML files can be used independently from the particular applications described herein. Other embodiments may be within the scope of the following claims.

