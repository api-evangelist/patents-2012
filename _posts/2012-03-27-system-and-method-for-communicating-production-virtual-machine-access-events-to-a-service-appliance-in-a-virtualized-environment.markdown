---

title: System and method for communicating production virtual machine access events to a service appliance in a virtualized environment
abstract: A thin agent installed within a guest virtual machine (GVM) enables a service application to monitor events within the GVM and to perform certain system functions within the GVM. The thin agent maintains a distinct set of rules for selectively reporting system events to each different service application connected to the thin agent. A multiplexer executing within a virtualization software is configured to facilitate communication between a plurality of thin agents and a plurality of service applications. A services manager facilitates communication between new service applications and the thin agents. Each service application is able to advantageously add new functions to production GVMs without interrupting proper operation of the GVMs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195518&OS=09195518&RS=09195518
owner: VMware, Inc.
number: 09195518
owner_city: Palo Alto
owner_country: US
publication_date: 20120327
---
Virtual machine VM systems provide a guest operating system OS with a virtual execution platform comprising virtual hardware subsystems configured to emulate corresponding physical hardware subsystems. An instance of the virtual execution platform configured to execute the guest OS is commonly referred to as a guest virtual machine GVM . In a typical VM system an arbitrary number of GVMs may execute on a common host server system. Each GVM may operate independently with respect to other GVMs and may communicate with the other GVMs for example via an emulated network interface. The host server system should be configured with adequate computational and memory resources to support the GVMs.

Software applications may be installed and operated within the GVM as though installed and operated on a physical computer system. In many scenarios a GVM may require certain system services in addition to generic OS functions. One type of system service is provided by an anti virus software application which is typically configured to scan user and system files for known virus signatures. Patterns and methods for detecting known viruses are typically maintained by the anti virus software within a virus signature database that is updated from time to time as new viruses are discovered. If a known virus is found in a certain file the file may be quarantined disabled or modified to remove the virus based on policy settings for the anti virus software.

Anti virus software is conventionally installed within a guest OS and operates as if installed on a physical computer system. The virus signature database is typically updated via a network connection from the guest OS to an anti virus service provider that identifies and publishes signatures of newly discovered viruses. As new virus signature database information becomes available each guest OS is conventionally required to update a local copy of the virus signature database stored within the guest OS file system. Separately updating and storing numerous independent guest OS virus signature database copies is inefficient and may lead to discrepancies in anti virus protection among a group of guest operating systems. In certain cases the anti virus software application also needs to be updated for each guest OS compounding this inefficiency.

A technique described herein provides system services such as anti virus scanning in a VM environment. In one or more embodiments an agent such as a thin agent installed within a VM enables a service application to monitor events within the VM and to perform certain system functions within the VM. The agent maintains a distinct set of rules for selectively reporting system events to each different service application connected to the agent. A multiplexer executing within virtualization software is configured to facilitate communication between a plurality of agents and a plurality of service applications. A services manager facilitates communication between new service applications and the agents. Each service application is able to advantageously add new functions to production VMs without interrupting proper operation of the VMs.

A method of communicating system events occurring within a VM to a service application running on a service appliance according to an embodiment of the invention includes the steps of receiving at an agent running inside the VM a notification of a system event selecting by the agent a service application running on the service appliance to which the system event is to be reported determining by the agent whether or not the system event should be communicated to the selected service application according to rules associated with the selected service application that are maintained by the agent and communicating the system event from the agent to the selected service application if the agent determines that the system event should be communicated to the selected service application.

A method of accessing data of files managed by VMs by a service application running on a service appliance in response to system events occurring within the VMs that are communicated to the service application according to an embodiment of the invention includes the steps of receiving at the service appliance a notification of a system event occurring within a first VM and a notification of a system event occurring within a second VM in response to the notifications generating first and second access requests the first access request including an address of the first VM and the second access request including an address of the second VM and transmitting the first and second access requests to the VMs via a module that interconnects the VMs and the service appliance.

A method of communicating system events occurring within a VM to a service application running on a service appliance via a module that interconnects the VMs and the service appliance according to an embodiment of the invention includes the steps of receiving at the module first and second messages each containing an address of a service application wherein the first message is from a first VM and the second message is from a second VM transmitting from the module the first message according to the address in the first message and transmitting from the module the second message according to the address in the second message.

A method of configuring agents running in VMs to communicate with a service application running on a service appliance according to an embodiment of the invention includes the steps of receiving at a management application a service registration message including an address for a new service application and transmitting from the management application a configuration message including the address for the new service application to the agents of the VMs via a module that interconnects the VMs and the service appliance.

Further embodiments of the present invention include without limitation a non transitory computer readable storage medium that includes instructions that enable a processing unit to implement one or more aspects of the above methods as well as a computer system configured to implement one or more aspects of the above methods.

Each GVM is configured to execute a guest OS which may be a commodity operating system such as Microsoft Windows operating system or Linux operating system. Each guest OS is further configured to include a thin agent and a file system . In one embodiment thin agent is a kernel driver configured to access kernel state information such as file system events and functions provided by guest OS and file system . For example thin agent may register with the kernel for file access notifications so that any time a file is accessed thin agent receives a notification including which file was accessed and the nature of the access. A given thin agent is also configured to provide access for certain system operations to a service appliance . For example thin agent may be configured to provide service appliance M with access to file system . File system may be implemented as any file system that can provide conventional file operations such as creation deletion modification and management functions.

Virtualization software is configured to manage and operate host server system . Virtualization software provides an execution environment for GVMs service appliances and services manager and each may execute as an application within the execution environment. Virtualization software may be implemented to include a kernel with hardware drivers for managing related hardware subsystems within host server system . In one embodiment virtualization software comprises a host operating system configured to provide system services to GVMs . In other embodiments virtualization software comprises a hypervisor configured to provide certain system services to GVMs . The hardware subsystems may include without limitation computational resources mass storage a networking interface input output interfaces a display controller and power management functions. A multiplexer is configured to forward data messages between at least one thin agent and at least one service appliance . In one embodiment multiplexer implements a forwarding table that includes at least one entry for each thin agent and each service appliance . In such an embodiment multiplexer implements destination based forwarding whereby a data message is constructed to include a destination address that corresponds to at least one thin agent or at least one service appliance . When multiplexer receives the data message an associated destination address is matched to an entry within the forwarding table to determine a destination thin agent or service appliance for the data message. The destination thin agent or service appliance may be identified using a TCP IP transport control protocol internet protocol address a socket number a GVM identifier or any other technically feasible identifier.

In one embodiment multiplexer is implemented as a user space application for execution within a virtualization software user space. Multiplexer communicates to thin agents and service applications via socket services provided by virtualization software . Multiplexer may be configured to segment messages to limit the size of any one data message transmitted via the socket services. The socket services may be implemented as a shared memory message passing mechanism whereby message data is written to a shared memory segment and an identifier to the shared memory segment is transmitted to a message recipient.

Each service appliance includes a software service application and an access library . A given service appliance may execute as an application under control of virtualization software and may be implemented as a virtual machine with a guest OS that is configured to execute service application . Access library is configured so as to communicate with at least one thin agent via the multiplexor . In one embodiment access library opens a different socket connection for example via TCP IP to multiplexer for communication with each different thin agent . In alternative embodiments different message passing techniques may be implemented. For example a shared memory message passing system may be implemented for communication between thin agents and access libraries . In certain embodiments service appliance M is configured to execute on a remote host server system that is coupled to host server system via a data network. In such embodiments service appliance M establishes data connections such as TCP IP connections to one or more GVMs within host server system and operates substantially identically to other service appliances . Similarly service appliance executing within host server system may connect to and provide services to GVMs operating within the remote host server system.

Access library presents an application programming interface API not shown to service application . The API includes service calls for communicating with at least one thin agent . Communicating may include without limitation establishing a connection with thin agent configuring thin agent receiving event alerts from thin agent and accessing system resources for a guest OS associated with thin agent . In one embodiment the API enables a connection from service application to a specified thin agent within a GVM to be established through multiplexer . Furthermore the API enables service application to register certain event rules with thin agent . The event rules specify which system events within an associated guest OS should or should not be reported to service application via the socket connection. System events that may be reported include file system events process events memory events registry events and user events. Exemplary file system events include opening a file closing a file writing a file and modifying a file. Exemplary process scheduling events include mapping a file for execution starting a process and stopping a process. Certain types of events such as registry events may depend on a particular version of guest OS . The API may specify that certain events not be reported. For example service application may request that no events be reported or that only specific events be reported.

Access library and thin agent operate in concert to provide service application with access to system resources for an associated guest OS . For example service application may request access to a certain file stored within a given file system . A read request to the file may be initiated by service application which calls the API provided by access library to initiate the read operation. Access library then contacts thin agent via multiplexer with a read request to the file. Similarly a write operation to the file may be initiated by service application which calls the API with a write request. Access library then transmits the write request to thin agent via multiplexer which performs the requested write operation to the file.

In one embodiment access library enables service application to register callback functions that may be called by access library when specified system events are reported by thin agent . Service application is then able to take appropriate action when a specified callback function is called.

Services manager is configured to receive an installation notice from a service application upon installation or power on of service application . In one embodiment services manager exposes a web API that may be called using a hypertext transfer protocol http by a newly installed service application . Each service application is configured to contact services manager via web API and to register with services manager . Services manager may also implement a user interface such as a web browser accessible management interface for managing service applications . Upon receiving a registration from a new service application the service manager transmits a configuration message to multiplexer . The configuration message instructs multiplexer to inform each connected thin agent of the presence of the new service application . Each thin agent is then able to connect to service application . Each thin agent maintains a different set of state information for each different service application . After a given thin agent connects to a service application the service application sends configuration information to thin agent . The configuration information is stored as state information associated with the particular service application .

In one embodiment each service application opens a different connection such as a socket to each thin agent . Each connection is facilitated by multiplexer which maintains a corresponding set of socket connections. In alternative embodiments the socket connections are implemented within virtualization software using shared memory message passing.

Each thin agent maintains state information for each corresponding service application connected to thin agent . The state information includes event rules that define which system events should result in an event notification being transmitted to service application . An event filter screens incoming system events transmitted as event signals for matches based on the event rules. For example state information includes event rules that apply to service application an event filter that screens event signals based on the event rules and a system access module configured to facilitate access to system resources within guest OS . In this way each instance of state information reflects requirements for a corresponding service application .

When file is opened or written within file system thin agent is informed by guest OS via event signals . An event notification message is generated by thin agent when file is opened or written within file system . Event notification message is transmitted to access library via multiplexer . Access library then presents event notification message to service application for processing. In one embodiment access library presents event notification message via a function call to a registered callback function within service application .

Upon notification that file was opened within file system service application may begin scanning file via system access module . Access messages are transmitted between service application and thin agent via multiplexer . File data from file is transmitted to service application using access messages .

In one embodiment service application comprises a security application such an anti virus application configured to scan certain files within one or more file systems residing in a corresponding guest OS . Service application configures each thin agent within each guest OS to generate an event notification whenever a file or certain types of files are either created or written within an associated file system . Upon notification that a particular file has been created or written service application scans the file for known virus signatures based on information stored within a virus signature database associated with service application . The virus signature database includes patterns for known viruses and methods for detecting the known viruses. Service application may be configured to also implement a policy for handling an infected file. For example service application may be configured to quarantine the file delete infection related data from the file delete the file or perform some other policy defined action. In certain embodiments a given service application may request that different events be reported from different thin agents. For example one thin agent may be operating in conjunction with a production GVM and need a high degree of protection while another thin agent may be operating in conjunction with a development GVM where a high degree of protection is not desirable and may actually result in problematic interference in normal development activities.

Method begins in step where thin agent receives an event configuration message from a service application . The event configuration message includes a specification that enumerates which system events if any should be subsequently reported by thin agent to service application . In step thin agent which maintains event rules information for each connected service application updates the event rules information for the corresponding service application based on the configuration message. Method terminates in step . In one embodiment the event configuration message is transmitted from service application to thin agent via multiplexer .

Method begins in step where thin agent registers with an associated guest operating system kernel to receive notification of system events. In one embodiment this step is performed when thin agent begins execution. In step thin agent receives an event notification signal from the guest operating system kernel. In step thin agent selects a service application from a set of connected service applications. In step thin agent applies event rules associated with the selected service application to the event reported via the event notification message to determine whether the event should be reported to the selected service application . For example the event rules may specify that any writes to file system e.g. creating a new file or writing to an existing file should be reported whereas a network event or a file read event will not be reported to the selected service application . If in step the event should be reported method proceeds to step where thin agent transmits an event notification to the selected service application . The method then proceeds to step .

If in step the selected service application is not the last service application connected to thin agent method proceeds to step where a next service application is selected. Otherwise if the selected service application is the last service application connected to thin agent method terminates in step . Returning to step if the event should not be reported then method proceeds to step .

Steps through of method may be repeated for each new event notification from the guest operating system kernel. In one embodiment the event notification is transmitted from thin agent to service application via multiplexer .

Method begins in step where thin agent receives an access request from a service application . The access request may comprise any system operation availed to the guest operating system kernel. For example the access request may include a read or write request to a file within file system . The access request may include data such as data to be written to file . In step the thin agent performs the access request. In step the thin agent generates and transmits a response message to service application . Method terminates in step . In one embodiment the access request and the response message are transmitted between thin agent and service application via multiplexer .

In one embodiment methods and are performed in sequence. In method thin agent is configured to report certain events to a particular service application . In method thin agent detects an event that needs to be reported to service application which responds by requesting a certain access request. In method thin agent receives and performs the access request.

Method begins in step where access library receives an event configuration request from service application . The event configuration request indicates which system events should be reported by the thin agent to service application . In one embodiment the event configuration request comprises at least one function call to an API availed to service application by access library . The event selection rules may be implemented as status flags associated with an enumerated list of possible events. Alternatively the selection rules may be formulated using any suitable expression technique. In step access library generates an event configuration message based on the event configuration request. Unlike the event configuration request which may comprise one or more API calls the event configuration message comprises an ordered sequence of date such as a data payload suitable for transmission via TCP IP. In step access library transmits the event configuration message to thin agent . Method terminates in step . In one embodiment the event configuration message is transmitted to thin agent via multiplexer .

Method begins in step where access library receives an event notification message from thin agent . In step access library decodes the event notification message. For example in an implementation where the event notification message is structured as an ordered sequence of data access library parses the ordered sequence of data to determine what type of event is being reported and to extract any related information. In step access library informs an associated service application of the reported event by executing a callback function configured to include event notification data. The event notification data may include the type of event and any related information. Method terminates in step . In one embodiment the event notification message is transmitted from thin agent to access library via multiplexer .

In one embodiment methods and are performed in sequence. In method access library configures a thin agent based on one or more event configuration request generated by the associated service application . In method access library receives an event notification from the configured thin agent and reports the event to the associated service application via a callback function registered by service application for the corresponding type of event.

Method begins in step where service application generates the access request and in step transmits the request to access library which in turn transmits the access request to thin agent . The access request includes an IP address of the VM that generated the system event. After acting on the access request thin agent replies to access library with a response message which may include a status identifier for example that indicates whether the access request was successfully performed. Access library then transmits the response message to service application . In one embodiment transmitting the response message from access library to service application is implemented via a callback function that alerts service application that the response message is available. In step service application receives the response message from access library . In step service application processes the response message according to application specific techniques. In the example of anti virus scanning where an anti virus application executes an access request via thin agent to read data from a suspect file that reside in file system the response message may include data from the suspect file and processing the response message by the anti virus application comprises scanning the data for known virus signatures based on information stored within the virus signature database. The method terminates in step .

Method begins in step where multiplexer receives a configuration message from services manager . The configuration message includes information related to a service application that is either newly installed or recently powered on within host server system . The configuration message includes at least an address such as an IP address or socket number for communicating with service application . In step multiplexer which maintains a list of all connected thin agents and all service applications selects a thin agent such as thin agent from the list of connected thin agents. In step multiplexer transmits a notification to the selected thin agent. The notification includes at least the address for communicating with service application . If in step the selected thin agent is not the last thin agent in the list of all connected thin agents Method proceeds to step where multiplexer selects a next thin agent. After step method proceeds back to step . Returning to step if the selected thin agent is the last thin agent in the list of all connected thin agents method terminates in step .

Method begins in step where multiplexer receives a message to be forwarded either from a thin agent to a service application or from a service application to a thin agent . In step multiplexer identifies a destination address associated with the message such as an IP address or a socket number. If in step the message needs to be segmented method proceeds to step where the multiplexer transmits message segments comprising the message to the destination. A message may need to be segmented for example if the size of the message exceeds an ingress buffer configured to receive the message. Segmenting comprises decomposing the message into a set of segments that collectively form a complete representation of the message. Method terminates in step . Returning to step if the message does not need to be segmented method proceeds to step where the multiplexer transmits the message to the destination.

In one embodiment methods and are performed in sequence. In method multiplexer receives a configuration message from services manager and notifies each thin agent of a new service application and an address with which to contact the new service application . In one usage scenario for method multiplexer forwards a message from a thin agent to the new service application to establish communication with service application . Service application may subsequently reply to thin agent causing multiplexer to again perform method .

Method begins in step where services manager receives a service application registration via a web based API. In one embodiment the web based API comprises a hypertext markup protocol http stateless interface such as the well know simple object access protocol SOAP . It should be recognized that any technically feasible web based API may be implemented without departing the scope and spirit of the present invention. A well known uniform resource locator URL or other form of well known address for services manager may be implemented for the new service application to establish communication with services manager to enable the service application registration. In step services manager transmits a configuration message to multiplexer indicating a location for the new service application . The configuration message includes at least an address such as an IP address or socket number for communicating with the new service application . Method terminates in step .

As described previously in multiplexer further transmits the address for communication with the new service application to each connected thin agent . In this way each thin agent is able to contact the new service application .

In one embodiment when a GVM is turned on a corresponding thin agent establishes contact with multiplexer . Furthermore thin agent may also contact multiplexer periodically in the form of heartbeat messages thereby enabling multiplexer to maintain an up to date list of active thin agents . In certain embodiments multiplexer may forward the heartbeat messages to each connected service application . In other embodiments thin agent generates a heart beat message for delivery to each connected service application .

In one embodiment the well known virtual machine communication interface VMCI is implemented for communication between multiplexer and the thin agents and between multiplexer and the service applications . It should be recognized that VMCI implements a shared memory communication mechanism with a socket application interface. In certain implementations services manager comprises a VMware product known as vShield Manager and each thin agent within a GVM comprises a vShield Endpoint. 

In sum an architecture for virtual systems is disclosed for enabling service applications executing as peers to one or more guest virtual machines to perform useful functions within the one or more guest virtual machines. The guest virtual machines and the service applications execute in a user space of a virtualization software. A thin agent installed within a guest virtual machine is configured to monitor specified system events and to execute certain system functions on behalf of the service applications. The thin agent maintains a set of rules for selectively reporting system events to one or more connected service applications. A multiplexer executing in the user space acts as a central point of communication between the thin agents and the service applications. A services manager is configured to receive registration requests from newly installed or newly powered on service applications. When a new service application registers with the services manager the services manager provides an address for the new service application to the multiplexer. The multiplexer then informs each connected thin agent of the address of the new service application allowing each thin agent to establish communication with the new service application.

One advantage of the present invention is that new functionality may be added to a GVM without interrupting operation of the GVM. Furthermore when the service application is a security application such as an anti virus application the functionality is added independently from the GVM and therefore presents a significantly smaller and more constrained attack surface compared to installing the security application within the GVM.

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system. Computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

In addition while described virtualization methods have generally assumed that virtual machines present interfaces consistent with a particular hardware system persons of ordinary skill in the art will recognize that the methods described may be used in conjunction with virtualizations that do not correspond directly to any particular hardware system. Virtualization systems in accordance with the various embodiments implemented as hosted embodiments non hosted embodiments or as embodiments that tend to blur distinctions between the two are all envisioned. Furthermore various virtualization operations may be wholly or partially implemented in hardware. For example a hardware implementation may employ a look up table for modification of storage access requests to secure non disk data.

Many variations modifications additions and improvements are possible regardless of the degree of virtualization. The virtualization software can therefore include components of a host console or guest operating system that performs virtualization functions. Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

