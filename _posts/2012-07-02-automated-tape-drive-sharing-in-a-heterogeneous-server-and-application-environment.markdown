---

title: Automated tape drive sharing in a heterogeneous server and application environment
abstract: An approach for automatically sharing a tape drive in a heterogeneous computing environment that includes a first computer and second computer is presented. The first computer receives a message that includes a shared tape drive identifier, a source port identifier of the second computer, and a reservation status change for the tape drive. Based on the tape drive identifier, the first computer determines that the tape drive is connected to the first computer. The source port identifier is determined to not identify any host bus adapter installed in the first computer. In response to the first computer determining that the reservation status change indicates a reservation or a release of the tape drive for the second computer, the first computer sets the tape drive offline or online, respectively, in an application executing in the first computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08433772&OS=08433772&RS=08433772
owner: International Business Machines Corporation
number: 08433772
owner_city: Armonk
owner_country: US
publication_date: 20120702
---
This application is a continuation application claiming priority to Ser. No. 12 413 884 filed Mar. 30 2009.

The present invention relates to applications processing data on sequential removable media systems and more particularly to a method and system for automated tape drive sharing among a plurality of applications of different types in a heterogeneous environment.

Tape library also comprises a tape library controller which controls the cartridge accessor and tape drives . . . M. Tape library controller has a connection a.k.a. library drive interface to the tape drives . . . M which allows the tape library controller to obtain status information from the tape drives such as a tape drive serial number error logs and drive status or to test the tape drives.

Tape library controller is connected to server computer systems . . . N and applications . . . N via a network e.g. an Ethernet based network . Network allows server computer systems . . . N and applications . . . N to configure and manage tape library e.g. set up logical libraries and corresponding policies and to obtain error logs and status information from the tape library and tape drives . As one example server computer system and application may automatically obtain information about tape library and tape drive errors through the Simple Network Management Protocol SNMP protocol. Network may be the same network as network or a different network from network .

The multiple applications . . . N using one tape library are limited in that applications of different types are not able to share one tape drive because applications are not able to handle concurrent access to one tape drive. For example if application accesses tape drive it may send a SCSI RESERVE command to reserve the tape drive for the time of the access. When application has finished the access to tape drive application sends the corresponding SCSI RELEASE command. If application N wants to access tape drive at the time the tape drive is reserved by application then the application N receives an error message indicating the tape drive is reserved thereby causing application N to set the tape drive offline. In conventional systems this offline condition then requires time consuming manual intervention. As one example an administrator addresses the aforementioned error message by manually setting the tape drive online in application N. In another example when application accesses tape drive in a heterogeneous environment the tape drive is manually set offline in the application N and when the application has finished accessing tape drive the tape drive is manually set online in the application N. In general whenever a tape drive is reserved by one application in a heterogeneous environment the tape drive is manually set offline in all other applications sharing the same tape drive and when the tape drive is released by that application the tape drive is manually set online in all other applications sharing the same tape drive. Therefore each of the applications . . . N requires at least one dedicated tape drive in tape library which consumes additional physical resources and energy and increases the cost of a conventional system. Thus there exists a need to overcome at least one of the preceding deficiencies and limitations of the related art.

In first embodiments the present invention provides a computer implemented method of automatically sharing a tape drive in a heterogeneous computing environment. The method comprises 

a first computer system receiving a first message that includes an identifier of a tape drive shared among a plurality of computer systems in the heterogeneous computing environment an identifier of a source port of a second computer system and an indication of a first change in a reservation status of the tape drive where the first computer system and the second computer system are included in the plurality of computer systems 

the first computer system determining the tape drive is connected to the first computer system based on the identifier of the tape drive 

the first computer system determining the identifier of the source port does not identify any host bus adapter installed in the first computer system 

the first computer system determining the indication of the first change indicates a first command from the second computer system that reserves the tape drive for the second computer system and

responsive to determining the indication of the first change indicates the first command the first computer system setting the tape drive offline in a first application executing in the first computer system.

In second embodiments the present invention provides a computer implemented library reservation agent based method of automatically sharing a tape drive in a heterogeneous computing environment. The method comprises 

a library reservation agent determining a change in a reservation status of a tape drive based on a command received by the tape drive where the library reservation agent is a software agent executing in a tape library controller coupled via a network to a plurality of computer systems in the heterogeneous environment and where each computer system of the plurality of computer systems executes a drive sharing agent 

the library reservation agent determining the tape drive is shared among the plurality of computer systems where determining the tape drive is shared is based on the identifier of the tape drive 

the library reservation agent determining an identifier of a source port of a first computer system of the plurality of computer systems where the command is received by the tape drive from the first computer system and

the library reservation agent sending a message to the drive sharing agent executing in the plurality of computer systems where the message includes the identifier of the tape drive the identifier of the source port and an indication of the change in the reservation status of the tape drive where a result of the sending the message is a state of the tape drive being set in an application based on the change in the reservation status and being set by the drive sharing agent executing in a second computer system of the plurality of computer systems and where the application is executing in the second computer system.

In third embodiments the present invention provides a computer implemented reservation sharing agent based method of automatically sharing a tape drive in a heterogeneous computing environment. The method comprises 

a reservation sharing agent determining a change in a reservation status of a tape drive based on a command received by the tape drive where the reservation sharing agent is a software agent executing in a tape library controller coupled via a network to a plurality of computer systems in the heterogeneous environment 

the reservation sharing agent determining the tape drive is shared among the plurality of computer systems where determining the tape drive is shared is based on the identifier of the tape drive 

the reservation sharing agent determining an identifier of a source port of a first computer system of the plurality of computer systems where the command is received by the tape drive from the first computer system 

the reservation sharing agent determining the tape drive is connected to a second computer system of the plurality of computer systems based on the identifier of the tape drive 

the reservation sharing agent determining the identifier of the source port does not identify any host bus adapter installed in the second computer system 

the reservation sharing agent determining the change in the reservation status includes a reservation of the tape drive for the first computer system by the command and

responsive to determining the change in the reservation status includes the reservation of the tape drive the reservation sharing agent setting the tape drive offline in an application executing in the second computer system.

Systems and computer program products corresponding to the above summarized methods are also described herein.

One or more embodiments of the present invention provide a technique for allowing multiple applications to share one tape drive automatically and transparently in a heterogeneous environment. As the library reservation agent and drive sharing agent are independent from the applications installed on the server computer systems the novel tape drive sharing methods described herein do not require any changes to the applications.

One or more embodiments of the present invention provide automated and transparent tape drive sharing among a plurality of applications of different types running on a plurality of server computer systems in a heterogeneous environment. As used herein a heterogeneous environment is defined as a computing environment that includes different applications from different vendors fulfilling a similar purpose and running different platforms. An example of a heterogeneous environment is an open system. The tape library system described herein may comprise a novel library reservation agent that determines when a shared tape drive is reserved by an application using novel methods and subsequently sends a message to corresponding novel drive sharing agents via a network. The drive sharing agents are installed on all server computer systems a.k.a. hosting servers hosting applications that share tape drives and are configured for corresponding applications. A drive sharing agent determines whether the application for which the drive sharing agent is configured has access to a shared tape drive indicated in a message from the library reservation agent and whether the application has reserved the tape drive. Based on this determination the drive sharing agent automatically sets the tape drive offline for the application for which the drive sharing agent is configured. Furthermore a shared tape drive is automatically set online in an application by an associated drive sharing agent in response to the library reservation agent determining that the shared tape drive has been released. Each application provides an administrative command line interface for which the drive sharing agent is configured which allows the drive sharing agent to set a shared tape drive offline or online in the application.

In one embodiment drive sharing agents are not separately installed on hosting servers but are instead integrated into the library reservation agent. Thus installation of additional processes on the server computer systems is not required.

In another embodiment a handshake mechanism with subsequent automated actions is described herein for sending the message from the library reservation agent to the drive sharing agent in order to assure that the message has arrived and has been processed.

Library reservation agent extends the tape library controller . The library reservation agent receives a message from a tape drive . . . M via library drive interface in response to the tape drive receiving a command to reserve or release the tape drive via network from an application . . . N e.g. a SCSI RESERVE or SCSI RELEASE command . The tape drive microcode is changed to send the message to the library reservation agent upon reception of a command to reserve or release the tape drive. In an alternate embodiment drive sharing agent and library reservation agent are executed in a physical server computer system not shown that is different from any of server computer systems . . . N where the physical server computer system is connected to server computer systems . . . N and to tape library via network . In another alternate embodiment drive sharing agent and library reservation agent are executed in a software image of a virtual server not shown that is connected to server computer systems . . . N and to tape library via network .

In response to receiving the message via library drive interface the library reservation agent determines an identifier e.g. serial number or World Wide Port Name WWPN of the tape drive and an identifier of the source port i.e. the port pertaining to the server computer system . . . N from which the aforementioned reserve or release command was sent to the tape drive . . . M . For example library reservation agent determines the WWPN of the Fibre Channel port pertaining to the server computer system from which the SCSI RESERVE or SCSI RELEASE command was sent to the tape drive. The WWPN of the source port is included in the Fibre Channel protocol stack.

In another embodiment in which system uses an Internet SCSI iSCSI implementation a Transmission Control Protocol Internet Protocol TCP IP address of the sender e.g. computer system . . . N of the aforementioned reserve or release command is determined instead of the WWPN.

In response to receiving the aforementioned message from the tape drive and determining the tape drive identifier and the source port identifier or the TCP IP address of the sender of the reserve or release command library reservation agent sends accordant messages via network to the drive sharing agents being executed by server computer systems . . . N. These accordant messages may be sent for example by the SNMP protocol.

The server computer systems . . . N may include for example an IBM System p or System x server system offered by International Business Machines Corporation located in Armonk N.Y. an UltraSparc IV server system offered by Sun Microsystems Inc. located in Santa Clara Calif. a Proliant server system offered by Hewlett Packard Company located in Palo Alto Calif. a PowerEdge server offered by Dell Inc. located in Round Rock Tex. etc. Applications . . . N may include for example backup applications such as IBM Tivoli Storage Manager offered by International Business Machines Corporation Netbackup offered by Symantec Corporation located in Cupertino Calif. Netvault offered by BakBone Software Inc. located in San Diego Calif. CommVault Galaxy offered by CommVault Systems Inc. located in Oceanport N.J. CA Disk Backup and Restore formerly called Brightstor offered by Computer Associates International Inc. located in Islandia N.Y. OpenView Storage Data Protector offered by Hewlett Packard Company etc.

Drive sharing agent is installed and executes on all server computer systems . . . N connected to tape library . Each drive sharing agent installed on a server computer system . . . or N is configured for the application . . . or N that is running on the same server computer system and that is sharing tape drives . . . M. In one embodiment the drive sharing agent may be integrated into the tape device driver such as the IBM Tape Device Driver. Hereinafter in this section server same server or hosting server refers to the server computer system . . . or N on which a given drive sharing agent is installed.

The drive sharing agent comprises two layers and as shown in . The lower layer includes capabilities to receive messages from the library reservation agent see . The messages received from the library reservation agent see may be based on prior art protocols such as SNMP.

The lower layer of the drive sharing agent may also include methods to determine the identifiers of tape drives . . . M see connected to the server via commands such as the SCSI INQUIRY command. Additionally the lower layer may determine the identifiers e.g. WWPN of all ports e.g. Fibre Channel ports on which tape drives are attached to the server using a system command such as the lsattr El fsc0 command under the Advanced Interactive eXecutive AIX operating system.

If the lower layer of the drive sharing agent is not able to determine the tape drive identifier and or the port identifiers e.g. WWPN for the hosting server i.e. server computer system . . . or N in on which the drive sharing agent is installed a user interface for the drive sharing agent is used to configure the tape drive identifier and or port identifier e.g. WWPN data manually with the lower layer . In one embodiment each drive sharing agent maintains a table not shown e.g. database table that includes the identifiers of the tape drives connected to the hosting server and the associated identifiers e.g. WWPN of the host bus adapters included in the hosting server and connected to tape drives . . . M see .

The upper layer is configured with the application . . . or N that is hosted on the same server. The upper layer may include two methods that act upon tape drives . . . M see 1 a method to set a tape drive offline and 2 a method to set a tape drive online. These two methods utilize administrative commands provided by a command line interface of the application . . . or N see hosted on the server. For example IBM Tivoli Storage Manager TSM provides an administrative command line client i.e. dsmadmc which allows the system to set a tape drive hosted by TSM offline e.g. update drive status offline or online e.g. update drive status online . The configuration of the upper layer is flexibly implemented in the drive sharing agent so that the drive sharing agent does not need to be recompiled for each application . . . N see . The commands for setting the tape drives . . . M see offline and online in the application . . . or N see are configurable via user interface provided with the drive sharing agent see .

In step the library reservation agent see checks if the reservation state of a tape drive . . . or M see changed in response to the tape drive receiving a command from an application . . . or N see via network see prior to step . The received command reserves or releases the tape drive for the server computer system . . . or N see that hosts the application . . . or N see that sent the command. For example the received command is a SCSI RESERVE command or a SCSI RELEASE command.

In one embodiment the tape drive . . . or M see that receives the command that changes the tape drive s reservation state automatically sends a message a.k.a. reservation state change message via the interface see to the library reservation agent see in response to such command being received by the tape drive and the tape drive s reservation state being changed. In another embodiment the library reservation agent see periodically polls each tape drive . . . M see via interface see in order to determine if the reservation state of any of the tape drives has changed.

If library reservation agent see determines in step that none of the reservation states of tape drives . . . M see have changed i.e. no reserve or release command has been received by a tape drive then the No branch of step is taken and the process of repeats starting at a point prior to step in which the tape drives are waiting to receive a command to change a tape drive s reservation state. Otherwise if library reservation agent see determines in step that a reservation state of a tape drive . . . or M see has changed then the Yes branch of step is taken and step is performed. Hereinafter in this section the tape drive . . . or M see whose reservation state is determined to be changed in step is referred to as the tape drive. 

In step library reservation agent see determines the identifier of the tape drive i.e. the tape drive that received a reserve command or release command via interface see . For example library reservation agent see extracts the serial number of the tape drive from the reservation state change message that had been automatically sent to the library reservation agent.

In step the library reservation agent see determines whether or not the tape drive that received the reserve or release command is a shared tape drive i.e. a tape drive shared by multiple applications . . . N see consulting the library controller see . If step determines that the tape drive is not a shared tape drive then the No branch of step is taken and the process of flows back to a point prior to step indicating that no further action is required for that tape drive because that tape drive is not shared. Otherwise if step determines that the tape drive is a shared tape drive then the Yes branch of step is taken and step is performed.

In step the library reservation agent see determines the identifier e.g. WWPN of the source port via interface see and the tape drive. The source port is the port of one of the server computer systems . . . N in that is the source of the command that changed the reservation state of the tape drive e.g. the source port for the SCSI RESERVE or SCSI RELEASE command . For example library reservation agent see extracts the WWPN of the source port from the reservation state change message that had been automatically sent to the library reservation agent by the tape drive.

In step the library reservation agent see sends a message e.g. via SNMP that includes the identifier of the tape drive the identifier e.g. WWPN of the source port and the reservation change event i.e. reserve the tape drive or release the tape drive to all drive sharing agents see . Therefore the network addresses for all drive sharing agents see are configured in the library reservation agent see . In step the process of ends.

In step the drive sharing agent see determines whether or not a message sent by the library reservation agent see in step see is received by the drive sharing agent. If the drive sharing agent see determines in step that a message from library reservation agent see was not received by the drive sharing agent then the No branch of step is taken and the process of flows back to a point prior to step in which the drive sharing agent waits for the message sent in step see . Otherwise if the drive sharing agent see determines in step that the message sent in step see is received by the drive sharing agent then step is performed.

In step the drive sharing agent see determines the identifier of the tape drive i.e. the tape drive whose reservation state changed in step see FIG. where the identifier of the tape drive is included in the message sent by the library reservation agent see in step see . For example the drive sharing agent see extracts the serial number of the tape drive from the message sent in step see .

In step the drive sharing agent see determines whether or not the identifier determined in step correlates to a tape drive connected to the server computer system . . . or N see that hosts the drive sharing agent. The server computer system that hosts the drive sharing agent see is also referred to in this section as the hosting server. If drive sharing agent see determines in step that the identifier determined in step does not correlate to a tape drive connected to the hosting server the No branch of step is taken and the process of flows back to step . Otherwise if drive sharing agent see determines in step that the identifier determined in step correlates to a tape drive connected to the hosting server then the Yes branch of step is taken and step is performed.

In step the drive sharing agent see determines the identifier e.g. WWPN of the source port where the identifier is included in the message sent by the library reservation agent see in step see . For example drive sharing agent see extracts the WWPN of the source port from the message sent in step see .

In step of the drive sharing agent see checks whether or not the identifier e.g. WWPN determined in step see correlates to an identifier e.g. WWPN of a host bus adapter installed in the hosting server. If drive sharing agent see determines in step that the identifier determined in step see correlates to a host bus adapter installed in the hosting server then the Yes branch of step is taken i.e. indicating that reserve or release command that changed the reservation state in step of was sent to the tape drive by the application executing on the hosting server and the process of ends at step . Otherwise if drive sharing agent see determines that the identifier determined in step see does not correlate to an identifier of a host bus adapter in the hosting server then the No branch of step is taken i.e. indicating that the aforementioned reserve or release command was sent by an application not included in the hosting server and the process of flows to step .

In step the drive sharing agent see determines whether the command that changed the reservation state in step see is a reserve command or a release command by extracting the reservation change event from the message sent in step see and received in step see .

In step the drive sharing agent see sets the tape drive s state in the application . . . or N see installed in the hosting server according to the determination made in step . The setting of the tape drive s state in step utilizes 1 the command line interface see to the application . . . or N see executing in the hosting server and 2 preconfigured commands in the upper layer see of the drive sharing agent see . More precisely if the drive sharing agent see determines a reserve command e.g. SCSI RESERVE command in step then in step the drive sharing agent sets the tape drive offline in the application . . . or N see executing in the hosting server. Otherwise if the drive sharing agent see determines a release command e.g. SCSI RELEASE command in step then in step the drive sharing agent sets the tape drive online in the application . . . or N see in step . Following step the process of ends at step .

The process of begins at step with each of the tape drives . . . M see waiting to receive a command that changes the reservation state of the tape drive i.e. by receiving a reserve command or a release command such as SCSI RESERVE or a SCSI RELEASE command .

In step the library reservation agent see checks if the reservation state of a tape drive . . . or M see changed in response to the tape drive receiving a command from an application . . . or N see via network see prior to step . The received command reserves or releases the tape drive for the server computer system . . . or N see that hosts the application . . . or N see that sent the command. For example the received command is a SCSI RESERVE command or a SCSI RELEASE command.

In one embodiment the tape drive . . . or M see that receives the command that changes the tape drive s reservation state automatically sends a message a.k.a. reservation state change message via the interface see to the library reservation agent see in response to such command being received by the tape drive and the tape drive s reservation state being changed. In another embodiment the library reservation agent see periodically polls each tape drive . . . M see via interface see in order to determine if the reservation state of any of the tape drives has changed.

If library reservation agent see determines in step that none of the reservation states of tape drives . . . M see have changed i.e. no reserve or release command has been received by any of the tape drives . . . M in then the No branch of step is taken and the process of repeats starting at a point prior to step in which the tape drives are waiting to receive a command to change a tape drive s reservation state. Otherwise if library reservation agent see determines in step that a reservation state of a tape drive . . . or M see has changed then the Yes branch of step is taken and step is performed. Hereinafter in this discussion of the tape drive . . . or M see whose reservation state is determined to be changed in step is referred to as the tape drive. 

In step library reservation agent see determines the identifier of the tape drive. For example library reservation agent see extracts the serial number of the tape drive from the reservation state change message that had been automatically sent to the library reservation agent.

In step the library reservation agent see determines whether or not the tape drive is a shared tape drive i.e. a tape drive shared by multiple applications . . . N in . If step determines that the tape drive is not a shared tape drive then the No branch of step is taken and the process of flows back to a point prior to step indicating that no further action is required for the tape drive because the tape drive is not shared. Otherwise if step determines that the tape drive is a shared tape drive then the Yes branch of step is taken and step is performed.

In step the library reservation agent see determines the identifier e.g. WWPN of the source port via interface see and the tape drive. The source port is the port of one of the server computer systems . . . N in that is the source of the command that changed the reservation state of the tape drive e.g. the source port for the SCSI RESERVE or SCSI RELEASE command received by the tape drive . For example library reservation agent see extracts the WWPN of the source port from the reservation state change message that had been automatically sent to the library reservation agent.

In step in the library reservation agent see sends a message e.g. via SNMP that includes the identifier of the tape drive the identifier e.g. WWPN of the source port and the reservation change event i.e. reserve the tape drive or release the tape drive to all drive sharing agents see .

In step the library reservation agent see waits for confirmation from each drive sharing agent see that the message sent in step has been received. After the library reservation agent see waits for a configurable amount of time e.g. 10 seconds at step if the library reservation agent has not received one or more confirmations from one or more drive sharing agents see where the confirmation s confirm the reception of the message sent in step the process of proceeds to step . That is step checks for a completion of a handshake initiated in step see .

In step the library reservation agent see sets the tape drive offline by instructing the tape drive via interface see to report a permanent error to the application . . . N see and to go offline. Performing step prevents access to the tape drive from any application . . . N see and eliminates the aforementioned conflicts. The error condition resulting from step may be cleared manually by an administrator. Following step the process of ends at step .

In an alternate embodiment before entering step the library reservation agent see may retry step in response to determining in step that one or more confirmations are missing i.e. the No path of step . This alternate embodiment makes the method disclosed herein more robust.

Returning to step if the library reservation agent see receives confirmations from all drive sharing agents see that confirm reception of the message sent in step then the Yes branch of step is taken and the process of ends at step .

In step the drive sharing agent see determines whether or not a message sent by the library reservation agent see in step see is received by the drive sharing agent. If the drive sharing agent see determines in step that a message from library reservation agent see was not received by the drive sharing agent then the No branch of step is taken and the process of flows back to a point prior to step in which the drive sharing agent waits for the message sent in step see . Otherwise if the drive sharing agent see determines in step that the message sent in step see is received by the drive sharing agent then step is performed.

In step the drive sharing agent see determines the identifier of the tape drive i.e. the tape drive whose reservation state changed in step see FIG. A where the identifier of the tape drive is included in the message sent by the library reservation agent see in step see . For example the drive sharing agent see extracts the serial number of the tape drive from the message sent in step see .

In step the drive sharing agent see determines whether or not the identifier determined in step correlates to a tape drive connected to the server computer system . . . or N see that hosts the drive sharing agent. The server computer system that hosts the drive sharing agent see is also referred to in the discussion of the process of as the hosting server. If drive sharing agent see determines in step that the identifier determined in step does not correlate to a tape drive connected to the hosting server the No branch of step is taken and the process of flows back to step . Otherwise if drive sharing agent see determines in step that the identifier determined in step correlates to a tape drive connected to the hosting server then the Yes branch of step is taken and step is performed.

In step the drive sharing agent see determines the identifier e.g. WWPN of the source port where the identifier is included in the message sent by the library reservation agent see in step see . For example drive sharing agent see extracts the WWPN of the source port from the message sent in step see .

In step of the drive sharing agent see checks whether or not the identifier e.g. WWPN determined in step see correlates to an identifier e.g. WWPN of a host bus adapter installed in the hosting server. If drive sharing agent see determines in step that the identifier determined in step see correlates to a host bus adapter installed in the hosting server then the Yes branch of step is taken i.e. indicating that reserve or release command that changed the reservation state in step of was sent to the tape drive by the application executing on the hosting server and step see below is performed. Otherwise if drive sharing agent see determines in step that the identifier determined in step see does not correlate to an identifier of a host bus adapter in the hosting server then the No branch of step is taken i.e. indicating that the aforementioned reserve or release command was sent by an application not included in the hosting server and the process of flows to step .

In step the drive sharing agent see determines whether the command that changed the reservation state in step see is a reserve command or a release command by extracting the reservation change event from the message sent in step see and received in step see .

In step the drive sharing agent see sets the tape drive s state in the application . . . or N see installed in the hosting server according to the determination made in step . The setting of the tape drive s state in step utilizes 1 the command line interface see to the application . . . or N see executing in the hosting server and 2 preconfigured commands in the upper layer see of the drive sharing agent see . More precisely if the drive sharing agent see determines a reserve command e.g. SCSI RESERVE command in step then in step the drive sharing agent sets the tape drive offline in the application . . . or N see executing in the hosting server. Otherwise if the drive sharing agent see determines a release command e.g. SCSI RELEASE command in step then in step the drive sharing agent sets the tape drive online in the application . . . or N see in step .

In step which follows the Yes branch of step and step the drive sharing agent see sends a confirmation to the library reservation agent see confirming the drive sharing agent s reception of the message sent in step see . That is step implements a handshake to the message sent in step see thereby indicating that the message was received and processed by the drive sharing agent see . Following step the process of ends at step .

Thus the above described process of is an extension of the process of whereby one additional step is added and performed after the Yes branch of step and step .

Furthermore if a drive sharing agent see is started e.g. when the hosting server starts or stopped e.g. when the hosting server is shutdown it can send a message via network see e.g. using the SNMP protocol and report its state to the library reservation agent see . Thus the library reservation agent see keeps track of the state of the associated drive sharing agents see and will not attempt to send and handshake a message to a drive sharing agent that is not started.

The reservation sharing agent is also connected to the server computer systems . . . N via network allowing the reservation sharing agent to perform remote commands on such server computer systems by using operating system and or application APIs application programming interfaces executed by drive sharing agent see which is integrated in reservation sharing agent . An operating system API may be based on remote command execution means such as rexec. An application API allows the execution of administrative commands like the TSM command line interface dsmadmc. The reservation sharing agent is configurable for the operating system and application type based on the network address of the server computer system . . . N. In an alternate embodiment reservation sharing agent is executed in a physical server computer system not shown that is different from any of server computer systems . . . N where the physical server computer system is connected to server computer systems . . . N and to tape library via network . In another alternate embodiment reservation sharing agent is executed in a software image of a virtual server not shown that is connected to server computer systems . . . N and to tape library via network .

The reservation sharing agent obtains a message from a tape drive . . . or M via library drive interface whenever the tape drive receives a reserve or release command e.g. SCSI RESERVE command or SCSI RELEASE command via network from an application . . . or N. Furthermore via library drive interface the reservation sharing agent determines the identifier a.k.a. the subject identifier of the tape drive that receives the reserve or release command and the source port identifier e.g. WWPN of the port e.g. Fibre Channel port pertaining to the server computer system . . . or N a.k.a. host system from which the reserve or release command was sent. The identifier e.g. WWPN of the source port may be contained in the Fibre Channel protocol stack. Similarly for an iSCSI implementation system determines the TCP IP address of the sender of the command instead of determining the WWPN.

Hereinafter in the discussion of the subject tape drive that receives the reserve or release command is also referred to as the tape drive and the server computer system whose source port identifier is determined by the reservation sharing agent is also referred to as the server computer system or the host system .

Via the connection to the server computer systems . . . N and its ability to remotely execute commands the reservation sharing agent checks if the tape drive with the subject identifier is configured in the host system. For example if the host system is based on AIX then the reservation sharing agent executes the command lscfg vl rmtx remotely. If the tape drive is configured in a host system then the reservation sharing agent may determine the WWPN of the Fibre Channel adapters pertaining to host system. For an AIX server computer system determining the WWPN of the Fibre Channel adapters may be done by executing the AIX command lsattr El fcs0 . If the tape drive identifier and the WWPN match the information obtained from the tape drive then the tape drive is set offline or online within the application . . . N hosted by the server computer system i.e. set offline if the tape drive received a reserve command and set online if the tape drive received a release command . Therefore the reservation sharing agent uses capabilities to remotely execute commands for an application.

Similar to the drive sharing agent see the reservation sharing agent includes a portion that communicates with the server computer system s operating system and to the application . . . or N hosted by the server computer system via interface . The aforementioned portion of the reservation sharing agent is implemented generically and can be configured for each kind of platform and type of application.

In one embodiment the steps performed in the processes of A B A B and A B may be modified so that the steps are performed by the reservation sharing agent .

Memory may comprise any known type of computer data storage media including bulk storage magnetic media optical media random access memory RAM read only memory ROM a data cache a data object etc. In one embodiment cache memory elements of memory provide temporary storage of at least some program code e.g. code of drive sharing agent in order to reduce the number of times code must be retrieved from bulk storage during execution. Moreover similar to CPU memory may reside at a single physical location comprising one or more types of data storage or be distributed across a plurality of physical systems in various forms. Further memory can include data distributed across for example a local area network LAN or a wide area network WAN .

I O interface comprises any system for exchanging information to or from an external source. I O devices comprise any known type of external device including a display device e.g. monitor keyboard mouse printer speakers handheld device facsimile etc. Bus provides a communication link between each of the components in computer system and may comprise any type of transmission link including electrical optical wireless etc.

I O interface also allows computer system to store and retrieve information e.g. data or program instructions such as code of drive sharing agent from an auxiliary storage device such as computer data storage unit or another computer data storage unit not shown . Computer data storage unit may be a non volatile storage device such as a magnetic disk drive i.e. hard disk drive or an optical disc drive e.g. a CD ROM drive which receives a CD ROM disk . Alternatively a tape library may be connected to I O interface just like tape library is connected to server computer systems . . . N in .

Memory includes computer program code for drive sharing agent that provides the logic for a process for automatically sharing a tape drive in a heterogeneous computing environment e.g. the process of or the process of . Code for drive sharing agent a.k.a. code or program is also included in other server computer systems shown in . Further memory may include other systems not shown in such as an operating system e.g. Linux that runs on CPU and provides control of various components within and or connected to computer system . In one embodiment tape library controller see included in tape library includes a processor not shown and a memory not shown that includes computer program code for library reservation agent a.k.a. code or program that provides the logic for a process for automatically sharing a tape drive in a heterogeneous computing environment e.g. the process of or the process of . In an alternate embodiment drive sharing agent and library reservation agent do not reside in server computer system and tape library respectively as shown in but instead are executed either in 1 a physical server computer system not shown that includes the components of server computer system shown in where the physical server computer system is connected to server computer systems . . . N see and to tape library via network see or 2 a software image of a virtual server not shown that is connected to server computer systems . . . N see and to tape library via network see .

Memory storage unit and or one or more other computer data storage units not shown that are coupled to computer system may store associations e.g. in a database table between identifiers of tape drives . . . M see and identifiers e.g. WWPNs of host bus adapters not shown included in computer system . The processes of FIGS. and A B or and A B result in a transformation that 1 transforms a computer data storage unit e.g. storage unit from a storage unit that does not include an association between an identifier of a tape drive . . . or M see and an identifier of a host bus adapter in computer system to a storage unit that includes the aforementioned association or 2 transforms a computer data storage unit e.g. storage unit from a storage unit that includes the aforementioned association to a storage unit that does not include the aforementioned association.

Any computer system i.e. an i th computer system of the other server computer systems . . . N in includes the components of computer system shown in and is also operatively coupled to corresponding I O devices corresponding computer data storage unit s and tape library except that application 1 i.e. application shown in is replaced with an application i e.g. application 2 or application if i 2 application 3 or application if i 3 etc. .

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly an embodiment of the present invention may be an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a system e.g. system of computer system or a system comprising tape library . Furthermore an embodiment of the present invention may take the form of a computer program product embodied in any tangible medium of expression e.g. memory computer data storage unit or memory included in tape library controller see having computer usable program code e.g. code for drive sharing agent or library reservation agent embodied or stored in the medium.

Any combination of one or more computer usable or computer readable medium s e.g. memory computer data storage unit or memory in tape library controller see may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device. A non exhaustive list of more specific examples of the computer readable medium includes an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program for drive sharing agent and or the program for library reservation agent is printed as the program and program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored respectively in a computer memory and a memory not shown in tape library controller see . In the context of this document a computer usable or computer readable medium may be any medium that can store the program for use by or in connection with the instruction execution system apparatus or device. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code e.g. code and or code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server e.g. computer system . In the latter scenario the remote computer may be connected to the user s computer through any type of network not shown including a LAN a WAN or the connection may be made to an external computer e.g. through the Internet using an Internet Service Provider .

The present invention is described herein with reference to flowchart illustrations e.g. A B A B and A B and or block diagrams of methods apparatus systems e.g. and and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions e.g. code or code . These computer program instructions may be provided to a processor e.g. CPU or a processor in tape library controller see of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium e.g. memory computer data storage unit or a memory in tape library controller see that can direct a computer e.g. computer system or tape library controller see or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer e.g. computer system or tape library controller see or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Any of the components of an embodiment of the present invention can be deployed managed serviced etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to the process for automatically sharing a tape drive in a heterogeneous computing environment. Thus an embodiment of the present invention discloses a process for supporting computer infrastructure comprising integrating hosting maintaining and deploying computer readable code e.g. code or code into a computer system e.g. computer system or tape library controller see FIG. wherein the code in combination with the computer system is capable of performing a process of automatically sharing a tape drive in a heterogeneous computing environment.

In another embodiment the invention provides a business method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator can offer to create maintain support etc. a process for automatically sharing a tape drive in a heterogeneous computing environment. In this case the service provider can create maintain support etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

The flowcharts in A B A B and A B and the block diagrams in and illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code e.g. code or code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art. Accordingly the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.

