---

title: Polling of I/O devices on host initiated communication transports
abstract: A disclosed data processing system includes a processor and an operating system kernel that includes communication drivers to support sideband interrupt deferring of polling associated with I/O requests. The communication drivers may implement a driver stack that includes a sideband miniport driver to detect an application program read request for device data from an input/output (I/O) device. The I/O device may be a sensor or another type of human interface device. The sideband miniport driver may pend the read request and maintain an interrupt pipe of a communication transport between the host system and the I/O device in a disabled state. With the interrupt pipe disabled, the host system drivers are unable to poll the I/O device. The sideband miniport driver may pend the read request and keep the interrupt pipe disabled until a sideband interrupt is communicated to the sideband miniport driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021143&OS=09021143&RS=09021143
owner: Intel Corporation
number: 09021143
owner_city: Santa Clara
owner_country: US
publication_date: 20121130
---
Disclosed subject matter is in the field of microprocessor based systems and more particularly systems that include polled input output devices.

Computers and other microprocessor based systems and devices often include input output I O devices that communicate data to and or from the host system or device. The transport protocol by which an I O device communicates information may at times consume power without providing a functional benefit to the device. Some I O bus protocols for example employ host based polling of the I O device to initiate data transfers and the polling may occur continuously and indefinitely regardless of whether an exchange of data between the I O device and the system is pending.

In at least one embodiment a disclosed data processing system also referred to herein as a host system includes a processor and an operating system kernel that includes communication drivers to support sideband interrupt deferring of polling by a host driver of a sensor or other type of human interface device HID . The operating system kernel may be stored in a persistent or volatile computer readable storage medium that is accessible to the processor. In at least one embodiment the operating system kernel stores communication driver instructions that when executed by the processor implement a driver stack for an I O communication transport protocol.

In at least one embodiment the driver stack includes sideband miniport instructions that when executed by the processor cause the processor to perform operations collectively referred to herein as a sideband miniport driver. The sideband miniport driver detects a read request initiated by an application program to read data from an I O device. In at least one embodiment the I O device is a sensor or another type of HID.

In at least one embodiment the sideband miniport driver responds to detecting the read request by pending the read request and maintaining an interrupt pipe between the host system and the I O device in a disabled state. With the interrupt pipe disabled the host system drivers may be unable to poll the I O device to initiate an interrupt. In at least one embodiment the sideband miniport driver is tightly coupled to a corresponding function class driver. The function class driver may lack direct support for communicating an out of band signal such as the sideband interrupt signal.

In at least one embodiment the sideband miniport driver may pend the read request and keep the interrupt pipe disabled until an interrupt that is communicated out of band with respect to the communication channel between the host system and the I O device is detected by the sideband miniport driver. The interrupt that is communicated out of band is referred to herein as a sideband interrupt signal.

In at least one embodiment the sideband interrupt signal indicates that read data from the I O device associated with the read request is available for retrieval by the host system. In at least one embodiment the sideband miniport driver responds to detecting the sideband interrupt by issuing a start command. The start command in at least one embodiment enables the interrupt pipe between the host system and the I O device. When the interrupt pipe is established the host system may poll the I O device to initiate transfer of the data. The driver stack may monitor the progress of the data transfer and upon detecting transfer of the entire data to complete the read request disables the interrupt pipe after the sideband interrupt signal is de asserted.

In at least one embodiment the sideband interrupt may be beneficially employed in environments that feature host initiated communication transport protocols including as an example the universal serial bus USB . In a host initiated communication transport protocol a host controller initiates all bus transactions. In these embodiments the sideband interrupt provides a signal by which the sideband miniport driver can enable and disable an interrupt pipe or other form of communication connection.

In at least one embodiment that communicates with the I O device over a universal serial bus the sideband interrupt driver may be implemented with a general purpose I O GPIO resource of an I O controller hub. In at least one embodiment the I O controller hub may route the interrupt signal to a configuration driver of the host system kernel that produces a intermediate signal indicative of the interrupt signal. The configuration driver may condition the interrupt signal for delivery and detection by the sideband miniport driver. For example the configuration driver may condition the voltage or timing of the signal. In addition the configuration driver may impose additional logical constraints or criteria on the generation of a sideband interrupt signal. For example the configuration driver may suspend sideband interrupt deferring under specific conditions.

In at least one embodiment disclosed subject matter is implemented as a method for employing a sideband interrupt signal to implement read demand polling for a sensor or other form of HID on a host initiated communication transport. In at least one embodiment a read request from an application program is detected by a sideband miniport driver. In at least one embodiment the read request requests device data from a sensor or HID. The sideband miniport driver responds to detecting the read request by pending the read request and maintaining an interrupt pipe between a host system and the I O device in a disabled state. With the interrupt pipe disabled the driver stack is prevented from polling the peripheral device.

Eventually the I O device will retrieve or otherwise obtain the read data and respond by asserting a data ready signal that may be implemented as a GPIO interrupt on an I O hub controller. In at least one embodiment the GPIO interrupt may be routed through an intermediate driver for conditioning or formatting before delivery to a sideband miniport driver. The intermediate driver may be a configuration driver such as an advanced configuration and power interface ACPI . When the sideband miniport driver for the sensor device detects the assertion of the sideband interrupt signal the sideband miniport driver may then issue a start command that results in the interrupt pipe being initiated. When the interrupt pipe is initiated the driver stack may then poll the I O device for the read data and provide the read data to the requestor.

Turning now to the drawings illustrates one embodiment of a data processing system . The embodiment of system includes a processor and a chipset that includes a memory controller hub and an I O hub . Memory controller hub provides an interface between processor and system memory as well as an interface between processor and a graphics adapter display .

The embodiment of processor includes one or more execution cores two of which are depicted as execution cores and . The embodiment of processor further includes core cache memories and and a last level cache that is shared by execution cores . Other embodiments may include more or fewer layers of cache memories. Similarly although the embodiment of processor and system depicts certain functions including the memory control function as being implemented in the chipset that is physically distinct and separate from processor other embodiments may integrate one or more chipset functions into processor . For example memory controller hub may in other embodiments be integrated as an element of processor .

The embodiment I O hub includes support for various adapters transports and protocols including storage adapters network adapters sensor hubs and other I O . These various interfaces and protocols may include as examples a USB interface an I2C interface a PCI express interface legacy PCI buses as well as various storage interfaces including ATA SATA and SCSI. I O hub may further support various serial bus interfaces including as an example a general purpose I O GPIO . The resources identified as other I O encompass various legacy and other types of I O including as examples keyboards mice serial I O audio and so forth.

I O hub interfaces with storage adapters to support various storage technologies including magnetic storage such as a hard disk drive HDD and a persistent randomly accessible storage technology such as a solid state drive. In at least one embodiment I O hub interfaces with network adapters depicted in which encompass various wireline and wireless network interfaces. Network adapters may include as examples a network interface controller NIC operable to interface system with an Internet protocol network a wireless transceiver adapter operable to interface system with a IEEE 802.11 Wi Fi wireless network as well as any radio frequency transceiver operable to interface system with a wireless telephony network.

The sensor hub interfaces a number of sensors through to I O hub and processor . Sensors are examples of HIDs that enable interaction between humans and system . Although the sideband deferring mechanism described herein is illustrated with respect to an implementation of system emphasizing sensors as the HID device to which the sideband deferring mechanism is applied it will be appreciated that other embodiments of system may employee sideband interrupt deferring in conjunction with other types of human interface devices. Sensors may include as examples a magnetometer a global positioning special GPS receiver and a real time clock an ambient light sensor and other sensors.

Referring now to elements of one embodiment of system are illustrated to emphasize sideband interrupt deferring mechanism features of system . The embodiment illustrates system as including various resources and features some of which may be implemented in hardware and microcode while others may be implemented as firmware or software. Firmware and software features may be implemented as instructions stored in system memory or storage adapters that when executed by processor cause the processor to perform various operations described herein.

The elements of system illustrated in include a sensor coupled to a sensor hub microcontroller of sensor hub . Sensor hub communicates with a driver stack of an operating system kernel stored in system memory along with a sensor aware application program . As suggested by its name sensor aware application program may be an application program that utilizes sensor as part of the functionality provided by application program . A street map application for example may access a sensor in the form of a GPS receiver.

The embodiment of system depicts a communication bus between sensor hub and driver stack of host system a sideband interrupt signal from sensor hub to I O hub and a intermediate interrupt signal from I O hub to driver stack .

Sensor aware application program includes or may include application programming interfaces APIs that expose driver stack to the application program. Driver stack may include one or more drivers that make up the driver stack. Drivers and driver stacks facilitate communication between applications programs executing under operating system kernel and I O devices complying with various communication protocols also sometimes referred to as communication transports. If as an example a sensor is implemented as a USB compliant sensor driver stack may include one or more USB sensor class drivers USB HID drivers USB bus class drivers and USB host controllers.

Sensor hub microcontroller is depicted implemented within sensor hub and may include firmware to interact directly with the sensor hardware as well as to provide logical abstractions of the sensors themselves possibly in compliance with a standardized protocol or specification. For example in the context of sensors and USB applications sensor hub microcontroller may provide logical abstractions of sensor devices where the logical abstractions are compatible with an HID USB device class specification. The USB specification includes as an example an HID class that specifies a device class for human interface devices including in addition to sensors more traditional I O devices such as keyboards mice game controllers touch pads touch screens and so forth.

USB is a pervasive interconnect technology and an enormous number of USB drivers exist for many different operating systems. Although many characteristics of the USB are top notch its impact on platform power consumption has been less than stellar. Although power consumption was not a primary criterion of its original design in the mid 1990s USB has become a de facto feature for battery powered platforms where low power is paramount. See e.g. B. Cooper et alia Making USB a More Energy Efficient Interconnect Intel Technology Journal v. 12 no. 01221 2008. Many power consumption issues exhibited by USB devices can be attributed to a USB architecture that constantly polls the I O devices. This polling may continue indefinitely regardless of whether any data is awaiting. Id. It is this aspect of USB that has led some to remark that USB often works quite hard at doing nothing. Id p. 2. Page 18. The sideband deferring mechanism described herein addresses undesirable power consumption attributable to USB polling.

Referring to selected elements of one embodiment of an I O communication architecture suitable for inclusion in data processing system are illustrated. The embodiment of I O communication architecture includes elements to reduce power consumption attributable to I O device polling by a host controller of a host initiated bus. The depicted embodiment of I O communication architecture is suitable for use in an environment in which drivers provided as part of an operating system kernel or driver stack may not directly support sideband interrupts.

The embodiment of sensor communication architecture includes elements to implement sideband interrupt deferring to control the polling behavior of a USB driver stack resulting in reduced power consumption and increased battery life. Although the embodiment of sensor architecture illustrates a driver stack for a USB compliant HID other embodiments may employ analogous techniques in conjunction with any host initiated communication transport that relies on host controller polling of I O devices. In addition although the depicted embodiment is described with respect to certain HID sensors the sideband interrupt deferring described may be employed more generally to many HIDs including but not limited to touch screens.

The embodiment of sensor communication architecture depicted in includes features including the use of a single sideband interrupt signal generated by a sensor hub microcontroller . In the embodiment all HID devices share the single sideband interrupt signal to a kernel driver referred to herein as the HID sideband miniport driver .

The embodiment of sensor communication architecture also employs sideband miniport driver to implement on demand enabling of the USB interrupt pipe where demand is indicated when a sideband interrupt is received. When sideband miniport driver detects the sideband interrupt signal the embodiment of driver stack enables the interrupt pipe polls the I O device to fill a read buffer completes the applicable read request to a sensor class driver and then disables the USB interrupt pipe to prevent further polling.

In a conventional USB architecture employing an extensible host controller interface EHCI or other type of host controller an application that wants to read data from an HID might request a device instance of a class driver to read from a particular HID. The device instance may post a read buffer to a USB bus class driver. The USB bus class driver may then call the USB device for data. If no data is available in the HID hardware the USB bus class driver may continue to poll indefinitely. The embodiment of sensor communication architecture addresses unwanted polling by implementing suspending polling until the I O device firmware indicates demand i.e. a need to have the host controller read data by asserting the sideband interrupt. By preventing the posting of read commands until the requested data is readily available in the HID disclosed embodiments may reduce the amount of polling performed by the host controller and thereby reduce the power consumption associated with polling.

The depicted embodiment of sensor communication architecture includes a dedicated sensor hub microcontroller that implements sideband interrupt deferring with a GPIO signal. Because the sideband interrupt deferring prevents the host USB bus driver from issuing read requests in the absence of available data at the sensor hub as described below the sensor hub microcontroller may be beneficially transitioned to a reduced power state for a greater greater percentage of time.

The embodiment of sensor communication architecture illustrates a driver stack of an operating system kernel a sensor hub microcontroller and a universal serial bus connected between the two. The embodiment of driver stack includes a host sensor class driver in communication with an HID class driver . A sideband miniport driver referred to herein as HID sideband miniport driver communicates with HID class driver . A USB HID driver and a USB bus class driver controller provide a host controller for USB .

The sensor hub microcontroller embodiment depicted in includes a host management module that receives information from HID logical devices including in the depicted embodiment a logical compass a logical GPS receiver and a logical real time clock . A sensor management module receives packets from micro drivers corresponding to the individual hardware sensors.

The embodiment of sensor communication architecture includes three sensors namely magnetometer GPS radio hardware and real time clock hardware s . The hardware sensors and may be implemented as integrated circuits or chips or as hardware or logic on sensor hub microcontroller . The embodiment of sensor manager module is illustrated receiving information from a magnetometer microdriver a GPS microdriver and a real time clock microdriver . In the embodiment sensor hub microcontroller is directly connected to sensor hardware including magnetometer GPS radio hardware and real time clock hardware . A connection bus not explicitly depicted for connecting sensor hardware to sensor hub microcontroller may include but is not limited to an I2C bus a UART an SPI bus a PCI or a PCI Express bus.

Sensor communication architecture as illustrated in beneficially implements a sideband interrupt deferring mechanism that includes a sideband interrupt signal generated by sensor hub microcontroller . Sideband interrupt signal is provided to configuration logic shown as being located on I O controller hub . In at least one embodiment configuration logic generates an intermediate interrupt signal based on sideband interrupt signal . In the embodiment intermediate interrupt signal is received by a configuration driver in operating system kernel . Configuration driver generates a sideband interrupt deferring signal based on intermediate interrupt signal and sideband interrupt deferring signal is provided to HID sideband miniport driver .

Operation of the embodiment of driver stack will now be described. Functionality of interest begins when an application program represented by sensor aware application program wants to read data from sensor hardware and sends a read request to host sensor class driver via host Sensor API . A host sensor class driver posts a read buffer to HID class driver . HID class driver is associated with a miniport driver referred to herein as HID sideband miniport driver .

When the HID sideband miniport driver detects the read request posted to HID class driver HID sideband miniport driver pends the read request and refrains from unlocking or otherwise enabling an interrupt pipeline of USB bus class driver controller but instead enters a waiting state in which it monitors sideband interrupt deferring signal .

Eventually the sensor data requested by sensor aware application is provided to a host manager module of sensor microcontroller which signals a USB bus controller that the requested data is ready to be read by the host controller and asserts sideband interrupt signal . In the embodiment sideband interrupt signal is provided to configuration logic which resides on I O controller hub . In this embodiment I O controller hub may support the system s configuration and power management resources. Moreover I O controller hub may provide support and resources for a general purpose I O GPIO signal. In at least one embodiment the sensor communication architecture depicted in employees a single GPIO interrupt to provide a sideband interrupt that indicates a polling demand signal for all sensor and or HID hardware in the system.

In the embodiment the sideband interrupt signal generated by microcontroller is sent to configuration logic on I O controller hub . The configuration of logic generates intermediate interrupt signal that is routed to a configuration driver . Configuration logic may implement various aspects of standardized power and configuration management protocols including as examples ACPI and the GNU Palmtop Environment GPE protocol.

In the embodiment of sensor communication architecture HID sideband miniport driver receives a sideband interrupt deferring signal from configuration driver . Configuration driver may implement power management and configuration policies of ACPI or another suitable protocol. In the embodiment configuration driver generates sideband interrupt deferring signal based on intermediate interrupt signal and possibly other configuration and power management signals. For example configuration driver may maintain sideband interrupt deferring signal in a deasserted state during times when system is in a reduced power state.

In the described manner sensor communication architecture asserts sideband interrupt deferring signal only after the requested data has arrived at bus controller and is therefore ready to be read by the host operating system. Moreover sensor communication architecture de asserts sideband interrupt deferring signal as soon as the requested data has been read by the host and provided to the requesting application program.

In the embodiment sideband interrupt deferring signal generated by configuration driver is sent directly to HID sideband miniport driver . Upon detecting the assertion of sideband interrupt deferring signal HID sideband miniport driver sends a start command to USB HID driver and to USB bus class driver controller . In the depicted embodiment USB bus class driver controller incorporates an EHCI controller. Other embodiments may implement the bus class driver with other host controller interfaces. USB bus class driver controller upon receiving the start command from HID sideband miniport driver enables the interrupt pipe for the USB stack and holds the USB device controller in sensor hub microcontroller for data.

Because the sideband interrupt deferring signal was deferred pending delivery of the sensor data to the USB controller the sensor data is available immediately when USB bus class driver controller polls the USB controller . USB bus class driver controller and HID sideband miniport driver in conjunction with HID class driver then fills the read buffer of host sensor class driver .

After the read buffer is completed HID sideband miniport driver sends a stop command to USB HID driver if it sees the status of side band interrupt is de asserted thru configuration driver and no more data to be read. USB bus class driver controller disables the interrupt pipe for the USB stack and thereby stops any further polling of the USB controller driver. Host sensor class driver returns the read data received from the HID USB driver stack to sensor API aware application . When the read is completed on the USB bus the sensor hub microcontroller firmware may deassert the sideband interrupt signal .

Referring back to the depicted embodiment of sensor of microcontroller the sensor manager module may support synchronous as well as asynchronous transmission of sensor data. Asynchronous transmission may be controlled or defined by programs policies including as examples a time interval or a threshold repeated criteria.

In at least one embodiment synchronous reads by sensor manager module are not completed by asserting the sideband interrupt signal . The embodiment of driver stack depicted in may support the use of HID input reports that may be sent to operating system kernel . These HID input reports may be routed on the basis of the HID top level collections described in an HID report descriptor written by the sensor hub.

Although the description of the operation of sensor communication architecture focused on the sensor API aware application further illustrates resources that would enable the system to interface with a location aware application through location aware application using host location API as a bridge to host sensor API .

As suggested previously the sensor hub microcontroller illustrated in interfaces exclusively with sensor hardware devices but sensor hub microcontroller can be generalized to encompass in addition to sensor hardware HID hardware including as an example a touchscreen.

Referring now to selected elements of at least one embodiment of a method for implementing a sideband interrupt to support read demand polling in a sensor architecture are depicted. In the depicted embodiment method includes a sensor aware application program sending operation a read request to a sensor class driver. The sensor class driver posts operation a read buffer to an HID class driver. An HID sideband miniport driver then detects operation receipt of the read buffer by the HID class driver and pends operation the read buffer by maintaining the interrupt pipe in a disabled state awaiting the arrival of a sideband interrupt.

The depicted embodiment of method monitors operation for receipt of the interrupt by the HID sideband miniport driver and when an interrupt is received the HID sideband miniport driver sends operation a start command to a USB HID bus class driver.

The depicted embodiment of method then enables operation an interrupt pipe polls the USB device for data and obtains the data that is awaiting in the sensor hardware microcontroller. The USB stack then fills operation the sensor s driver with the read data. The depicted embodiment of method then monitors operation for completion of the read operation and when the read operation completes the USB sideband miniport driver then sends operation a stop command and the bus class driver disables operation the interrupt pipe to prevent any further polling of the sensor microcontroller. The sensor hardware driver then returns the read data to the sensor application and the sensor hub microcontroller firmware then de asserts the interrupt operation .

Referring now to a block diagram depicts selected elements of at least one embodiment of a multiprocessor system platform that may employ sideband interrupt deferring as described above. The embodiment of system includes a first processor a second processor and an I O hub referred to herein as near hub . Near hub communicates with processor over a point to point interconnect connected between a point to point interface of near hub and a point to point interface of processor . Similarly near hub communicates with processor via point to point interconnect between point to point interface of near hub and point to point interface of processor . In the embodiment near hub also includes a graphics interface to communicate with a graphics adapter over a dedicated graphics bus which may be a PCI Express or other suitable type of interconnection. Multiprocessor system platform may further include a point to point interconnect not depicted between processor and processor . The point to point interconnects depicted in include a pair of uni directional interconnections with one of the interconnections communicating data from the applicable processor to near hub and the other interconnection communicating data from near hub to the processor .

The processors may be described as including a core portion and an uncore portion . The core portions of the processors include multiple processor cores referred to herein simply as cores through . Each core may include logic implemented in hardware firmware or a combination thereof that provides as examples an execution pipeline suitable for fetching interpreting and executing instructions and storing or otherwise processing results of those instructions. Uncore portions of the processors may include a system memory controller MC a cache memory referred to herein as the last level cache and an interrupt controller . Each system memory interface may perform various memory controller functions. Last level cache may be shared among each of the cores of processor .

The multiprocessor system platform employs a distributed or non uniform system memory architecture in which the system memory as a whole is implemented as a plurality of system memory portions with each system memory portion being directly connected to a processor via a corresponding memory interconnect and system memory controller . In this distributed memory configuration each processor may interface directly with its corresponding system memory portion via its local system memory controller . In addition any processor e.g. processor may read from or write to a memory portion e.g. system memory portion associated with a different processor e.g. processor but the originating processing may need to go through one or more point to point interconnects to do so. Similarly the last level cache of each processor may cache data from its own processor s system memory portion or from another processor s system memory portion.

Although depicts a distributed memory configuration other embodiments may employ a uniform memory architecture in which for example the entire system memory is connected to a memory controller implemented in near hub rather than having multiple system memory portions each connected to a corresponding processor specific memory controller implemented in the uncores of each processor . Such a system is described below with respect to . Moreover although depicts a point to point configuration in which processors communicate with each other and with near hub via dedicated point to point interconnections other embodiments may employ a shared system bus to which each of the processors and near hub is connected.

In the embodiment of system platform near hub includes an I O interface to communicate with a far hub over an I O interconnection . Far hub may integrate within a single device adapters controllers and ports for various interconnection protocols to support different types of I O devices. The depicted implementation of far hub includes as an example an expansion bus controller that supports an expansion bus that complies with PCI PCI Express or another suitable bus protocol. Examples of functions that may be provided via expansion bus include a network adapter an audio controller and a communications adapter . Network adapter may enable communication with an IEEE 802.11 family or other type of wireless data network a Gigabit Ethernet or other type of wire line data network or both. Audio controller may include or support high definition audio codecs. Communications adapter may include or support modems and or transceivers to provide wireless or wire line telephony capability. Bus controller may further recognize a bus bridge that supports an additional expansion bus where expansion bus and expansion bus have the same protocol or different protocols. Far hub may further include a high bandwidth serial bus controller that provides one or more ports of a USB or other suitable high bandwidth serial bus .

The embodiment of far hub further includes a storage adapter that supports a persistent storage interconnect such as an Integrated Drive Electronics IDE interconnect a Serial ATA interconnect a SCSI interconnect or another suitable storage interconnect to a storage drive that controls persistent storage . Far hub may further include a Low Pin Count LPC controller that provides an LPC bus to connect low bandwidth I O devices including as examples a keyboard a mouse a parallel printer port not depicted and an RS232 serial port not depicted . Multiprocessor system platform as depicted in employs a Super I O chip to interface keyboard and mouse with LPC controller .

In some embodiments the sideband interrupt deferring functionality described herein is suitably employed in a system that includes some or all of the features of system platform . The embodiment of system platform emphasizes a computer system that incorporates various features that facilitate handheld or tablet type of operation and other features that facilitate laptop or desktop operation. In addition the embodiment of system platform includes features that cooperate to aggressively conserve power while simultaneously reducing latency associated with traditional power conservation states.

The embodiment of system platform includes an operating system that may be entirely or partially stored in a persistent storage . Operating system may include various modules application programming interfaces and the like that expose to varying degrees various hardware and software features of system platform . The embodiment of system platform includes for example a sensor API a resume module a connect module and a touchscreen user interface . System platform as depicted in may further include various hardware firm features including a capacitive or resistive touch screen controller and a second source of persistent storage such as a solid state drive SSD .

Sensor API provides application program access to one or more of the sensors not depicted in that may be included in system platform . The resume module may be implemented as software that when executed performs operations for reducing latency when transitioning system platform from a power conservation state to an operating state. Resume module may work in conjunction with SSD to reduce the amount of SSD storage required when system platform enters a power conservation mode. Resume module may for example flush standby and temporary memory pages before transitioning to a sleep mode. By reducing the amount of system memory space that system platform is required to preserve upon entering a low power state resume module beneficially reduces the amount of time required to perform the transition from the low power state to an operating state. The connect module may include software instructions that when executed perform complementary functions for conserving power while reducing the amount of latency or delay associated with traditional wake up sequences. For example connect module may periodically update certain dynamic applications including as examples email and social network applications so that when system platform wakes from a low power mode the applications that are often most likely to require refreshing are up to date. The touchscreen user interface supports a touchscreen controller that enables user input via touchscreens traditionally reserved for handheld applications. In the embodiment the inclusion of touchscreen support in conjunction with support for keyboard and mouse enable system platform to provide features traditionally found in dedicated tablet devices as well as features found in dedicated laptop and desktop type systems.

Embodiments may be implemented in code and may be stored on a storage medium having stored thereon instructions which can be used to program a system to perform the instructions. The storage medium may include but is not limited to any type of disk including floppy disks optical disks compact disk read only memories CD ROMs compact disk re writables CD RWs and magneto optical disks semiconductor devices such as read only memories ROMs random access memories RAMs such as dynamic random access memories DRAMs static random access memories SRAMs erasable programmable read only memories EPROMs flash memories electrically erasable programmable read only memories EEPROMs magnetic or optical cards or any other type of media suitable for storing electronic instructions.

To the maximum extent allowed by law the scope of the present disclosure is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited to the specific embodiments described in the foregoing detailed description.

