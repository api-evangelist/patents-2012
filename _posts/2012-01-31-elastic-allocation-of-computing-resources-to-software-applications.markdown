---

title: Elastic allocation of computing resources to software applications
abstract: Embodiments monitor application performance metrics representing the performance of a software application executed by one or more host computing devices. Based on the application of rules to the application performance metrics, an elasticity action, such as a power-on action, a power-off action, a deploy action, and/or a destroy action, is determined. The elasticity action is transmitted to one or more target hosts, which perform the elasticity action. The target host may be selected based on host performance metrics. Further, a load balancing service may accommodate the addition of a new software application instance to a cluster and/or the removal of an existing software application instance from the cluster.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09110728&OS=09110728&RS=09110728
owner: VMware, Inc.
number: 09110728
owner_city: Palo Alto
owner_country: US
publication_date: 20120131
---
Software applications such as virtual machines VMs may be executed by a group or cluster of host computing devices. Each VM creates an abstraction of physical computing resources such as a processor and memory of the host executing the VM and executes a guest operating system which in turn executes one or more software applications. The abstracted resources may be functionally indistinguishable from the underlying physical resources to the guest operating system and software applications.

The amount of computing resources allocated to each VM on a host can be designated manually by an administrator of the cluster and or automatically according to resource policies set by the administrator. In some clusters an operator attempts to distribute the use of computing resources also known as the computing load across multiple hosts. For example a fixed quantity of hosts may be configured to execute VMs that in turn execute a software application.

One or more embodiments described herein provide elasticity in the allocation of virtual machines to a software application. In some embodiments performance metrics representing the performance of the software application are monitored and evaluated according to one or more predetermined rules. Based on such rules an elasticity action such as a power on action a power off action a deploy action and or a destroy action may be determined.

The elasticity action is transmitted to one or more target hosts which perform the elasticity action thereby controlling an operation of a software application instance and or a virtual machine VM . For example a VM in a ready state may be powered on such that a software application instance executed by the VM is available to respond to client requests. Target hosts may be selected based on host performance metrics such as computing resource utilization.

In some embodiments a load balancing service is employed to distribute computing resource utilization across a plurality of software application instances. As VMs are powered on these VMs are added to the load balancing service. Similarly as VMs are deactivated e.g. powered off or suspended these VMs are removed from the load balancing service.

This summary introduces a selection of concepts that are described in more detail below. This summary is not intended to identify essential features nor to limit in any way the scope of the claimed subject matter.

Embodiments described herein facilitate a combination of virtual application scaling load balancing and application health and performance monitoring. Such a combination enables automatic intelligent scaling of virtual network applications per observed work loads. Such embodiments may be implemented as a framework that interfaces with various monitoring and or load balancing services.

Exemplary embodiments employ dynamic allocation and deallocation of computing resources in a computing cluster according to one or more elasticity rules and one or more performance metrics that represent computing resource utilization or load in the computing cluster. For example multiple instances of a software application may be executed in a computing cluster and when a performance metric associated with the software application violates a predetermined threshold value an elasticity action such as a scale up action or a scale down action may be performed. In some embodiments when the application performance metric indicates that insufficient computing resources are allocated to the software application a scale up action is transmitted to one or more target hosts. In response each target host activates or powers on an instance of the software application. Similarly when the application performance metric indicates that excessive computing resources are allocated to the software application a scale down action is transmitted to one or more target hosts that are executing instances of the software application. In response each target host deactivates or powers off an instance of the software application.

In such embodiments the quantity of instances of the software application may be continually adjusted to ensure that the software application is allocated sufficient but not excessive computing resources. Accordingly such embodiments may be understood to provide an elastic allocation of computing resources to software applications. Such elastic resource allocation facilitates automatically reducing power consumption when overall computing load is relatively low and increasing available computing resources when overall computing load is relatively high such that the computing cluster remains responsive to client requests.

In one example a web application is deployed to an infrastructure as a service IaaS cloud that provides web services using stateless web servers executed by a plurality of virtual machines VMs . The web servers read and persist data to a shared database. The web services are oriented to customers in a specific region e.g. a time zone or a geographic region and may be assumed to receive a relatively large number of client requests during daytime while receiving relatively few client requests at night. Embodiments provided herein facilitate automatically and dynamically scaling the quantity of web application instances according to the observed or measured workload and distributing workloads to all web servers. Such dynamic scaling may conserve energy and resource consumption and therefore cost during non busy times e.g. when few client requests are received while satisfying service requirements and or user expectations during busy times e.g. when many client requests are received .

Optionally the embodiments described may enforce minimum and maximum quantities of working e.g. powered on and ready e.g. powered off instances. Further interfaces to multiple application monitoring services may be included such that performance metrics may be obtained using existing application performance monitoring systems. Similarly interfaces to multiple load balancing services may be included such that activation e.g. power on and or resume and deactivation e.g. power off and or suspend events may be communicated to and accommodated by existing load balancing systems.

Computing device also includes at least one presentation device for presenting information to a user . Presentation device is any component capable of conveying information to user . Presentation device may include without limitation a display device e.g. a liquid crystal display LCD organic light emitting diode OLED display or electronic ink display and or an audio output device e.g. a speaker or headphones . In some embodiments presentation device includes an output adapter such as a video adapter and or an audio adapter. An output adapter is operatively coupled to processor and configured to be operatively coupled to an output device such as a display device or an audio output device.

The computing device may include a user input device for receiving input from user . User input device may include for example a keyboard a pointing device a mouse a stylus a touch sensitive panel e.g. a touch pad or a touch screen a gyroscope an accelerometer a position detector and or an audio input device. A single component such as a touch screen may function as both an output device of presentation device and user input device .

Computing device also includes a network communication interface which enables computing device to communicate with a remote device e.g. another computing device via a communication medium such as a wired or wireless packet network. For example computing device may transmit and or receive data via network communication interface . User input device and or network communication interface may be referred to as an input interface and may be configured to receive information such as configuration options e.g. elasticity rules and or threshold values from a user.

Computing device further includes a storage interface that enables computing device to communicate with one or more datastores which store virtual disk images software applications and or any other data suitable for use with the methods described herein. In exemplary embodiments storage interface couples computing device to a storage area network SAN e.g. a Fibre Channel network and or to a network attached storage NAS system e.g. via a packet network . The storage interface may be integrated with network communication interface .

In exemplary embodiments memory stores computer executable instructions for performing one or more of the operations described herein. Memory may include one or more computer readable storage media that have computer executable components embodied thereon. In the example of memory includes an application monitoring component an elasticity control component and a load balancing component .

When executed by processor application monitoring component causes processor to determine an application performance metric based on a computing resource utilization associated with a software application a response time associated with a software application a client request rate associated with the software application and or a quantity of client sessions associated with the software application. When executed by processor elasticity control component causes processor to determine an elasticity action including a scale up action and or a scale down action based on the application performance metric and to transmit the elasticity action to a target host computing device. The target host computing device applies the elasticity action to one or more instances of the software application. For example the target host computing device may control an operation of an instance of a software application e.g. power on or power off the instance based on the elasticity action. When executed by processor load balancing component causes processor to adjust an availability of the software application instance to receive client requests based on the elasticity action. Any portion of the illustrated components may be included in memory based on the function of computing device .

The virtualization software layer supports a virtual machine execution space within which multiple virtual machines VMs may be concurrently instantiated and executed. Hypervisor includes a device driver layer and maps physical resources of hardware platform e.g. processor memory network communication interface and or user input device to virtual resources of each of VMs such that each of VMs has its own virtual hardware platform e.g. a corresponding one of virtual hardware platforms each virtual hardware platform having its own emulated hardware such as a processor a memory a network communication interface a user input device and other emulated I O devices in VM .

In some embodiments memory in first virtual hardware platform includes a virtual disk that is associated with or mapped to one or more virtual disk images stored in memory e.g. a hard disk or solid state disk of computing device . The virtual disk image represents a file system e.g. a hierarchy of directories and files used by first virtual machine in a single file or in a plurality of files each of which includes a portion of the file system. In addition or alternatively virtual disk images may be stored in memory of one or more remote computing devices such as in a storage area network SAN configuration. In such embodiments any quantity of virtual disk images may be stored by the remote computing devices .

Device driver layer includes for example a communication interface driver that interacts with network communication interface to receive and transmit data from for example a local area network LAN connected to computing device . Communication interface driver also includes a virtual bridge that simulates the broadcasting of data packets in a physical network received from one communication interface e.g. network communication interface to other communication interfaces e.g. the virtual communication interfaces of VMs . Each virtual communication interface for each VM such as network communication interface for first VM may be assigned a unique virtual Media Access Control MAC address that enables virtual bridge to simulate the forwarding of incoming data packets from network communication interface . In an embodiment network communication interface is an Ethernet adapter that is configured in promiscuous mode such that all Ethernet packets that it receives rather than just Ethernet packets addressed to its own physical MAC address are passed to virtual bridge which in turn is able to further forward the Ethernet packets to VMs . This configuration enables an Ethernet packet that has a virtual MAC address as its destination address to properly reach the VM in computing device with a virtual communication interface that corresponds to such virtual MAC address.

Virtual hardware platform may function as an equivalent of a standard x86 hardware architecture such that any x86 compatible desktop operating system e.g. Microsoft WINDOWS brand operating system LINUX brand operating system SOLARIS brand operating system NETWARE or FREEBSD may be installed as guest operating system OS in order to execute applications for an instantiated VM such as first VM . Virtual hardware platforms may be considered to be part of virtual machine monitors VMM which implement virtual system support to coordinate operations between hypervisor and corresponding VMs . Those with ordinary skill in the art will recognize that the various terms layers and categorizations used to describe the virtualization components in may be referred to differently without departing from their functionality or the spirit or scope of the disclosure. For example virtual hardware platforms may also be considered to be separate from VMMs and VMMs may be considered to be separate from hypervisor . One example of hypervisor that may be used in an embodiment of the disclosure is included as a component in VMware s ESX brand software which is commercially available from VMware Inc.

Hosts communicate with each other via a network . Cluster system also includes a management device which is coupled in communication with hosts via network . In exemplary embodiments management device monitors and controls hosts . For example management device may monitor performance metrics e.g. application performance metrics and or host performance metrics associated with hosts and may further coordinate the execution of VMs and or other software applications by hosts based on the performance metrics. One or more client devices are coupled in communication with network such that client devices may submit requests to hosts . For example hosts may execute instances of software applications that provide data in response to requests from client devices .

In some embodiments cluster system also includes a load balance device that communicates with management device software application instances e.g. VMs and or software application instances executed by VMs hosts and or client devices . Load balance device is configured to receive requests from client devices and to forward the received requests to the software application instances hosted by hosts . In exemplary embodiments requests are forwarded to VMs in a manner that distributes the computing resource utilization or load associated with responding to the requests across VMs and or hosts . For example load balance device may forward requests to VMs in rotation e.g. a round robin rotation such as by forwarding a first request to first VM a second request to second VM and so on. As another example load balance device may forward requests to hosts in rotation. In addition or alternatively load balance device may forward requests to VMs based on host performance metrics corresponding to VMs . For example load balance device may forward a request to the VM associated with the lowest host load among VMs at the time the request is received from a client device .

Although management device is shown outside fault domain the functions of management device may be incorporated into fault domain . For example management device may be included in fault domain . Alternatively the functions described with reference to management device may be performed by one or more hosts or VMs executed by one or more hosts in fault domain . That is the functionality of management device may be implemented by executable code running on one or more devices with processing capability. Hosts management device client device and or load balance device may be computing devices shown in .

In exemplary embodiments each host in fault domain provides host information to management device . The host information includes for example the software application instances being executed by a host application performance metrics computing resources allocated to software application instances being executed by the host one or more host performance metrics associated with the host and or events such as the initiation of an execution of a software application instance e.g. an instance power on event or a termination of a software application instance e.g. an instance power off event by the host . Management device receives the host information from hosts in fault domain and applies elasticity rules to determine whether to perform one or more elasticity actions as described in more detail below.

Referring to management device executes application monitoring component elasticity control component and load balancing component . In exemplary embodiments management device monitors and or controls execution of a virtual software application or virtual application vApp instances of which may be executed by virtual machines VMs hosted by hosts . For example management device may maintain a working pool of working e.g. executing virtual application instances and a ready pool of ready e.g. not executing virtual application instances . In some embodiments VMs are configured to execute virtual application . Accordingly a deactivated e.g. powered off or suspended VM may include a ready virtual application instance and the ready virtual application instance may be transformed into a working virtual application instance by activating or powering on the corresponding VM . Similarly a working virtual application instance may be transformed into a ready virtual application instance by deactivating e.g. powering off or suspending the corresponding VM .

Referring also to in exemplary embodiments management device determines e.g. collects and or calculates performance metrics including application performance metrics and or host performance metrics. For example application monitoring component may receive application performance metrics from working virtual application instances in working pool VMs that execute such working virtual application instance and or hosts that execute such VMs . Application performance metrics represent the performance of one or more working virtual application instances . For example application performance metrics corresponding to an application instance may include the computing resource e.g. processor memory storage and or network utilization associated with the application instance a response time associated with the application instance a client request rate associated with the application instance a quantity of concurrent network connections e.g. Transmission Control Protocol connections associated with the instance and or a quantity of client sessions associated with the application instance.

In some embodiments determining the application performance metric includes combining the application performance metrics associated with individual working virtual application instances to create one or more combined application performance metrics associated with virtual application . For example management device may calculate the combined application performance metric as a sum or an average e.g. a mean or a median of the individual application performance metrics.

Management device may also determine host performance metrics representing the performance and or work load of one or more hosts . For example management device may receive host performance metrics from hosts . In exemplary embodiments a host performance metric represents computing resource utilization associated with a host . For example a host performance metric may represent memory utilization processor utilization network utilization and or storage utilization of the corresponding host .

In exemplary embodiments performance metrics are expressed numerically. For example processor utilization may be expressed as a percentage of processor capacity used by a software application instance e.g. a VM or a working virtual application instance executed by a host and network utilization may be expressed as the quantity of data being transmitted and or received by a host via a network e.g. network . Further host load metrics may be expressed as absolute values e.g. processor megahertz used by executing processes and or as relative values e.g. a proportion of available processor megahertz used by executing processes . A performance metric may be an instantaneous value such as a single reading provided by resource monitoring software e.g. an operating system and or application software executed by a host . Alternatively a performance metric may be calculated as a moving average of such readings provided over a predetermined period of time e.g. one second five seconds or thirty seconds .

In some embodiments application monitoring component directly determines e.g. receives and or calculates application performance metrics. In addition or alternatively application monitoring component may include one or more interface components that determine application performance metrics by receiving application performance metrics from one or more application monitoring services. Such application monitoring services may be executed by load balance device and or any other computing device shown in connected to network . Application monitoring component may include a plurality of interface components corresponding to a plurality of application monitoring services such that application monitoring services may be interchangeable with respect to the function of application monitoring component . Further application monitoring component may receive application performance metrics and or host performance metrics e.g. network utilization response time and or quantity of client sessions from load balancing component .

In exemplary embodiments each interface component implements the same application monitoring application programming interface API . The application monitoring API includes a configuration function a reporting function and a registration function.

The configuration function may accept as input parameters 1 an instance identifier such as a VM identifier e.g. a name or a numeric identifier or a network address e.g. an Internet Protocol address and 2 one or more metric frequency pairs. A metric frequency pair includes the identifier e.g. a name or a numeric identifier of a performance metric that should be monitored e.g. processor utilization associated with an application instance and a frequency with which the performance metric should be collected.

The reporting function may accept as input parameters a set of metric value pairs. A metric value pair includes the identifier of a performance metric and a value representing a detected value corresponding to the performance metric.

The registration function may accept as input parameters 1 a list of monitoring capabilities expressed as one or more metric frequency pairs and 2 an optional price associated with use of the corresponding application monitoring service. The frequency portion of a metric frequency pair may include the maximum frequency with which the corresponding application monitoring service is capable of providing the associated performance metric.

In exemplary embodiments management device stores a plurality of elasticity rules. Each elasticity rule includes a condition and an elasticity action to be performed if the condition is satisfied. The condition may test an application performance metric such as by comparing the application performance metric to a predetermined threshold value. In some embodiments application monitoring component determines application performance metrics that are tested by a condition of at least one elasticity rule. Further the frequency with which performance metrics are determined may be specified as a configuration parameter stored by management device .

A condition may compare an application performance metric to a predetermined threshold value to determine whether the threshold value is violated. A threshold value may be expressed as a minimum value or a maximum value. A maximum threshold value is considered violated when an application performance metric is greater than the maximum threshold value. A minimum threshold value is considered violated when an application performance metric is less than the minimum threshold value.

In exemplary embodiments an elasticity action is a scale up action or a scale down action either of which may be optionally associated with a target quantity of instances. A scale up action indicates that one or more ready virtual application instances in ready pool should be activated e.g. powered on . A scale down action indicates that one or more working virtual application instances should be deactivated e.g. powered off . In addition deploy actions and destroy actions described in more detail below may be considered elasticity actions.

As one example an elasticity rule may include a condition of average request rate 90 OR average response time 1 second and an elasticity action of scale up 2 . In this example when the average processor utilization associated with working virtual application instances violates a predetermined maximum threshold value e.g. ninety percent or when the average response time associated with working virtual application instances violates predetermined maximum threshold value e.g. one second the quantity of working virtual application instances is to be increased by a target quantity e.g. two such as by powering on the target quantity of VMs .

Management device determines an elasticity action based on the application performance metric and an elasticity rule. In exemplary embodiments elasticity control component evaluates each elasticity rule to determine whether the condition of any elasticity rule is satisfied. For example management device may determine that an elasticity action should be performed based on determining that an application performance metric violates a corresponding predetermined threshold value.

If no elasticity rule conditions are satisfied no elasticity actions are performed and the current iteration of method ends. In exemplary embodiments method is executed repeatedly e.g. periodically continually or upon request . Accordingly the elasticity rules may again be evaluated in a subsequent iteration of method .

When an elasticity rule condition associated with a scale up action or a scale down action is satisfied management device determines one or more elasticity actions to perform. is a flowchart of an exemplary method for determining elasticity actions based on an elasticity rule. The elasticity rule whose condition was determined shown in to be satisfied is associated with an elasticity action such as a scale up action or a scale down action. In exemplary embodiments the elasticity action is associated with a target quantity of instances e.g. VMs to power on or power off.

Referring to management device e.g. via elasticity control component calculates a projected quantity of ready instances e.g. VMs based on the target quantity of instances and a current quantity of ready instances . For example when the elasticity action is a scale up action the projected quantity of ready instances may be calculated by subtracting the target quantity of instances from the current quantity of ready instances. When the elasticity action is a scale down action the projected quantity of ready instances may be calculated by adding the target quantity of instances to the current quantity of ready instances.

In some embodiments the projected values may be used by management device to ensure that a quantity of ready software application instances is between a predetermined minimum quantity of ready software application instances and predetermined maximum quantity of ready software application instances and or to ensure that a quantity of working software application instances is between a predetermined minimum quantity of working software application instances and predetermined maximum quantity of working software application instances.

Management device also calculates a projected quantity of working instances e.g. VMs based on the target quantity of instances and a current quantity of working instances . For example when the elasticity action is a scale up action the projected quantity of working instances may be calculated by adding the target quantity of instances to the current quantity of working instances. When the elasticity action is a scale down action the projected quantity of working instances may be calculated by subtracting the target quantity from the current quantity of working instances.

When the elasticity action is a scale up action management device compares the projected working quantity of instances to a predetermined maximum quantity of working instances. When the projected working quantity of instances is greater than the maximum management device reduces the target quantity of instances such as by setting the target quantity to the maximum quantity of working instances minus the projected quantity of working instances.

Management device also compares the current quantity of ready instances to the target quantity of instances. When quantity of ready instances is less than the target quantity management device sets the target quantity to be equal to the current quantity of ready instances. Such an adjustment facilitates allocating all available ready instances to the application.

Management device further compares the projected quantity of ready instances to a predetermined minimum quantity of ready instances. When the projected quantity of ready instances is less than the minimum quantity of ready instances management device creates a deploy action indicating that one or more additional instances e.g. VMs should be added to ready pool . In exemplary embodiments a target quantity of instances to deploy is determined by subtracting the projected quantity of ready instances from the minimum quantity of ready instances. Such embodiments facilitate maintaining the minimum quantity of ready instances in ready pool .

When the elasticity action is a scale down action management device compares the projected quantity of working instances to a predetermined minimum quantity of working instances. When the projected quantity of working instances is less than the minimum quantity of working instances management device reduces the target quantity of instances such as by setting the target quantity to the original target quantity minus the minimum quantity of working instances.

Management device also compares the projected quantity of ready instances to a predetermined maximum quantity of ready instances. When the projected quantity of ready instances is greater than the maximum quantity of ready instances management device creates a destroy action indicating that one or more instances e.g. VMs should be removed from ready pool . In exemplary embodiments a target quantity of instances to destroy is determined by subtracting the maximum quantity of ready instances from the projected quantity of ready instances. Such embodiments facilitate maintaining the maximum quantity of ready instances in ready pool .

Referring to management device selects one or more target hosts to perform any determined elasticity action s . If virtual software application is associated with ready instances and or working instances on only one host management device selects that host to perform the elasticity action.

In exemplary embodiments virtual software application is associated with ready instances and or working instances hosted by a plurality of hosts. Management device selects target hosts from the plurality of hosts based on host performance metrics such as computing resource utilization e.g. processor utilization and or memory utilization associated with the hosts. For example when the elasticity action is a scale up action management device may identify a ready instance on a host that is associated with the lowest computing resource utilization among the hosts and select that host.

When the elasticity action is a scale down action selecting the target host may include identifying a software application instance based on a quantity of client sessions associated with the software application instance e.g. zero client sessions or a lowest quantity of client sessions among working instances and selecting the host that is executing the selected software application instance. For example management device may select one or more hosts that are executing a software application instance associated with zero client sessions. In some embodiments a working instance with a non zero quantity of client sessions may be selected when load balancing component supports session persistency.

In addition or alternatively for a scale down action management device may identify a software application instance based on a computing resource utilization associated with the software application instance e.g. a lowest computing resource utilization among working instances and select the host computing device that is executing the identified software application instance. Further management device may select a host that is executing an instance of the software application instance and is associated with a relatively high computing resource utilization e.g. a highest computing resource utilization among the hosts .

When the elasticity action is a scale up action management device may select a first target host for the scale up action. Further as described with reference to management device may create a deploy action to add one or more ready instances . Management device may select the first target host or a second target host for the deploy action based on computing resource utilization associated with the hosts and or a quantity of instances of the software application being executed by the hosts. For example the host associated with the lowest computing resource utilization and or with the lowest quantity of working instances may be selected for the deploy action. When selecting a target host for a deploy action management device may exclude hosts with insufficient storage capacity for an instance of the software application. Further management device may select a target host for a deploy action based on the quantity of instances of the software application hosted by the hosts. For example management device may select hosts that already include at least one instance of the software application as deploying an instance to other hosts may involve cloning an instance from another host as described below.

Similarly when the elasticity action is a scale down action management device may create shown in a destroy action. Management device may select a target host e.g. the same host selected for the scale down action or a different host for the destroy action based on a quantity of ready software application instances associated with the hosts and computing resource utilization associated with the hosts. For example the host associated with the highest quantity of ready instances and or with the highest computing resource utilization may be selected for the destroy action.

When the elasticity actions include a deploy action management device may associate with the deploy action a cloning of a software application instance e.g. a VM . In some embodiments if a host selected for a deploy action is hosting a local source VM executing an instance of the software application management device associates with the deploy action a cloning of the local source VM on the selected host. Otherwise management device associates with the deploy action a cloning to the selected host of a remote source VM that is executing an instance of the software application at a host computing device other than the target host computing device.

Management device transmits the elasticity action s to the selected target host s . In response to receiving such elasticity actions each target host performs the received elasticity action s thereby controlling an operation of one or more software application instances. In exemplary embodiments if a host receives a scale up action the host may power on a VM transforming a ready instance into a working instance . Similarly if the host receives a scale down action the host may power off a VM transforming a working instance into a ready instance . When a host receives a deploy action the host clones an existing VM instance as described above adding a ready instance to ready pool . When a host receives a destroy action the host removes a ready instance from ready pool .

In exemplary embodiments based on the elasticity actions management device adjusts the availability of software application instances to receive client requests. For example when the elasticity actions include a scale up action load balancing component may add the software application instance to a load balancing cluster such as by notifying load balance device shown in of the newly powered on instance. Such a notification may be initiated when application monitoring component receives a notification e.g. an instance power on event or an instance power off event from a working instance and in turn notifies load balancing component . When the elasticity actions include a scale down action load balancing component may remove the software application instance from a load balancing cluster such as by notifying load balance device of the newly powered off instance. Such a notification may be initiated when application monitoring component determines that a working instance is no longer responsive and in turn notifies load balancing component .

In some embodiments load balancing component directly adjusts the availability of application instances. For example load balancing component may receive requests from client devices and forward such requests to application instances that load balancing component has determined are available. In addition or alternatively load balancing component may include one or more interface components that communicate elasticity actions and or events e.g. power on events and or power off events to one or more load balancing services executed by load balance device . Load balancing component may include a plurality of interface components corresponding to a plurality of load balancing services such that load balancing services may be interchangeable with respect to the function of load balancing component .

In exemplary embodiments each interface component implements the same load balancing application programming interface API . The load balancing API includes a registration function a configuration function a creation function a destruction function an addition function and a removal function. Interface component may further include a health check function and a performance query function. Exemplary function signatures and descriptions are shown in Table 1.

The registration function accepts a load balancing service type. In exemplary embodiments load balancing service types may include direct routing e.g. in which application instances are assigned virtual network addresses network address translation NAT in which each application instance is assigned an internal network address that is inaccessible by client devices and load balancer is assigned the virtual network address of the cluster IP tunneling in which each application instance is assigned an internal network address and load balancer is assigned the virtual network address of the cluster proxy in which each application instance is assigned an internal network address and load balancer is assigned the virtual network address of the cluster DNS in which the application instances are assigned the same DNS name and each is assigned an external network address accessible by client devices guest level distributed load balancing in which the application instances share a virtual network address and a virtual media access control address and hypervisor level distributed load balancing in which the application instances share a virtual network address .

The capability list is expressed as one or more capability value pairs. Capabilities may include for example a maximum throughput a scalability e.g. maximum quantity of application instances in a load balancing cluster a network layer at which load balancing is performed e.g. layer layer and or layer protocols supported or optimized load balancing algorithms session persistency session persistency techniques server health check server health check techniques content caching web acceleration e.g. data compression parallel transfers and or Hypertext Transfer Protocol pipelining and or encryption e.g. Secure Sockets Layer acceleration.

Extended parameters may include parameters that are specific to a particular load balancing service and are not supported by the load balancing API for all load balancing services. An extended parameter may be included in a configuration associated with virtual software application and provided to load balancing device by load balancing component .

The parameters accepted by the configuration function may vary based on the type of the load balancing service that corresponds to interface . For example if a load balancing service supports multiple session persistency techniques one of the supported session persistency techniques may be specified when invoking the configuration function.

The methods described may be performed by computing devices such as hosts in cluster shown in . The computing devices communicate with each other through an exchange of messages and or stored data. A computing device may transmit a message as a broadcast message e.g. to an entire network and or data bus a multicast message e.g. addressed to a plurality of other computing devices and or as a plurality of unicast messages each of which is addressed to an individual computing device. Further in some embodiments messages are transmitted using a network protocol that does not guarantee delivery such as User Datagram Protocol UDP . Accordingly when transmitting a message a computing device may transmit multiple copies of the message enabling the computing device to reduce the risk of non delivery.

The operations described herein may be performed by a computer or computing device. A computer or computing device may include one or more processors or processing units system memory and some form of computer readable media. Exemplary computer readable media include flash memory drives digital versatile discs DVDs compact discs CDs floppy disks and tape cassettes. By way of example and not limitation computer readable media comprise computer readable storage media and communication media. Computer readable storage media store information such as computer readable instructions data structures program modules or other data. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Combinations of any of the above are also included within the scope of computer readable media.

Although described in connection with an exemplary computing system environment embodiments of the disclosure are operative with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the disclosure include but are not limited to mobile computing devices personal computers server computers hand held or laptop devices multiprocessor systems gaming consoles microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the disclosure may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. The computer executable instructions may be organized into one or more computer executable components or modules. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the disclosure may be implemented with any number and organization of such components or modules. For example aspects of the disclosure are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the disclosure may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

Aspects of the disclosure transform a general purpose computer into a special purpose computing device when programmed to execute the instructions described herein.

The operations illustrated and described herein may be implemented as software instructions encoded on a computer readable medium in hardware programmed or designed to perform the operations or both. For example aspects of the disclosure may be implemented as a system on a chip.

The embodiments illustrated and described herein as well as embodiments not specifically described herein but within the scope of aspects of the disclosure constitute exemplary means for maintaining high availability of software application instances such as virtual machines.

The order of execution or performance of the operations in embodiments of the disclosure illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the disclosure may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the disclosure.

When introducing elements of aspects of the disclosure or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the disclosure in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the disclosure as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the disclosure it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

