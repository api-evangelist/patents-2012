---

title: GNSS navigation solution using inequality constraints
abstract: Information such as altitude or speed limits for a specific geographic region can be utilized to improve position and velocity estimation for a mobile device using inequality constraints. The inequality constraints can be used as pseudo-measurements when needed to improve position and velocity estimation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09360559&OS=09360559&RS=09360559
owner: Apple Inc.
number: 09360559
owner_city: Cupertino
owner_country: US
publication_date: 20120321
---
This disclosure relates generally to Global Navigation Satellite Systems GNSS and more particularly to improving GNSS navigation solutions and detecting fault measurements.

Modern mobile devices may include a variety of applications that depend on an accurate estimate of device location such as a map application or location based services LBS application. An integrated Global Positioning System GPS receiver and onboard sensors e.g. accelerometers gyroscopes can be used to determine location and orientation of the device and even provide a rough estimate of heading.

Many GPS receivers use a recursive estimation algorithm e.g. Kalman Filter to provide a computationally efficient navigation solution. A linear form of the Kalman Filter such as the Extended Kalman Filter EKF can be used if the system equations or measurement equations are non linear. The EFK provides a good result if the state vector is chosen carefully. Even if the state vector is carefully chosen the EFK can generate erratic estimates due to biased GNSS measurements e.g. multipath signals poor solution geometry e.g. urban canyons and low measurement redundancy e.g. few satellites available .

Information such as altitude or speed limits for a specific geographic region can be utilized to improve position and velocity estimation for a mobile device using inequality constraints. The inequality constraints can be used as pseudo measurements when needed to improve position and velocity estimation.

Various implementations of the subject matter described herein may provide one or more of the following advantages 1 an improved horizontal and vertical accuracy for GNSS first fix cases and 2 an improved ability to perform GNSS measurement fault detection.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features aspects and advantages will become apparent from the description the drawings and the claims.

Information for specific location regions of interest can be used to improve GNSS position and or velocity estimation by providing constraints that limit the values of the estimated states e.g. position and velocity parameters .

The maximum and minimum ground altitudes and maximum building heights for a specific location region may be known. This information can be held in a database as a digital elevation model for the region and the maximum and minimum values can be extracted from the database. The maximum and minimum information can be encoded using a look up table for specific regions. For example a cell location based look up table could be used to store maximum and minimum altitudes for the region in which the cell is used. The GPS position estimation can utilize this information as an altitude inequality constraint.

The use of speed or velocity inequality constraints can be also useful for estimation. For cases when the user is driving the maximum speed value with some allowance for typical speeders can be determined from a street map database limited to the likely region including the user position. As an example given a point estimate of location in downtown San Francisco with an associated uncertainty region e.g. assuming a 200 m circle the maximum speed could be assessed based on road map data and an assumption of how much people typically speed e.g. 50 km hr speed limit 40 km hr excess speed 90 km hr a maximum speed . A maximum speed inequality constraint can then be communicated to the GPS receiver s estimation process. The receiver can enforce this constraint as an inequality constraint on the state estimator in the event that the speed estimate exceeds the maximum value. Further given knowledge of a map matched solution mapping to a specific road the inequality constraint could become a vectorized constraint max velocity east and ma velocity north or max velocity across track and max velocity along track .

A database of roads is not required for utilizing speed inequality constraints. If the user activity context is known by analysis of the devices accelerometer samples for example this information can be used to limit the maximum speed of the GPS solution. If the user context is walking then it is unlikely that the user is traveling faster than 30 km hr. If the user context is running then it is unlikely that the user is traveling faster than 50 km hr.

Inequality constraints are useful in position and velocity estimation to contain the navigation solution s estimated states within expected boundaries. Often when these boundaries are exceeded this indicates that something is wrong with the estimation and the problem is usually due to measurement outliers. When inequality constraints are applied these measurement outliers can be detected and the result is a much more accurate estimation.

Inequality tests can be employed after the regular estimation method is complete. If an estimated state crosses a boundary the estimation method can be performed again with a pseudo measurement to force the solution to the expected boundary. For example if the maximum value is exceeded a pseudo measurement at the minimum value can be used. This seems counterintuitive in that the pseudo measurement is not the boundary value that was exceeded. The boundary value that was exceeded cannot be used because it would necessitate using a small pseudo measurement variance. This method is considered an optimal method of applying inequality constraints because it adds a minimal amount of information to move the state to the boundary value. Inequality constraints can be employed with estimation methods including recursive least squares and EKF.

Estimation module can be implemented in software or firmware that is executed by one or more hardware processors or processing cores in the GNSS receiver. Estimation module can also be implemented at least partially in hardware or a combination of hardware and firmware or in application software. In some implementations estimation module can use pseudo range and delta range Doppler measurements provided by a GNSS receiver front end and baseband processor to determine a navigation solution for a mobile device. Estimation module can implement well known estimation techniques including EKF and least squares estimation as discussed below in more detail.

Digital elevation data can be stored locally on the mobile device or on a network device. An example of digital elevation data is a Geographic Information System GIS that uses position coordinates or latitude longitude as a key index variable for elevation information.

In some implementations altitude constraint module receives a horizontal position estimate circumflex over x and a corresponding statistical uncertainty associated with the horizontal position estimate. The position estimate and corresponding uncertainty can be taken from one or more previous position estimates computed by estimation module . For example a position estimate can be taken from the current state vector estimate of EKF or least squares estimator and the position estimate uncertainty can be determined from the current state error covariance associated with the state vector estimates which will be described in more detail below. Alternatively the position estimate and corresponding position estimate uncertainty can be provided by an Inertial Navigation System INS . The INS can obtain measurements from inertial sensors e.g. accelerometers gyro sensors magnetometers and compute a position estimate and corresponding position estimate uncertainty from the INS data using known techniques.

In some implementations an average or mean of horizontal position estimates can be used to retrieve digital elevation data . The mean and variance of position estimate component circumflex over x can be calculated from a number of past position estimates of circumflex over x . For example for N values of circumflex over x a mean and variance can be computed by

A similar calculation can be made for the y coordinate. The position coordinates can be provided by estimation module or the INS in a reference coordinate frame that is compatible with accessing digital elevation from a database. Alternatively the position coordinates can be transformed into any desired reference coordinate frame using an appropriate transformation matrix and known coordinate transformation techniques e.g. cosine matrices quaternions .

Altitude constraint module uses the estimated position to index a database of digital elevation data to find an elevation corresponding to the estimated position as described in reference to below.

Within uncertainty region there are points of minimum elevation and a maximum elevation each of which is marked as a solid diamond. Thus given position estimate and uncertainty region altitude constraint module determines the minimum and maximum altitudes h hwithin uncertainty region . The determined minimum and maximum altitudes in uncertainty region are used in an altitude inequality constraint to improve the navigation solution and or for integrity monitoring of GNSS or INS measurements.

In the example shown position estimate is lying on the contour line for elevation of 2000 feet. The highest elevation in uncertainty region is lying on the contour line or within the region surrounded by the contour line for elevation 2500 feet. The lowest elevation in uncertainty region is lying on the contour line or within the region surrounded by the contour line for 1250 feet. Thus in this example his between about 1250 and about 1500 feet and his about 2500 feet. In some implementations digital elevation data can be accessed from a database table of elevations that can be indexed by latitude and longitude. Interpolation techniques can be used to determine elevations that fall between table values. Portions of digital elevation data can be downloaded periodically to the mobile device based on the current estimated location of the mobile device. The portions of digital elevation data can be stored in local cache of the mobile device.

The minimum and maximum altitudes h hdetermined by altitude constraint module can be used as an altitude height inequality constraint in an EKF formulation as described below in reference to .

For discussion purposes we assume the mobile device navigation state vector is given by 3 where x y and z and dot over x dot over y are the position and speed components of the mobile device in ENU Cartesian coordinates respectively.

Letting h hrepresent the minimum and maximum altitudes in the uncertainty region shown in an altitude inequality constraint can be defined by 4 where right arrow over h 0 0 1 0 0 0 is a measurement function. Note that matrices will hereafter be represented by bold capital letters.

The state vector right arrow over x and corresponding state error covariance P can be updated using well known EKF formulations that include a prediction phase and a updating phase as follows 

B. Updating 7 8 9 where is a state transition matrix Q is the system noise error covariance matrix P is the state vector error covariance matrix H is the Jacobian of the measurement function evaluated at the predicted state K is the gain matrix right arrow over y is the actual measurement vector and R is the measurement noise error covariance matrix. The superscript is the state before the measurement update and the superscript is the state after measurement update.

The matrices described above are known in EKF formulations and the derivation of elements of these matrices is based on the particular application that is employing the EKF formulations. Of particular interest is the computation of the z component of the measurement noise model represented by the measurement noise error covariance matrix R which can be computed using the altitude inequality constraint of equation 4 .

The general method of applying inequality constraints to the EKF is well known. This method described below adds a minimal amount of information to the EKF to achieve the constraint and is thus optimal it does not over constrain the solution . The general method of applying inequality constraints using an EKF can be revised to improve the ability of the EKF to detect and remove measurement failures and thus improve the solution accuracy as well as bound the state to the inequality region. It is preferred to use a sequential method of updating the EKF as described in equations 5 9 above.

In some implementations process can begin by storing the state vector and state covariance matrix after the EKF prediction step as described by equations 5 and 6 . Process can continue by performing the EKF measurement update step s with appropriate measurement fault detection and isolation techniques as described by equations 6 9 . If the measurement updates are applied sequentially then the inequality test is applied after each update . Otherwise the inequality test is applied after the measurement update step . If the inequality test passes then the solution is final and process ends. If the inequality test fails for any update the EKF state vector and covariance matrix post update are stored for use in computing the inequality constraint . The EKF then reverts to the stored state vector and state variance covariance matrix after the EKF prediction step .

The inequality constraint is then applied as a pseudo measurement update with an appropriate measurement variance . If the maximum value was exceeded a pseudo measurement at the minimum value can be used to update the EKF . The measurement innovation and the measurement variance for this pseudo measurement can be given by 

If the minimum value was exceeded a pseudo measurement at the maximum value can be used to update the EKF . The measurement innovation and the measurement variance for this pseudo measurement can be given by 

Process can continue by performing the EKF measurement update step s with appropriate measurement fault detection and isolation techniques following the pseudo measurement update . If a new combination of measurements results from the use of the pseudo measurement constraint the update steps can be performed again from the stored filter after the EKF prediction step with the set of measurements without fault detection and without the pseudo measurement constraint to avoid over constraining the solution . The inequality constraint can then be applied again if needed .

The impact of the pseudo measurement when there is no change in the measurements used is that the state is moved to the expected maximum or minimum point. If different measurements are detected as measurement faults then the state can be different from the boundary value. In many cases the solution can be improved by the rejection of an outlier measurement which improves the accuracy of the solution. However it should be noted that the solution with the revised set of included measurements is potentially over constrained unless the final iterative step is taken.

In some implementations process can begin by performing regular least squares estimation with standard measurement fault detection and isolation . Once the solution has converged the inequality test can be performed on the state . Next the state can be checked to see if it is less than the expected minimum or larger than the expected maximum . If the inequality test fails then the least squares estimation can be performed again using a pseudo measurement constraint . However measurements identified as potential faults in the first least squares implementation are included in the second implementation because different measurements may be identified as faults based on the use of the inequality constraint pseudo measurement.

If the maximum value is exceeded a pseudo measurement at the minimum value can be used . The measurement uncertainty for this pseudo measurement can be Oven by

If the minimum value is exceeded a pseudo measurement at the maximum value is used . The measurement uncertainty for this pseudo measurement is given by

Next least squares estimation is performed again with a revised measurement set fault detection steps and a pseudo measurement constraint . If a new combination of measurements results from the use of the pseudo measurement constraint to avoid over constraining the solution least squares estimation can be run again with this revised measurement set with fault detection steps and without the pseudo measurement constraint . Process can then continue to step .

The impact of the pseudo measurement on the estimation when there is no change in the measurements used is that the state is moved to the expected maximum or minimum point. If different measurements are detected as measurements faults then the state can be different from the boundary value. In many cases the solution will be improved a great deal by the rejection of an outlier measurement which improves the accuracy of the solution. However it should be noted that the solution with the revised set of included measurements are potentially over constrained unless the final iterative step is taken.

Sensors devices and subsystems can be coupled to peripherals interface to facilitate multiple functionalities. For example motion sensor light sensor and proximity sensor can be coupled to peripherals interface to facilitate orientation lighting and proximity functions of the mobile device. Location processor e.g. GPS receiver can be connected to peripherals interface to provide geo positioning. Electronic magnetometer e.g. an integrated circuit chip can also be connected to peripherals interface to provide data that can be used to determine the direction of magnetic North. Thus electronic magnetometer can be used as an electronic compass. Accelerometer can also be connected to peripherals interface to provide data that can be used to determine change of speed and direction of movement of the mobile device.

Camera subsystem and an optical sensor e.g. a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor can be utilized to facilitate camera functions such as recording photographs and video clips.

Communication functions can be facilitated through one or more wireless communication subsystems which can include radio frequency receivers and transmitters and or optical e.g. infrared receivers and transmitters. The specific design and implementation of the communication subsystem can depend on the communication network s over which a mobile device is intended to operate. For example a mobile device can include communication subsystems designed to operate over a GSM network a GPRS network an EDGE network a WiFi or WiMax network and a Bluetooth network. In particular the wireless communication subsystems can include hosting protocols such that the mobile device can be configured as a base station for other wireless devices.

Audio subsystem can be coupled to a speaker and a microphone to facilitate voice enabled functions such as voice recognition voice replication digital recording and telephony functions.

I O subsystem can include touch screen controller and or other input controller s . Touch screen controller can be coupled to a touch screen or surface . Touch screen or surface and touch screen controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with touch screen .

Other input controller s can be coupled to other input control devices such as one or more buttons rocker switches thumb wheel infrared port USB port and or a pointer device such as a mouse or stylus. The one or more buttons not shown can include an up down button for volume control of speaker and or microphone . In one implementation the user may be able to customize a functionality of one or more of the buttons. For example the touch screen can also be used to implement virtual or soft buttons and or a virtual keyboard.

In some implementations the device can present recorded audio and or video files such as MP3 AAC and MPEG files. In some implementations the device can include the functionality of an MP3 player. The device may include a pin connector that is compatible with accessories.

Memory interface can be coupled to memory . Memory can include high speed random access memory and or non volatile memory such as one or more magnetic disk storage devices one or more optical storage devices and or flash memory e.g. NAND NOR . Memory can store operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks. Operating system may include instructions for handling basic system services and for performing hardware dependent tasks. In some implementations operating system can include a kernel e.g. UNIX kernel .

Memory may also store communication instructions to facilitate communicating with one or more additional devices one or more computers and or one or more servers. Memory may include graphical user interface instructions to facilitate graphic user interface processing sensor processing instructions to facilitate sensor related processing and functions phone instructions to facilitate phone related processes and functions electronic messaging instructions to facilitate electronic messaging related processes and functions such as SMS and MMS web browsing instructions to facilitate web browsing related processes and functions media processing instructions to facilitate media processing related processes and functions GPS Navigation instructions to facilitate GPS and navigation related processes and instructions such as the processes described in reference to and camera instructions to facilitate camera related processes and functions. The memory may also store other software instructions not shown such as security instructions web video instructions to facilitate web video related processes and functions and or web shopping instructions to facilitate web shopping related processes and functions.

Memory can include instructions for magnetometer calibration and associated calibration data as well as other instructions for implementing various applications for using navigation solutions such as mapping applications and location based service applications.

Each of the above identified instructions and applications can correspond to a set of instructions for performing one or more functions described above. These instructions need not be implemented as separate software programs procedures or modules. Memory can include additional instructions or fewer instructions. Furthermore various functions of the mobile device may be implemented in hardware and or in software including in one or more signal processing and or application specific integrated circuits.

The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language e.g. Objective C Java including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors or cores of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. Some elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. A computer can include or be operatively coupled to communicate with a mass storage device for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Some examples of communication networks can include a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

One or more features or steps of the disclosed embodiments can be implemented using an Application Programming Interface API . An API can define on or more parameters that are passed between a calling application and other software code e.g. an operating system library routine function that provides a service that provides data or that performs an operation or a computation.

The API can be implemented as one or more calls in program code that send or receive one or more parameters through a parameter list or other structure based on a call convention defined in an API specification document. A parameter can be a constant a key a data structure an object an object class a variable a data type a pointer an array a list or another call. API calls and parameters can be implemented in any programming language. The programming language can define the vocabulary and calling convention that a programmer will employ to access functions supporting the API.

In some implementations an API call can report to an application the capabilities of a device running the application such as input capability output capability processing capability power capability communications capability etc.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made. For example elements of one or more implementations may be combined deleted modified or supplemented to form further implementations. Yet another example the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

