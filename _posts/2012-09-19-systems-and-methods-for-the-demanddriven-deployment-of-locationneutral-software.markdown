---

title: Systems and methods for the demand-driven deployment of location-neutral software
abstract: Techniques for providing and consuming web services, including a service library configured to store one or more web services and a host directory connected to service hosts, configured to store data related to the service hosts. The service hosts are a network and adapted to receive and fulfill deployment requests for the web services stored in the service library by instantiating one or more endpoints of one of the web services. A manager is configured to query the host directory and the service library, generate a deployment plan, and transmit deployment requests to the one or more service hosts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09055026&OS=09055026&RS=09055026
owner: AETHERWORKS LLC
number: 09055026
owner_city: New York
owner_country: US
publication_date: 20120919
---
This application is a continuation of International Patent Application Ser. No. PCT US2012 056018 filed Sep. 19 2012 and claims priority to U.S. Provisional Application Ser. No 61 536 826 filed on Sep. 20 2011 the contents of both of which are hereby incorporated by reference in their entireties herein.

The disclosed subject matter relates to techniques for service oriented computing and more particularly but not by way of limitation to web service architecture.

Service oriented computing SOC promotes the assembly of application components into networks of services that can be loosely coupled to create flexible dynamic business processes and agile applications that span organizations and computing platforms. Service oriented computing has emerged as an approach to evolving tightly coupled component based distributed systems into wider networks of services which can use uniform techniques to address bind to and invoke service operations.

Service oriented computing can provide a way to create new architectures that reflect trends toward autonomy and heterogeneity. Distributed architectures which enable the flexible and loosely coupled processes of service oriented computing can be referred to as service oriented architectures SOAs of which software services are a primary component. The guiding characteristics of SOAs are the interoperation between loosely coupled autonomous services the promotion of code reuse at a macro service level and architectural composability.

SOAs can be composed of three primary entities a provider a consumer and a registry. Providers can publish service locations in a registry consumers can use the registry to locate services to program against and invoke. SOA implementations can specify the language used to describe services provide the means to publish and discover them and dictate the protocols and communication mechanisms used to interact with them. The deployment of software services on the Internet is increasingly achieved using one such set of standards collectively known as web services. 

Web services can be based on platform independent standards for example those developed through the efforts of the W3C working group. These standards can define the protocols message formats and service description language which enable interaction between clients and services on heterogeneous computing platforms across the Internet.

The standards introduced by web services can provide the means to evolve distributed systems from tightly coupled distributed applications into loosely coupled systems of services. The standards can enable interoperation between heterogeneous computing platforms through the exchange of messages using well defined interfaces. By abstracting over implementation and hosting technology the platform independent web service standards can provide a means of homogenizing access to existing heterogeneous services while promoting the development of new services without forcing the adoption of anyone particular implementation or hosting technology. While the web services model has been widely adopted its promise can be undermined by at least two limitations.

First the web service addressing model can be rigid and only suited to highly reliable networked environments with highly reliable hosts. It can fail to take into account the intrinsic dynamism and fallibility of hosts on the Internet and applications which aim to be robust to the failure of hosts can become littered with failure recovery code. Second an over burdened and under specified Service Provider role can lead to the development of proprietary deployment systems and closed world environments where the use of web services is only incidental. Saddled with these two drawbacks the wide adoption of the web services model can result in a landscape of software services that is highly populated by applications which expose web service interfaces but which are largely incompatible in terms of their required deployment systems and hosting environments.

In one aspect of the disclosed subject matter a system for providing web services includes a Service Library configured to store one or more web services. One or more Service Hosts connected to a network are adapted to receive and fulfill deployment and undeployment requests for the web services stored in the Service Library. Fulfilling deployment and undeployment requests can include instantiating one or more endpoints of the web services. A Host Directory connected to the Service Hosts is configured to store data related to the Service Hosts. A Manager is configured to query the Host Directory and the Service Library generate a deployment plan and transmit deployment and undeployment requests to the Service Hosts.

In one embodiment the Service Library can be configured to receive the web services from a Publisher. The Service Hosts can transmit information about usage of the web services to the Manager. The Service Hosts can send the data related to the one or more Service Hosts for example available resources to the Host Directory.

In one embodiment the system can include a discovery service including a directory which can be configured to register and maintain entries of the endpoints corresponding to each Service Host. The directory service can store a mapping between the web services and a corresponding set of endpoints on which the web services are deployed. The directory service can be configured to receive a uniform resource identifier URI request corresponding to one of the web services and request and resolve a URL corresponding to one of the endpoints on which the web service is deployed.

In another aspect of the disclosed subject matter a method for providing web services includes storing one or more web services in a Service Library and storing data related to one or more Service Hosts in a Host Directory. The method includes controlling with a Manager deployment and undeployment of the one or more web services on one or more service endpoints on each of the one or more Service Hosts. Controlling can include querying the Service Library and Host Directory to retrieve information and data about the web services and the Service Hosts generating a deployment plan using the information and data transmitting deployment and undeployment requests to the Service Hosts and instantiating one or more endpoints of the web services in response to the deployment and undeployment requests.

In another aspect of the disclosed subject matter a method for consuming web services includes binding a consumer agent to a point of presence. The point of presence can communicate with a discovery service to resolve a URL corresponding to a service endpoint that corresponds to a desired web service URI. The point of presence can bind to the service endpoint. The discovery service communicates with a Manager which is configured to query a Host Directory and Service Library generate a deployment plan and transmit deployment and undeployment requests to one or more Service Hosts.

Throughout the drawings the same reference numerals and characters unless otherwise stated or indicated by context are used to denote like features elements components or portions of the illustrated embodiments. Moreover while the disclosed subject matter will now be described in detail with reference to the Figures it is done so in connection with the illustrative embodiments which are intended to be non limiting.

As used herein the term actor can refer to an entity responsible for taking an action. For example an actor can include an automated computer program. Alternatively an actor can refer to a computer program with a user interface suitable to be controlled by an operator of the computer.

As used herein the term infrastructure can refer collectively to the described architectural components existing in an operational state independent of any particular implementation.

As used herein the term web service can refer to the deployment of software services over a network. As used herein the term web service is not intended to be limited to the deployment of software services over the internet as one of ordinary skill in the art will appreciate that such services can also be deployed on other networks such as a local area network LAN or the like.

For purposes of illustration and not limitation description will now be made of certain standards for describing Web Service Definition Language WSDL advertising and discovering Universal Description Discovery and Integration UDDI and communicating Simple Object Access Protocol SOAP with web services in connection with the disclosed subject matter. However one of ordinary skill in the art will appreciate that other suitable standards such as Representational State Transfer REST can be used and the following description is not intended to be limiting.

Web services can interact through the exchange of messages using SOAP. SOAP defines a communication protocol for web services which is independent of programming languages and platforms and can be used over a broad range of transport protocols. For example SOAP over HTTP can be used as the reference protocol binding definition for web services.

SOAP messages can include an outer XML element which can be referred to as an envelope which defines the namespace s for the message an optional header element which includes any relevant extensions to the messaging framework and a required body element. The body element can provide a mechanism for transmitting information to an ultimate SOAP receiver but unspecified beyond this role with neither a defined structure or interpretation nor a means to specify any processing to be done.

WSDL is a language for describing web services in XML. The Component Interface Description of a service can be realized as a WSDL document which can includes information required to locate bind to and interact with a web service endpoint. WSDL documents are constructed from XML document elements that describe web service endpoints in terms of their operations the parameters and return values of each operation including type definitions and the protocol and data bindings used for communication.

Requestor agent software can be written against an endpoint s WSDL document for example with automatic code generation tools to generate proxy or stub code in a particular language. These can be stand alone tools such as WSDL to Java for Java as well as IDE based such as in Visual Studio and Eclipse which provide a pluggable framework for generators producing code in Perl C C PHP and others.

Exemplary embodiments of the disclosed subject matter are described below with reference to and for purposes of illustration and not limitation.

In an exemplary embodiment and with reference to a system for providing web services can include a service provider component . The service provider component can be embodied in for example a computer program. The computer program can be stored on a computer readable medium such as a CD ROM DVD Magnetic disk ROM RAM or the like. The instructions of the program can be read into a memory of one or more processors included in one or more computing devices such as for example a server connected to a network or a distributed computer system. When executed the program can instruct the processor to control various components of the computing device. While execution of sequences of instructions in the program causes the processor to perform certain functions described herein hard wired circuitry may be used in place of or in combination with software instructions for implementation of the presently disclosed subject matter. Thus embodiments of the present invention are not limited to any specific combination of hardware and software.

In connection with an exemplary embodiment the service provider component can include for example a Service Library can be configured to store one or more web services. For example the Service Library can be connected to a Publisher which can publish a web service to the Service Library for storage. Service host connected to a network can be adapted to receive and fulfill deployment and undeployment requests for the web services stored in the Service Library . For example fulfilling deployment and undeployment requests can include instantiating one or more endpoints of one of the web services. A Host Directory can be connected to the Service Host and configured to store data related to the one or more Service Hosts . A Manager can be configured to query the Host Directory and the Service Library generate a deployment plan and transmit deployment and undeployment requests to the Service Host .

The Service Host can be configured to transmit information about usage of the web services to the Manager . The Service Hosts can also be configured to send data related to their available resources to the Host Directory .

This exemplary embodiment can reduce complexity for participants in the web service lifecycle by partitioning the responsibility of providing a web service into multiple independent roles reducing the amount of domain specific knowledge required by each actor and lowering the barriers to participation in the provision of web services. For example the tasks of publishing deploying and hosting a web service can be treated as distinct independent activities. Thus for purposes of illustration and not limitation the service provider component can be viewed as three distinct actors Publisher Manager and Service Host . Additionally two architectural entities repositories called the Service Library and Host Directory .

Rather than being deployed explicitly a web service provider agent implementation can instead be described by a Publisher who then publishes it into the infrastructure by storing it in a repository called the Service Library . This approach represents an approach to web service deployment by separating service substantiation from actual realization i.e. the lifecycle of a web service can begin when it is published not when it is deployed.

In order to participate in the infrastructure Service Hosts can register their willingness to host web services by describing their available resources and registering with a directory called the Host Directory . Service Hosts can indicate their available web service deployment containers and specify the list of Publishers whose web service provider agent implementations they are willing to deploy. Service Hosts thus can participate in an infrastructure not by advertising their statically deployed services but by advertising their hosting capabilities joining a shared pool of latent hosting resources which can be dynamically consumed and reclaimed by Managers as necessary to meet changing levels of demand.

Managers can be responsible for managing the provisioning level of a single web service for which there may be zero or more endpoints at any given time . In order to enact deployment Managers can first query the Service Library and Host Directory then create deployment plans by pairing web service implementations with a suitably capable Service Host . Managers can send deployment requests to Service Hosts who then can be responsible for instantiating an endpoint of the web service or denying the request . Service Hosts can provide information about the usage of each web service endpoint deployed within their domain to each web service s Manager . A Manager can use this usage data to make decisions about the necessary level of provisioning of the web service they manage.

In another exemplary embodiment and with reference to a system for providing web services can include a discovery service component . The discovery service component can be embodied in for example and in like manner to the service provider component a computer program executed on a computing device. This computer device can be a physically separate device than that of the service provider component coupled to the service provider component via a network such as the internet. Alternatively the computer device hosting the discovery service component can be the same computer device hosting the service provider component . Notably these computing devices and all others described herein may be implemented within the spirit and scope of the invention as single devices clusters of devices networks or the like.

The discovery service component can include an Active Service Directory . The Active Service Directory can be configured for example to store a mapping between the web services stored in the Service Library and a corresponding set of endpoints on which the web services are deployed.

The Active Service Directory can holds mappings between a single web service and a set of active endpoints of the web service. A central entity in the architecture the collective mappings held in the Active Service Directory can represent the current state of an infrastructure from all participants perspectives. Because all infrastructure participants can rely on the Active Service Directory to locate endpoints of their desired web services this directory can instigate auto deployment procedures for web services that have no currently deployed endpoints.

The Active Service Directory can provide operations to add remove and locate active endpoints of web services. If the Active Service Directory receives a lookup request for the active endpoints of a particular web service but no such entries exist the Active Service Directory can proactively locate and inform the Manager of the requested web service. The Manager can dynamically initiate the deployment of a new endpoint using the previously described deployment procedure. Managers can be responsible for inserting and maintaining all Active Service Directory entries for any newly deployed endpoints of the web service it manages. If for example demand for its web service drops to zero a Manager can decide to undeploy one or all of the deployed endpoints . If an endpoint is undeployed the Manager can remove the endpoint entry from the Active Service Directory ensuring that the directory remains up to date and as accurate a reflection as possible of the current state of the infrastructure.

In another exemplary embodiment and with reference to a system for providing web services can include a service consumer component . The service consumer component can be embodied in for example and in like manner to the service provider component a computer program executed on a computing device. This computer device can be a physically separate device from that of the service provider component coupled to the service provider component via a network such as the internet. Alternatively the computer device hosting the service consumer component can be part of the same computer device hosting the service provider component .

The service consumer component can include a consumer agent and point of presence . The discovery service can be configured for example to receive a URI corresponding to one or more of the web services in the Service Library from the services consumer component and request and resolve a one or more URLs corresponding to endpoints if any of the deployed web service. In connection with certain embodiments multiple implementations of a particular web service can be published to the Service Library each of which corresponds to the same URI. For example a particular web service can be implemented using a number of different languages and or requiring one or more different deployment environments. Each implementation can be stored in the service library and can correspond to the same URI and can implement the same interface such that a call to the any one of the particular implementations may yield the same return. The consumer agent can be bound to the point of presence . The point of presence can communicate with the discovery service and can bind to a service endpoint using the URL. The point of presence can be configured to abstract over a location of the service while preserving the consumer agent s view thereby acting as a gateway for the consumer agent into an instantiation of the web service.

In connection with this exemplary embodiment the disclosed techniques do not require use of URLs to describe web services as URLs may become invalid over time. Web services can instead be identified with a URI abstractly describing a service which at any point in time can have zero or more active endpoints. The Service Consumer component can be relieved from the tasks of locating and binding to web service endpoints through the introduction of a mechanism which performs these tasks on their behalf.

This technique can present a limited mediation framework for the consumption of web services which can transparently resolve a live endpoint URL from the URI contained in an invocation request. This framework can be realized as proxy mechanism residing at the Service Consumer component which can act as a gateway into an instantiation of the architecture a point of presence as described above and depicted in . Consumer agent software can be written to bind to this local point of presence and invoke web service operations using the desired web service s URI. The point of presence can be responsible for transparently resolving a URL from the URI by retrieving a list of active endpoints of the web service from the Active Service Directory selecting an endpoint for use invoking the requested operation on behalf of the Service Consumer and returning any results. It can also be responsible for transparently detecting and recovering from the failure of web services and the Service Hosts on which they are deployed and for proactively recovering from these failures by retrying alternative endpoints according to local policy . Unrecoverable errors can be returned to Service Consumers indicating that given the available resources of the infrastructure it is not currently possible to fulfill the request.

The point of presence can abstract over the location of a service while still preserving the current Service Consumer component s view upon the system. It can simplify the creation of consumer agent applications for example by allowing developers to program against what a web service does not where it is or whether it is currently deployed. Further because it consumes all tasks which require interaction with the Discovery Service the point of presence can provide a layer of abstraction over the particular standards versions used in an infrastructure e.g. UDDI version . This can provide a barrier to obsolescence in the face of evolving standards while enabling consumer agent applications to be portable between environments which use different standards.

In an exemplary embodiment and with reference to a method for providing web services can include storing one or more web services in the Service Library. For example the Service Library can receive published web services from a Publisher. Data related to one or more Service Hosts can be stored in a Host Directory. For example the Host Directory can receive data related to the Service Hosts for example data about available resources and which Publishers a Service Host is willing to host a web service from. A Manager can control deployment and undeployment of the web services on service endpoints on each of the Service Hosts. For example the Manager can query the Service Library and Host Directory to retrieve information about the web services and the data related to the Service Hosts. The Manager can then generate a deployment plan using the information about the web services and the data related to the Service Hosts. The Manager can then transmit deployment and undeployment requests to the Service Hosts. The Service Hosts can then instantiate the web services in response to the deployment requests or uninstantiate the web services in response to an undeployment request. Usage data and other information can be fed back to the Manager from the Service Hosts.

The Manager can send information about the endpoints on which web services are deployed to the Discovery Service including the Active Service Directory. A Service Consumer can send a URI request to the Directory Service for example through a local point of presence. The Discovery Service in connection with the Manager can provide a URL response in response to the URI request and the Service Consumer can bind to the endpoint which hosts a desired web service.

Description will now be made of exemplary interactions between certain components of the system disclosed herein with reference to to for purposes of illustration and not limitation.

In accordance with an embodiment of the disclosed subject matter and with reference to service consumers need not interact directly with web services endpoints. For example a service consumer can bind to and invoke operations upon a local point of presence . The POPs can be co located with the service consumer consumer agent can be written to statically bind to the URI of a web service for example prefixed with the protocol hostname and port of a local URI.

For example invoking operation x of a web service identified by the URI ServiceA is illustrated in . The consumer agent application can bind to and invoke the operation on the POP which then can locate an endpoint of the requested web service. The POP can send a lookup request to the Active Service Directory by invoking a findAll operation with the URI ServiceA as a parameter and can receive back a list of ServicelnstanceDescriptors describing the currently active endpoints and of ServiceA and . The POP can apply local policy to select which endpoint to use before connecting to the endpoint and invoking operation x on behalf of the Service Consumer. The results of the operation can be returned to the POP and finally returned to the consumer agent application.

In accordance with an embodiment of the disclosed subject matter and with reference to a Publisher can be though need not be a service consumer who interacts with the Service Library in order to publish and unpublish an implementation of a web service. As with other service consumers e.g. the Publisher can include a consumer agent and point of presence and need not directly interact with any external web services instead invoking the desired operations via the local point of presence .

For example in order to publish an implementation of a web service described for example with a ServicelmplementationDescriptor Publishers can bind to the local point of presence and invoke the publishServiceImplementation operation of the Service Library with the desired ServicelmplementationDescriptor. Once an implementation has been published it can become immediately available for use able to be deployed onto capable Service Hosts as necessary to meet demand.

In accordance with an embodiment of the disclosed subject matter and with reference to a Service Host can both though need not contribute to the role of service provider and also act as service consumers. As with other service consumers e.g. the Service Host can include a consumer agent and a local point of presence . The Service Host can register itself with the Host Directory by for example describing themselves using a HostDescriptor bind to the local point of presence and invoke the addAuthorizedPublisher operation of the host director . By operating through the local point of presence the Service Host registration process can thus be performed with the same invocation procedures provided by the infrastructure to all Service Consumers. Upon registration a Service Host s HostDescriptor can be added to a shared pool of hosting resources ready to be consumed as necessary to meet demand.

In accordance with an embodiment of the disclosed subject matter and with reference to a point of presence associated with any service consumer can be a transparent endpoint resolution and failure recovery mechanism which can locate bind to and invoke operations upon web services on behalf of the service consumer . For example in order to locate an active instance of a web service the point of presence can interact with a web service called the Active Service Directory invoking either its findOne or findAll operations with the URI of the desired web service as a parameter.

In order to participate in an instantiation of the architecture the local point of presence can have prior knowledge of at least one Active Service Directory endpoint . Any alternative Active Service Directory endpoints can be listed in the Active Service Directory under the web service URI Active Service Directory and can be located using the findOne and findAll operations. The POP can periodically retrieve and store a list of alternative Active Service Directory endpoints to use in the event of failure.

In accordance with an embodiment of the disclosed subject matter and with reference to when the Active Service Directory receives a lookup request for a web service with zero active endpoints it can locate an instance of that web service s Manager so that an endpoint may be deployed. The Active Service Directory can utilize its own lookup facilities by binding to its local point of presence and invoking the Active Service Directory findOne or findAll operation using the URI of the Managing entity responsible for the originally requested web service. This URI can be constructed for example by concatenating Manager URI to the URI of the requested web service in the pattern WebServiceURI ManagerURI. The Active Service Directory can be returned a ServiceInstanceDescriptor describing a web service endpoint which implements the Manager interface.

As a Manager can be responsible for maintaining the directory records of the web service they manage Managers can insert a record of any endpoint they deploy into the Active Service Directory . Managers can perform this operation in band with for example the requestFirstInstance invocation returning true if the entire deployment and registration process completed successfully or false otherwise. The requestFirstInstance operation returning false can indicate that given the current state of the system it is not possible to deploy a new instance of the web service. This situation can represent an unrecoverable error which can be returned to the requesting entity i.e. the Service Consumer . If the operation returns true the Active Service Directory can re perform the originally requested lookup operation and return the newly inserted ServiceInstanceDescriptor to the requesting entity.

In accordance with an embodiment of the disclosed subject matter and with reference to the Manager can communicate with various components including the Service Library Host Directory one or more Service Hosts and the Active Service Directory in accordance with the exemplary and non limiting description that follows. For example with reference to Managers can invoke the operations of the Service Library in order to retrieve a set of implementations of the web service being deployed. These implementations can each be described with a ServicelmplementationDescriptor the elements of this descriptor can be used later by the Manager in order to select a suitable candidate implementation for deployment.

In like manner with reference to Managers can invoke the operations of the Host Directory during the deployment process. Managers can use the Host Directory to retrieve a set of HostDescriptors identifying Service Hosts willing to deploy web service implementations published by the indicated Publisher identified for example with a unique PublisherID . Managers can compare the ServiceImplementationDescriptors retrieved from the Service Library with the HostDescriptors retrieved from the Host Directory in order to craft suitable candidate deployment plans based on local policy. Once a plan is selected the Manager can contact the selected Service Host and initiate the deployment process.

With reference to after selecting a suitable web service implementation described with a ServicelmplementationDescriptor for deployment on a selected Service Host described with a HostDescriptor a Manager can bind to the Service Host included in the HostDescriptor and can invoke the deploy operation directly. Upon successful deployment the Service Host can return the Manager a ServiceInstanceDescriptor describing the newly deployed web service endpoint. The Manager can then register this ServiceInstanceDescriptor in the Active Service Directory completing the deployment process.

Conversely with reference to for each web service endpoint deployed within their domain e.g. the containers under their control a Service Host can report usage data to that web service s managing entity. The Service Host can bind to the local point of presence and can invoke the reportUsageData operation of the web service identified by the concatenation of a Manager URI to the URI of the web service for which data is being reported e.g. WebServiceURI ManagerURI . The reportUsageData operation can return a numerical value indicating the length of time the Service Host should wait before next reporting usage data for this particular web service. A Service Host s local policy can dictate that usage data be returned earlier than requested e.g. due to local resource constraints such as working memory returning data significantly later than the requested period can indicate to the Manager that there is a problem with the Service Host information which a Manager can act upon in order to effectively manage the availability of its service.

With reference to when a Manager of a web service successfully deploys or undeploys endpoints of that web service it can add or remove the endpoint reference in the Active Service Directory . Managers can bind to the local point of presence and invoke the addActiveService or removeActiveService operation of the Active Service Directory web service using the relevant ServiceInstanceDescriptor.

For example Managers can be responsible for maintaining the Active Service Directory entries of the web service they manage. Of all entities fulfilling the responsibilities of the Service Provider Managers can be deemed to be most interested in maintaining an accurate public record of the web service they each manage as it provides them with accurate usage data from which they may make more informed decisions in the fulfillment of their responsibility to manage the provisioning level of a web service.

The present application is further described by means of an example presented below. The use of such example is illustrative only and in no way limits the scope and meaning of the invention or of any exemplified term. Likewise this application is not limited to any particular preferred embodiments described herein. Indeed many modifications and variations of the invention will be apparent to those skilled in the art upon reading this specification. The invention is to be understood by the terms of the appended claims along with the full scope of equivalents to which the claims are entitled.

In this example and with reference to and procedures are described using the previously described exemplary component interactions as single steps for endpoint deployment service invocation and demand driven dynamic deployment for the provision and invocation of a web service referred to as DayTime. 

The deployment of a new web service endpoint can be carried out by a Manager as in . The Manager can interact with the Service Library Host Directory one or more Service Hosts and the Active Service Directory in order to make a new DayTime web service endpoint available for use.

For purposes of illustration and not limitation in order to deploy a new web service endpoint a Manager can first create and select a valid deployment plan the deployment plan comprising for example a ServicelmplementationDescriptor whose requirements are matched by the capabilities described in a HostDescriptor . The Manager can begin by contacting the Service Library and retrieving the set of all published implementations of the DayTime web service. Each implementation returned can be described with a ServiceImplementationDescriptor each of which can have a PublisherID element . For each implementation the Manager can contact the Host Directory using the PublisherID and retrieve the set of Service Hosts willing to deploy provider agent applications written by the specified Publisher. The Manager then can create a set of valid deployment plans and select one from amongst the candidates based on local policy. Next the Manager can execute the deployment plan contacting the Service Host described by the selected HostDescriptor and invoking its deploy operation with the selected ServiceImplementationDescriptor . Upon successful deployment the target Service Host can return the Manager a ServiceInstanceDescriptor describing the endpoint . The Manager can complete deployment by inserting the ServiceInstanceDescriptor into the Active Service Directory . Once the newly deployed endpoint is listed in the Active Service Directory it can be deemed to be deployed ready to be located and its operations invoked by Service Consumers.

With reference to service invocation by service consumers can include binding and invoking web service operations on a local point of presence . Once an invocation request is received the local point of presence can be responsible for locating an active endpoint of the target web service and invoking the requested operation on behalf of the Service Consumer for example the getTime operation of the DayTime web service .

Upon receiving an invocation request from a consumer agent application the local point of presence can first extract the desired web service URI from the incoming request. If the point of presence implements an endpoint cache it can first check locally for a previously retrieved list of endpoints. If no such entries exist a new list can be retrieved using the Active Service Directory . Once a list of endpoints is retrieved the point of presence can select one for use according to local selection policy. The point of presence can then prepare the invocation request including possible modifications to the message bind to the selected web service endpoint and forward the invocation request. If the invocation fails for any reason the same procedure can be attempted for the remainder of the active endpoints and if all endpoints prove unavailable a generic error can be returned to the Service Consumer . If the invocation is successful the resulting response can be first prepared again possibly involving modification to the message before being returned to the Service Consumer and concluding the invocation process.

With reference to in a dynamic demand driven system endpoint deployment can occur in response to an existing or anticipated event including for example the invocation of an operation of a web service for which there are currently no active endpoints. In such a circumstance the subject matter disclosed above with reference to and can be performed. For example When the Active Service Directory receives a request for all endpoints of the DayTime web service it can find that there are none currently deployed. In this manner the Active Service Directory can initiate though not necessarily enact the deployment of the first instance of the requested web service by contacting that web service s Manager and invoking the requestFirstInstance operation. At this point the deployment process can be executed as described above when the Manager returns from the requestFirstInstance operation the Active Service Directory can re perform the lookup and return either a reference to the newly deployed endpoint or an error indicating that given the currently available resources in the infrastructure it is not possible to fulfill the request at the given time.

As described herein the Manager for a web service need not be currently deployed in order for that web service to be deployable. If implemented as a web service and with generic and or custom service specific Manager implementations published in the Service Library the same deployment mechanisms can be used to deploy and manage a web service s Manager as those Managers use to manage their particular web service. This recursive collapsible model can enable an infrastructure to be wound up to provide enough web service endpoints to meet demand and then wound down to a state of zero resource consumption when demand falls to zero.

As described above in connection with certain embodiments certain components e.g. and can include a computer or computers processor network mobile device cluster or other hardware to perform various functions. Moreover certain elements of the disclosed subject matter can be embodied in computer readable code which can be stored on computer readable media and when executed cause a processor to perform certain functions. In these embodiments the computer plays a significant role in permitting the system and method for providing and or consuming web services to provide such services over a network e.g. the internet. For example the presence of the computer processor memory storage and networking hardware provides the ability to deploy consume and manage a web service environment and dynamically apply and reclaim resources based upon measured consumer demand.

Additionally as described above in connection with certain embodiments certain components can communicate with certain other components for example via a network e.g. the internet. To the extent not expressly stated above the disclosed subject matter is intended to encompass both sides of each transaction including transmitting and receiving. One of ordinary skill in the art will readily understand that with regard to the features described above if one component transmits sends or otherwise makes available to another component the other component will receive or acquire whether expressly stated or not.

The presently disclosed subject matter is not to be limited in scope by the specific embodiments herein. Indeed various modifications of the disclosed subject matter in addition to those described herein will become apparent to those skilled in the art from the foregoing description and the accompanying figures. Such modifications are intended to fall within the scope of the appended claims.

