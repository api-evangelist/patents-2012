---

title: Intelligent mediation of messages in a healthcare product integration platform
abstract: An example method to mediate messages in a product integration platform includes receiving a message request from a source healthcare system where the message request contains a message payload. The example method includes determining an interface to be used to route the message to a target healthcare system. The example method includes creating a platform message based on the message request. The example method includes adapting the platform message into a message format expected by the interface and routing the platform message to the interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183064&OS=09183064&RS=09183064
owner: General Electric Company
number: 09183064
owner_city: Schenectady
owner_country: US
publication_date: 20120217
---
This patent claims priority to Indian Patent Application No. 4660 CHE 2011 filed Dec. 30 2011 which is hereby incorporated by reference herein in its entirety.

Healthcare environments such as hospitals or clinics include information products and or systems. Healthcare information systems may include for example hospital information systems HIS radiology information systems RIS clinical information systems CIS and cardiovascular information systems CVIS and storage systems such as picture archiving and communication systems PACS library information systems LIS and electronic medical records EMR . Information stored may include patient medication orders medical histories imaging data test results diagnosis information management information and or scheduling information for example.

Often times these healthcare information systems will be required to communicate to provide higher quality healthcare services with increased efficiency. However many healthcare information systems operate using various message exchange standards and or protocols that may make system integration and or communication more difficult.

Certain examples provide methods systems and tangible computer readable media to mediate messages in a product integration platform. An example method to mediate messages in a product integration platform includes receiving a message request from a source healthcare system where the message request contains a message payload. The example method includes determining an interface to be used to route the message to a target healthcare system. The example method includes creating a platform message based on the message request. The example method includes adapting the platform message into a message format expected by the interface and routing the platform message to the interface.

Another example method to mediate messages in a product integration platform includes receiving a request message from an integration platform where the request message being received is in a canonical data format. The example method includes denormalizing the request message into an interface request message format. The interface request message format corresponds to a message format implemented by an interface. The example method includes translating the request message from the interface request message format into a target healthcare system format and sending the request message to the target healthcare system. The target healthcare system format corresponds to a message format implemented by a target healthcare system and the interface is associated with the target healthcare system.

An example method to provision an interface for mediation of messages in a product integration platform includes identifying a target healthcare system wherein the target healthcare system is a destination for message routing. The example method includes identifying configuration rules and protocol requirements for the target healthcare system. The example method includes defining a configuration for the interface associated with the target healthcare system and constructing the target healthcare system interface route. The example method includes creating an interface factory to return implementations of an interface route and configuration. The example method includes passing the interface factory content to an interface control channel and loading concrete implementations of the interface route and configuration. The example method includes initializing the interface route and instantiating interface endpoints and processors to enable communication via the interface route.

An example system to mediate messages in a product integration platform includes a message acquirer. The example message acquirer receives a message request from a source healthcare system where the message request contains a message payload. The example message acquirer determines an interface to be used to route the message to a target healthcare system. The example system includes a message normalizer to create a platform message based on the message request and to adapt the platform message into a message format expected by the interface. The example system includes a message router to route the platform message to the interface.

Another example system to mediate messages in a product integration platform includes a message normalizer. The example message normalizer receives a request message from an integration platform where the request message being received is in a canonical data format. The example message normalizer denormalizes the request message into an interface request message format. The interface request message format corresponds to a message format implemented by an interface. The example system includes a message translator to translate the request message from the interface request message format into a target healthcare system format and to send the request message to the target healthcare system. The target healthcare system format corresponds to a message format implemented by a target healthcare system and the interface is associated with the target healthcare system.

An example system to provision an interface for mediation of messages in a product integration platform includes an integration platform. The example integration platform identifies a target healthcare system wherein the target healthcare system is a destination for message routing and identifies configuration rules and protocol requirements for the target healthcare system. The example system includes an interface to define a configuration for the interface associated with the target healthcare system and to construct the target healthcare system interface route. The example interface creates an interface factory to return implementations of an interface route and configuration and passes the interface factory content to an interface control channel. The example interface loads concrete implementations of the interface route and configuration initializes the interface route and instantiates interface endpoints and processors to enable communication via the interface route.

An example tangible computer readable storage medium comprises instructions that when executed cause a computing device to receive a message request from a source healthcare system where the message request contains a message payload. The example instructions cause the computing device to determine an interface to be used to route the message to a target healthcare system. The example instructions cause the computing device to create a platform message based on the message request. The example instructions cause the computing device to adapt the platform message into a message format expected by the interface and to route the platform message to the interface.

An example tangible computer readable storage medium comprises instructions that when executed cause a computing device to receive a request message from an integration platform where the request message being received is in a canonical data format. The example instructions cause the computing device to denormalize the request message into an interface request message format. The interface request message format corresponds to a message format implemented by an interface. The example instructions cause the computing device to translate the request message from the interface request message format into a target healthcare system format and to send the request message to the target healthcare system. The target healthcare system format corresponds to a message format implemented by a target healthcare system and the interface is associated with the target healthcare system.

An example tangible computer readable storage medium comprises instructions that when executed cause a computing device to identify a target healthcare system wherein the target healthcare system is a destination for message routing. The example instructions cause the computing device to identify configuration rules and protocol requirements for the target healthcare system and to define a configuration for the interface associated with the target healthcare system. The example instructions cause the computing device to construct the target healthcare system interface route and to create an interface factory to return implementations of an interface route and configuration. The example instructions cause the computing device to pass the interface factory content to an interface control channel and to load concrete implementations of the interface route and configuration. The example instructions cause the computing device to initialize the interface route and instantiate interface endpoints and processors to enable communication via the interface route.

The foregoing summary as well as the following detailed description of certain examples of the present invention will be better understood when read in conjunction with the appended drawings. For the purpose of illustrating the invention certain examples are shown in the drawings. It should be understood however that the present invention is not limited to the arrangements and instrumentality shown in the attached drawings.

Although the following discloses example methods systems and tangible computer readable media including among other components software executed on hardware it should be noted that such methods and apparatus are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in any combination of hardware software and or firmware. Accordingly while the following describes example methods systems and tangible computer readable media the examples provided are not the only way to implement such methods systems and tangible computer readable media.

When any of the appended claims are read to cover a purely software and or firmware implementation in an embodiment at least one of the elements is hereby expressly defined to include a tangible medium. As used herein the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively the example methods systems and tangible computer readable media may be implemented using coded instructions e.g. computer readable instructions stored on a non transitory computer readable medium such as a flash memory a read only memory ROM a random access memory RAM a cache or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals.

In a healthcare environment a variety of healthcare information products and or systems are used to provide medical services collect medical data conduct medical exams etc. Such products and or systems include for example Centricity Enterprise Centricity Electronic Medical Record Centricity Business Centricity Perinatal Centricity Perioperative Anesthesia Centricity Advance etc. offered by GE Healthcare . Often these healthcare information systems will be required to communicate to provide higher quality healthcare services with increased efficiency. However many healthcare information systems operate using various message exchange standards e.g. Health Level Seven International HL7 v2.x v3 Clinical Document Architecture Continuity of Care Document CDA CCD American Society for Testing and Materials ASTM Digital Imaging and Communications in Medicine DICOM etc. and various standards and or protocols e.g. Cross Enterprise Document Sharing XDS.a b Cross Enterprise Document Media Interchange XDM Cross Enterprise Document Reliable Interchange XDR Patient Identifier Cross Referencing Patient Demographics Query PIX PDQ Patient Administration Management PAM Query for Existing Data QED National Council for Prescription Drug Programs NCPDP etc. that make system integration and or communication more difficult. Some products for example Open eHealth Integration Framework IPF provide advanced tooling simplified development data models and componentized implementations of various health exchange standards and protocols. However IPF for example requires that each healthcare product and or system embed an IPF integration solution within itself to be shared across various products and or systems. Such product embeddable shared solutions require versioning and maintenance that decrease the utility of such solutions.

Therefore it is desirable to create a product integration strategy that would operate consistently across many healthcare information products and or systems. In some examples a product integration strategy is built on top of a platform that supports inter connectivity between various healthcare information products and or systems. In some examples the product integration strategy enables new products and or systems to deploy on the platform to allow new products to interoperate with existing inter connected products and or systems. In such examples new products and or system may be added by the product integration strategy in a seamless plug and play manner to reduce the time and effort involved in creating customized integration solutions.

In some examples the platform provides intelligent mediation and routing between healthcare systems by provisioning communication channels for message and or data exchange. A healthcare system may send a contract based message to the platform and the platform intelligently identifies an interface for a target healthcare system e.g. the destination of the message . The platform creates an internal canonical data message to be routed to the interface. The interface translates the internal canonical message to the target healthcare system format. The target healthcare system may send a response to the interface and the response is translated and routed back to the source healthcare system through the platform. The platform performs various transformations on the internal canonical message to facilitate efficient intelligent and predictive content based routing between the various healthcare systems.

Generally the platform will derive its intelligence from configuration information contained within each interface. Configuration information includes contractual input and or output format types rules for message enrichment such as callback services query and or search criteria for callback actions business level rules to govern message routing message filtering criteria etc. Interface configuration may be implemented using for example Extensible Markup Language XML syntax and or custom expressions based syntax unique to each interface.

In the example of two healthcare systems are shown the source healthcare system and the target healthcare system . However any number of healthcare information products and or systems may operate in the system and exchange information using the product integrator . For ease of description in the illustrated example the healthcare system is referred to as the source system e.g. the source of the information being sent and the healthcare system is referred to as the target system e.g. the destination of the information sent from the source . However both healthcare systems and may operate to send and or receive messages using the product integrator .

The source healthcare system of the illustrated example is used to construct and publish message s and or message request s to the product integrator . The source healthcare system may include a channel adapter and or a service layer to execute the construction and or publishing of message s . Messages are created and or published using contractually defined request and or response types that may be for example represented by XSD complex schema types. The source healthcare system may communicate using a variety of protocols for example HL7 Simple Object Access Protocol SOAP XML Hypertext Transfer Protocol HTTP Representational State Transfer REST Common Object Request Broker Architecture CORBA etc. The source healthcare system may utilize a variety of transports for example Transmission Control Protocol TCP Multipurpose Infrastructure for Network Applications MINA HTTP Java Message Service JMS Java Business Integration JBI etc.

The product integrator of the illustrated example acquires message s published and or sent from the source healthcare system . The product integrator normalizes e.g. transforms and or translates messages received from the source healthcare system into a canonical data model with associated metadata. The canonical data model provides a standard format for messages. The product integrator may also enrich the canonized messages with content from for example external data sources. The product integrator translates the canonized messages into a target message format and mediates the translated messages to the target healthcare system .

The target healthcare system of the illustrated example receives messages from the product integrator and generates response messages. The target healthcare system passes the response messages back to the product integrator to be mediated to the source healthcare system . The target healthcare system may be represented by for example a Document Registry and Repository DRR and may implement interactions such as Provide and Register Document Set Integrating the Healthcare Enterprise IHE Transaction ITI 41 Registry Stored Query IHE Transaction ITI 18 and Retrieve Document Set IHE Transaction ITI 43 . Open eHealth Integration Framework IPF provides components such as xds iti41 xds iti18 and xds iti43 that wrap the IHE transaction endpoints of the DRR and provides a consistent way of rendering the appropriate profile XDS.b in raw ebXML for consumption by the DRR system s endpoint. The target healthcare system e.g. the DRR performs appropriate IHE transactions and sends a response to the product integrator .

In general an integration platform is logically abstracted into three tiers message acquisition message normalization and or enrichment and message mediation and or routing. Interfaces are pluggable interface components that complement the integration platform as each interface is a logical unit that encapsulates a messaging workflow of each associated healthcare system that is to connect to the product integrator . The interfaces are logically and physically distinguished from the integration platform that performs platform functions such as authentication secured data acquisition interfaces discovery message canonicalization message content enrichment message filtering message mediation content based routing error management and or message replay. The interfaces are each associated with one healthcare system that is connected to the product integrator and each interface is tailored to suit the message processing and or protocol translation specific for the associated healthcare system .

The product integrator may be built upon the Apache Camel open source integration framework and routing mediation engine. Camel s routing engine defines routes as message processing pipelines encapsulating message flows and intermediary processing between endpoints. Routes are developed and configured with combinations of Enterprise Integration Patterns EIPs to implement mediation and routing rules with Java based DSL and wired within Spring dependency injection application context files. Processors are used to transform and manipulate messages during routing and to implement EIP patterns. In general Camel routes comprise endpoints processors and beans wired together to work in a cohesive manner driving an integration workflow.

To enable message exchange on the product integrator bus a service layer of the healthcare system implements a channel adapter to construct and publish messages for consumption by an interface endpoint service fronted by the integration platform . This service adheres to contractually defined request and or response types which are typically represented by XSD complex schema types. The integration platform implements a variety of protocols such as HL7 SOAP XML HTTP REST and or CORBA utilizes a variety of transports such as TCP MNA HTTP JMS and or JBI. The platform message acquisition channel and or gateway is modeled closely along the lines of the message channel enterprise integration pattern where essentially a source application e.g. the healthcare systems sends command messages to the channel that acts as a fa ade to the integration platform . The message is normalized into a canonical data model with associated metadata enriched with content from external data sources and mediated across the logical tiers of the integration platform to be routed to an interface message channel. The platform message acquisition channel is a coarse grained service that performs secured message acquisition from client sources e.g. the healthcare systems and passes messages to further distributed processing eventually routing the messages which have been canonized into a standard format to the interface channel. The interface message channel service is fine grained and intelligently structured to suit the logical and or message protocols of its associated healthcare system that is the final destination for the messages. The product integrator enables a common shared governance model representative of the interconnected product landscape to provide for consistent system initialization and interface provisioning.

Each interface is deployed e.g. loaded with three general logical components an interface route an interface configuration and an interface factory. A message endpoint is defined within the interface route which is tailored specifically for the workflow needs of the interface encapsulating the message processing and or protocol translation necessary for invocation of the associated target healthcare system . The interface configuration consists of pre defined message contracts. The message contracts define what the interface expects to receive in terms of message content and the message it expects to send back in response after invocation of the associated target healthcare system . The interface factory is a logical component of the interface that contains and or returns concrete instances of the interface route and interface configuration.

In some examples the interface configuration is loaded from an interface properties file structured in XML that consists of among other elements a message handler implemented as a parameterized class that defines request and or response message object types. The interfaces are designed as self contained units to be pluggable onto the integration platform . Thus the configuration of each interface contains in addition to defined message contracts any information that is required to support the message processing and or protocol translation specific for the associated target healthcare system to which the interface is a fa ade. The information could include for example the target healthcare system endpoint uniform resource locator URL a listing of callback services that are required to enrich an original message sent to the product integrator a query or search criteria for a callback a callback service URL message filtering criteria and or other business rule definitions specific for the target healthcare system that are applied to messages. In some examples configuration information is defined within an XML file and loaded at the start of the system .

In addition to the message acquisition channel the integration platform provides an additional interfaces control channel. A platform manager component listens on this channel for interfaces to be provisioned. At provisioning time each interface sends a special message to the integration platform on this control channel announcing its presence which is published to an interfaces registry . In some examples each interface sends the interface factory resource classpath to be published to the interfaces registry . The interfaces registry may be stored within Azure Blob storage services to be shared across servers during deployment. During startup of the system the interfaces registry is read by the platform manager and the concrete instances of the interface route and interface configuration classes are loaded from the interface factory. The interface configuration is loaded and the interface route is booted up and the endpoints are instantiated. Business level rules applicable to the interface implementation that govern the routing of messages are populated into an interface rule base that may be implemented using Structured Query Language SQL Azure . At startup of the system in addition to reading configuration settings that control behavior of the interfaces and booting the interface routes the platform manager also boots all the intermediate platform Camel routes involved in message processing and or routing.

The message acquisition channel of the integration platform may be provisioned either via a secured Web Site WS endpoint e.g. using Camel s cxf component or a RESTful endpoint e.g. using Camel s cxfrs component with a configured endpoint interface and or message contract declaratively configured within a Camel route wired with other intermediary endpoints and processors. In some examples the message acquisition channel could also be available via a TCP e.g. MINA endpoint that could be configured to receive HL7 v2.x messages. A collection list of request messages which may include appropriate security credentials are sent to the message channel of the integration platform . Each request message consists of a handle string and a wrapped message string encapsulating the message payload content in XML format. The platform message acquisition channel may receive a collection list of multiple request messages where each request message is routed to a different interface endpoint e.g. each message in the list is sent to a different healthcare system . In some examples the collection of request messages are routed to the same interface endpoint but contain varying message payloads representing different patient data. The request message object may be Java Architecture for XML Binding JAXB annotated to ensure that the channel s underlying JAX WS Java API for XML Web Services or JAX RS Java API for RESTful Web Services protocol and logical interceptors successfully unmarshall the Web service request that is sent across. In case of a TCP request that encapsulates an HL7 v2.x message a custom unmarshaller may be used to parse the HL7 message s observation segment OBX to obtain an individual request message. In such examples several OBX segments on the HL7 message would emulate the collection list of multiple request messages.

A processor in the platform message acquisition channel route of the integration platform uses the handle string passed within the body of the request message to look up an appropriate message handler that is configured within a mapping resource. In some examples this handler is configured within an XML configuration file that maps the handle contained in the request message originally passed in and the JAXB context path of the message handler implementation. The handler in some examples implemented as a parameterized class deployed in the interface classloader space provides the plumbing for defining the expected request message payload and response message payload types. The expected request message payload object as enforced by the message handler may be JAXB annotated containing several optional elements representing message types that could further enrich the original message payload passed in. This enriching of the original payload content happens via a callback mechanism to the source system s service layer or multiple other partner systems e.g. other healthcare systems . Processing infrastructure exists that performs the unmarshalling of the request message payload and marshalling of the response message payload using the appropriate message handler for the interface . Marshalling and or unmarshalling generally refers to the conversion of a data object to a data format suitable for storage and or transmission. Such marshalling and or unmarshalling may perform such conversions according to an appropriate network transfer protocol. A transformation processor defined on the channel route of the integration platform uses a singleton factory object to load the XML handle message handler mapping file into a collection map of handler objects which it then queries with the handle string to obtain the appropriate JAXB context path of the request handler class which is used to unmarshall the message string contained within the body of the request message. In some examples the message string is unmarshalled into a transient instance of a message object that is encapsulated within the request message.

Once the message string encapsulated within each individual request message has been successfully unmarshalled the first stage of the message acquisition process is concluded. In the next stage of acquisition the list of request messages are split into individual request messages. Such splitting may be implemented using the Splitter EIP. In some examples this splitting is implemented using Camel s split DSL. Each individual request message is routed to a message dispatcher infrastructure to be eventually mediated for interface route invocation. Splitter EIP operates in conjunction with an Aggregator EIP so that that individual responses coming back for each request message sent out will be re combined by an aggregation and or orchestration strategy. Therefore essentially the messages are split individual request messages are sent to a message dispatcher which routes individual messages to the appropriate interface routes. The Aggregator EIP implemented within a Camel processor receives the response messages and based upon correlation identifications and or completion conditions identifies messages that are related. In some examples a customized implementation of Camel s AggregationStrategy is used to determine how to combine all related messages into a single response message that is then sent back to source healthcare system .

The message mediation process commences with a message dispatcher component serving as an initiator of synchronous message processing to the interface route and handling of response messages. The dispatcher queries along with the message handler obtained for each request message for the associated interface e.g. the interface that is interested in receiving the message . In some examples the dispatcher searches the deployed interface configurations e.g. configurations that were initially loaded at system start up by the platform manager to match the message handler specified by the request message with the one configured on the interface . This scan and subsequent association match with a deployed interface is referred to as the discovery of the interface.

Once the interface has been found e.g. discovered for that request message a message translator processor normalizes the unmarshalled message payload into a canonical data model referred to herein as a platform message that acts as the container for the message payload along with interface associated metadata. The platform message is a container of any data that the interface expects via its pre defined contract exposed via the message handler infrastructure and contains metadata elements that enable content based routing of the message to subsequent downstream endpoints and processors. The platform message is serializable and a metadata element identifies the associated e.g. discovered interface to which the platform message is to be routed. The message translator adds a metadata recipient element that represents the discovered interface to enable the message to be routed based on content by a downstream processor.

In some examples the message data model supports multiple collections of message payload objects ordered within a map of wrapped Java objects. This is important if the platform message is to be enriched via callbacks to various other data sources such as the source healthcare system s service layer and or multiple partner systems. Newly retrieved message payloads would be appended to the initial map. This provides an additional level of abstraction above individual message formats and allows multiple messages to be combined into a single instance of a platform message to be hopped to the interface endpoint. The formats of the message s appended in the enriched platform message may not correspond to what the interface channel expects as specified by the interface configuration and enforced by the interface message handler implementation. Therefore an interface channel adapter may adapt the platform message containing the enriched multiple message payload s into the message payload that the interface expects.

The integration platform enforces the requirement that all request message object payloads be translated to the platform message canonical data format. The platform message format is also used when returning response messages. A similar de normalizer processor is used on the returning platform message to unwrap the response message payload and cast it back into the expected response message type as defined by the message handler for that request message.

A content based router examines the message content e.g. the metadata element on the platform message that contains the interface endpoint and routes the message to the appropriate message processor channel based upon that data. Every interface endpoint in the product integrator essentially gets a dedicated message processor channel. In some examples the message processor channels are implemented either via Camel s jms or direct component. In some examples the content based router self configures based on the rules stored in the rule base that were created from the interface configuration that lists conditional preferences for each participating interface . When a message arrives the content based router evaluates all rules and routes the message to the recipient whose rules are fulfilled and or routes the message based on message content in the metadata element of the platform message. This allows for efficient predictive routing for the content based router to potential interface recipient s based on business rules and not solely dependent on message content alone.

It is common for the target healthcare system to request and or require additional information that the source healthcare system may not provide. For example the source healthcare system may be an enterprise EMR system and the target healthcare system may be a Document Repository and the interactions between the two systems may primarily involve discrete healthcare data exchange built around an IHE ecosystem. Such interactions may primarily consist of exchanging CCD Continuity of Care documents wrapped within XDS Cross Enterprise Document Sharing profiles with an XDS document registry required for indexing documents in a Health Information Exchange and an XDS Document repository for the actual storage of the clinical documents. The source healthcare system is not expected to pass in the actual CCD document but rather it passes in a source Patient Identifier which the product integrator utilizes to construct a callback service request into the source healthcare system s service layer that extracts the CCD from a local database repository. The response from the service layer call is then aggregated into the platform message thereby enriching it with additional information. In some examples the callback service is declaratively configured along with the query search criteria within the interface configuration and an AbstractFactory JEE pattern is used at a content enricher processor to instantiate and construct these callback service requests. Each callback service request is a stateless standalone Web service request to the source healthcare system s service layer . Several such callback service requests could be constructed with the callback destination not necessarily only tied to the source healthcare system s service layer but rather by wiring together external distributed partner services that leverage existing enterprise or cross enterprise assets. In some examples a stateful process manager implementation e.g. using Business Process Execution Language WS BPEL is used to maintain the sequence and orchestrate the execution of multiple cohesive services that are capable of being re used through composition.

In addition a message filter may be used to eliminate unwanted messages from the channel. For example an enterprise EMR system may send physician orders information to a business revenue cycle management system. A certain order type may be deemed unnecessary and likewise declaratively configured within the interface configuration. A processor applies the filtering criteria specified by the interface configuration to the message content and discards the message if it does match.

The routing of the canonical platform message happens as a result of a sequence of hops from the message processor channel to the interface message endpoint. The interface route is tailored specifically for the workflow needs of that interface that encapsulates the message processing and protocol translation necessary for invocation of the target healthcare system . The interface message channel gets the platform message adapted from the message object payload that was initially passed in from the source healthcare system enriched along the way by callback s into the source system and or additional external partner services or systems. The interface service is more fine grained and since the interface configuration is where the message contracts are defined the first and foremost task is for the interface to validate via its configuration the message payload passed within the platform message with what that interface expects. The interface route is intelligently structured to translate the validated message payload into the protocol format that the target healthcare system expects.

In some examples the interface route is built using components of the Open eHealth Integration Framework IPF which provides an extension to Apache Camel s mediation routing engine. IPF provides a programming layer that allows for construction of routes based on the Groovy programming language and comes with comprehensive support for message processing and connecting systems in the eHealth domain. IPF augments Camel by providing domain specific languages DSLs for Enterprise Integration Pattern EIP implementations in healthcare integration scenarios. An example of a healthcare integration scenario includes the implementation of interfaces for transactions specified in IHE profiles such as XDS.a b XDM XDR PIX PAM and PDQ or for HL7 v2.x v3.x message processing. IPF also provides DSL support in regards to constructing parsing validating transforming and or rendering Clinical Document Architecture CDA standard documents to enable electronic processing for clinical document exchange and decision support.

An interface message translator receives the message payload and may receive additional information from the interface configuration file that may be necessary to construct the target healthcare system request which may be done using an IPF based Transmogrifier implementation. The Transmogrifier is an IPF provided interface used to translate one internal data structure to another and is converted into a Camel processor behind the scenes during execution. The Transmogrifier is implemented as a parameterized class in the manner of Transmogrifier where S is the source message format and T is the target message format. In some examples the target healthcare system request format is defined by an IPF abstracted model for ebXML representation of IHE transactions such as ITI 18 ITI 41 ITI 43 etc. and requires information from the CDA document that is passed along with the request message payload. The parsing validating and or extracting information from the CDA document in the midst of constructing the target system request is done within the Transmogrifier.

Once the request is created it is sent to a target healthcare system endpoint fronted by the interface . In some examples the target healthcare system is represented by a Document Registry and Repository DRR with the interactions happening around Provide and Register Document Set IHE Transaction ITI 41 Registry Stored Query IHE Transaction ITI 18 and Retrieve Document Set IHE Transaction ITI 43 . IPF provides components such as xds iti41 xds iti18 and xds iti43 that wrapper the fore mentioned IHE transaction endpoints of the DRR and provides a consistent way of rendering the appropriate profile e.g. XDS.b in raw ebXML for consumption by the DRR system s endpoint . The target healthcare system represented by the DRR in this example performs the appropriate IHE transaction and sends back the response to the interface route. The response from the interface route containing either an interface service reply or a fault is then translated into the message response that the interface message handler contract specifies. The message is re normalized and piggy backed upon a platform message instance to the calling processor e.g. a message dispatcher . The message dispatcher that is the initiator of the synchronous message invocation uses the message handler instance passed onto it to unwrap the platform message and cast the response back to the expected response type. The response messages are then aggregated and marshalled for response back to the source healthcare system .

In some examples an amalgamated interface could be created that represents a fusion between the functionality of several individual interfaces . Since each interface is defined with a contract that provides for loose coupling between individual invocations an amalgamated interface contract is created by combining the contract of several individual interfaces . The amalgamated interface is deployed as a standard interface with the requisite interface route representing the fused interface workflow an interface configuration consisting of a message handler that defines the new fused contract and an interface factory. For example the source healthcare system triggers request messages to be sent to the amalgamated interface routed via the integration platform . The interface endpoint gets the platform message containing the fused message payload that it expects. Portions of the message payload are extracted within a processor in the interface route and utilized to construct a series of request messages that could sequentially and or via a multicast be routed to other interfaces. The routing of the request message happens via the integration platform but the message acquisition channel of the integration platform may be bypassed and the message may go directly to the message dispatcher component. Response s from the individual interfaces are then re combined into the amalgamated interface response and send back to the source healthcare system . In some examples the response from an interface may be utilized to construct a new request message that is then sent to another interface. A typical example involves utilizing the result of a PIX v3 Query interface encapsulating a Patient Identifier Cross Reference Query workflow embodied within IHE Transaction ITI 45 in creating the request for an XDS Provide and Register Document Set interface embodied within IHE Transaction ITI 41 .

For better administration and trouble shooting of inbound and outbound messages that are routed within the product integrator a platform manager along the lines of a control bus EIP may be used for management of components involved in the message flow. The platform manager is a visualization and trouble shooting dashboard that allows for viewing all messages that have passed through the integration platform including the messages that failed to be passed to the interface. Additional views may display an individual message in its original and its translated format as well as allow the message to be edited modified and or resubmitted for processing. In some examples the platform manager leverages a flow manager functionality provided by the Open eHealth Integration Framework IPF . The flow manager may use hibernate to store each incoming message as a flow object in a database via IPF provided flow management DSL extensions added to Camel routes and or updates the flow object as the message travels through the integration platform . The flow manager allows for storing flow data and messages in for example a Derby and or Oracle database. Migration from the Oracle DB to SQL Azure may be made possible using the SQL Server Migration Assistant for Oracle along with the SQL Azure Migration Wizard. In some examples the flow manager stores string representations of messages that pass through the integration platform . These string representations can be visualized either via a generic Java Management Extension JMX client e.g. JConsole from Java SDK or via the platform manager built on Eclipse Rich Client Platform RCP technology that provides a flow management user interface and general purpose JMX client.

When an interface is deployed a message endpoint is defined within an interface route provided by the interface factory which is tailored specifically for the workflow needs of the interface e.g. interface encapsulating the message processing and protocol translation necessary to establish communication with a healthcare system e.g. the target healthcare system of . When an interface is deployed an interface configuration provided by the interface factory is loaded that defines message contracts. Message contracts define message content that the interface expects to receive and define message content that the interface expects to send back in responses from the target healthcare system to the source healthcare system . An interface configuration may be loaded from an interface properties file structured in XML that consists of a message handler implemented as a parameterized class that defines message contracts e.g. request and or response message object types . The interface configuration file also contains other information required to support message processing and protocol translation specific for the target healthcare system such as an endpoint URL of the target healthcare system a listing of callback services that are required to enrich an original message sent from the source healthcare system a search criteria for a callback service a callback service URL message filtering criteria and or other business rule definitions specific for the target healthcare system to be applied to any incoming messages. In some examples configuration information is defined within an XML file and loaded at the start up of the system of .

When the interface is to be provisioned the interface sends a message to the interfaces registry of for publishing. In some examples the interface sends the interface factory resource classpath to the interfaces registry for publishing. When the product integrator is started up the interface registry is read by the integration platform and concrete instances of the interface route and interface configuration classes are loaded into a platform manager of the integration platform from the interface factory . The interface configuration is loaded and the interface route is booted up and the endpoints are instantiated. Business level rules applicable to the interface that govern the routing of messages to the interface are stored in a rule database of the integration platform . During the start up of the integration platform the platform manager of the integration platform also boots any intermediate platform Camel routes involved in message processing and routing.

Once the interface has been deployed and or configured the interface processes messages sent from the source healthcare system via the integration platform to the target healthcare system . To perform such message routing the interface of the illustrated example includes an interface message normalizer and a message translator . The integration platform converts messages received from the target healthcare system to platform messages. Platform message are adapted from the message object payload that was initially passed from the source healthcare system and are described in greater detail below in connection with . The interface message normalizer of the illustrated example receives platform messages from the integration platform . The interface message normalizer denormalizes e.g. transforms and or translates the platform messages e.g. from a canonical data format to obtain the message payloads passed within the platform messages. The interface message normalizer uses the interface configuration rules contained in the interface factory to determine that the message payloads passed within the platform messages are consistent with the types of messages the interface expects to receive. Once the interface message normalizer validates the message payloads the message payloads are sent to the message translator .

The message translator of the illustrated example translates the validated message payloads into a protocol format expected by the target healthcare system . The message translator may also receive any additional information contained in the interface configuration file from the interface factory that may be useful in translating the message payloads. The translation may be performed by the message translator using an IPF based Transmogrifier implementation. A Transmogrifier is an IPF provided interface used to translate an internal data structure to another internal data structure and is converted into a Camel processor during execution. The Transmogrifier is implemented as a parameterized class in the manner of Transmogrifier where S is the source message format and T is the target message format. In some examples the target system request format is defined by an IPF abstracted model for ebXML representation of IHE transactions e.g. ITI 18 ITI 41 ITI 43 etc. and requires information from the additional information from the interface configuration file e.g. a CDA document that is passed along with the message payload. The message translator of the illustrated example may parse validate and or extract information from the additional information during translation of the message payload to the target message format.

Once the message translator has translated the message payload to the target message format the message translator sends the message to the target healthcare system . The target healthcare system sends a response message e.g. a reply or a fault message to the message translator of the interface . The message translator of the illustrated example translates the response message into a format defined by the interface message handler contract and sends the translated response message to the interface message normalizer . The interface message normalizer renormalizes the response message into a platform response message. The interface message normalizer sends the platform response message to the integration platform to be processed to the source healthcare system .

The message acquirer of the illustrated example receives messages from the source healthcare information system . The source healthcare system sends for example message strings encapsulated within each individual request message. The message acquirer may be provisioned via a secured WS endpoint e.g. using Camel s cxf component and or a RESTful endpoint using Camel s cxfrs component with a configured endpoint interface and message contract declaratively configured within a Camel route wired with other intermediary endpoints and processors. In some examples the message acquirer is also available via a TCP endpoint that could be configured to receive HL7 v2.x messages.

The message acquirer of the illustrated example receives a request message and or a collection list of request messages. If the message acquirer receives a collection list of multiple request messages the message acquirer may route each request message to one or more target healthcare information systems e.g. the target healthcare system . In some examples the message acquirer routes the collection of request messages to one healthcare information system but each request message contains various message payloads that may for example represent different patient data. In some examples the request messages include security credentials which may be verified by the message acquirer .

Because the source healthcare system sends message strings encapsulated within each individual request message the request messages are unmarshalled e.g. a copy of the original message object is obtained . The request message object may be for example JAXB annotated to ensure that the underlying JAX WS and or JAX RS protocol and logical interceptors of the message acquirer successfully unmarshall the Web service request that is sent to the message acquirer . If for example a TCP request encapsulates an HL7 v2.x message a custom unmarshaller would parse the HL7 message s OBX segment to obtain an individual request message. Several OBX segments on the HL7 message would emulate the collection list of multiple request messages.

Each request message acquired by the message acquirer consists of a handle string and a wrapped message string encapsulating the message payload content in for example XML format. The message acquirer uses the handle string within the body of the request message to determine an appropriate message handler that is configured within a mapping resource. In some examples this message handler is configured within an XML configuration file that maps the handle contained in the request message originally passed in and the JAXB context path of the message handler implementation. The message handler provides the specifications for defining the expected request message payload and response message payload types. The message handler information may be stored in for example the rule base of . The expected request message payload object as enforced by the message handler is JAXB annotated containing several optional elements representing message types that could further enrich the original message payload passed in. This enriching of the original payload content happens via a callback mechanism to the healthcare information system from which the message was received.

The message acquirer unmarshalls the request message payload using the appropriate message handler. The message acquirer loads the XML handle message handler mapping file e.g. stored in the rule base into a collection map of handler objects which it queries with the handle string to obtain the appropriate JAXB context path of the request handler class which is used to unmarshall the message string contained within the body of the request message. In some examples the message string is unmarshalled into a transient instance of a message object that is encapsulated within the request message.

Once the message string encapsulated within each individual request message has been successfully unmarshalled the message acquirer of the illustrated example splits the collection of request messages into individual request messages. The message splitting may be implemented for example using Camel s split DSL. The message acquirer splits the collection of request messages into individual request messages to be routed to appropriate interfaces and appropriate healthcare information systems.

Once the collection of request messages has been split into individual request messages the message acquirer determines the appropriate interface that each request message will be routed to. For example the message acquirer searches the interfaces that have been deployed e.g. the interfaces that were loaded at start up to match the message handler specified by the request message with the message handler configured on the interface. The message acquirer matches the message handlers using information stored in the rule base . This scan and association match of a request message with a deployed interface may be referred to as the discovery of the interface.

Once an interface has been associated with a request message the message normalizer of the illustrated example normalizes the unmarshalled message payload into a canonical data model referred to herein as a platform message which acts as a container for the message payload along with metadata associated with the discovered interface. A platform message is a container of any data that the discovered interface expects via its pre defined contract determined using the message handler infrastructure of the interface. The platform message also contains metadata that enables content based routing of the message to subsequent healthcare information systems. The metadata identifies the discovered interface that each platform message is to be routed to.

The content enricher allows the platform message normalized at the message normalizer to support multiple collections of message payload objects for example ordered within a map of wrapped Java objects. This allows the platform messages to be enriched via callbacks to various other data sources such as for example the source healthcare system or various other partner systems. Newly retrieved message payload s are appended to the initial message payload. Thus multiple messages may be combined into a single platform message to be sent to the target healthcare system . If the appended message payloads are not in the format expected by the discovered interface the content enricher adapts the platform message with appended message payloads into a message payload that the discovered interface expects.

For example the source system may not pass an entire document such as a Continuity of Care document CCD to the integration platform . Rather the source system may pass a patient identifier that the content enricher may use to construct a callback service request in a service layer of the source healthcare system that extracts the CCD from a local database repository. The response from the service layer of the source healthcare system may be aggregated into the platform message by the content enricher to enrich the platform message with additional information. The callback service performed by the content enricher is a standalone service request to the source healthcare system e.g. the service layer of the source healthcare system . Several callback service requests may be constructed by the content enricher .

The message router examines the content of the message obtained from the content enricher e.g. the metadata in the platform message that identifies the discovered interface . The message router routes the message to the discovered interface via a message processor channel dedicated to that interface e.g. the interface . For example each interface is assigned a dedicated message processor channel implemented via Camel s jms or direct component. In some examples the message router can self configure based on rules created during interface configuration and stored in the rule base . Such rules may for example describe message conditional preferences for each configured interface. In such examples upon receiving a message the message router evaluates the rules and routes the message to an interface whose rules are fulfilled e.g. not violated . In some examples the message router routes message based on interface rules and based on metadata contained in the message itself.

The message router may also filter the messages to eliminate unwanted messages from the message processor channel. Unwanted messages may be for example a message containing a certain medical order type. Such unwanted messages may be defined during configuration of an interface and stored in the rule base . The message router may apply the filtering criteria to the message content to discard any unwanted messages.

Alternatively some or all of the example process es of can be implemented using any combination s of application specific integrated circuit s ASIC s programmable logic device s PLD s field programmable logic device s FPLD s discrete logic hardware firmware etc. Also some or all of the example process es of can be implemented manually or as any combination s of any of the foregoing techniques for example any combination of firmware software discrete logic and or hardware. Further although the example process es of are described with reference to the flow diagram of other methods of implementing the process es of can be employed. For example the order of execution of the blocks can be changed and or some of the blocks described can be changed eliminated sub divided or combined. Additionally any or all of the example process es of can be performed sequentially and or in parallel by for example separate processing threads processors devices discrete logic circuits etc.

The system of the instant example includes a processor . For example the processor can be implemented by one or more microprocessors or controllers from any desired family or manufacturer.

The processor includes a local memory e.g. a cache and is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is controlled by a memory controller.

The processor platform also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a USB and or a PCI express interface.

One or more input devices are connected to the interface circuit . The input device s permit a user to enter data and commands into the processor . The input device s can be implemented by for example a keyboard a mouse a touchscreen a track pad and or a trackball.

One or more output devices are also connected to the interface circuit . The output devices can be implemented for example by display devices e.g. a liquid crystal display a cathode ray tube display CRT a printer and or speakers . The interface circuit thus typically includes a graphics driver card.

The interface circuit also includes a communication device such as a modem or network interface card to facilitate exchange of data with external computers via a network e.g. an Ethernet connection a DSL a telephone line coaxial cable a cellular telephone system etc. .

The processor platform also includes one or more mass storage devices for storing software and data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives and DVD drives. The mass storage device may implement a local storage device.

The coded instructions of and or may be stored in the mass storage device in the volatile memory in the non volatile memory and or on a removable storage medium such as a CD or DVD.

Although certain example methods systems apparatus and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods systems and articles of manufacture fairly falling within the scope of the claims of this patent.

