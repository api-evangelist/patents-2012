---

title: Smart card set protocol optimization
abstract: A method of facilitating communications between a computer device and a smart card reader having an associated smart card, the computer device including a smart card resource manager and a smart card reader service, the smart card reader service acting as a relay for commands between the smart card resource manager and the smart card reader, the method comprising: receiving from the smart card resource manager a first command for setting a protocol for communications with the smart card; and responding, prior to receiving a reply from the smart card to the first command, to the smart card resource manager with a message indicating that the smart card has successfully received the first command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08458382&OS=08458382&RS=08458382
owner: Research In Motion Limited
number: 08458382
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20120726
---
The present application is a continuation of U.S. patent application Ser. No. 13 108 639 filed on May 16 2011 which is expected to issue as U.S. Pat. No. 8 244 920 on Aug. 14 2012 which in turn is a continuation of U.S. patent application Ser. No. 11 777 680 filed Jul. 13 2007 which issued as U.S. Pat. No. 7 945 704 on May 17 2011 the contents of which are hereby incorporated herein by reference.

The present application relates generally to smart card readers and in particular to communications between a smart card reader and a computer system.

Smart card readers are used in a variety of applications for example in combination with handheld devices and personal computers for security related purposes.

Some operating systems such as Microsoft Windows Vista installed in personal computers include a generic or multipurpose smart card resource manager. Third party vendors may also provide their own smart card readers which may thus require their own smart card reader drivers to be installed for use with the operating system. In such instances the smart card resource manager may communicate with the vendor specific smart card reader driver first in order to access or communicate with the smart card reader.

Improved efficiencies in communications between smart card resource managers smart card reader drivers and smart card readers are desirable.

According to one example embodiment there is provided a method of facilitating communications between a computer device and a smart card reader having an associated smart card for use in login authentication the computer device including a smart card resource manager and a smart card reader service the smart card reader service acting as a relay for commands between the smart card resource manager and the smart card reader the method comprising receiving from the smart card resource manager a first command for setting a protocol for communications with the smart card and responding prior to receiving a reply from the smart card to the first command to the smart card resource manager with a message indicating that the smart card has successfully received the first command. According to an example embodiment there is provided a computer program product comprising a computer readable medium having recorded thereon statements and instructions for execution by a computer to carry out the method.

According to an example embodiment there is provided a computer device for communicating over a wireless communications link with a smart card reader having an associated smart card for use in login authentication the computer device comprising a smart card resource manager for generating commands for the smart card reader and a smart card reader service for relaying commands received from the smart card resource manager for the smart card reader. The smart card reader service is configured to receive from the smart card resource manager a first command for setting a protocol for communications with the smart card and respond prior to receiving a reply from the smart card to the first command to the smart card resource manager with a message indicating that the smart card has successfully received the first command.

According to an example embodiment there is provided a smart card reader comprising a smart card interface for receiving a smart card a communications system for exchanging signals over a wireless link with an associated computer and a controller connected to the smart card interface and the communications system for exchanging signals therewith. The controller is configured to send a smart card insertion message to the associated computer receive a first command and a second command from the associated computer wherein the first command comprises a command to set a protocol for communications with the smart card provide the first command to the smart card and receive an indication from the smart card of whether the first command failed if the first command failed at the smart card then send the associated computer a response indicating that the second command failed and if the first command did not fail at the smart card then provide the second command to the smart card receive a response to the second command from the smart card and send the response to the associated computer.

According to an example embodiment there is provided a system for login authentication comprising a computer device for communicating over a wireless link with a smart card reader having an associated smart card for use in login authentication the computer device comprising a smart card resource manager for generating commands for the smart card reader a smart card reader service for relaying commands received from the smart card resource manager for the smart card reader. The smart card reader service is configured to receive from the smart card resource manager a first command for setting a protocol for communications with the smart card respond prior to receiving a reply from the smart card to the first command to the smart card resource manager with a message indicating that the smart card has successfully received the first command relay the first command to the smart card reader receive a second command from the smart card resource manager relay the second command to the smart card reader through the wireless link receive from the smart card reader through the wireless link a response to the second command and relay the response to the smart card resource manager. The system also includes a smart card reader comprising a smart card interface for receiving a smart card a communications system for exchanging signals over the wireless link with the computer device and a controller connected to the smart card interface and the communications system for exchanging signals therewith. The controller is configured to receive the first command from the computer device and provide the first command to the smart card receive an indication from the smart card of whether the first command failed if the first command failed at the smart card send the computer device a response indicating that the second command failed and if the first command did not fail at the smart card provide the second command to the smart card receive a response to the second command from the smart card and send the response to the computer device.

As suggested above some operating systems such as Microsoft Windows Vista installed in personal computers include a generic or multipurpose smart card resource manager. Third party vendors may also provide their own smart card readers and the vendors own smart card reader drivers may be installed for use with the operating system. In such instances the smart card resource manager may communicate with the vendor specific smart card reader driver first in order to access or communicate with the smart card reader. In other words the vendor supplied smart card reader driver may merely act as a flow through or relay of any instructions from the smart card resource manager to the smart card reader. A difficulty with such systems is that the smart card resource manager may expect a response to an issued command within a specified time from a smart cart reader and depending on the operating environment the smart card reader may not be able to provide a response within the specified time resulting in an unnecessary time out.

By way of example consider the situation where smart card two factor authentication is required for a user to login to a computer in the Microsoft Windows Vista operating environment. When the user inserts a smart card into the smart card reader when the Microsoft Windows Vista login screen is active on a personal computer PC associated with the smart card reader the Microsoft Windows Vista smart card resource manager will try and open a communications channel with the smart card that has been inserted into the reader. If the smart card resource manager is unable to properly communicate with the smart card the user will get a message No certificates Found on Smart Card and the user will be unable to login to the computer since login authentication requires the user s PC to access certificates on the smart card .

In the case of certain environments such as for example Microsoft Windows Vista when communication with a smart card is being established such as during login authentication an ISO 7816 compliant SET PROTOCOL command will be sent to the smart card reader to set the communication parameters used in communications between the smart card reader and the associated PC for example such communications parameters may include among other things baud rate t 0 or t 1 communication etc. . If the smart card reader does not respond within a set time limit then the smart card resource manager will automatically abort its attempt to set up a communications channel with the smart card resulting in a message such as No certificates Found on Smart Card . Such a timeout may be appropriate in some PC smart card reader configurations for example when a wired link exists between the PC and the smart card reader and the amount of time the smart card has to respond to a SET PROTOCOL command is well defined by the ISO 7816 specification. However in situations where a wireless link for example a Bluetooth link exists between the smart card reader and the PC the set amount of time provided by the smart card resource manager may not be sufficient leading to unnecessary time outs.

Example embodiments of the present disclosure as described below may mitigate against unnecessary time outs such as described above.

Reference is first made to which shows an illustrative communication system to which embodiments described herein can be applied. The system may include one or more mobile devices only one of which is shown in that are enabled to communicate with one or more wireless networks . The wireless network may be implemented as a packet based and or other type of cellular wide area wireless network that includes a number of base stations each providing wireless Radio Frequency RF coverage to a corresponding area or cell. In some embodiments instead of or in addition to a wide area wireless network network may include a local wireless area network such as for example a wireless local area network that conforms to IEEE 802.11 standards such as 802.11b and or 802.11g. In at least some example embodiments the wireless network is connected through intermediate communications links including for example the Internet to one or more enterprise networks each associated with respective mobile devices such that the mobile devices are each enabled to exchange electronic messages and other information with the enterprise networks that they are associated with. At least some of the mobile devices have a further associated secondary mobile device in the form of a smart card reader . Additionally a user of the mobile device and the smart card reader will have access to a personal computer that is connected to the enterprise network over a communications link . In one embodiment the communications link is a local area network or wide area network providing organizational connectivity with the enterprise network . The smart card reader may also be used with the personal computer through either a wired or wireless connection.

Reference is next made to which shows in greater detail an embodiment of the personal computer . The personal computer includes a display sub system and a network communication subsystem for two way communications with the enterprise network . According to one embodiment the communications subsystem may include a wireless communications subsystem including antennas not shown RF transceivers not shown and some signal processing capabilities implemented for example by a digital signal processor not shown . According to another embodiment the communications subsystem may additionally or alternatively include a wired communications subsystem conforming to the well known Ethernet standard including a 10 Mbps 100 Mbps or 1 Gbps Ethernet connection. The personal computer also includes a controller in the form of at least one microprocessor which is suitably programmed to control the overall operation and functions of the personal computer which are described in more detail below. The personal computer includes peripheral devices or subsystems such as a random access memory a storage device such as a hard disk drive an auxiliary input output I O subsystem e.g. a mouse a serial port e.g. a USB port an input device e.g. a keyboard a speaker a microphone a short range communications subsystem e.g. an infrared transceiver wireless bus protocol such as a Bluetooth system or any other means of local wireless communications and any other device subsystems generally designated by reference .

The microprocessor operates under stored program control with code being stored in the storage device . As depicted in while operational the RAM includes programs including an operating system program or code module such as the Microsoft Windows Vista operating system. Operating systems such as Windows typically divide the RAM space into two portions namely a restricted access space such as a kernel space and a user space or functional equivalents thereof. The RAM further includes software applications indicated generally by reference which typically reside in the user space and drivers which typically reside in the kernel space . The user space further includes various application programming interfaces APIs and various user interface UI components . The UI components are the existing functions or routines provided by the operating system that may be called by programs such as the software applications in order to display elements of the graphical user interface to the user of the personal computer .

The operating system code code for specific software applications code for the drivers code for the various application programming interfaces APIs or code for the various user interface UI components is permanently or semi permanently stored on the storage device and may be temporarily loaded into a volatile storage medium such as the RAM during operation of the personal computer . Received communication signals and other data with information may also be stored in the RAM . Code for the specific device applications or other elements of the user space may be swapped back out to the storage device as needed during operation of the personal computer while code related to the kernel space such as many aspects of the operating system code and or the drivers is typically loaded into the RAM upon boot up of the personal computer and is retained in the RAM as long as the personal computer remains powered up.

The stored program control e.g. operating system software applications for the microprocessor also includes a predetermined set of applications or code components or software modules that control basic device operations for example data and text communication applications which are normally installed on the personal computer as the software applications when the personal computer is first configured. Further applications may also be loaded i.e. downloaded onto the personal computer through the operation of networks described above for the auxiliary I O subsystem the serial port or the short range communications subsystem . The downloaded code module or components are then installed by the user or automatically in the RAM or the storage device .

The serial port may comprise a USB type interface port for interfacing or synchronizing with another device. The short range communications subsystem provides a wireless interface for communication between the personal computer and other devices including the smart card reader to be described in greater detail in connection with below. For example the subsystem may comprise an infrared communication link or channel a wireless bus protocol such as a Bluetooth communications subsystem or any other suitable localized wireless means of communication.

Reference is next made to which shows in greater detail an example embodiment of a secondary mobile device namely the smart card reader . The smart card reader includes a controller including at least one microprocessor which is suitably programmed to control the overall operation and functions of the smart card reader and an output device e.g. a display module . The smart card reader further includes peripheral devices or subsystems such as a flash memory a random access memory RAM a serial port e.g. a USB port a short range communications subsystem e.g. an infrared transceiver wireless bus protocol such as a Bluetooth system or any other means of local communications a storage component interface e.g. for a memory card or any other data storage device a user input device e.g. a push button and a biometric input device e.g. a fingerprint reader .

The microprocessor operates under stored program control with code stored in the flash memory or other type of non volatile memory device or devices . As depicted in the stored programs include an operating system program or code module and other programs or software applications indicated generally by reference . The operating system of the smart card reader further includes a memory card driver component . The memory card driver is responsible for coordinating communications between the smart card reader and a memory card and or between the smart card reader and related drivers of a device to be used in conjunction with the smart card reader such as the drivers of the personal computer . The operating system code code for specific software applications code for the memory card driver or code components thereof may be temporarily loaded into a volatile storage medium such as the RAM . Received communication signals and other data with information may also be stored in the RAM . Additionally the storage component interface receives the removable memory card providing additional storage space for the smart card reader . In one embodiment the memory card may be a smart card similar to the smart cards known to those skilled in the art. The memory card may include security certificates for user authentication electronic signature and or encryption purposes fingerprint authentication data password or pin code related data or other security related data. While operation of the smart card reader is described using a smart card it will be understood by those skilled in the art that the smart card reader may be designed using any suitable form of removable media without departing from the intended scope of the smart card reader .

The stored program control e.g. operating system software applications for the microprocessor also includes a predetermined set of applications or code components or software modules that control basic device operations for example management and security related control of the data of the smart card reader and may be installed on the smart card reader as a component of the software applications during the manufacturing process. Further applications may also be loaded i.e. downloaded onto the smart card reader through the operation of the serial port the short range communications subsystem or from the smart card . The downloaded code module or components are then installed by the user or automatically in the non volatile program memory e.g. the flash memory or the RAM .

The serial port may comprise a USB type interface port for interfacing or synchronizing with another device such as the personal computer or the mobile device . The serial port is used to exchange data with a device such as the personal computer to be stored on the smart card that is plugged into the storage component interface of the smart card reader . The serial port is also used to extend the capabilities of the smart card reader by providing for information or software downloads including any user interface information to the smart card reader .

In various example embodiments the short range communications subsystem provides a wireless interface for communication between the smart card reader and the personal computer or the mobile device . In one embodiment the short range communications subsystem includes an infrared communication link or channel. In another embodiment the subsystem comprises a wireless RF bus protocol such as a Bluetooth communications subsystem. However the short range communications subsystem may comprise any suitable local wireless means of communication so long as the short range communications subsystem of the personal computer is compatible to facilitate wireless communication between the personal computer and the smart card reader .

In order for the personal computer to be able to properly communicate with the smart card reader a suitable driver hereinafter referred to as a smart card reader driver can be loaded onto the personal computer e.g. as one of the drivers . For example an operating system such as Microsoft Windows Vista may be applied to or loaded onto the personal computer and may include its own system supplied smart card reader driver.

For explanatory purposes illustrates a Microsoft Windows smart card environment for example as described by the Windows Driver Development Kit DDK . For purposes of facilitating an understanding of example embodiments of the present disclosure that are described further below a brief description will now be provided of the different components of the Microsoft Windows Vista smart card environment for communications with a smart card reader through a wired connection such as a Universal Serial Bus USB interface. The kernel space and the user space are indicated as shown in with the interface between the kernel space and the user space referred to as an I O control interface . Applications communicate with a smart card reader driver by means of a smart card resource manager . In one example embodiment the smart card reader driver is a vendor supplied smart card reader driver supplied by the vendor of smart card reader and resides in the kernel space . In some embodiments the smart card reader driver may be provided by the source of the operating system e.g. Microsoft rather than the vendor of the smart card reader . The smart card resource manager resides in the user space . As shown the smart card reader driver communicates with the smart card reader . The resource manager communicates with the smart card reader driver by means of an I O control function i.e. the IOCTL function across the I O control interface . The I O control functions are dispatched using a DeviceIoControl system call. A smart card aware application may send instructions to the smart card reader driver by means of the system call DeviceIoControl and the operating system forwards the indicated I O control function to the smart card reader driver . I O control functions initiated by the smart card aware applications are passed to a smart card service provider which passes the function to the smart card resource manager which manages the resources related to the smart card reader and may communicate with the smart card reader driver . The operating system forwards the request by means of an I O request packet IRP .

In some example embodiments the smart card reader driver is designed to work with the resource manager and a smart card driver library supplied with operating system . Thus the smart card reader driver may use the smart card driver library to perform many of its key operations.

If the parameters are correct SmartcardDeviceControl processes the IOCTL request if it can step . SmartcardDeviceControl then checks to see if the smart card reader driver has a callback defined for the IOCTL request that it is processing step . If the callback exists SmartcardDeviceControl calls the callback as indicated by reference . The smart card reader driver callback routine then calls all the driver library routines that are required to complete the processing of the IOCTL as indicated by reference . After processing the IOCTL function the callback routine returns to the SmartCardDeviceControl function as indicated by reference . In the WDM version of the library SmartcardDeviceControl completes the IRP that carried the IOCTL as indicated by reference . SmartcardDeviceControl then returns control to the reader driver dispatch routine as indicated by reference . The smart card reader driver then returns the IOCTL call to the smart card resource manager as indicated by reference .

The smart card library driver synchronizes access to the reader driver so that no two callback functions are called at the same time. However card insertion and removal event handling e.g. when the smart card reader indicates that the smart card is either inserted into or removed from the storage interface shown in may be processed asynchronously.

Referring now to another smart card reader environment is illustrated in accordance with example embodiments of the present disclosure. The smart card environment is similar to the environment of described above except that in environment a wireless air interface exists between the smart card reader and the personal computer rather than a wired interface as shown in . As indicated above user applications or functions e.g. such as Microsoft Outlook or Microsoft Word or Microsoft Windows Vista login function typically reside in the user space and drivers including smart card reader driver reside in the kernel space . In at least some example embodiments placing a driver such as the smart card reader driver in the kernel space as required by Microsoft Windows Vista can raise the following possible issues a the user interface components cannot be directly accessed and or displayed by code residing in the kernel space and b the Bluetooth application programming interface API which is installed as one of the APIs and is used to access the Bluetooth communications port i.e. the short range communications subsystem cannot be directly accessed from the kernel space . Since Bluetooth communications between the personal computer and the smart card reader would have to occur via the Bluetooth API the Bluetooth API must be accessible to a smart card reader driver to be installed on the personal computer . The smart card reader driver to be used on the personal computer also needs access to the UI components so that a user of the personal computer can input Bluetooth secure pairing keys using the UI components as well as other information.

To address the above issues the example embodiment shown in environment of includes a user space application referred to as a smart card reader service SCRS . The SCRS is placed in the user space and therefore has access to the Bluetooth API as the APIs also reside in the user space . Therefore using the Bluetooth API the SCRS is capable of opening a Bluetooth communication port. The SCRS takes messages from the Smart Card Reader Driver and sends the messages to the smart card reader through the Bluetooth communication port e.g. using the short range communications subsystems and . Since the SCRS resides in the user space the SCRS can make display calls to the user interface at any time using the user interface components .

Turning again to environment of in which a wired interface e.g. a USB connection exists between the personal computer and the smart card reader in such an environment messages or data destined for the smart card reader are passed from the smart card reader driver through the driver stack to the USB or serial driver since all the drivers are located in the kernel space . The USB or serial driver then sends these messages to the smart card reader over the serial connection. Turning back again to environment of in such an environment communication between the personal computer and the smart card reader is achieved via an air interface e.g. a Bluetooth connection between short range communications subsystems and . As the smart card reader driver is located in the kernel space and does not have access to Bluetooth drivers messages are passed back into the user space to the smart card reader service and the available Bluetooth API is used. Communication between the smart card reader driver and the smart card reader service is facilitated by a smart card reader service library . The smart card reader service library includes a set of function calls that the smart card reader service uses to communicate with the smart card reader driver .

In at least some example embodiments commands are created and sent generally as follows the smart card aware application or function requests the smart card service provider to create a command that is to be sent to the smart card . The smart card service provider passes the command to the Windows smart card resource manager which passes the command across the I O control interface to the smart card reader driver . The smart card reader driver then passes the command on to the smart card driver library . The smart card driver library uses a callback function to pass the command back to the smart card reader driver . This callback function notifies the smart card reader driver that the smart card reader driver is to send the command to the smart card reader and wait for a response from the smart card reader . The smart card reader driver then passes the command up to the smart card reader service using commands and or functions that are part of the smart card reader service library . The smart card reader service sends the command over the Bluetooth connection i.e. using the short range communications subsystem and shown in using the Bluetooth API to the smart card reader . The smart card reader then processes the command and returns the appropriate response. This response from the smart card reader follows the same path in reverse fashion back to Microsoft Outlook or the applicable smart card aware application . As will be described below during login two commands that can be sent to the smart card using the just described command creation and sending process include a SET PROTOCOL COMMAND and a command Application Protocol Data Unit APDU . The SET PROTOCOL command and APDU are standardized data structures for smart card systems for example as defined by ISO 7816.

As indicated above the smart card reader service library includes a set of function calls that the smart card reader service uses to communicate with the smart card reader driver . The smart card reader service also uses the smart card reader service library to communicate with the smart card reader in order to perform certain functions or routines provided in the smart card reader service library .

Environment will now be further explained in the context of the smart card two factor login authentication example mentioned above. In a smart card two factor authentication environment when a user s desktop computer operating under Microsoft Windows Vista is at the lock or login screen and receives a smart card insertion notification message from the smart card reader the personal computer will try to establish a communications channel with the user s smart card reader in order to access security certificates that are located on the user s smart card which is inserted into the storage component interface of the smart card reader using the short range communications subsystems as the means of connectivity between the personal computer and the smart card reader . In the current example when a smart card insertion notification message is received from the smart card reader and the PC is locked Microsoft Windows Vista s login function sends a message to the Windows smart card service provider requesting a communications channel be established to the specific smart card . The smart card service provider then creates and sends commands to the smart card resource manager as required to facilitate the exchange among the Smart Card Resource Manager Smart Card Reader Driver Smart Card Reader Service and Smart Card Reader. Included among the sent commands are those shown in and described as follows 

 Step The smart card reader service then sends SET PROTOCOL command over the wireless interface to smart card reader and immediately or soon after receiving the SET PROTOCOL command responds to the smart card reader driver with a REPLY message indicating that the SET PROTOCOL command was successfully received by the smart card without waiting for a response from the smart card reader . Step The smart card reader driver passes on the successful REPLY message to the smart card resource manager thus enabling the smart card resource manager and ultimately Microsoft Windows Vista login function to operate under the assumption that the SET PROTOCOL command was actually successfully executed by the smart card reader . Step The smart card resource manager generates an APDU command and sends it to smart card reader driver . Step The smart card reader driver sends the APDU command to the smart card reader service . Step The smart card reader service sends the APDU command to the smart card reader . Step Concurrent with one or more of the above Steps the smart card reader relays the SET PROTOCOL command to the smart card and as indicated at box if the command fails at the smart card the smart card reader caches the negative result. Step Upon receiving the APDU message the smart card reader checks the cached result of the SET PROTOCOL command to determine if the SET PROTOCOL command was successfully executed or failed. Step If the SET PROTOCOL command was successfully executed the smart card reader passes on the APDU command to the smart card then receives the smart card response to the APDU command the smart card reader then transmits the smart card response to the smart card reader service which provides the smart card response to the smart card reader driver which returns the smart card response to the smart card resource manager . Thus the messages within box of Step are carried out if the SET PROTOCOL command was successfully executed by the smart card . Step If the SET PROTOCOL command failed at the smart card level the smart card reader immediately responds to the APDU command by sending a failure to execute APDU message to the smart card reader service . The smart card reader service passes the APDU failure message on to the smart card reader driver which then passes the APDU failure message on to the smart card resource manager . Thus the messages within box of Step are carried out if the SET PROTOCOL command was failed at the smart card . After receiving the APDU failure message Microsoft Windows Vista closes the session for the smart card thus requiring the user to remove and reinsert the smart card into the smart card reader to have Microsoft Windows Vista attempt to re open a communications channel with the card.

As noted previously when Microsoft Windows Vista does not receive a timely response to a SET PROTOCOL command a timeout occurs with an ensuing No Certificates Found on Smart Card message. This can be particularly problematic when the smart card reader connects to the PC through a wireless link. The method illustrated in can alleviate this problem because a successful reply is sent back to the operating system by the smart card reader service without actually waiting to see if the SET PROTOCOL command is successfully executed by the smart card . If the SET PROTOCOL command did indeed fail at the smart card level the fact that a failure has occurred at some level can be passed back to the operating system in the subsequent APDU failure notification message. The method represented in can also provide a speed improvement in the session initialization process as the PC does not have to wait for the SET PROTOCOL command to actually be sent processed and received back from the smart card reader.

Another alternative example embodiment will now be described with reference to which achieves results similar to the method represented in but in a different manner in particular in the embodiment of caching of the failure of the SET PROTOCOL and the subsequent decision making is done at the Smart Card Reader Service rather than the Smart card reader 

 Step The smart card reader service then sends SET PROTOCOL command over the wireless interface to smart card reader and immediately or soon after receiving the SET PROTOCOL command responds to the smart card reader driver with a REPLY message indicating that the SET PROTOCOL command was successfully received by the smart card without waiting for a response from the smart card reader . Step The smart card reader driver passes on the successful REPLY message to the smart card resource manager thus enabling the smart card resource manager and ultimately Microsoft Windows Vista login function to operate under the assumption that the SET PROTOCOL command was actually successfully executed by the smart card reader . Step While or shortly after the smart card reader driver sends a successful REPLY to the smart card reader driver the smart card reader receives the SET PROTOCOL command and sends the SET PROTOCOL command to the smart card and subsequently receives a REPLY indicating if the SET PROTOCOL command was successfully executed or not. A corresponding REPLY message is sent over the air interface from the smart card reader to the smart card reader service which as indicated at box caches the negative result if the REPLY message indicates a SET PROTOCOL failure. Step The smart card resource manager generates an APDU command and sends it to smart card reader driver . Step The smart card reader driver sends the APDU command to the smart card reader service . Step Upon receiving the APDU message the smart card reader service checks the cached result of the SET PROTOCOL REPLY message to determine if the SET PROTOCOL command was successfully executed or failed. Step If the SET PROTOCOL command was successfully executed the smart card reader service passes on the APDU command to the smart card reader which in turn passes on APDU command to the smart card then receives the smart card response to the APDU command the smart card reader then transmits the smart card response to the smart card reader service which provides the smart card response to the smart card reader driver which returns the smart card response to the smart card resource manager . Thus the messages within box of Step are carried out if the SET PROTOCOL command was successfully executed by the smart card . Step If the SET PROTOCOL command failed at the smart card level the smart card reader service immediately responds to the APDU command by sending a failure to execute APDU message to the smart card reader driver . The smart card reader driver passes the APDU failure message on to the smart card resource manager . Thus the messages within box of Step are carried out if the SET PROTOCOL command was failed at the smart card . After receiving the APDU failure message Microsoft Windows Vista closes the session the smart card thus requiring the user to remove and reinsert the smart card into the smart card reader to have Microsoft Windows Vista attempt to re open a communications channel with the card.

Another alternative example embodiment will now be described with reference to which achieves results similar to the method represented in but in a different manner 

 Step The smart card reader service then caches the SET PROTOCOL command as indicated in box and immediately or soon after receiving the SET PROTOCOL command responds to the smart card reader driver with a REPLY message indicating that the SET PROTOCOL command was successfully received by the smart card even though the SET PROTOCOL has not yet been sent . Step The smart card reader driver passes on the successful REPLY message to the smart card resource manager thus enabling the smart card resource manager and ultimately Microsoft Windows Vista login function to operate under the assumption that the SET PROTOCOL command was actually successfully executed by the smart card reader . Step The smart card resource manager generates an APDU command and sends it to smart card reader driver . Step The smart card reader driver sends the APDU command to the smart card reader service . Step The smart card reader service sends a packet that includes both the previously cached SET PROTOCOL command and the APDU command to the smart card reader . Step The smart card reader relays the SET PROTOCOL command to the smart card and then checks to see if it successfully executes or if it fails. Step If the SET PROTOCOL command was successfully executed the smart card reader passes on the APDU command to the smart card then receives the smart card response to the APDU command the smart card reader then transmits the smart card response to the smart card reader service which provides the smart card response to the smart card reader driver which returns the smart card response to the smart card resource manager . Thus the messages within box of Step are carried out if the SET PROTOCOL command was successfully executed by the smart card . Step If the SET PROTOCOL command failed at the smart card level the smart card reader immediately responds to the APDU command by sending a failure to execute APDU message to the smart card reader service . The smart card reader service passes the APDU failure message on to the smart card reader driver which then passes the APDU failure message on to the smart card resource manager . Thus the messages within box of Step are carried out if the SET PROTOCOL command was failed at the smart card . After receiving the APDU failure message Microsoft Windows Vista closes the session the smart card thus requiring the user to remove and reinsert the smart card into the smart card reader to have Microsoft Windows Vista attempt to re open a communications channel with the card.

Unlike the method shown in the method of does not require special configuration of the smart card reader as the smart card reader service performs the caching function and related decision making as to which communications option or is to be carried out. Although the methods illustrated in and have been described in the context of the Microsoft Windows Vista operating system they could also be applied to other operating system environments.

In at least some example embodiments the SET PROTOCOL command is not the very first command that is generated for sending to the smart card reader after the personal computer receives a smart card insertion notification message. Rather other messages may be generated and sent by the personal computer prior to sending of the SET PROTOCOL command including for example a Cold Reset command.

Note that the smart card reader may be configured in some embodiments to send a smart card insertion notification message to the personal computer even if the smart card was not just inserted into the smart card reader . For example in one embodiment card insert card removal messages are used not only in the conventional sense i.e. when a smart card has been physically inserted into or removed from the smart card reader but also to share access to the smart card reader . For example in an embodiment where the smart card reader can pair with or communicate with two different applications or devices for example a personal computer and a mobile communications device the smart card reader will send a card removal message to one application device which forces that application or device to stop sending messages to the smartcard reader . At the same time the smart card reader will send a card insert message to another application device thereby allowing the other application device to send messages to the smart card reader .

The above described embodiments of the present application are intended to be examples only. Alterations modifications and variations may be effected to the particular embodiments by those skilled in the art without departing from the scope of the application.

