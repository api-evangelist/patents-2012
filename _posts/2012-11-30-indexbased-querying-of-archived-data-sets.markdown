---

title: Index-based querying of archived data sets
abstract: Methods and systems for index-based querying of archived data sets are disclosed. A plurality of indices are generated, each comprising a plurality of pointers to storage locations of a plurality of updates to a document. A query request is received after generating the plurality of indices. The query request comprises an identifier of the document and a specified time range. A subset of the indices that comprise the identifier of the document within the specified time range are determined. From the subset of the indices are retrieved a subset of the pointers to the storage locations for one or more of the updates to the document within the specified time range. The one or more updates to the document within the specified time range are retrieved using the subset of the plurality of pointers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09230011&OS=09230011&RS=09230011
owner: Amazon Technologies, Inc.
number: 09230011
owner_city: Reno
owner_country: US
publication_date: 20121130
---
Electronic catalog servers such as those associated with large e commerce sites often store large quantities of catalog data to which updates are frequently made. The updates may be received over an extended period of time such as several months or years and the quantity of the updates over time may be sufficiently large to require the use of archive storage systems in addition to a live data store. Users and administrators of electronic catalog systems may seek to access the updates made to the catalog data e.g. for various troubleshooting or marketing purposes. In order to facilitate access to the updates there may be live or dynamic indexing performed on the live data store. However such dynamic indexing may affect the throughput and performance of the electronic catalog systems and may also require increasingly larger storage space for the dynamic index over time.

Archive storage systems may work well for storing hundreds or thousands of objects that are on the order of multiple megabytes. However such storage systems often do not work as well for storing hundreds of millions to billions of very small records e.g. kilobytes in size . Additionally when querying archived data retrieving the desired archived data is often a challenge that requires a separate search of the archive media itself.

Accordingly it is desirable to have techniques for querying archived data sets in an efficient manner.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to. 

Various embodiments of methods and systems for index based querying of archived data sets are described. Using the systems and methods described herein forward indices for very large data sets e.g. billions of records may be created and queried in a fast and scalable manner. Prior to the receipt of a query request forward indices pointing to the recent updates for a given key may be precomputed. When a query request comprising one or more keys and a time range is received the updates to the one or more keys over the time range may be retrieved efficiently using the precomputed forward indices.

The archived data sets may be associated with updates to an electronic catalog system. The electronic catalog system may host an electronic catalog listing a variety of items. The electronic catalog may also provide functionality for users to acquire catalog items from various catalog item providers. For example the electronic catalog system may be part of an electronic commerce e commerce site that hosts an electronic catalog of many millions of items offered for sale or otherwise made available by numerous retailers sellers vendors merchants etc. collectively and interchangeably referred to herein as merchants . One example of such an e commerce site is described in U.S. Pat. No. 7 600 682 titled Marketplace System in Which Users Generate Preorder Listings Via a Definitive Product Catalog issued on Oct. 13 2009.

In the example of an e commerce site the items available through the electronic catalog may be associated with various elements of item data. The item data may include attributes such as price availability title item identifier item feedback e.g. user reviews ratings etc. item image item description and various other item attributes. Typically the item data associated with an item may range from a few kilobytes to a few megabytes in size. The item data may be updated at various points in time and the updates may come from various sources of item data manufactures sellers retailers other components of the electronic catalog system etc. .

In many circumstances a user of an administrator of or an application in communication with the electronic catalog may have a need to analyze the updates associated with a particular catalog item or group of catalog items. For example an administrator may wish to review the updates associated with a particular item to pinpoint the source of erroneous catalog data. As another example a merchant analyst or other entity may wish to analyze the price histories of particular items. In order to analyze the complete history of items access may be provided to not only the latest updates to those items as would be stored in a live data store but also to the historical updates which may have been moved to an archive data store. An indexing scheme providing transparent access to the objects or pointers to the updates stored in the archive data store as well as to the updates in the live data store may allow a fast response to queries from such users administrators and applications without affecting the performance of the electronic catalog server.

The updates to the electronic catalog may be organized into objects comprising collections of records and the objects may be archived. The objects may have pointers keys and values associated with the records within them. The objects may be stored in a database of product information that typically includes product IDs along with descriptions and product images provided by the catalog update providers. The product information in this database may be viewable by users through a browsable electronic catalog. The various pages of the electronic catalog may be in the form of web pages display screens of an electronic services network or interactive television system pages that are specially configured for display on smartphones tablets or other mobile devices or any other type of suitable electronic display available to users.

In the example of an e commerce site the availability of a product or the number of units available of a specific product may change over time due to the sale or disposal of the product through the electronic catalog system. In one embodiment merchants may add to or change a listing of a particular product within the e commerce site. An update processing system connected to the electronic catalog system or e commerce site may be used to facilitate the updates to the products as well as the processing of input provided by the merchants. In one embodiment the electronic catalog system may provide up to date catalog data to end users without degradation in the performance e.g. latency experienced by the users even when the update processing system is receiving update messages at a very high rate.

The catalog updates may comprise updates to an electronic catalog as discussed above. In one embodiment the catalog updates may comprise archived or historical updates. In another embodiment the catalog updates may comprise new or recent updates in addition to archived or historical updates. For an electronic catalog examples of item attributes whose historical updates may be stored include but are not limited to batteries included batteries required binding catalog number color item dimensions item name item package dimensions list price manufacturer model number product category product type vendor name etc.

In one embodiment the catalog updates may be stored as chunks in a storage system configured for large volumes e.g. multiple megabytes in size of relatively small records. In this storage system individual catalog updates may be coalesced as a block i.e. a chunk and the block may be appended to a bucket as a new object. A bucket containing chunks may be referred to as a chunk store. In one embodiment individual chunks may be configured to be up to 16 MB or 64 MB in size.

In one embodiment the index generation module may generate a plurality of catalog update indices based on the catalog updates . The catalog update indices may comprise forward indices. The catalog update indices may comprise read only database RODB indices that are implemented as RODB partitions. The RODB indices may be partitioned widely by key space. In one embodiment the use of partitions may permit the efficient storage and retrieval of very large quantities e.g. billions of catalog updates. Each of the catalog update indices may comprise one or more keys and one or more pointers or other references to storage locations of the catalog updates relating to the document s identified by the one or more keys. The references to storage locations may comprise both pointers and offsets. The one or more keys may identify a document such as a web page or a set of data describing a product listing at an e commerce website. In one embodiment the keys may include a unique product identifier and a marketplace identifier. The marketplace identifier may uniquely identify various marketplaces subdomains or other sections of an e commerce website. In one embodiment various ones of the marketplaces may be specific to regional or national variants of the e commerce website.

The catalog update indices for a given document as identified by the one or more keys may be precomputed. In other words the catalog update indices may be generated by the index generation module prior to the index based query system receiving a query relating to the contents of particular catalog update indices. In one embodiment the index generation module may generate new catalog update indices automatically for new updates to the catalog. For example the index generation module may generate new catalog update indices according to a schedule and on a periodic basis e.g. once per week or other suitable time period for catalog updates entered over the most recent week or other suitable time period . Accordingly the catalog update indices may comprise individual indices covering different time ranges back to a point in time when the catalog update indices were first generated. In one embodiment the catalog update indices may be created as often as needed depending on how frequently the underlying documents change. In one embodiment the index generation module may be implemented using a computing resource provisioning service that supports data intensive distributed applications. Further details regarding embodiments of the index generation module are discussed with respect to .

The metadata generation module may generate catalog update index metadata based on the catalog update indices . In one embodiment the catalog update index metadata may comprise a subset of the information in the catalog update indices . For example the catalog update index metadata may comprise the key block headers of the catalog update indices . In one embodiment the catalog update index metadata may comprise an indication of the different keys and time range s included in a particular catalog update index. The catalog update index metadata may indicate which partition of an index includes catalog updates for a particular period of time. The metadata generation module may generate the catalog update index metadata prior to the index based query system receiving a query relating to the contents of particular catalog update indices. In one embodiment the catalog update index metadata may be generated and or loaded e.g. into a cache memory upon launching an application or web service that supports queries of the catalog updates .

In one embodiment the query module may preload the catalog update index metadata and discover all available catalog update indices before receiving a query e.g. at startup of the query module . A user such as an administrator or provider of the index based query system may seek to obtain historical or archived catalog updates. Using a suitable user interface e.g. a graphical user interface the user may supply a query request to the query module . The query request may comprise one or more keys and a time range. In one embodiment the one or more keys may include a unique product identifier and a marketplace identifier. The time range may be specified by a start time and an end time. After the query request is received using the query module the updates to the one or more keys over the time range may be retrieved using the precomputed catalog update indices .

In particular the query module may first inspect the catalog update index metadata to determine which of the catalog update indices contain relevant entries for the specified key s and time range . In this manner the query module may identify a set of available indices that contain the specified key s in the specified time range. The query module may then perform a query on the relevant catalog update indices using the specified key s and time range to obtain pointers to results of the query. Using the pointers to storage locations of the catalog updates the query module may then retrieve the requested catalog updates from their respective storage locations. In one embodiment the query module may display the retrieved catalog updates to the user using any appropriate user interface.

As discussed above the index based query system may be used by an administrator or provider of an electronic catalog system or an update processing system to run queries for item data updates pertaining to a particular item in the catalog. In the example of an e commerce site the query may be directed to determining the price history of the item. This price history may in turn be used to locate the exact price of an item at a given point in time or alternatively to determine the origin of a possible error in data entry of the said item price. Querying the archived catalog updates may also be useful to efficiently find a bad record among the several million or billion records of item data in the electronic catalog. For example the administrator of an e commerce site may use the archive storage system to identify the source of erroneous catalog data such as price data pertaining to a particular catalog item. Because such queries may be executed off line using computing resources separate from those that host the electronic catalog system the execution of such queries may not impact performance as seen by end users of the electronic catalog system.

As shown in a plurality of forward indices may be generated. Each of the forward indices may comprise a plurality of pointers to locations in the storage system of the modifications to the document. In one embodiment each of the forward indices may be generated for a different document and or time range. Each of the catalog update indices may comprise one or more keys and one or more pointers or other references to storage locations of the catalog updates relating to the document s identified by the one or more keys. In one embodiment the keys may include a unique product identifier and a marketplace identifier. In one embodiment the forward indices may be generated automatically e.g. according to a predetermined schedule.

As shown in metadata describing the forward indices may be generated. In one embodiment the index metadata may comprise a subset of the information in the forward indices e.g. the key block headers of the forward indices. As shown in the metadata may be pre loaded e.g. into memory managed by a query module or other suitable application.

As shown in a query request may be received. The query request may comprise an identifier of the document and a specified time range. As shown in a requested subset of the forward indices may be determined. The operation shown in may comprise searching for the identifier of the document and the specified time range in the metadata describing the forward indices. The operation shown in may thus identify ones of the forward indices that are relevant to the query request.

As shown in a requested subset of the pointers may be retrieved from the requested subset of the forward indices. The requested subset of the pointers may comprise pointers to the locations in the storage system for one or more of the modifications to the document in the specified time range. As shown in the one or more modifications to the document in the specified time range may be retrieved from the storage system using the requested subset of the pointers.

As shown in a visualization of the modifications to the document may be generated. Using the index metadata the retrieved modifications may be transformed into a format that visually indicates the changes to the document over time. The visualization may be stored and or presented to the user using any appropriate techniques. In one embodiment the visualization may comprise a tabular format. In one embodiment the visualization may comprise a timeline format. In the timeline format links to the various modifications may be presented across a timeline e.g. a horizontal axis that represents the passage of time in appropriate units. The modifications initially may be presented in an abridged form or as a link on the timeline and the user may drill down into a selected modification to obtain further information. In one embodiment the transformation into the visualized format may be specified in the index metadata. For example a tabular visualization may be generated based on a data structure in the metadata that indicates raw field names representing attributes to be displayed field labels for the attributes to be displayed a sort order and any other appropriate information.

As shown in metadata describing the forward indices may be generated. In one embodiment the index metadata may comprise a subset of the information in the forward indices e.g. the key block headers of the forward indices. As shown in the metadata may be pre loaded e.g. into memory managed by a query module or other suitable application.

As shown in a query request may be received. The query request may comprise an identifier of the document and a specified time range. As shown in a requested subset of the forward indices may be determined. The operation shown in may comprise searching for the identifier of the document and the specified time range in the metadata describing the forward indices. The operation shown in may thus identify ones of the forward indices that are relevant to the query request. As shown in the one or more modifications to the document in the specified time range may be retrieved from the requested subset of the indices. As shown in a visualization of the modifications to the document may be generated as discussed above with respect to .

In one embodiment the electronic catalog server may be part of an e commerce site that provides functionality for users to interactively browse and make purchases from the electronic catalog. Administrators may also access the electronic catalog server to perform routine maintenance or other administrative tasks including gathering information regarding updates to the electronic catalog. Such users and administrators may remotely access the electronic catalog server and browse the electronic catalog using various types of requestor computing devices one shown for purposes of illustration . In some embodiments a requestor computing device may comprise an application connected to the electronic catalog server to retrieve information regarding updates to the electronic catalog. The requestor computing devices may be any of a number of types of computing devices that are capable of communicating over a network including but not limited to a laptop personal computer server computer tablet computer personal digital assistant PDA hybrid PDA mobile phone mobile phone smartphone electronic book reader digital media player and the like.

As shown in the requestor computing devices may communicate with the electronic catalog server via one or more communication network s such as the Internet or other communications link. Those skilled in the art will appreciate that the network may be any wired network wireless network or combination thereof. In addition the network may be a personal area network local area network wide area network cable network satellite network cellular telephone network etc. or combination thereof. Protocols and components for communicating via the Internet or any of the other aforementioned types of communication networks are well known to those skilled in the art of computer communications and thus need not be described in more detail herein.

In one embodiment the electronic catalog server is generally responsible for providing an electronic catalog through a user interface in communication with various user devices such as requestor computing device via network s . The electronic catalog provided by the electronic catalog server may generate text and or graphics possibly organized as a user interface using hypertext transfer or other protocols in response to information requests received from the various requestor computing devices .

The electronic catalog server may be connected to or in communication with an archive data store and a live data store . The archive data store and the live data store may be local to electronic catalog server they may be remote to the electronic catalog server and or they may be network based services themselves. The archive data store may be connected to or in communication with querying server . A static indexing module on the querying server may generate one or more static indices to index the updates stored on the archive data store . The static indices may in some embodiments be stored on archive data store . In other embodiments the static indices may be stored on the querying server or in another store or server illustrated in or elsewhere either locally or remotely.

The live data store may include a dynamic index . The dynamic index may be generated for the updates stored on the live data store . In the illustrated embodiment both the archive data store and the live data store are connected to or in communication with the indexing server . The indexing server may include an index collating module for collating the static indices and the dynamic index . The indexing server may also include a dynamic index purging module to manage the size of the dynamic index .

At various points in time the items available through the electronic catalog system may have updates associated with them. The updates may be received from various catalog update providers. As the updates are received they may be stored in live data store and indexed in real time for easy retrieval. The dynamic index may be stored in the live data store . As more updates are stored in the live data store and or over time the updates may need to be archived and stored in archive data store .

Updates may be archived in collection of records or objects wherein each of the records within an object may have a key representing a value associated with the item that was updated and a version associated with the value of the updated item. The collections of records of data may be grouped together based on time size or some other criteria. Records may for example be appended to one another until the collection reaches a predetermined size such as for example about a hundred to several hundred megabytes MB . In other embodiments the records may be grouped together until a predetermined interval of time is reached. For example records may be successively appended for fifteen minutes one hour one day or any other predetermined interval of time deemed appropriate for relevance of the update to the querying system. After the predetermined size or interval of time is reached the collection of records may optionally be compressed.

The objects may also have object metadata associated with them and the object metadata may allow for the static indexing of the records. Generally object metadata may include any data used to describe aspects or properties of a given object. For example object metadata may include information identifying the date of an object s creation the identity of its creator whether the object has any records associated with it or other suitable information. In some embodiments object metadata may include information indicative of usage characteristics of an object such as the total size of records associated with an object access history of users with respect to an object and or its associated records or any other suitable information related to current or historical usage of an object. In one embodiment each object may be associated with a respective unique identifier which may be automatically assigned by the archive data store . Additionally a pointer to each record within the object may be stored within the object metadata or as a separate property or field of an object. In some other embodiments a given object may include explicit references or pointers or other information corresponding to the records associated with a given object. By using the identifiers or pointers it is possible to only decompress a specific record within the collections.

Once the updates are archived in archive data store they can be indexed by the static indexing module implemented by the querying server . The static indexing module may generate one or more static indices in the background and independently of activity on the electronic catalog server and therefore without affecting the performance of the electronic catalog server . The one or more static indices generated by the static indexing module may then be stored in the archive data store or they may be stored on the querying server or on another server or data store. The static indexing module may also periodically update the one or more static indices .

In one embodiment the catalog update indices may be generated in a similar manner using the querying server . In response to a suitable query the querying server may create an index that contains a list of pointers to storage locations for each update to a key e.g. an item ID . The index build queries may be automatically generated based on indexing metadata.

In one embodiment the live data store stores item data updates received for items available on the electronic catalog in real time as the updates are received. The updates may be received from a variety of sources including for example from merchants wishing to sell or otherwise make items available to consumers from administrators of the electronic catalog server and from others. The updates may include one or more of a change in the item s price availability title item identifier item feedback e.g. user reviews ratings etc. item image item description item attributes etc. The live data store may include a dynamic index . The dynamic index may be generated in real time based on the updates received by the live data store .

In the illustrated embodiment the live data store is in communication with the indexing server . The dynamic index purging module of the indexing server may be used to manage the size of the dynamic index by purging updates from the dynamic index in accordance with a routine.

The electronic catalog server may make the updates available for query by catalog update providers or administrators of the electronic catalog server . For example a query request may be input via a requestor computing device and received by the electronic catalog server . The electronic catalog server may then submit the request to the indexing server . The indexing server may then through the index collating module respond to the request.

In some embodiments each static index may be a read only database or read only object stored in the archive data store wherein the key associated with the object in the static index is the key by which the results were aggregated and the value of the object in the static index is a pointer wherein the pointer may point to the location of the object within the archive data store . As an example the archive data store may be queried for all updates pertaining to nonfiction books. When the query results are received the static indexing module may create an object in the static index with the key being nonfiction books with values corresponding to all a pointers to the object stored in the archive data store corresponding to all updates to nonfiction books. Therefore once such a static index is created if an administrator of the system later submits a query regarding updates to all nonfiction books instead of scanning all the update records stored in archive data store to locate the records associated with nonfiction books the system would instead only need to locate a static index by the key of nonfiction books among all static indices created and thereafter return the location of the object associated with that key and then if desired retrieve only the update records of that object.

Therefore the creation of the static indices may allow the collections of records or objects stored in the archive data store to be queried more efficiently without having to scan all the objects in the archive data store . In one embodiment only the static indices which have aggregated results by keys are queried and the results of such queries can be used to then locate the relevant object records in the archive data store. The static indices created may also in some embodiments be compressed and encrypted. Such a static indexing scheme allows several millions and even billions of update records to be queried with minimal random access memory RAM requirements and in little time in the order of about 100 ms or less in some embodiments.

As described above there may be situations where a user or administrator of the electronic catalog server or an application in communication with the electronic catalog server may submit a query regarding updates to the electronic catalog items in the form of a request. The updates may then be used for performing various types of analysis regarding historical variations of item attributes for troubleshooting the origin of bad records and the like. In some embodiments the user administrator or application may submit such query requests through a requestor computing device . In other embodiments a query request may be submitted via a call to an application programming interface API . The request may be received by the electronic catalog server and then communicated to the indexing server .

In at least some embodiments a computer system that implements a portion or all of one or more of the technologies described herein such as the index based query system and or may include a general purpose computer system that includes or is configured to access one or more computer readable media. illustrates such a general purpose computing device . In the illustrated embodiment computing device includes one or more processors coupled to a system memory via an input output I O interface . Computing device further includes a network interface coupled to I O interface .

In various embodiments computing device may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may include any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above are shown stored within system memory as code i.e. program instructions and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computing device and other devices attached to a network or networks such as other computer systems or devices as illustrated in and or for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet network for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer readable i.e. computer accessible medium configured to store program instructions and data as described above for for implementing embodiments of the corresponding methods and apparatus. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer readable media. Generally speaking a computer readable medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computing device via I O interface . A non transitory computer readable storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of computing device as system memory or another type of memory. Further a computer readable medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface . Portions or all of multiple computing devices such as that illustrated in may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality. In some embodiments portions of the described functionality may be implemented using storage devices network devices or special purpose computer systems in addition to or instead of being implemented using general purpose computer systems. The term computing device as used herein refers to at least all these types of devices and is not limited to these types of devices.

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer readable medium. Generally speaking a computer readable medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc. In some embodiments a computer readable medium may also include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent exemplary embodiments of methods. The methods may be implemented in software hardware or a combination thereof. In various of the methods the order of the steps may be changed and various elements may be added reordered combined omitted modified etc. Various of the steps may be performed automatically e.g. without being directly prompted by user input and or programmatically e.g. according to program instructions .

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended to embrace all such modifications and changes and accordingly the above description is to be regarded in an illustrative rather than a restrictive sense.

