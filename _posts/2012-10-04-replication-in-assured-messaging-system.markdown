---

title: Replication in assured messaging system
abstract: An assured message delivery system with resiliency receives messages from publishing client(s) and delivers them to subscribing clients. A primary system delivers the messages during normal operation. A secondary system mirroring the configuration of the primary system takes over responsibility for delivering the messages in the event of failure of the primary system. The secondary system is connected to the primary system over a communications link. The primary system sends copies of the messages to the secondary system over the communications link. The secondary system stores replicate messages and sends acknowledgement messages back to the primary system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09319267&OS=09319267&RS=09319267
owner: SOLACE SYSTEMS, INC.
number: 09319267
owner_city: Kanata, ON
owner_country: CA
publication_date: 20121004
---
This invention relates to data communication networks and in particular to a method of providing message replication as a feature of an assured message delivery system.

In the prior art many message delivery systems exist which offer assured message delivery between endpoints such as between different applications. Assured message delivery is also known in the art as persistent guaranteed or durable messaging. An exemplary implementation of an assured messaging system is detailed in U.S. Pat. No. 7 716 525 Buchko the contents of which are herein included by reference.

Many of the applications that make use of assured message delivery systems are mission critical in nature and in some cases are critical to business continuity. Prior art assured message delivery systems often include redundancy as a feature such that they can recover quickly from component failure in applications that are critical to business continuity component level redundancy may not provide sufficient protection. In these cases the required level of system availability can only be achieved by replicating the messages and transferring them to another system possibly in another location. Redundancy provided by message replication is distinguished from component redundancy by the location of the redundant equipment and the failover mechanisms. In a replication deployment the secondary infrastructure would typically be in a separate building. Component level redundancy schemes typically feature automatic failover to minimize the duration of the outage in these situations the systems detect the failure and switch over to the redundant system without any intervention from the network operator. In the case of replication the decision to switch to the secondary site is most often made by network operators.

Prior art assured messaging systems typically use disk and disk based file systems as a non volatile store of message data and related state. The disk store is typically located in a separate system and connected by a storage area network SAN . Disk storage equipment from EMC Corporation supports a feature called Symetrix Remote Data Facility SRDF and other manufacturers support similar features where data stored to disk is synchronously or asynchronously mirrored to a disk located in a remote site using wide area networking technologies typically TCP IP combined with iSCSI . Assured messaging systems that make use of disk storage are able to use features such as SRDF to implement replication. In such an implementation message data and state replicated by the disk system can be recovered by a secondary system which is able to resume operation in the case of a service interruption in the primary infrastructure. Systems implemented in this way suffer from a few undesirable characteristics. They are slow to become active after a switch and the necessity to write to disk affects normal run time performance. These systems are slow to recover replicated messages and state because they are unable to maintain state in real time. Disk based file systems are not generally multi access meaning that only one system can have access to the data stored on the disk at a time. The practical limitation to the assured messaging system that relies on mirroring a disk based file system to a remote site as a persistent store is that the system in the secondary site cannot have access to the file system stored on the disk until it is determined that the replicated messages must be recovered. At this point the secondary system must mount the mirrored copy of the file system and rebuild all state from data stored on the disk this operation could take from several minutes to hours to complete.

The properties of disk based file systems also affect the real time performance of the assured messaging system as described by Buchko. In particular the latency associated with accessing disks is amplified if the disk writes must be synchronously mirrored to a remote site. By the nature of how the previously discussed disk mirroring features work even if a single user of the messaging system required synchronous mirroring of data to a remote disaster recovery site then all users of the assured messaging system would suffer the additional performance penalty.

The primary use of replication in message delivery systems is to aid in the implementation of redundancy. Current replication implementations that rely on features of disk systems to mirror persistent data to a secondary system suffer from a number of limitations. It would be desirable to have a replication implementation with the following characteristics synchronous and asynchronous assured message delivery without the need to involve disk based storage isolation of users such that user s that do not require replication are not affected by those that do and real time update of message delivery state in secondary system to facilitate fast resumption of activity after a switch has been effected.

According to the present invention there is provided an assured message delivery system with resiliency for receiving messages from publishing client s and delivering them to subscribing clients comprising a primary system for delivering the messages during normal operation and a secondary system mirroring the configuration of the primary system for taking over responsibility for delivering the messages in the event of failure of the primary system said secondary system being connected to the primary system over a communications link and wherein the primary system is configured to send copies of the messages to the secondary system over the communications link and the secondary system is configured to store replicate messages and send acknowledgement messages back to the primary system upon receipt of the replicate messages.

This system allows the secondary system to take over seamlessly in the event of failure of the primary system with minimal latency since to the clients the secondary system already has the same credentials as the primary system without the need to download state information from storage.

1 A system in which a single instance can support a mix of synchronous asynchronous and non replicated traffic where the presence of replicated traffic has no effect on the performance of non replicated traffic.

According to another aspect of the invention there is provided a method of providing resiliency in an assured message delivery system for receiving messages from publishing client s and delivering them to subscribing clients comprising provisioning a primary system to deliver the messages during normal operation provisioning a secondary system to mirror the configuration of the primary system sending copies of the messages from the primary system to the secondary system storing replicate messages at the secondary system the secondary system sending acknowledgement messages back to the primary system when it has stored the replicate messages and wherein the secondary system takes over responsibility for delivering the messages in the event of failure of the primary system.

The secondary system is comprised of the replication target message delivery router and related equipment such as storage connected to message delivery router via link . The storage is an optional component depending on implementation as was described for the primary system . Note that prior art implementations of assured messaging systems with replication also typically feature a storage element similar to or the implementation of the present invention differs by the fact that the storage system or SAN is not the mechanism by which data is transferred between the primary and secondary systems . The present invention features a communication link that connects the active message delivery router of the primary system and the replication target message delivery router of the secondary system . The communication link could be implemented using any standard networking technology. If the two systems are located in different geographies communication link should be implemented using a networking technology suited to use in a wide area environment such as TCP IP. The communication link is a logical connection in reality the two systems are typically connected by one or more switches routers transmission equipment and physical links. The communication link is used to transport replicate messages and associated state between the active message delivery router of the primary system and the replication target message delivery router of the secondary system in real time by mechanisms to be described in subsequent sections.

As previously described shows a typical deployment of an assured message delivery system featuring a primary locally redundant system with additional redundancy provided by the replication target message delivery router of the secondary system . Techniques used to implement redundancy such as those described in U.S. Pat. No. 7 859 992 are more suitable to deployments where active and standby systems are connected to the same local area network LAN . Redundancy schemes implemented using message replication are suitable to environments where the primary and secondary system are connected by a wide area network WAN or a LAN. In a local redundancy scheme such as between active message delivery router and standby message delivery router an activity switch to the standby in the event of a failure of the active is often automatic and is effected without intervention from network operators. In the case of redundancy schemes implemented using message replication a switch over to the secondary system usually requires operator intervention and is expected to take longer to effect however operator intervention is not a requirement and it is possible within the scope of the present invention to implement a system that features automatic failover to the secondary system. In the case of the primary locally redundant system it may be possible using the techniques of U.S. Pat. No. 7 859 992 for clients to reconnect to the same address after an activity switch from active to standby when switching from primary system to secondary system the clients will have to re connect to a different address. For clients that must reconnect to a different address after an activity switch two example techniques that should be known to those skilled in the art are changing the DNS entry for the message delivery router or simply to have the clients configured to attempt to connect to a different network address if they time out trying to connect to the primary system .

Client in is an example of a client that is not collocated with either the primary or secondary systems. The client could be a server hosted in a separate datacenter a mobile device or any device that is capable of communicating with the message delivery routers . Client communicates with the message delivery routers via communication links as with communication links and these links are logical in nature and would most likely be comprised of a series of switches routers transport equipment and associated cables and optical fibers. Communication link is shown as a dashed line indicating that it is not currently active. If there was an activity switch and the secondary system was to become active then client would establish communication to with the replication target message delivery router via communication link using one of the previously described techniques.

The behavior of the secondary system differs from the primary system in a number of ways. Firstly configuration must be mirrored from the primary system to the secondary within the scope in which the secondary is acting as a replication target. This may be done automatically such that when a configuration change is made on the primary it is automatically mirrored to the secondary or may be done manually. The configuration must be mirrored so that clients can connect to the replication target message delivery router with the same credentials used to connect to the primary system . A second difference is in the way messages are queued to endpoints on the replication target message delivery router . With the configuration mirrored the replication target message delivery router can now queue messages to the endpoints equivalent to those on the primary system . Messages queued to endpoints in the replication target message delivery router will not be delivered to clients until an activity switch from primary system to secondary has been effected. If the replication target message delivery router queues messages but is unable to deliver them it will eventually run out of resources. Leading to a third difference subscribing clients must acknowledge the receipt of a message to the primary system once all the copies of a message have been delivered and acknowledge by subscribing clients the active message delivery router can delete the message freeing resources. The active message delivery router will also forward the acknowledgements on to the replication target message delivery router so that it may also delete the copy of the message that the acknowledgement is referencing. These and other differences between the primary and secondary systems will be discussed in detail in subsequent sections.

The receipt of the message sent by the publishing client must be acknowledged by the primary system this is show as flow also known as a publisher acknowledgement or publisher ack . The determination of when to acknowledge the publisher is made depending on the type of type of replication service that is provided. If the router core determines that the message does not require replication or it requires asynchronous replication then the publisher acknowledgement can be sent as soon as the message is successfully placed in non volatile storage . If the router core determines that the message must be replicated using synchronous replication then the publisher acknowledgement cannot be sent until the secondary system has successfully received a replicate of the message and returned an acknowledgement stating that it received the replicate and placed it in its own non volatile storage . Processor receives the acknowledgements from the secondary system and removes acknowledged messages from queue . Processor also waits to send the publisher ack to publisher for messages that were synchronously replicated until it receives an acknowledgement for the message from the secondary system . The secondary system receives replicated messages from the primary system out of queue . The router core of the secondary system processes replicated messages from the primary system as the router core of the primary system processes messages from publishing clients . The router core of the secondary system will match the topic or content of replicated messages to interests that have been mirrored via previously described configuration mirroring process from the primary system and copies of the messages are placed into queues that correspond to queues for which matching interests were detected. The router core of the secondary system must also place the message in to non volatile storage . Once the message has been successfully placed in non volatile storage the secondary system can send an acknowledgement back to the primary system .

The primary system delivers messages to subscribing client s from queues . Each subscribing client receives an individualized stream of messages depending on the interests that it has registered with the router core and its ability or willingness to receive messages. After receiving a message a subscribing client must send a subscriber ack back to the primary system acknowledging that it successfully received the message. The primary system processes the subscriber acknowledgements in block as follows first it will remove the copy of the message from the queue that the subscribing client received it from. Second it will determine if the message was replicated and a copy of the subscriber acknowledgement must be forwarded on to the secondary system . If a copy of the subscriber acknowledgement is forwarded shown as flow to the secondary system processor will examine the acknowledgement and remove the corresponding copy of the message from its queue .

The processing steps shown in will be detailed by in which is a flow chart describing processing performed in the router core of the primary and secondary systems. Processing on the primary system begins at step when the message delivery router receives a message from a publishing client at step . The message delivery router extracts the topic or content that will be used to match the message to interests from subscribers and to determine if the message is to be replicated in step . The process of matching is performed at step and a copy of the message is placed in local non volatile store and queued to all local endpoints at step . As will be described it may be necessary for the primary message delivery router to forward acknowledgements received from subscribing clients to the replication target message delivery router. A forward ack flag is used to keep track of which acknowledgements need to be forwarded. At step the forward ack flag is set to do not forward for each local endpoint to which a copy of the message is queued. At step the results of the matching process are checked for the existence of a match to an interest associated with a replication endpoint. A replication endpoint is similar to a subscriber endpoint in that it is a destination to which a copy of the message must be sent but different because it is the secondary system another message delivery router configured to be a replication target. Note that there are other possible mechanisms that could be employed within the scope of the present invention to determine if a message needs to be replicated or not. For example the publishing client could indicate that a message is to be replicated based on the status of a flag in the message header or there could be attributes associated with matching endpoints that indicate a need to replicate messages sent to that endpoint. If there is a replication endpoint present proceed to step where the forward ack flag is set to forward for each of the local endpoints to which the message was queued in step . At this time the message delivery router should also take note of the type of replication that the message is to undergo synchronous or asynchronous as it would typically be an attribute associated with the interest that matched the replication endpoint and affects how the publisher acknowledgement will be sent to be described in a subsequent section . In step a copy of the message is placed in the queue for the replication target message delivery router. If the test in step does not yield a replication endpoint then proceed to step . In step the message delivery router can begin delivering copies of the message queued to endpoints that are ready and willing to receive them if it is determined at step that there is a replication target endpoint then this process can begin after step .

In the previous section the processing performed when a message is received from a publishing client by the primary message delivery router was described. further describes the processing of the replicated copy of the message that must be carried out by the replication target. In step the replication target receives a copy of the message from the primary message delivery router. In processing similar to that which occurred on the primary system in step the replication target extracts the message topic or content that will be used in the matching process at step . In step the message topic or content is matched to the interests of endpoints that were previously mirrored to the replication target from the primary. The resulting matches from step should be identical to the local endpoints matched on the primary message delivery router in step . In an alternate implementation the local matching endpoints on the primary message deliver router from step could be sent to the replication target along with the message in step . This would relieve the replication target of the task of performing the matching itself. In step a copy of the message is placed in queue to the matching endpoints and the message is stored in local non volatile storage. Note that the messages will not be delivered by the replication target until an activity switch is effected and the replication target becomes the active message delivery router.

There is another possible alternate implementation in which the decision whether or not to replicate a message is determined based on the requirements of the subscribing clients for which a matching interest was found. In the alternate implementation the decision to replicate a message is based on the results of a lookup of a replication behavior attribute for each subscriber endpoint for which a matching interest was detected. The state of the attribute can be synchronous replication asynchronous replication or no replication. If the attribute for any of the matching subscriber endpoints is set to either synchronous or asynchronous replication then a copy of the message must be placed in queue to the replication target message delivery router. Different subscriber endpoints may receive different replication treatments however if any of the matching endpoints have the replication attribute set to synchronous then the publisher must receive the synchronous acknowledgement treatment as will be described. Also in the alternate implementation the forward ack flag indicating whether or not the subscriber acknowledgement is to be forwarded to the replication target must be set to forward for any matching endpoint that had its replication attribute set to synchronous or asynchronous replication. In the alternate implementation an additional check of the replication behavior attribute is performed on the replication target message delivery router for each endpoint that has registered an interest that matches the message to determine which endpoints to queue a copy of the message to. On the replication target message delivery router a copy of the message will only be queued to endpoints with a matching interest that had the replication behavior attribute set to synchronous or asynchronous replication.

Of messages that are to be replicated there are two possible treatments which they may receive synchronous or asynchronous. The difference between the two treatments is in when the acknowledgement is sent back to the publishing client . The message delivery router will not send the acknowledgement to the publisher for messages that are synchronously replicated until the message has been received and stored by the replication target message delivery router . This results in a long round trip time from the publishing client generating a message to the message delivery router returning a publisher acknowledgement for the message . Long round trip times result in low throughput for publishing clients that are using blocking send calls. The round trip time can be reduced by using asynchronous replication in which case the message delivery router is able to return an acknowledgement to the publisher as soon as it has placed the message in its local storage . In fact the performance of asynchronous replication is almost identical to that of no replication. The cost of doing asynchronous replication is that there may be message loss during an activity switch. For example if the primary system was to fail after the acknowledgement was returned to the publisher but before a copy of the message was sent to the replication target the message would be lost once the replication target became active.

The techniques described in provide some significant advantages compared to prior art methods that use storage features as the replication mechanism. Storage systems at their core read and write blocks of data to disk or arrays of disks they are unaware of what is stored in the blocks. For example when a message is written to disk by a write call to the file system resulting in a number of storage blocks being written the storage system is unable to tell which of those blocks contain the message data and which carry other data that may be required by the file system. If the storage is synchronously replicating these blocks to storage that is a part of the secondary system then each block must be transferred and acknowledged before the next block can be written resulting in low message throughput. Furthermore whether or not to synchronously replicate the storage blocks is a mode of the storage and if there are any message flows system wide that must be replicated synchronously then all message flows that must be placed in storage will suffer the performance impacts. Using the methods of the present invention each system primary and secondary manages its own storage and the two systems are aware of the boundaries between messages. This allows the secondary system to acknowledge messages as opposed to synchronously acknowledging every block without knowledge of where the message boundaries are . The primary system may also stream messages to the secondary it does not need to wait for the secondary system to acknowledge previous messages before it can send the next. This increases throughput and allows the primary message delivery router to proceed in processing messages from other clients while waiting for the secondary system to return an acknowledgement for a previously sent message. In prior art methods it is the act of writing the message to the storage system that triggers the replication of the message. In a persistent messaging system the messages must be placed in non volatile storage if each storage block write needs to be synchronously replicated and transferred to a remote storage system it will stall subsequent storage operations. Using the techniques of the present invention the message is locally stored which is a relatively inexpensive operation allowing client delivery to proceed quickly and in parallel with replication of the message. The present invention allows asynchronous and synchronous replication to co exist as shown in the only difference between the synchronous and asynchronous replication is when the publisher acknowledgement is sent. In prior art methods if any messages in the system are to receive the synchronous treatment then the storage system must be put into synchronous mode and as a result all messages receive the synchronous treatment.

The techniques of the present invention offer another advantage in the case where connectivity between the primary and secondary systems is lost or where the secondary system becomes congested and is slow to return acknowledgements. If any of these conditions are detected then using the techniques of the present invention messages that are to be synchronously replicated can temporarily be converted to asynchronously replicated. This will allow an acknowledgement to be sent to the publisher so that the publishing client can make forward progress during the time that the secondary system is offline or until it is able to clear the congestion.

In the previously described situation where the secondary system is offline or congested many messages may accumulate in the queue to the secondary system . If the primary system receives all of the subscriber acknowledgements for a message while it is still in queue to the secondary system then the primary system can remove the message from the queue to the secondary system . This will help to relieve congestion in the queue to the secondary system and will also help the secondary system to catch up when it comes back online because there will be less events that it needs to process in order to catch back up. In the previously described alternate implementation where the results of the matching process are transferred along with the message to the replication target message delivery router if the primary system receives a subscriber acknowledgement before the message is transferred to the replication target then the destination which the acknowledgement is referencing may be removed from the list of matching interests that is to be transferred with the message. In this case the subscriber acknowledgement can be discarded as there is no longer a need to forward it to the replication target. Similar to the previously described implementation if all the subscriber acknowledgements for a particular message have been received while it is still in queue to the replication target message delivery router then the message may be removed from the queue. In the alternate implementation this condition can be detected by the fact that there will be no matching interests left in the list that is to be transferred to the replication target along with the message.

Previously discussed assured messaging semantics have been either what is known in the art as publish subscribe or queue based. There is another assured messaging semantic known in the art as transaction based. In transactional messaging a series of messages are bundled as a group or transaction . From the point of view of a messaging system client the elements or operations that compose the transaction can be either message reception message generation or a termination of the transaction. When the client has completed all of the message generation and reception elements of the transaction it can terminate it either by committing the transaction or rolling it back. The key point is that all of the elements composing a single transaction are either completed as a unit or rolled back or undone . It is not possible for a transaction to be partly completed. If a transaction is rolled back then any messages read as a part of it are returned to the undelivered state and any messages generated as a part of the transaction are deleted before they are delivered to any client endpoints. is a flow chart that describes how the present invention provides replication of transactional messages.

Those skilled in the art will see that there is a possible alternate implementation of transactional messaging with replication to the one presented in . In the alternate implementation the primary system stores the entire transaction in its temporary non volatile transaction buffer until the transaction is committed at which point all messages generated and acknowledgements for messages consumed as a part of the transaction are transferred as a single operation to the replication target system. The alternate implementation has the advantage that is simpler to implement than the implementation described in . For example if the transaction is rolled back the replication target does not need to be notified the primary system can simply discard any messages generated as a part of the transaction and return to the undelivered state any messages read. The disadvantage of the alternate implementation is that if the transaction contains many messages it may take a long time to process the commitment of the transaction because of the time required to transfer a copy of all the messages that comprise the transaction to the replication target system. If the transaction is to receive synchronous publisher acknowledgements it may take a relatively long time for the primary system to return a publisher acknowledgement to the publisher. This can lead to unpredictable performance.

