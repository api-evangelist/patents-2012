---

title: Converting two-tier resource mapping to one-tier resource mapping
abstract: Converting a two-tier resource mapping to a one-tier resource mapping may include determining a first mapping from an intermediate data buffer to a data destination. A second mapping from a data source to the intermediate data buffer may also be determined. An optimized mapping from the data source to the data destination may be generated based on the first and second mappings. The optimized mapping may then be used instead of the first and second mappings to collect data from the data source to the data destination, thereby resulting in a one-tier resource mapping. In some instances, the mappings may be sets of one or more queries.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08577848&OS=08577848&RS=08577848
owner: International Business Machines Corporation
number: 08577848
owner_city: Armonk
owner_country: US
publication_date: 20120730
---
This application is a divisional of U.S. patent application Ser. No. 12 842 975 filed Jul. 23 2010 which is incorporated herein by reference in its entirety for all purposes.

The present invention relates to systems methods and computer program products for mapping resources between entities and or datasets such as databases and data buffers.

Businesses or other organizations that deploy information technology IT resources such as computers peripheral devices smart phones and other hardware referred to herein generally as firmware resources may track the resources using various information systems. However firmware resources may be constantly changing or evolving. For example computers in an office may be replaced or modified with new hardware or software as old technology becomes obsolete or too inefficient to support evolving business needs. As firmware resources change the organization deploying the firmware may wish to update its inventory of firmware resources.

It may be difficult for an organization with a large amount of firmware resources to track changes to those resources. Accordingly the organization may implement automated firmware resource tracking. This resource tracking may be divided into two tiers. In the first tier a firmware resource may be configured to provide information about its own firmware to an intermediate data buffer such as a database. In some instances the data that is received from the firmware resource may be organized in the intermediate data buffer in accordance with a standard model schema such as the Common Information Model CIM the Simple Network Management Protocol SNMP the Network Configuration Protocol Netconf and so forth.

In the second tier data from the intermediate data buffer may be mapped to data in a data destination such as a database e.g. a configuration management database . The data that is received from the intermediate data buffer may be organized in the data destination in accordance with a different schema than that of the intermediate data buffer such as the Universal Systems Management Initiative USMi or the Common Data Model CDM .

Mappings between entities may be implemented in various ways. One way of mapping data from one dataset to another is to use one or more queries which serve to map data from a dataset with one schema to a dataset with a different schema. For example a firmware resource such as a computer may have an application programming interface API that is configured to receive one or more queries in a nomenclature particular for that API and return information about the firmware resource e.g. motherboard manufacturer power parameters such as voltage and amperage and so forth in response to the queries. An intermediate data buffer may be a CIM database that is configured to receive CIM queries and return information in response. A data destination may be a CDM database at which a user may define CIM queries to obtain data from the CIM database for the CDM database. Multiple queries may be organized at the data destination as a set of queries designed to obtain particular information from the firmware resource. For example a predefined set of queries at the data destination may be configured to determine the electrical power P delivered to a particular firmware resource and therefore may seek voltage V and current I P V I .

Two tiered resource mapping may give rise to various issues. Data available at a firmware resource may not correspond directly with data at an intermediate data buffer because the two may use different schemas. However the schema utilized at a data destination may correspond with the schema at the firmware resource. In such a scenario data mapped from the intermediate data buffer to the data destination may experience a loss of atomicity from that which is available at the firmware resource. For example assume that a set of queries at the data destination is designed to obtain voltage V and current I. The firmware resource API may be configured to provide both of these values but the schema of the intermediate data buffer schema may only allow for it to receive and provide power P.

Another issue with two tiered mappings is that data may experience a loss of precision as it traverses the two tiers. For example a firmware resource may provide a datum with 64 bits. Even if the schema utilized at a data destination seeking this datum allows for 64 bit data if the intermediate data buffer only supports 32 bit data then a datum from the firmware resource may lose precision as it is obtained from the firmware resource by the intermediate data buffer and ultimately provided to the data destination.

A third issue that may arise with two tier mappings is an aggregation bottleneck. A query to an API of a firmware resource from an intermediate data buffer may return hundreds of pieces of information all of which may be needed at the data destination. However multiple queries may be required to obtain the same data from the intermediate set for the data destination. Each query from the data destination to the intermediate data buffer may require a round trip of packets across a computer network causing a bottleneck.

A fourth issue may arise where data desired from the firmware resource at the data destination is not represented by the schema of the intermediate data buffer. In such a scenario it may be necessary to create a mapping directly from the firmware resource to the data destination.

Systems methods and computer program products for converting two tier resource mappings to one tier resource mappings are provided herein. A first mapping from an intermediate data buffer to a data destination may be determined. A second mapping from a data source to the intermediate data buffer may also be determined. Based on the first and second mappings an optimized mapping from the data source to the data destination may be generated. This generation may occur during loading or compilation of a computer program which allows the resource mapping from the data source to the data destination to be designed as two tier mapping and executed as a one tier mapping.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or cluster diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each cluster of the flowchart illustrations and or cluster diagrams and combinations of clusters in the flowchart illustrations and or cluster diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or cluster diagram cluster or clusters.

These computer program instructions may also be stored in a computer readable medium that can direct computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or cluster diagram cluster or clusters.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or cluster diagram cluster or clusters.

Referring to an exemplary data processing apparatus is depicted. Data processing apparatus may be a general or special purpose computer such as a personal computer a laptop computer a computer cluster e.g. a blade system a web server a database server a smart phone a wireless email device a tablet computer a personal digital assistant a network component e.g. firewall router switch and so forth. Data processing apparatus may include a central processing unit CPU and memory e.g. RAM operably coupled by a bus . Data processing apparatus may include additional components such as ROM long term storage e.g. hard disk and one or more communication interfaces through which a connection may be established to communicate with other data processing apparatus on a network . Communication interface may be various types of network interfaces such as an Ethernet card a wireless adapter and so forth.

Referring to an exemplary two tiered resource mapping includes a data source an intermediate data buffer and a data destination . Each of these entities may be hosted on one or more data processing apparatus such as data processing apparatus in . Additionally more than one of these entitles may be hosted on a single data processing apparatus. Each of these entities may be configured to at least temporarily hold data whether it is in a database one or more files on registers and so forth.

A first mapping includes one or more relationships between data in intermediate data buffer and data destination . A second mapping includes one or more relationships between data available at data source and intermediate data buffer . A mapping may include one or more queries configured to relate data from a entity with one data storage schema to an entity with a different data storage schema. As used herein a data storage schema will be referred to herein as a schema and refers to a manner in which data is organized in a particular entity.

Using systems methods and computer program products disclosed herein two tier resource mapping may be converted into a one tier resource mapping . This conversion may be performed at various times such as during loading or compilation of a computer program configured to obtain data from data source for data destination . As will be described below compile time optimizations and other steps may be performed to create a third mapping which may include an optimized set of queries that avoid some of the issues with two tiered resource mappings described above.

A first set of queries includes one or more queries configured to collect data from standard model dataset for application model dataset . A second set of queries includes one or more queries configured to collect data from firmware resource for standard model dataset . Using systems methods and computer program products disclosed herein two tier resource mapping may be converted into a one tier resource mapping by creating a third optimized set of queries configured to collect data from firmware resource for application model dataset that avoids some of the issues with two tiered resource mappings described above.

An exemplary method of generating an optimized mapping in order to convert a two tier resource mapping to a one tier resource mapping is depicted in . Although the steps of and other methods depicted in the Figures are shown in a particular order this is not meant to be limiting as the steps may be performed in various other orders as well.

At step a first mapping e.g. first mapping in first set of queries in from an intermediate data buffer e.g. intermediate data buffer of standard model dataset in to a data destination e.g. data destination of application model dataset in is determined. The first set of queries may be determined in various ways. For example application model dataset of may be hosted on a data processing apparatus that is configured to track firmware resources for an organization. One or more mappings may be created and or predefined on the data processing apparatus in the form of templates designed to obtain particular information from one or more firmware resources under the organization s control. An example template is shown in and will be discussed below.

In step a second mapping e.g. second mapping in second set of queries in from a data source e.g. data source in firmware resource in to the intermediate data buffer is determined. The second mapping may be determined in various ways and may be based on the first mapping as will be discussed below.

In step an optimized mapping e.g. third mapping in third set of queries in is generated based on the determined first and second mappings. The optimized mapping may then be used instead of the first and second mappings in order to make the process of obtaining data from the data source for the data destination more efficient specifically by foregoing the intermediate data buffer. The optimized mapping may be generated at various points in time such as during loading or compilation of a computer program configured to obtain from a data source for a data destination. Thus a user may still design and create source code for the computer program based on a two tier model but the resulting computer program will execute as a one tier model.

As noted above in some two tier resource mappings there are instances where a datum desired from a data source at the data destination is not represented by the schema of or stored by the intermediate data buffer. A similar issue arises where data experiences a loss of precision as it traverses the two tiers. For example a firmware resource e.g. in may provide a datum with 64 bits. Even if the schema utilized at an application model dataset in allows for 64 bit data if the intermediate standard model data buffer in only supports 32 bit data then a datum from the firmware resource may lose precision as it is obtained from the firmware resource by the standard model data buffer and ultimately provided to the application model dataset.

In such scenarios a mapping may be created directly from the firmware resource to the data destination to avoid the loss of data or data precision. For example in step of a fourth mapping from the data source e.g. data source in firmware resource in to the data destination e.g. data destination in application data model dataset in may be generated and included with the third mapping e.g. third mapping in third set of queries in . The fourth mapping may serve to prevent a loss of data where an intermediate data buffer does not support a particular datum or to maintain a precision of a datum where an intermediate data buffer does not store the datum with the same precision as the data source or data destination.

In step the optimized mapping generated in steps and may be validated. For example assume the mappings are sets of queries such as first set of queries second set of queries and third set of queries in . First set of queries and second set of queries may be executed and the data ultimately collected may be compared to data separately collected using third set of queries . In some instances boundary cases may be utilized as input data. If the data collected by the first and second sets of queries matches data collected by third set of queries then third set of queries may be considered validated. If the collected data does not match then it may be determined that third set of queries is not valid.

Similar to depicts an exemplary method of generating an optimized set of queries in order to convert a two tier resource mapping to a one tier resource mapping. In step similar to step in a first set of queries e.g. first set of queries in that collect data from an intermediate data buffer e.g. intermediate data buffer of standard model dataset in for a data destination e.g. data destination of application model dataset in is determined. As noted above for mappings the first set of queries may be determined in various ways. For instance one or more queries may be included in a template on the computer system hosting application model dataset in .

Referring to assume the schema of application model dataset is USMi and the schema of standard model dataset is CIM. First set of queries may be a set of CIM queries selected to obtain particular pieces of data from standard model dataset for application model dataset . An exemplary set of such queries is shown in in the form of a CIM to USMi template . Although template is depicted in in a generic format this is not meant to be limiting and templates and other files described herein may be in various formats e.g. XML binary .

Template of is designed to obtain a disk report and power information of one or more firmware resources. Template includes a title DISK REPORT AND POWER a first desired parameter labeled DISK REPORT and a second desired parameter labeled POWER CONSUMPTION . First desired parameter seeks the total disk space free disk space and used disk space on a particular firmware resource. In order to collect these pieces of data from standard model dataset however three separate CIM queries are necessary because as will be seen below standard model dataset in this example only provides these pieces of data on an individual basis. Second desired parameter POWER CONSUMPTION seeks voltage V and current I at a particular firmware resource but because standard model dataset only includes power P second desired parameter includes a single CIM query for obtaining power P from standard model dataset . Accordingly the first set of queries determined at step in in this example may include the CIM queries .

Referring back to in step the queries of the first set are sorted so that any redundant queries are adjacent. In for example the CIM queries could be sorted alphabetically. In step redundant queries if any are eliminated from the first set of queries. In the example template of there are no redundant CIM queries and so none would be eliminated. In some instances more complex methods may be utilized to eliminate or modify sets of queries to be more efficient. For example the Lempel Ziv algorithm or its variants may be implemented on sets of queries in order to eliminate redundancies and or reduce the number of queries required.

In step similar to step in a second set of queries e.g. in that collect data from a data source e.g. data source in firmware resource in for an intermediate data buffer e.g. intermediate data buffer in standard data model in is determined. The second set of queries may be determined based upon the first set of queries. For example if the first set of queries is a set of CIM queries e.g. of selected to obtain particular pieces of data from standard model dataset in then the second set of queries may include queries necessary to collect corresponding data from firmware resource for standard model dataset . Like the queries forming the first set of queries the queries forming the set second of queries may be determined from one or more templates on a data processing system serving hosting the standard model dataset .

Exemplary firmware resource to CIM templates are depicted in . depicts a firmware resource to CIM template that corresponds to CIM query TOTAL DISK SPACE in . A firmware resource query entitled DISK REPORT corresponds to CIM query and seeks three pieces of data from a firmware resource total disk space free disk space and used disk space.

Another firmware resource to CIM template is shown in that corresponds to CIM query FREE DISK SPACE in . A firmware resource query that is identical to firmware resource query is entitled DISK REPORT and seeks the same three pieces of data.

Another firmware resource to CIM template is shown in that corresponds to CIM query USED DISK SPACE in . A firmware resource query that is identical to firmware resource queries and is entitled DISK REPORT and seeks the same three pieces of data.

Referring back to in step second set of queries in may be sorted so that redundant queries are adjacent. In second set of queries is already sorted so that the three instances of the firmware resource query entitled DISK REPORT that are redundant are also adjacent. In step redundant queries are eliminated from the second set of queries. For example in the second set of queries of two instances of the DISK REPORT firmware resource query are eliminated.

In addition to eliminating redundant queries other techniques such as compile time optimization techniques may be implemented to convert a two tier resource mapping to a one tier resource mapping. Compile time optimization techniques may serve to minimize time taken to execute the resulting computer program and or to minimize the amount of memory required by the computer program. Examples of compile time techniques include loop modifications e.g. distribution inversion interchange reversal unrolling splitting combining pipelining parallelization subexpression elimination induction variable analysis pointer analysis recursion removal bounds checking elimination stack height reduction and so forth.

For example in addition to collecting one or more pieces of data from one entity for another entity a query may include operations to alter data. An operation may include a mathematical equation e.g. P I V instructions to convert a datum from one format to another format e.g. little endian to big endian 32 bit to 64 bit or any other instruction or set of instructions that serve to alter a datum to a different form as necessary for a particular schema.

An example operation is shown in . A CIM to USMi template includes a CIM query that collects an operating temperature from a standard model dataset e.g. standard model dataset in for an application model dataset e.g. application model dataset in . However the standard model dataset s schema may dictate that operating temperatures are stored in Celsius while the application model dataset s schema may dictate that operating temperatures are stored in Kelvin. Accordingly template includes an operation that transforms data received from a standard model dataset from Celsius to Kelvin DEGREES KELVIN DEGREES CELSIUS 213.5 .

A similar situation may occur between a data source and an intermediate data buffer. depicts a firmware resource to CIM template that corresponds to CIM query in . Template includes a firmware resource query entitled OPERATING TEMP that returns the operating temperature of a particular firmware resource. However the firmware resource only provides its operating temperature in Fahrenheit. Accordingly firmware resource query includes an operation that transforms Fahrenheit data to Celsius data i.e. DEGREES CELSIUS DEGREES FAHRENHEIT 32 5 9 .

Referring back to in step a first query from the first set of queries e.g. first set of queries in may be related to a second query from the second set of queries e.g. second set of queries in . For example CIM query in may be related to firmware resource query in because they both are configured to collect an operating temperature of a particular firmware resource.

In step of an optimized operation is generated based on operations from the first and second queries using a compile time optimization transformation. For example an optimized operation configured to convert Fahrenheit directly to Kelvin i.e. DEGREES KELVIN DEGREES FAHRENHEIT 459.67 5 9 may be generated so that an operating temperature obtained from a firmware resource may be collected directly and more efficiently by foregoing the conversion to Celsius required by a application data model dataset e.g. application model dataset in .

In step of similar to step in an optimized set of queries that collect data from a data source e.g. data source in firmware resource in for a data destination e.g. data destination in application model dataset in may be generated. As before these may be generating during loading or compilation of a computer program configured to collect data from a data source for a data destination. The resulting computer program may then forego an intermediate data buffer e.g. intermediate data buffer in standard model dataset in during runtime. Optimized operations generated in step may be included within queries of the optimized set of queries.

The flowchart and cluster diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each cluster in the flowchart or cluster diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the cluster may occur out of the order noted in the figures. For example two clusters shown in succession may in fact be executed substantially concurrently or the clusters may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each cluster of the cluster diagrams and or flowchart illustration and combinations of clusters in the cluster diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or clusters thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

