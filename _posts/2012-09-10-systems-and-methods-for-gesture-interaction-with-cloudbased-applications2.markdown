---

title: Systems and methods for gesture interaction with cloud-based applications
abstract: Various systems and methods described herein relate to server-based computing, where the systems and methods provide a client with access to an application executing remotely from the client device and having access to data (e.g., one or more files) residing on a cloud-based storage (e.g., provided by a third-party cloud-based storage service, such as Dropbox or Box). For some systems and methods, the application may be remotely executed and provided to the client such that the application has in-application/embedded access (hereafter, referred to as “native access”) to the cloud-based storage and files residing on the cloud-based storage. Additionally, some systems and methods may enable a remotely executed application to receive a gesture user input, even when the remotely executed application is not natively configured to receive such user input.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606629&OS=09606629&RS=09606629
owner: CLOUDON LTD.
number: 09606629
owner_city: Herzliya
owner_country: IL
publication_date: 20120910
---
The present application claims benefit of U.S. Provisional Patent Application No. 61 533 135 filed Sep. 9 2011 and entitled Systems and Methods for Workspace and Gesture Interaction with Cloud Based Enterprise Applications which is incorporated by reference herein.

The present invention s generally relate to server based computing and more particularly relate to providing a client with workspace interaction with cloud based applications.

In a server based computing environment hardware upgrades application deployment technical support and or data storage can be provided by one or more terminal application servers. As such use of server based computing to support multiple clients can reduce application costs and ensure that applications are accessible by some or all of the supported clients. Server based computing also provides enhanced security and eliminates the need for patch through software upgrades to a plurality of different clients. Traditionally server based computing has been implemented by way of remote desktop computing or remote application computing.

With remote desktop computing one or more terminal application servers provide one or more clients with access to a plurality of software applications and manage data transfers to each client through a separate data communication line. Generally users access the terminal server through their end user devices also known as clients or client devices by authenticating into a network with a username and password with an access card based on biometric information or by any other authentication method. Upon establishing a remote desktop computing session each client serves as a remote desktop display capable of displaying applications which are provided by the terminal application server. The remote desktop is created by and handled within the terminal application server based on applications installed on the terminal application server. The clients also allow users to input data through a mouse keyboard or the like such that the users can interact with the application provided by the terminal application server.

Unfortunately traditional remote desktop computing is limited by the inability of the terminal server to provide access to disparate operating systems e.g. a traditional terminal server configured to provide Microsoft Windows operating system is not capable of providing Apple OS X operating system thereby requiring a user of remote desktop computing to interface with different terminal servers for access to different operating systems. Traditional remote desktop computing is also limited by the inability of the terminal server to provide the operating system with embedded access to a third party cloud based storage e.g. those provided by Dropbox Box or Google Docs .

In remote application computing a plurality of terminal application servers are used each of which is dedicated to one or more applications. A user can use a remote client to authenticate through a network and access the terminal application server corresponding to a desired application. A single communication line is established between the client and the terminal application server for each application which is provided to the user.

Unfortunately like remote desktop computing traditional remote application computing also suffers from various limitations such as requiring a data communication channel for each provided application resulting in a need for excessive bandwidth. This is particularly true when traditional remote application computing is utilized to provide access to two or more applications developed to run on different operating system e.g. a traditional terminal application server configured to serve Microsoft Windows compatible applications is not capable of providing Apple OS X compatible applications . Consequently users of traditional remote application computing access applications of differing operating system compatibilities with separate connections to disparate traditional terminal application servers each configured to operate a different operating system. This also results in excessive bandwidth usage as each connection requires a separate data communication channel. Furthermore traditional remote application computing lacks the ability to provide applications with embedded in application access to files located on third party cloud based storage.

Various systems and methods described herein relate to server based computing where the systems and methods provide a client with access to an application executing remotely from the client device and having access to data e.g. one or more files residing on a cloud based storage e.g. provided by a third party cloud based storage service such as Dropbox Box Box or Google Docs . For some systems and methods the application may be remotely executed and provided to the client such that the application has in application embedded access hereafter referred to as native access to the cloud based storage and files residing on the cloud based storage. Additionally some systems and methods may enable a remotely executed application to receive a gesture user input even when the remotely executed application is not natively configured to receive such user input.

According to some embodiments a system may comprise a virtualization module a gesture input module a gesture mapping module and a gesture emulation module. The virtualization module may be configured to execute a virtualized application instance based on a version of the application in a virtual computing environment on a first cloud based server. The gesture input module may be configured to provide gesture data for a gesture input received at a remote client device. The gesture mapping module may be configured to map the gesture input to a set of input events e.g. user inputs compatible with the virtualized application instance or the virtual computing environment of the virtualized application instance based on the gesture data. Furthermore the gesture emulation module may be configured to execute the set of input events in the virtual computing environment such that the set of input events affect the virtualized application instance.

In accordance with various embodiments the gesture data may comprise a gesture type a gesture phase gesture position gesture velocity an input pressure or a gesture timestamp. Providing the gesture data may comprise receiving the gesture input and generating gesture data based on the gesture input. Examples of gesture inputs may include a finger dragging gesture a pinch gesture a swipe gesture a tap gesture and a flicking gesture.

In some instances mapping the gesture data to the set of input events may be based on a movement physics model e.g. flick model or a polynomial physics model . The number and types of input events utilized by various embodiments may vary according to the virtualized application instance and or the virtual computing environment that is to receive the set of input events. Examples of input events may include user input actions typical of graphical user interface GUI computing environments e.g. Microsoft Windows or Apple OS X such as mouse based input events e.g. movement event mouse click event mouse wheel event mouse button event or click and drag mouse events scroll events e.g. a vertical scroll event or a horizontal scroll event by way of mouse or keyboard keyboard based input events e.g. one or more keystrokes or keyboard shortcut buttons a gesture based input event e.g. one that is natively compatible with recognized by the virtualized application instance and or the virtual computing environment an audio input event e.g. an input event that the virtualized application instance and or the virtual computing environment recognizes as an audio input or a video input event e.g. motion detection or image detection event typically captured by a camera provided to the virtualized application instance and or the virtual computing environment . Accordingly some embodiments may be capable of mapping a gesture input that is native to and received at the client to a second gesture input that is native to and received by the virtualized application instance and or the virtual computing environment.

Examples of input events may further include inputs that invoke a zoom command a pan command or a rotate command. In addition to the gesture data the mapping process may consider the current state of the virtualized application instance e.g. type of virtualized application instance current user selection s in the virtualized application instance current viewing mode of the virtualized application instance current position of user input cursor s or current active pane in the virtualized application instance or the virtual computing environment e.g. current active virtualized application instance .

In accordance with some embodiments executing the set of input events in the virtual computing environment comprises identifying a graphical user interface element e.g. vertical scroll bar of the virtualized application instance e.g. Microsoft Excel that is associated with at least one input event e.g. vertical scroll event in the set of input events and executing the at least one input event with respect to the identified graphical user interface element e.g. the vertical scroll bar . Executing the set of input events in the virtual computing environment may further comprises moving an input cursor e.g. mouse cursor to the graphical user interface element before executing the at least one input event e.g. vertical scroll event with respect to the identified graphical user interface. For example before executing the at least one input event or after executing the at least one input event the input cursor may be moved to a predefined location in accordance with the set of input events. Additionally executing the set of input events in the virtual computing environment comprises generating an event handling message operable in the virtual computing environment.

For some embodiments the set of input events affecting the virtualized application instance may comprise the virtualized application instance directly receiving at least one of the set of the input events when the set of input events is executed the virtual computing environment containing the virtualize application instance receiving at least one of the set of input events or some combination thereof. Using input events to affect the virtualized application instance may involve for example executing an action in the virtualized application instance or the virtual computing environment that affects the performance or behavior of the virtualized application instance.

For some embodiments the system may further comprise a gesture mapping storage configured to store information e.g. user preferences or virtual computing environment settings useful in mapping the gesture input to the set of input events for the virtualized application instance. In particular embodiments the gesture input module the gesture mapping module the gesture emulation module and or the gesture mapping storage may be contained in a gesture module. Depending on the embodiment the gesture input module may be implemented at a client or at a server.

Depending on the embodiment the application may be provided with native access to one or more third party cloud based storage services. Accordingly a third party user account may be used in establishing native access to such cloud based storage services. Generally the third party user account may be one that would otherwise be unrelated to the user accessing an application but for the systems and methods described herein.

According to some embodiments a system is provided comprising a storage module an application module a virtualization module and a presentation module. The storage module may be configured to establish access to a cloud based storage provided by a first cloud based server over a network the cloud based storage comprising a file. The cloud based storage may be provided by a third party cloud based server e.g. maintained by a storage provider . The application module may be configured to obtain a version of an application e.g. word processing spreadsheet slide presentation or image editing application from a second cloud based server. In some embodiments the second cloud based server and the first cloud based server may be one in the same. In particular the application module may be configured to provide the version of the application from a third party cloud based server e.g. maintained by an application provider . Generally the version of application provided obtained may be one which is not natively operable on the end user device e.g. where the application is natively incompatible with the operating system of the end user device such as the native incapability that exists between an application configured to operate on Microsoft Windows operating system and the Apple iOS operating system or one which requires more computing resources to operate than is available on the end user device e.g. a tablet end user device which generally lacks the computing resources to operate a processor intensive application such as a computer graphics image CGI animation rendering application .

The virtualization module may be configured to execute a virtualized application instance based on the version of the application in a virtual computing environment on a third cloud based server where the virtualized application instance has access to the file on the cloud based storage through the storage module. Additionally the virtualized application instance may be configured to interact with the first cloud based server e.g. the cloud based storage in response to a command from a native user application at a first remote client device where the native user application is native to an operating system of the remote client device. For some embodiments the virtualization module may be configured to map access of the cloud based storage from the storage module to the virtual computing environment thereby providing the virtual application instance access to the cloud based storage. In addition in some embodiments each user on the remote the remote client device is provided with a separate application instance. For instance the virtualization module may further be configured to generate a separate virtualized application instance for each user on the remote client device.

The presentation module may be configured to transmit to the remote client device output data generated as a result of execution of the virtualized application instance. In order to facilitate this the presentation module of some embodiments may comprise an encoder module configured to encode a video stream based on a display output generated as a result of execution of the virtualized application instance and a streaming module configured to transmit the video stream to one or more remote client devices. In some embodiments the encoder module may further be configured to encode an audio stream based on an audio output generated as the result of execution of the virtualized application instance. Additionally the streaming module may further be configured to transmit the audio stream to at least one of the remote client devices.

In various embodiments the system may further comprise a peripheral handler module configured to redirect an input data received from a peripheral coupled to the remote client device to the virtualized application instance. While redirecting the received input data the peripheral handler module may translate the input data from a first input type native to an environment of the remote client device to a second input type native to an environment of the virtualized application instance. For some embodiments the system may further comprise a peripheral handler module configured to redirect an output data received from the virtualized application instance to a peripheral coupled to the remote client device.

In some embodiments the system may further comprise an access module configured to authenticate a user on the remote client device and to use a user credential associated with the authenticated user to enable access to the cloud based storage by the storage module. According to some embodiments the system may further comprise an access module configured to authenticate a user on the remote client device and to use a user credential associated with the authenticated user to enable access to the image of the application by the application module.

According to various embodiments a method is provided comprising operations described herein. Likewise embodiments may be implemented as a computer program product comprising computer instruction codes configured to cause the computer system to perform the operations described herein.

Other features and aspects of various embodiments will become apparent from the following detailed description taken in conjunction with the accompanying drawings which illustrate by way of example the features of such embodiments.

Various systems and methods described herein relate to server based computing where systems and methods provide a computing device with access to an application that is executing remotely from the computing device and that has access to data e.g. one or more files residing on a cloud based storage e.g. provided by a third party cloud based storage service . For some systems and methods the application may be remotely executed and provided such that the application accessed by a user has native access to a cloud based storage and data e.g. files residing on the cloud based storage. In this way various embodiments may provide a user on a client device with universal and agnostic access to applications that would otherwise be non operable on the client device and permit such applications with universal and or agnostic access to cloud based storage services that are otherwise disconnected from disparate from or incompatible with the accessed applications. Additionally some embodiments may permit an original application natively operating on the client device but incompatible with a particular file e.g. an e mail application operating on the client device attempting to open a spreadsheet file otherwise incompatible with e mail application to upload the file to a cloud based storage service and enable a remotely execution application provided in accordance with the embodiments compatible with the file and capable of accessing the cloud based storage service open the file on behalf of the original application.

Those skilled in the art will appreciate accessing a file as understood herein can include for example creating deleting viewing e.g. opening or modifying the file and any of content contained therein. Additionally as understood herein those skilled in the art will appreciate that accessing an application can include for instance starting stopping using or otherwise controlling operation of the application and may further include modifying the availability of the application e.g. adding or deleting availability of the application . Any mention of a cloud based service e.g. storage application within this description will be understood to include without limitation services provided by private clouds public clouds and hybrid clouds.

Each of the client the ASP system the database server the file server and the cloud based service server may be implemented using one or more digital devices which may be similar to the digital devices discussed later with respect to . For instance client may be any form of computing device capable of receiving user input e.g. configured for user interaction capable of displaying a client user interface e.g. through which an application can be viewed or controlled and capable of communicating with the ASP system over one or more of the communication connection s . Such computing devices may include a mobile phone a tablet computing device a laptop a desktop computer personal digital assistant a portable gaming unit a wired gaming unit a thin client a set top box a portable multi media player or any other type of network accessible user device known to those of skill in the art. Further one or more of the ASP system the database server the file server or the cloud based service server may comprise of one or more servers which may be operating on or implemented using one or more cloud based services e.g. System as a Service SaaS Platform as a Service PaaS or Infrastructure as a Service IaaS .

The client may be configured to communicatively connect with the ASP system and be provided with access to an application through the ASP system . The application being provided through the ASP system may be executed remotely from the client and or may be executed on or under the control of the ASP system . The ASP system may be executing or controlling the execution of the application on behalf of the client and as such may facilitate access e.g. video audio and data access and user interaction between the executing application and the client . The ASP system may further execute or control the execution of the application such that the application has native access e.g. in application access to one or more files residing on a cloud based storage external to the client and the ASP system . In various embodiments such a cloud based storage service may be provided by a third party cloud based storage service e.g. Dropbox or Box which is separate and distinct from the ASP system . Execution or execution control of the application may further provide the client with the application having native access to databases e.g. served by the database server or to file servers e.g. the file server that are separate and distinct from the ASP system .

By executing or controlling execution of the application such that the application has access to data separate and distinct from the execution of the application the ASP system may provide the client with remote access to the application that might otherwise not be operable on the client and that has access to data storage provided by third party services. In some embodiments this may also allow an operator of the ASP system to provide user with applications as a remotely accessible service e.g. for rent without the need for maintaining long term storage data on the ASP system e.g. user data opened in the applications are provided by a storage system and that is distinct from the ASP system the storage system may be maintained by the user or a third party on behalf of the user .

This may be useful for example when the application is incompatible with the operating system running on the client when the client lacks the requisite resources to locally execute the application e.g. lack of memory space or processor performance or when the client lacks sufficient resources to properly execute the application locally.

In some instances the cloud based storage services accessed by various embodiments may provide additional cloud based services in conjunction with the storage services. These additional cloud based services may include such web application services relating to word processing documents spreadsheet documents presentation documents and the like. An example of such a cloud based service is Google Docs. Various embodiments may utilize web application services in conjunction with or in place of virtualized applications when accessing various files through the ASP system . Take for instance where a spreadsheet file accessed through the ASP system is stored on a Dropbox. According to certain embodiments the ASP system may access the spreadsheet file from Dropbox and use a Google Docs web application to open the spreadsheet file for viewing and or modification purposes.

For some embodiments the client module may be configured to facilitate communication between the client and the ASP system provide a user at the client with a client user interface configured to facilitate user interaction with the ASP system relay user input received through the client user interface from the user at the client to the ASP system and relay output e.g. video audio or other from an application provided by the ASP system to one or more components of the client configured to receive and present the output through the client user interface e.g. video output to the video display of the client and audio data to the sound processor of the client .

For some embodiments the client module may provide the client user interface by generating the client user interface at the client and then presenting the client user interface to a user through a display device e.g. video display of a tablet computing device of the client . Additionally some embodiments may provide the client user interface by generating the client user interface at the ASP system e.g. in the access server module and then sending the generated client user interface from the ASP system e.g. the access server module to the client module for presentation to the user e.g. through a display device coupled to the client . In general the presented client user interface is a graphical user interface GUI adapted for user interaction through the client and its coupled peripherals which may include a touch screen. Those skilled in the art will appreciate that the configuration appearance and behavior of the client user interface provided by the client module may vary based on among other things the type of digital device comprising the client or the computing resources of the client available to the client module e.g. peripherals available to the client or modes of input available through the client .

The client module may further be configured to receive and relay control information from an input device e.g. peripheral coupled to the client e.g. physical or on screen keyboard integrated into the client or peripheral externally communicatively coupled to the client to the ASP system . Likewise the client module may relay control information or other data between devices communicatively coupled to the client and the ASP system e.g. the client module relays print data from the ASP system to a printer coupled to the client .

The client module may also be configured to provide a file manager interface at the client operable in presenting one or more files stored on one or more separate and disparate cloud based storage services e.g. third party services or stored locally at the client for access through the client . For some embodiments the file manager interface may allow a user at the client to request file management operations with respect to the files presented through the file manager interface which include files locally stored and or stored on various cloud based storage services. The file management operations supported may include adding deleting renaming and moving files stored on one or more cloud based storage services or locally at the client . Files presented through the file manager interface may also be selectable for opening through the ASP system e.g. in a virtualized application instance accessed through the ASP system .

According to some embodiments when the files from different storage services e.g. different third party cloud based storage services and or locally stored at the client are presented the files may be presented in a segregated manner according to their storage source e.g. grouped according to storage source or presented in a common pane with little or no indication of a file s storage source. In some embodiments when a file presented through the file manager interface is selected for opening the ASP system may access the file directly from its corresponding storage source e.g. cloud based storage service or local file storage at the client or obtain a cached copy of the file selected its corresponding storage source and then present the file for access through a virtualized application instance. Where a cached copy of the file is utilized for opening the file the ASP system may be configured to commit any changes update performed on the cached copy to the original copy at the original storage location e.g. commitment occurs when the virtual application instance is closed .

By providing a file manager interface having universal and or agnostic access to one or more disparate file storage services and or the local storage source various embodiments can provide users e.g. at the client with a universal file workspace through which files stored in disparate locations can be universally agnostically accessed for management viewing or editing purposes. presents an exemplary client user interface according to some embodiments that includes file manager interface and that could be presented by the client module at client .

Continuing with reference to the access server module may be configured to facilitate user access to files or applications e.g. by a user at the client that are provided through the ASP system . In some embodiments the access server module may achieve this by performing some or all of the following on behalf of a user accessing the ASP system from the client a establishing and maintaining communication between the client and the ASP system b authenticating access to the ASP system and its various components by the user c establishing and maintaining one or more application access sessions also referred to herein as application sessions for the user whereby each application access session may comprise an instance of an application e.g. an instance of a particular version of an application being executed or controlled by the ASP system on behalf of the user at the client d implementing user preferences and settings for the user s access of the ASP system e implementing and enforcing user policy on the user s access of the ASP system f enabling access by the applications being executed or controlled by the ASP system to data e.g. files stored on or stored using third party data storage services e.g. third party cloud based storage services such as Dropbox or Google Docs g monitoring the user s access of the ASP system h maintaining statistics or analytics based on the user s access of the ASP system and i facilitating billing of the user based on their access or usage of the ASP system .

In some embodiments the access server module may on behalf of the client negotiate establish and otherwise facilitate the establishment of a connection between the client module and an application being provided via the virtualization module and the application module . Once established the access server module may continue to monitor or control the connection possibly in accordance with user preferences settings and policies utilized by the ASP system .

The access server module may further be configured to manage the overall operation of the ASP system discussed further herein. For example the access server module may be operable to track and manage resources for the ASP system which may involve monitoring managing computer resource utilization e.g. memory utilization processor utilization or network bandwidth utilization by various components of the ASP system or cloud based services e.g. SaaS PaaS or IaaS utilized by various components of the ASP system . As another example the access server module may be responsible for distributing the workload of serving two or more clients similar to the client across one or more access servers performing the operations of the access server module .

The storage module may be configured to establish and or maintain access to data on third party data storage services by an application executing or being controlled by the ASP system on behalf of the user at the client . In some embodiments the storage module may achieve this by receiving storing and utilizing access parameters e.g. third party access parameters such as protocol information username password encryption key signature file identifier navigation address third party storage identifier or the like provided by the user at the client in association with a third party data storage service e.g. a cloud based data storage service such as Dropbox or Google Docs which the user wishes to access through the ASP system . For example when the user requests access to data e.g. files stored using a third party data storage service the storage module may establish a connection with the third party data storage service using the stored access parameters e.g. protocol information username password encryption key signature file identifier navigation address third party storage identifier or the like provided by the user retrieve a listing of the data stored on using or otherwise made available through the third party data storage service in association with the access parameters provided and access the data according to the user s access request. Depending on the embodiment the user may cause data stored on the third party data storage service to be accessed by the ASP system for example when the user requests to review a listing of data e.g. files stored on the third party data storage service or when the user chooses to access data e.g. open view or edit a file using an application provided by the ASP system e.g. through the application module .

In addition to establishing and or maintaining access to data on third party data storage services e.g. Dropbox Box or Google Docs the storage module may be configured to permit the ASP system to manage data on the third party data storage services on behalf of the client . For instance the storage module may permit the ASP system to implement file management functions with respect to files stored on disparate third party data storage services thereby enabling a user at the client to perform file management operations through the client module . According to some embodiments the storage module may be operable with the client module such that users can utilize file management functions through a file manager interface e.g. a file management graphical user interface presented by the client module .

The virtualization module may be configured to establish monitor maintain or otherwise manage execution of an instance of an application in a virtual computing environment hereafter also referred to as a virtualized application instance for access by the user at the client . An instance of the application may be executed in a virtual computing environment in association with an application session established for access by the user at the client . Accordingly in some embodiments the virtualization module may initiate or manage execution of an instance of the application based on requests received from the access server module .

In some embodiments the instance of an application which is operated in a virtual computing environment for the benefit of user access may be based on a particular version of the application. Depending on the embodiment the version of the application chosen selected for execution as the application instance may be determined by the access server module the virtualization module the application module or some combination thereof. Factors influencing the determination of the version may include for the example the number of user licenses available for a given version of the application the type of data to be accessed by the application e.g. file has a format A that is compatible with a version B of the application the user accessing the application e.g. user s access privileges or user s subscription type with respect to the ASP system the capabilities of the client device e.g. the client device is equipped with a high definition display compatible with the high definition output of a particular version of an application the computing resources presently available to the ASP system or network bandwidth required to provide the client with access to the given version of the application. In some embodiments the virtualization module may utilize an internal hypervisor or interface with an external hypervisor configured to manage execution of the instance of an application in a virtual computing environment. Additionally the virtualization module may employ the use of a cloud based services e.g. SaaS IaaS or PaaS possibly provided by a third party e.g. Amazon EC2 GoGrid or Rackspace to execute the instance the instance of an application in the virtual computing environment.

In various embodiments the virtualization module of the ASP may initiate any number of virtualized application instances. For example the virtualization module may initiate e.g. command initiation of any number of virtualized application instance by the ASP and or any number of servers e.g. other ASP systems and or other servers . In some embodiments the virtualization module creates and executes a local virtualization environment.

The application module may be configured to obtain or retrieve a version of an application for execution in a virtual computing environment for access by the user at the client . For example the application module retrieves a version of the application on behalf of the virtualization module and then provides the retrieved version to the virtualization module for execution in a virtual computing environment. Depending on the embodiment the application module may retrieve the version of the application based on a request from the virtualization module or the access server module e.g. which as described herein may be responsible for managing application sessions for the user access . The application module may retrieve the version of the application from an application repository not shown which for some embodiments may be implemented using one or more file servers database servers or some combination thereof. For example the version of the application may be retrieved from a cloud based services configured to serve the version of the application e.g. to the application module upon request. The application repository may store a variety of versions for a given application e.g. for Microsoft Word the application repository may store Word 2011 Word 2008 Word 2004 and Word 2001 and provide the appropriate version of the given application based on the request discussed above. Each version of the application may be stored on the application repository as a single separate application executable file as a directory containing the version s associated executable file s and any supporting files e.g. software library files or as a binary image or compressed file containing the version s associated executable file s and any possible supporting files e.g. software library files or some combination thereof.

For some embodiments retrieval of the version of the application may comprise the application module retrieving a path or link to data e.g. a copy of the application or an image of the application corresponding to the version of the application to be retrieved. This path or link to the data may then be conveyed by the application module to the virtualization module which uses the data at the path link to instantiate a virtualized application instance.

For some embodiments the virtualization module and the application module may be implemented as single module not shown that utilizes a cloud based service e.g. SaaS IaaS or PaaS to provide a version of an application executing in a virtual computer environment. Such a cloud based service may be provided by a third party cloud based service which may be manage or controlled by the ASP system using APIs compatible with the service.

To utilize the cloud based services for the virtualization module the application module and possibly other components of the ASP system the ASP system may employ application programming interfaces APIs e.g. those provided by Amazon GoGrid or Rackspace that permit the ASP system and its various components to provision e.g. request the use of consume and release services provided by cloud based services. For example the virtualization module may utilize an Infrastructure as a Service IaaS API e.g. driver to provision one or more virtual machines to operate one or more virtualized application instances while the application module the IaaS API to for provisioning virtual machines to store copies images of applications utilized by the virtualization module to instantiate virtualized application instances .

In context of an application being provided to the client by the ASP system for user access the gesture module may be configured to translate or map user input received from the client module e.g. via the access server module to an alternative user input compatible with the application being provided. In some embodiments such a translation mapping may be implemented when the client is incapable of receiving the alternative user input from the user through the one or more input devices available through the client e.g. the client lacks an input device having a special keyboard buttons compatible with the application being provided . Such functionality may be particularly beneficial where a digital device such as a mobile phone or a tablet device that rely on a touch based input devices e.g. touch based screens and on screen input devices in place of external input devices. For example a tablet device capable of receiving touch based input gestures may have its two finger or three finger on screen swipe gestures translated or mapped to page up or page down commands with respect to a word processing application being provided through the ASP system .

The encoder module may be configured to receive and encode output data from an application being executed or controlled by the ASP system e.g. using the virtualization module for access by the user at the client . In various embodiments dependent upon the application being executed controlled the output received may comprise video output data audio output data or general output data e.g. file output . Additionally the video audio or data output received by the encoder module may be provided by the virtual computing environment executing a virtualized instance of an application e.g. at the request of the virtualization module . To facilitate the functionality of the encoder module the encoder module may be implemented as a virtual driver e.g. virtual display driver or virtual audio driver employed by the virtual computing environment when producing output from a virtualized application instance operating in the virtual computing environment.

The format in which the output is encoded by the encoder module may depend on the type of output being encoded e.g. video audio or raw data the preferences or privileges of the user accessing the application e.g. the user may lack the privilege to receive audio based on the current account type the resources available to the ASP system the capabilities of the client device and or the communication bandwidth available between the client and the ASP system e.g. the client is a mobile phone communicating with the ASP system over a low speed cellular connection . Further in some embodiments the encoder module may be configured e.g. according to user preferences or system settings to encrypt the output provided by the application e.g. for security purposes and or compress the output provided by the application being executed controlled to utilize less communication bandwidth. Those skilled in the art would fully appreciate that any number of known codecs e.g. H.264 standard codecs such as Application Distribution Protocol ADP ciphers or encoding methodologies may be utilized by the encoder module when performing the encoding process in accordance with various embodiments.

The streaming module may be configured to receive the encoded output from the encoder module and transmit the encoded output to the client module as a data stream. For some embodiments the format utilized for the data stream may vary for example according to the communication bandwidth available between the client and the ASP system the types of communication connections being utilized between the client and the ASP system the capabilities of the client device the preferences of the user accessing the application through the ASP system and or the settings of the ASP system . Those skilled in the art will appreciate a number of known communication protocols e.g. transport protocols such as User Datagram Protocol UDP or data streaming formats may be utilized by the streaming module as encoded output from the application is streamed to the client module . The encoder module may further employ the video encoding techniques described in U.S. patent application Ser. No. 12 301 767 published as U.S. Patent Application Publication No. 2010 0011301 filed on Nov. 20 2008 which is hereby incorporated by reference.

In various embodiments the streaming module may transmit one or more data streams to the client module in order to deliver various types of output being provided by the application being access e.g. one data stream of audio and a separate data stream for video . Upon receiving the data stream s from the streaming module the client module may decode the encoded output received over the data stream and present the output on the client through the client user interface provided by the client module .

As also illustrated in the storage module may comprise network protocol based storage APIs that permit access to a network file system using non web based methodologies. For certain embodiments the storage module may utilize the network protocol based storage APIs to access file system based on various network protocols including for example Network File System NFS Samba file transfer protocol FTP and the like.

As further shown in the functionality of the ASP system may be implemented by way of access servers ACSto ACS represented by access servers ACSs and and application servers APS to APSrepresented by application servers APSs and . Although a limited number of clients ACSs and APSs are depicted in those skilled in the art will appreciate that there may he any number of clients ACSs and APSs present in the exemplary environment .

In some embodiments the ACSs and may implement some or all of the functionality provided by the access server module as described in reference to and the APSs and may implement some or all of the functionality provided by some or all of the storage module the virtualization module the application module the gesture module the encoder module and the streaming module as described in reference to . Specifically according to some embodiments the workload of providing some or all of the services or functionalities of the access server module may be distributed amongst some or all of the ACSs and and the workload of providing while the workload of providing some or all of the services or functionalities of the storage module the virtualization module the application module the gesture module the encoder module and the streaming module may be distributed amongst some or all of the APSs and . In some instances the ACSs and may utilize load balancing to distribute the workload amongst the available ACSs and the APSs and may utilize load balancing to distribute the workload amongst the available APSs. In various embodiments one or more digital devices may manage and or provide load balancing to any number of ACSs and or any number of APSs. By distributing the workload amongst multiple ACSs and APSs certain embodiments may provide acceptable performance e.g. enough availability of computing resources to provide the requested applications with user acceptable performance scalability e.g. near real time user scalability according to demand or the number of users currently utilizing the ASP system increases or decreases or application scalability to provide more variety of applications operating on a variety of operating systems and reliability e.g. through redundancy of servers and components or lower bandwidth per user with respect to the ASP system .

In the example illustrated in a dashed line illustrates a virtual communication channel hereafter referred to as virtual communication channel between the client and the application servers and established via the access server . In some embodiments the virtual communication channel between the client and the application servers and may be implemented by way of one or more network connections between the client and the access server and one or more networks connections between the access server and each of the application servers and . Alternatively in some embodiments the virtual communication channel between the client and the application servers and may be implemented by the access server mediating one or more network connections directly between the client and each of the application servers and .

Once established the virtual communication channel enables data flow over the network connections between the client and the access server and data flow between the client and the application servers and via the access server . Through such the data flows the client may for example be serviced by the access server e.g. in accordance with the access server module described in or obtain access to application services provided by each of the application servers and via the access server .

The exemplary logical construct illustrates how each of the APSs and may respectively comprise a set of virtualized application instances and a native operating system configured to support operation of the respective set . Additionally the exemplary logical construct further illustrates how each of the sets and of virtualized application instances may comprise a virtualized application instance which may be executing a version of an application represented as application layer at the request or control of an ASP system e.g. the ASP system in . In accordance with some embodiments the application layer may be executing in a computer sandbox represented as sandbox layer under the application layer which may be configured to separate computing resources e.g. on a physical computer or a virtual machine utilized in performing the version of the application e.g. memory processor etc. from versions of applications performing in other virtualized application instances a given APS e.g. from other virtualized application instances operating in the set of the APS . Depending on the embodiment a separate sandbox may be utilized for each application session containing a virtualized application instance or a separate sandbox may support multiple application sessions i.e. multiple virtualized application instances in association with a single user. The output from the application layer executing on the sandbox layer may result in output e.g. video audio or other data that is encoded and streamed e.g. as one or more data streams to a user e.g. one a set of users on ACS via an encode and stream layer which may be implemented by the encoder module and the streaming module described with reference to .

In some embodiments each of the native operating systems and and the sets and of virtualized application instances may be implemented using a cloud based service such as a platform cloud based service e.g. PaaS or infrastructure cloud based service e.g. IaaS .

The exemplary logical construct also illustrates how through connections the ACS services the set of user using the APSs and . To facilitate user access to the one or more applications provided by the APSs and the ACS may be configured with a cloud on operating system configured to perform the functionalities similar to those described with respect to the access server module in .

To implement such functionalities and others the client module may comprise a workspace application configured to present the client user interface to a user through a video display coupled to the client e.g. including generating or presenting a graphical user interface associated with the client user interface and handling the presentation of application output received from an ASP system a client software library configured to support various functionalities of the client module e.g. support the functions of the workspace application or the decoder and the decoder configured to decode encoded output data e.g. video audio or other data received from an ASP system e.g. the ASP system and provide the decoded output data e.g. to the workspace application for presentation to the user of the client e.g. video output data routed to the video display of the client and audio data routed to the sound processor of the client . In some embodiments the workspace application may be a runtime application compatible with the operating system of the client . Accordingly for some embodiments the wrapper application is a native application of the client . Additionally the workspace application may be configured to provide access to applications that may be incompatible with the operation system of the client or that may otherwise not be operable on the client without the use of the workspace application .

The workspace application may also be configured to provide universal and or agnostic file management access to various files that are stored at separate and disparate data storage services but made available through an ASP system e.g. the ASP system . Accordingly in some embodiments the workspace application may comprise a file management interface adapted to user requests for file management operations such as adding e.g. by creation of a new file or by upload deleting moving and renaming files. For some embodiments the workspace application may utilize web based application programming interfaces APIs which may be associated with one or more web applications e.g. Google Docs to access files stored on cloud based services. For example in order to list files accessible through the ASP system e.g. the ASP system the workspace application may utilize web based APIs for a given cloud based service e.g. Dropbox Box or Google Docs to directly perform file management operations e.g. listing of stored files adding files deleting files or renaming files with respect to that service. Then when a file listed through the workspace application is selected for opening through the ASP system e.g. using a virtualized application instance provided through the ASP system the workspace application may instruct the ASP system to obtain a copy to the selected file from it respective storage source e.g. cloud based storage source or local storage source or directly access the file from its respective storage source. Thereafter the ASP system may initiate a virtualized application instance having access to the selected file and the output data of the virtualized application instance may be transmitted to the client .

The hardware of the client e.g. touch screen of the client may be adapted to receive gestures as user input to the client which results in a gesture input being detected by the operating system e.g. Apple iOS or another application operating on the operating system . Gestures receivable by the client generally depends on the means by which the client receives gestures. For example where the client is configured with a touch based screen e.g. capacitive screen the exemplary gestures may include finger dragging gestures e.g. dragging in the up down left or right direction pinching e.g. pinch in or pinch out swiping e.g. quick light single finger dual finger three finger four finger five finger up to down down to up left to right or right to left swipe finger tapping e.g. single double triple short or long tap and flicking e.g. in one of eight movement directions .

In some embodiments the client module may comprise a gesture input module configured to receive user input entered into the client recognize the user input as a gesture input and generate or capture data regarding the gesture input hereafter gesture data . Subsequent to generation capture the gesture input module may transmit the gesture data to an ASP system e.g. the ASP system possibly through an access server e.g. the ACS . In some instances the gesture input module may transmit the gesture data to the APS system e.g. the APS system via the ACS concurrently with other user input data received at the client e.g. non gesture input data received and intended for transmission to the ASP system.

Depending on the configuration of the client a user may enter user inputs by way of a touch screen of the client by way of physical moving the client configured such that a accelerometer of the client can translate the movement as entry e.g. shaking the client device is recognized as a gesture or by way of hand gestures captured by a camera coupled to the client .

Those skilled in the art will appreciate that although the gesture input module is shown as being part of the client the gesture input module for various embodiments is in no way limited to being implemented in such a manner. Those skilled in the art will appreciate that various embodiments may implement some or all of the gesture input module at an APS server e.g. the APS server .

In some embodiments the operating system may be adapted to natively support gestures and as such may readily recognize a set of gestures received by way of user input at the client e.g. swipe tap ping or flick on a touch screen of the client . For example where the client is a tablet device configured with a touch based screen for receiving gesture inputs the client may receive a gesture input through user inputs at the touch based screen the operating system of the tablet device may receive and natively recognize those user inputs as comprising a gesture input and the operating system e.g. through a API feedback or programming constructs provide data relating to the gesture input gesture data to the gesture input module . For some embodiments the operating system may disseminate gesture data by generating one or more gesture input messages in response to recognizing the gesture input. The gesture input messages may be passed amongst various components of the operating system and or amongst applications being supported by the operating system which includes the client module . Where a given gesture input is predefined in the operating system to perform a particular native command or invoke a certain functionality the gesture input module may prevent the particular command from being performed when the given gesture input is received. In such cases the particular command may be blocked while the gesture data for the gesture input may be passed along to the ASP system for execution in the virtualized application instance and or the virtual computing environment operating the virtualized application instance. For some such embodiments while the client module is being accessed on the client e.g. client module is the current active application the gesture input module may temporarily prevent the native command from being performed by overriding the functionality of the given gesture input on the client .

In regard to the data generated captured in relation to the gesture input the gesture data may comprise a gesture type a gesture phase e.g. phases of gesture input as it is inputted by a user coordinates relating to the gesture e.g. X Y coordinates of start and stop of gesture velocity of gestures e.g. X Y components of a vector data representing the gesture pressure associated with the gesture or a gesture timestamp e.g. gesture start and stop timestamp . Based on the gesture data various embodiments may map the gesture input which is received at the client to a set of input events compatible with the virtualized application instance and or the virtual computing environment operating at the ASP system e.g. the ASP system . The mapping eventually determined e.g. at the ASP system may depend on such factors as version of the application instantiated in the virtualized application instance that is to receive the set of input events version of the operating system running in the virtual computing environment that supports the virtualized application instance user preferences or system defined preferences e.g. user defined mappings or some combination thereof.

Upon receiving the gesture data e.g. data regarding a two finger swipe from the gesture input module the ASP system e.g. the ASP system may operate on the gesture data map the gesture data to a set of input events and execute the set of input events in the virtual computing environment. Take for example where a user inputs a two finger swipe moving left to right on the touch screen of a client based on the gesture data transmitted by the gesture input module to the ASP system the ASP system may map the swipe to a left to right scrolling input event which causes the horizontal scroll bar of a viewing pane in the currently active virtualized application instance e.g. document open in Microsoft Word to scroll right.

Typically the executed set of input events may effectuate a performance change or a behavioral change with respect to the virtualized application instance currently active at an ASP system e.g. operating on or being controlled by the ASP system on behalf of the client . In order to achieve this for some embodiments the set of input events may be operable for execution in the virtualized application instance and or the virtual computing environment supporting the virtualized application instance. In this manner various embodiments may render convert gesture inputs which may be natively compatible with the operating system and or applications of client to a set of input events that are compatible with a virtualized application instance and or its supporting virtual computing environment. This may be particularly useful where the gesture inputs received at the client and intended for execution in the virtualized application instance are not natively compatible with or not fully supported by the virtualized application instance and or the virtual computing environment of the virtualized application instance. Such would be the case where for example the client is running a version of an Android operating system the virtualized application instance comprises a version of Microsoft Windows application and gestures that are natively supported by the Android operating system of the client e.g. such as pinch or flick are not natively supported by the version of Microsoft Windows application and or the Microsoft Windows operating system supporting the virtualized application instance.

Depending on the embodiment the mapping of the gesture data to the set of input events may depend on take into consideration the version of the application comprised in the virtualized application instance and or the version of the operating system running in the virtual computing environment that is to the set of input events. Those skilled in the art will appreciate that various versions of applications and various version of operating systems may support different types of input events in comparison to one another.

The resource module may be configured manage resources in association with the access server performing its various functions within the ASP system which can include managing application servers APSs utilized by the ASP system to provide clients e.g. the client with application access or managing resources utilized by various components of the ACS . To this effect the resource module may comprise a resource management module adapted to dynamically allocate assign and monitor resources that may be utilized by or otherwise associated with the ACS or the ASP system in general. Included in those resources may be cloud based resources utilized by the ACS other ACSs in the ASP system APSs in the ASP system or other components in the ASP system . In some embodiments the management of cloud based resources may be implemented through cloud application programming interfaces APIs which may be comprised in the resource module . The cloud APIs may include for example those provided by Amazon GoGrid or Rackspace in connection with their respective cloud based services.

The user and policy UP module may be configured to perform various user related operations in connection with the ASP system . For example the UP module may facilitate implementation of user preferences and settings user policy enforcement and user session management e.g. sessions in which users generally access the ASP system or in which users are provided with application access . In some embodiments the UP module may comprise a user and policy management UPM module that in connection with the ASP system may enable a user e.g. a regular user a super user or an administrator to manage e.g. add remove or modify one or more user accounts preferences settings or policies. Such user related parameters may determine or facilitate a user s access to various applications and a user s access to various storage services e.g. cloud based and otherwise in connection with the various applications available through the ASP system . The user accounts preferences settings or policies may also include parameters used in establishing access to a cloud based storage service by an application e.g. virtualized application instance provided through the ASP system e.g. by way of the ACS .

For some embodiments the UPM module may be configured to provide a web based interface through which an owner operator or administrator of the ASP system can perform operations supported by the UP module e.g. user account preference and settings management . In addition the UP module e.g. through the UPM module may further be configured to interface and communicate with a user or policy management tool external to the ASP system that is adapted to view monitor create delete modify or provide e.g. from a source external to the ASP system user related accounts preferences settings and policies used by the ASP system .

The user and policy UP storage of the ACS may be configured to store information relating to user account preference setting or policy which can be accessed or operated upon by the UP module .

The policy enforcer module may be configured to implement and enforce user policy when a user is accessing the ASP system particularly through the ACS . In order to accomplish policy enforcement the policy enforcer module may adapted to actively monitor a user s access of the ASP system and validate actions performed by the user during the access against current

The storage management module may be configured to add remove modify or manage connections between the ASP system and various storage entities which may include databases cloud based storage services and or traditional file servers e.g. a private enterprise file server . For example the storage management module may assist in storage related connections for the ASP system by establishing storage related connections between various APSs e.g. the APS which are operating virtualized application instances for access by users of the ASP system and a storage entity e.g. a third party cloud based storage service which may be internal or external to the ASP system . The establishment could for some embodiments involve logging into the storage entity using third party user credentials stored and provided e.g. by the UP module in association with a user accessing the ASP system .

In some embodiments where the storage entity is a cloud based storage service the storage management module may utilize application program interfaces APIs such as those provided by a third party offering the cloud based storage service to log into the cloud based storage service and establish a storage connection between the storage service and a virtualized application instance. In various embodiments the storage management module allows various virtualized environments to access one or more remote cloud based storage services or facilities. The storage may be access by different programs in any number of ways e.g. through drive letters as if the cloud based storage was merely another local data drive .

In addition in some embodiments where direct integration with a cloud based storage service is not available e.g. no APIs are available the storage management module may facilitate locally storing e.g. locally caching on the ASP system e.g. on the ACS or an APS presently operating an virtualized application instance files from the cloud based storage service being accessed by a virtualized application instance and then when necessary updating such files on the cloud based storage service using the locally stored files and through less direct means e.g. web based upload through a scripted bot .

The collaboration management module may be configured to enable collaborative access by two or more users to applications provided through the ASP system and the storage entities natively accessible by the applications such as third party cloud base storage services e.g. Dropbox Box or Google Docs . Depending on the configuration of the embodiment the collaboration features may be synchronous e.g. based on concurrent access and control of the same virtualized application instance application session by two or more users or asynchronous e.g. two or more users having access to the same data such as files but through disparate application sessions typically accessed at different times .

The analytics bill and monitoring ABM module may be configured to permit an owner operator or administrator of the ASP system to perform various functions relating to gathering statistics and generating analytics regarding operation of the ASP system implementing a billing system for the ASP system and to monitoring various operational aspects of the ASP system and its associated components e.g. associated ACSs and and APSs and .

For some embodiments the statistics gathered or the analytics generated may include information based on the overall operation of the ASP system operation of the ACS or its counterparts ACSs and one or more of the APSs and or information relating to user usage of or user access e.g. application or storage through the ASP system . The information may pertain to performance or usage of various computing resources including for instance memory e.g. static or volatile processing resources networking resources e.g. networking connections or equipment and cloud based resources e.g. SaaS PaaS or IaaS which may be privately operated or provided by a third party vendor . The ABM module may be configured to export the statistical analytical information gathered or generated to external services or computer applications operable in analyzing or reporting on the information provided. The exportation process may between the ABM module and an external service computer application may be facilitated through an interface e.g. API utilized by the service or application or utilized by the ABM module .

In support of its statistical analytical functions the analytics storage of the ACS may be utilized in storing statistics gathered or analytics generated by the ABM module . Additionally in certain embodiments the analytics storage may be utilized to store rules programs or scripts that determine what statistics are gathered by the ABM module for the ASP system or what analytics are generated by the ABM module for the ASP system .

With respect to the billing system the ABM module may relating to implementing a billing system by which user access usage of the ASP system can be tracked reported on or charged by the owner operator or administrator of the ASP system . In various embodiments the billing functionalities of the ABM module may be performed according to a billing schedule rates defined by the owner operator or administrator in association with user utilization of application or storage access services provided by the ASP system . In embodiments where the ASP system utilizes one or more third party services in conjunction with performing its functionalities the billing schedule rates may be updated dynamically adjusted possibly in real time to account for a change in costs expenses relating to those third party services. For instance where various functionalities of the ASP system rely on cloud based services e.g. SaaS PaaS or IaaS provided by a third party an adjustment in rate charged for such cloud based services which may be charged may be automatically reflected in the billing schedule rates applied by the ABM module to a user s access through the ASP system . Depending on the embodiments the rate adjustment to the billing schedule rates may be according to the types of applications or storage services accessed through the ASP system and how those types utilize the third party services.

For some embodiments the ABM module may further be configured to interface and communicate with an external billing or accounting service or computer application configured to receive billing information from the ABM module . Such billing information may contain for example charges accrued by users accessing the ASP system in generally or possibly only those charges accrued by users accessing the ASP system through the ACS in particular.

The load balancing module may be configured to facilitate load balancing features with respect to the ACS . For some embodiments the load balancing support may include enabling the ACS to receive access server related tasks operations distributed by the ASP system amongst the various ACSs e.g. and or enabling the ACS to distribute application server related tasks operations amongst the various APSs e.g. and .

The security and authentication SA module may be configured to perform operations relating to user login or authentication for the ASP system . To perform such operations the SA module may directly or indirectly interface and communicate with an authentication mechanism internal to the ASP system not shown or external to the ASP system which may be maintained by a third party e.g. a private enterprise authentication system possibly maintained by an organization with which the user is associated . For example the SA module may establish a secure connection with an Microsoft Active Directory server or other Lightweight Directory Access Protocol LDAP compatible server operated and maintained external to the ASP system e.g. within the user s enterprise network in performing login or authentication operations. The SA module may for some embodiments utilize a single sign on SSO mechanism such as those known in the art for user login or user authentication.

In some embodiments the virtualization module may be similar in operation or functionality to the virtualization module . Accordingly the virtualization module may be configured to establish monitor maintain or otherwise manage execution of a virtualized application instance for the APS . As described herein the virtualized application instance for the purpose of a user at client device accessing the virtualized application instance through the ASP system . As shown in the virtualization module may comprise a computer sandbox that in accordance with some embodiments is configured to separate computing resources e.g. memory processor input output of a physical or virtual computer system utilized in performing virtualized application instances. In some instances each virtualized application instance may be instantiated in a separate sandbox. In various embodiments the sandbox may be operating within the virtualization module or alternatively be operating external to the virtualization module the APS or the ASP e.g. in a cloud based service such as an IaaS or PaaS but under the control of the virtualization module e.g. via APIs .

In general the computing environment implemented by the sandbox may be configured to receive input data and transmit output data Examples of input data to the sandbox can include communications data e.g. network data or control information e.g. produced by a human machine interface HMI device such as a mouse or keyboard . Examples of output data from the sandbox can include video data e.g. data generally produced and outputted to a video display or audio data e.g. data generally produced and outputted to audio output device such as speakers . For some embodiments providing a user at a client with access to a virtualized application instance operating in the sandbox can comprise conveying input data or output data between the client and the ASP system and more specifically between the client module operating on the client and the virtualization module of the APS .

Before conveying the output data from the virtualization module e.g. from the sandbox to the client e.g. to the client module some embodiments may utilize the encoder module to encode the output data in a format capable of being decoded at the client . For some embodiments the encoder module may perform this encoding in accordance similar to the encoder module described with respect to .

As shown in the encoder module may specifically comprise a video encoder configured to receive video output data from the virtualization module e.g. generated by the virtualized application instance operating in the sandbox and encode that video output data to encoded video data. Additionally the encoder module may specifically comprise an audio encoder configured to receive audio output data from the virtualization module e.g. generated by the virtualized application instance operating in the sandbox and encode that video output data to encoded audio data.

As also shown in the encoded video or audio data produced by the encoder module may be provided to the streaming module for delivery to the client e.g. to the client module possibly as one or more data streams e.g. each carrying a different type of data . For example the streaming module may receive encoded audio data and encoded video data from the encoder module and generate a single data stream i.e. containing both the audio and the data that is subsequently delivered to the client module of the client . The client module in turn may extract the encoded audio data and the encoded video data from the received data stream and decode the data e.g. using the decoder for presentation to a client at the client e.g. through a client user interface generated by the wrapper application . In some embodiments the operation or functionality of the streaming module may be similar to of the streaming module described in .

The application module for some embodiments may be similar in operation or functionality to the application module described in . Accordingly the application module may be configured to obtain a version of an application e.g. Microsoft Excel from an application repository maintaining an application copy image of that version e.g. operating on a cloud based server . Upon obtaining the version of the application the application module may provide the version to the virtualization module either by reference e.g. data path to the version or as a copy for instantiation as a virtualized application instance operating in the sandbox .

In some embodiments the storage module possibly in combination with the storage module is similar in operation or functionality to the storage module described in . For example the storage module may be configured to operate in conjunction with the storage management module of the ACS to add remove modify or manage connections between the ASP system particularly the APS and various storage entities such as databases cloud based storage services and traditional file servers e.g. a private enterprise file server . According to some embodiments the storage module in combination with the storage management module may establish a storage related connections between a virtualized application instance operating in the virtualization module e.g. in the sandbox and a third party cloud based storage service e.g. Dropbox. Box or Google Docs which is generally external to the ASP system As described herein the establishment of a connection between the virtualized application instance and the third party cloud based storage service may involve logging into the storage entity using third party user credentials stored and provided e.g. by the UP module in association with a user accessing the virtualized application instance.

In various embodiments the peripheral handler module may be configured to handle input data received from a user at the client e.g. from the client module and convey redirect such input data to the virtualization module e.g. a virtualized application instance operating in the sandbox . As described herein the input data may include for example control information generated by a human machine interface FIMI device such as a mouse keyboard joystick or touch screen. While conveying redirecting the received input data the peripheral handler module may translate the input data from a first input type native to an environment of at least one of the client devices to a second input type native to an environment of the virtualized application instance For some embodiments the system may further comprise a peripheral handler module configured to redirect an output data received from the virtualized application instance to a peripheral coupled to at least one of the client devices.

For instance where the control information received from the client is fully or partially incompatible with the version of the application e.g. Microsoft Excel 2011 operating in the virtualized application instance or incompatible with the operating system of the virtual computing environment in which the virtualized application instance is operating e.g. Microsoft Excel 2011 the peripheral handle module may be capable of translating converting or remapping the control information from a first input data type that is native compatible with the client or with the operating system of the client e.g. Apple iOS to a second input data type that is native compatible with the version of the application operating in the virtualized application instance or with operating system of the virtual computing environment in which the virtualized application instance is operating. Take for example where control information received from the client e.g. the client module contains gestures entered on a touch screen at the client . Such control information which may be native to compatible to mobile devices e.g. based on Android or Apple iOS may be translated or remapped by the peripheral handler module to mouse movements or keyboard inputs that in the virtual computing environment of the virtualized application instance equate to or are a substitute for the gestures originally entered at the client . Accordingly for certain embodiments the operation or functionality of the peripheral handle module may include the operations or functionalities described with respect to the gesture module of .

In accordance with some embodiments the session management module may be configured to manage or monitor application sessions in association with virtualized application instances being operated by the virtualization module . In accordance with embodiments described herein an application session may be generated for one or more virtualized application instances being accessed by a given user at the client . As such the application session may be utilized by the ASP system to associate one or more virtualized application instances with a given user accessing those virtualization application instances through the ASP system . In some embodiments an application session may be established concurrently with e.g. at or near the time of the instantiation of the virtualized application instance associated with the session. Alternatively an application may be established and associated with a virtualized application instantiation already operating in the virtualization module e.g. one that was initially started for another user during another application session but has now been reset for the newly established application session associated with another user .

In addition to storing the association between a virtualized application instance and a given user the application session maintained by the session management module may periodically save the current state of the virtualized application instance as operated upon by the user. In doing so the session management module may preserve application sessions after a user at the client has signed out of the ASP system or the client has lost network connection with the ASP system or the APS . For some embodiments such a feature may permit the user at the client to resume previous stared application sessions without the need to start with a new virtualized application instance in a new application session.

At step the application module may obtain a version of an application e.g. Microsoft Excel from a second cloud based server e.g. an application repository . At step the virtualization module may execute a virtualized application instance based on the version of the application obtained at step in a virtual computing environment e.g. using a cloud based service such as SaaS IaaS or PaaS . In various embodiments the virtualized application instance may be executed such that the virtualized application instance has native direct access to data stored on made available through the cloud based storage with which access is established at step . Each virtualization may be performed in a sandbox.

As the virtualized application instance is executed at step the encoder module may receive output data e.g. video audio or other data from the executing virtualized application instance e.g. video output from a video editing application executing in the virtualized application instance and encode the received output data in a format compatible for decoding by the client module e.g. as or once the encoded output data is delivered from the ASP system to the client .

The output data encoded by the encoder module at step may be delivered by the ASP system to the client for decoding and presentation e.g. through the client user interface . In some embodiments the encoded output data from the encoder module may be delivered to the client at step as a data stream generated by the streaming module . Depending on the embodiment the data stream delivered may be such that the client can extract and decode the encoded output data contained in the stream e.g. using the client module . Additionally for some embodiments the streaming module may generate the data stream such that the data stream comprises two or more individual data containing different data types. For example an audio data stream generated by the streaming module contains may contain encoded audio output data from the virtualized application instance executing on the ASP system on behalf of a client at the client .

Though the steps of the above method may be depicted and described in a certain order those skilled in the art will appreciate that the order in which the steps are performed may vary between embodiments. Additionally those skilled in the art will appreciate that the components described above with respect to the method of the flowchart are merely examples of components that may be used with the method and that other components may also be utilized in some embodiments.

In the screenshot presents the exemplary client user interface configured in an application view mode where the exemplary client user interface presents a listing of the applications e.g. listing of icons representing applications provided by the exemplary system e.g. the ASP system of for access e.g. selection and invocation or for previewing the listing by a user using the exemplary client user interface. As shown in the screenshot the exemplary client user interface includes a function bar at top of the interface which may be configured to provide a user with menu selections option selections and search capabilities and a viewing pane which may be configured to present a listing of items e.g. listing of files or listing of applications available through the exemplary client user interface in accordance with user selections made through function bar .

The shown application icons may indicate different applications that are available to the user. Each application may be initiated within one or more virtualizations. In some embodiments each application has a separate virtualization. The virtualization may be performed by the ASP ACS APS or the like.

To facilitate the user interaction with the exemplary client user interface and more particularly the function bar of the interface the function bar may comprise a search field by which a user can textually search for files or applications accessible to the user through the exemplary client user interface. The function bar may also comprise a view mode selection bar by which a user can select the toggle between different viewing modes for the viewing pane e.g. an application view mode where applications accessible to the user are listed in the viewing pane or a file view mode where files accessible to the user are listed in the viewing pane . For example the view mode selection bar may allow a user to select between viewing in the viewing pane a listing of all accessible files a listing of files recently access by the user a listing of files currently open a listing of files shared with other users e.g. via the collaboration module or a listing of applications available for access e.g. by a user selecting an application toggle button . For some embodiments the function bar may provide a preview toggle button which may be selected by a user to enable or disable a file preview feature of the viewing pane . Through use of the preview feature a file may be displayed through the viewing pane as read only possibly for presentation purposes e.g. slide show or for providing a quick preview of the file before it is opened for editing.

When a user wishes to view or change their account information e.g. username password payment method balance e mail address etc. they may select an account information button that may be included on the function bar . Likewise when a user wishes to share or collaborate on a listed item in the viewing pane e.g. file or application with another user e.g. a sharing user the user may select a share button included on the function bar which may cause a share collaboration menu to be provided by the exemplary client user interface.

As discussed herein through a share collaboration menu some embodiments permit a user to grant one or more other online or offline users of an ASP system e.g. the ASP system share access to the particular virtualized application instance currently operating in the viewing pane or alternatively one already operating in the background for the user but not presently shown in the viewing pane share access to the file currently being accessed through the particular virtualized application instance. For some embodiments a user may implement limitations on the share access they authorize for other users including an expiration time associated with the share grant and the type of share access to be granted e.g. asynchronous share access synchronous share access password protected access or read only access . Additionally in some embodiments the share collaboration menu may permit the current user to receive from another user of the ASP system a request for share access and the type of share access that the current user may approve or deny to view history relating to access of a shared file or application by other users or to monitor the shared access of a file or application by other users.

In order to configure the settings of either the exemplary client user interface the client module providing the exemplary client user interface e.g. the client module of or the exemplary system operating in conjunction with the exemplary client user interface e.g. the ASP system of a user may select a configuration button on the function bar . Deleting a listed item e.g. accessible file or application from the viewing pane may be facilitated by a user selecting the listed item in the viewing pane and then selecting a delete item button . Depending on the embodiment deleting an item from the viewing pane may result in removing access to the item removing the item from storage on the exemplary system e.g. the ASP system of or both.

The viewing pane may present a listing of items such as applications or files available by the exemplary system for access or selection by the user. By way of example where the exemplary client user interface is presented through a tablet computing device operating as a client a user may invoke one or more of the applications listed by the exemplary client user interface by utilizing the input means provided by the tablet computing device e.g. touch screen interface keyboard or stylus . Depending on the embodiment the exemplary client user interface may be configured such that the applications are listed for selection according to application availability to users utilizing the exemplary client user interface. Examples of application availability can include availability based on the privileges of the current user logged into the client user interface availability based on resources presently available to the exemplary system e.g. computing resources or connection bandwidth or some combination thereof. In some embodiments the exemplary client user interface may list both available applications and unavailable application with each listed being presented according to their availability. For example where icons are employed in the viewing pane to list applications icons representing applications unavailable for selection by the user may be dithered or otherwise visually modified in comparison to icons representing applications available for selection by the user.

The screenshot of presents the exemplary client user interface with the viewing pane configured in a file view file management mode. In particular the screenshot shows that through the view mode selection bar a user has chosen a file management mode where all files accessible to the user are listed in the viewing pane . For some embodiments access to files through the viewing pane while in file management mode may comprise selecting e.g. for opening in a virtualized application instance adding e.g. by creation of a new file or by upload deleting moving and renaming files. As described herein the file presented in the viewing pane may be those from one or more third party cloud based storage services. In file management mode the viewing pane may be configured to present files in a common manner regardless of their respective cloud based sources. In this way various embodiments may present the files to a user for access in a universal and agnostic manner independent of what application is needed to open the file e.g. version of application or where the file is stored.

The screenshot of presents the exemplary client user interface after selection of a file or an application through the exemplary client user interface. The screenshot specifically shows what the exemplary client user interface may appear as after a word processing file e.g. Microsoft Word file or an application e.g. Microsoft Word listed in the viewing pane has been selected by a user through the exemplary client user interface. For some embodiments when a user selects a file through the exemplary client user interface e.g. via the viewing pane an application compatible with file e.g. compatible with the format of the file and provided by the exemplary system e.g. the ASP system of may be invoked to open or operate on the file.

As shown in the screenshot after a file or application has been selected the exemplary client user interface may comprise a home button which may be configured to return a user to the exemplary client user interface of or upon selection an open button which may be configured to open one or more files in addition to the currently shown file using the application currently active and displayed through the exemplary client user interface or through another application e.g. one already active in the background or newly invoked for the purpose of the other file a maximize minimize window control button which may be configured to control a size of the window interface and an active application viewing pane through which the currently active application may be displayed e.g. the display output for the application . Generally the currently active application is the application a user has currently chosen to use through the exemplary client user interface. In some embodiments the open button may cause the exemplary user interface to present a listing of files available for opening through the application currently active and displayed through the exemplary client user interface or through another application available through the an APS system e.g. the ASP system . The files listed may include those provided by a cloud based service having a connection established with the APS system e.g. the ASP system .

As also shown in the screenshot the exemplary client user interface may further provide the account information button the share button the configuration button and the delete item button described in . In the context of the delete item button may be configured to delete the currently active application or the current file being operated on by the currently active application . An application viewing pane displays video output data from the active application currently being provided to the user through the exemplary client user interface.

The screenshot of . presents a close up of the exemplary client user interface upon selection of the share button . As shown in the screenshot once a user selects the share button a share dialog box may be presented e.g. over the active application viewing pane to configure the share. Through an expiration field the share dialog box may permit a user to specify when a share e.g. with one or more other user on the exemplary application service provider system of will expire e.g. by hours days months or a specific date . The share dialog box may also include a password field that permits a user to enable or disable a password for the share e.g. where a sharing user is prompted with a password before being granted access to the shared file or application . A share user selection menu in the share dialog box may facilitate a user s selection of one or more sharing users with which a select file or application will be shared. For some embodiments the share may be delivered by way of electronic mail e mail or text message system possibly internal or external to the exemplary system. In the context of the screenshot the share to be created by the user may be for the current file or currently active application being presented in the active application viewing pane .

The gesture mapper may be configured to receive gesture data relating to the gesture received at the client e.g. through the client module and mapping the user input data to a set of input events that emulate the gesture input for the virtualized application instance operating on the ASP system e.g. the ASP system . In mapping the gesture data to a set of input events the gesture mapper may consider several factors including without limitation a movement physics model e.g. a flick model or a polynomial physics model the type of application or operating system in the virtualized application instance and or the virtual computing environment that is to receive the set of input events and the current state of the virtualized application instance. The current state of the virtualized application instance may include the type of virtualized application instance the current user selection s in the virtualized application instance the current viewing mode of the virtualized application instance the current position of user input cursor s or the current active pane in the virtualized application instance.

According to some embodiments upon receiving gesture data from a client e.g. the client module which may include a gesture input module the gesture mapper may identify a window or some other graphic user interface associated with the virtualized application instance and at the current position of an input cursor e.g. mouse cursor . The gesture mapper may further analyze the state of scrollbar s of the virtualized application instance as the gesture mapper maps the gesture data to the set of input events.

The following Table 1 enumerates one or more exemplary mappings of particular gestures to sets of input events e.g. actions executed in connection with the virtualized application instance or the virtual computing environment which may be utilized by the gesture mapper .

As noted herein for some embodiments the gesture mapper and the set of input events determined by the gesture mapper may utilize movement physics model such as a flick model or a scroll model as a gesture input is mapped to the set of input events. Evaluating the movement physics model for a gesture being mapped may comprise analyzing such gesture data e.g. received from the client module as the movement type which may be recognized by the client or the APS system a vector information representing the gesture to be mapped e.g. X Y coordinates of the start and stop positions of the gesture and gesture timestamps e.g. for gesture start and stop positions . Where relevant particular embodiments may calculate the velocity for a gesture to be mapped based on the gesture start and stop positions and the timestamps relating to those positions. Exemplary movement physics models utilized by embodiments may include a polynomial movement model and a flick model. An exemplary flick model may be selected and utilized when for example gesture data for a given indicates linear movements and deceleration of movement until stop. The example flick model may comprise measuring the flick in terms of in pixel time per frame . To smoothen and or refine processing of a movement physics model such as the flick model the client the APS system or both may utilize a manipulation processor and or an inertia coprocessor in applying the model to a gesture.

The gesture emulator may be configured to execute the set of input events determined by the gesture mapper . For some embodiments the gesture emulator may execute the set of input events by employing application program interfaces APIs or other programming constructs native to or operable with the virtualized application instance and or the virtual computing environment containing the virtualized application instance. The APIs programming constructs may be utilized to programmatically control and send user input event messages to the virtualized application instance and or the virtual computing environment to effectuate the emulation of a gesture received at a client e.g. the client in the virtualized application instance and or the virtual computing environment. For example where the virtualized application instance is a Microsoft Windows application or the virtual computing environment is operating Microsoft Windows the input events may be executed using operating system messages e.g. those associated with WM GESTURE WM TOUCH SM THUMBPOSITION for WM VSCROLL and SB LINELEFT and SB LINERIGHT for WM HSCROLL . In some instances the operating system of the virtual computing environment may provide some native support for gestures and as such the gesture mapper may leverage such native support in the set of input events e.g. various versions of Microsoft Windows comprise some support for touch gesture and tablet flick .

The gesture emulator may additionally or alternatively utilize a client side kernel mode driver in the virtual computing environment configured to permit the gesture emulator to perform the set of input events determined by the gesture mapper .

The gesture mapping storage may comprise information utilized by the gesture mapper in mapping gesture s received at the client module to a set of input events that can be executed in the virtualized application instance or the virtual computing environment operating the virtualized application instance. For instance the gesture mapping storage may comprise user defined or system defined e.g. administrator defined mappings of gestures to the set of input events. The mapping information provided above with respect to Table 1 are just some exemplary mappings that could be stored on the gesture mapping storage and subsequently utilized by the gesture mapper .

At step the client module the gesture module or the combination of the two may provide gesture data for a gesture input received at the client . For some embodiments the client module may capture gesture data or receive gesture data from the client regarding a gesture received at the client . In accordance with various embodiments the gesture data captured or received may comprise a gesture type a gesture phase e.g. phases of gesture input as it is inputted by a user coordinates relating to the gesture e.g. X Y coordinates of start and stop of gesture velocity of gestures e.g. X Y components of vector data representing the gesture pressure associated with the gesture or a gesture timestamp e.g. gesture start and stop timestamp .

At step the gesture module may map the gesture data to a set of input events which may be natively operable with and executed for a virtualized application instance being provided by e.g. being operated on the ASP system . As described herein the set of input events may be executed with respect to the virtualized application instance and or with respect to the virtual computing environment with the executed set of input events affecting the performance or behavior of the virtualized application instance. The gesture module may map the gesture data according to a user defined or system defined mapping of gesture s to sets of input events such as those enumerated in Table 1 provided above. In mapping the gesture data to a set of input events the gesture module may consider such factors as available or applicable movement physics models e.g. a flick model or a polynomial physics model the version of application or operating system being utilized in the virtualized application instance and or the virtual computing environment to receive the set of input events and the current state of the virtualized application instance and or the virtual computing environment. The current state of the virtualized application instance may include the type of virtualized application instance the current user selection s in the virtualized application instance the current viewing mode of the virtualized application instance the current position of user input cursor s or the current active pane in the virtualized application instance.

As discussed herein exemplary input events utilizable by the gesture module may include user input actions typical of graphical user interface GUI computing environments e.g. Microsoft Windows or Apple OS X such as mouse based input events e.g. movement event mouse click event mouse wheel event mouse button event or click and drag mouse events scroll events e.g. a vertical scroll event or a horizontal scroll event by way of mouse or keyboard keyboard based input events e.g. one or more keystrokes keyboard shortcut buttons a gesture based input event e.g. one that is natively compatible with recognized by the virtualized application instance and or the virtual computing environment an audio input event e.g. an input event that the virtualized application instance and or the virtual computing environment recognizes as an audio input or a video input event e.g. motion detection or image detection event typically captured by a camera provided to the virtualized application instance and or the virtual computing environment .

Accordingly some embodiments may be capable of mapping a gesture input that is native to and received at the client e.g. the client to a second gesture input that is native to and received by the virtualized application instance and or the virtual computing environment e.g. received as the set of input events . Such functionality may be applicable for example where the client is based on Apple iOS and where the virtual computing environment that is supporting the virtualized application instance relates to Microsoft Windows Server 2008 R2 which is known to support gesture inputs e.g. in gestures mode . In such an example a first gesture input recognized by and received at the client based on Apple iOS such as a left to right swipe gesture received on a touch screen can be mapped to a second gesture input recognized by and received at the virtual computing environment based on Microsoft Windows Server 2008 R2 such as a two finger tap gesture e.g. GestureID value in WM GESTURE message equals GID TWOFINGERTAP .

Other input events may include inputs that invoke a zoom command a pan command or a rotate command that is compatible with the virtualized application instance and or the virtual computing environment. Depending on the embodiment the gesture module may execute the set of input events in the virtualized application instance and or the virtual computing environment by way of an operating system or kernel driver implemented in the virtual computing environment e.g. human machine interface HID driver installed on the operating system running in the virtual computing environment .

For particular embodiments the gesture module may utilize one or more algorithms in the set of input events which further enable the set of input events to emulate the gesture received at the client . For example various scrolling algorithms may be utilized in the set of input events to effectuate the gesture emulation in the virtualized application instance and or the virtual computing environment of the virtualized application instance.

According to one scrolling algorithm for emulating vertical scrolling the algorithm may comprise by sending vertical mouse wheel messages to the system and moving from a mouse wheel start position to a mouse wheel end position according to predetermined velocity e.g. 20 fps . According to a scrolling algorithm for vertical scroll bar movement or horizontal scroll bar movement the algorithm may comprise identifying a relevant scroll bar moving a mouse cursor to the middle of the bar when gesture starts at the client e.g. the client moving the mouse cursor while dragging the relevant scroll bar and releasing the mouse click when gesture ends. For some embodiments the scrolling algorithm may release the relevant scroll bar every few small movements to permit the virtualized application instance and or the virtual computing environment to refresh the view.

According to a scroll control click algorithm the algorithm may comprise determining scroll controls moving mouse cursor to scroll control as the received gesture starts clocking the scroll control while the gesture runs releasing the scroll control and returning the mouse cursor to previous position as the received gesture ends. Through such an algorithm the set of input events could emulate a gesture that allows continuous scroll clicking. According to a control and mouse wheel algorithm the algorithm comprises invoking the control keyboard button when the gesture starts sending wheel events as the gesture progresses and releasing the control keyboard button when the gesture ends.

At step the gesture module may execute the set of input events in the virtual computing environment supporting the virtualized application instance. In order to facilitate the execution of the set of input events the gesture module may utilize APIs and programming constructs compatible with the virtualized application instance and or the virtual computing environment. The APIs and programming constructs may in some instances employ operating system messages that permit the gesture module to submit user input events directly to the operating system supporting the virtualized application instance.

The memory system is any memory configured to store data. Some examples of the memory system are storage devices such as RAM or ROM. The memory system can comprise the ram cache. In various embodiments data is stored within the memory system . The data within the memory system may be cleared or ultimately transferred to the storage system .

The storage system is any storage configured to retrieve and store data. Some examples of the storage system are flash drives hard drives optical drives and or magnetic tape. In some embodiments the digital device includes a memory system in the form of RAM and a storage system in the form of flash data. Both the memory system and the storage system comprise computer readable media which may store instructions or programs that are executable by a computer processor including the processor .

The communication network interface com. network interface can be coupled to a network e.g. network via the link . The communication network interface may support communication over an Ethernet connection a serial connection a parallel connection or an ATA connection for example. The communication network interface may also support wireless communication e.g. 802.11a b g n WiMax . It will be apparent to those skilled in the art that the communication network interface can support many wired and wireless standards.

The optional input output I O interface is any device that receives input from the user and output data. The optional display interface is any device that is configured to output graphics and data to a display. In one example the display interface is a graphics adapter.

It will be appreciated by those skilled in the art that the hardware elements of the digital device are not limited to those depicted in . A digital device may comprise more or less hardware elements than those depicted. Further hardware elements may share functionality and still be within various embodiments described herein. In one example encoding and or decoding may be performed by the processor and or a co processor located on a GPU i.e. Nvidia .

The above described functions and components can be comprised of instructions that are stored on a storage medium such as a computer readable medium. The instructions can be retrieved and executed by a processor. Some examples of instructions are software program code and firmware. Some examples of storage medium are memory devices tape disks integrated circuits and servers. The instructions are operational when executed by the processor to direct the processor to operate in accord with some embodiments. Those skilled in the art are familiar with instructions processor s and storage medium.

Various embodiments are described herein as examples. It will be apparent to those skilled in the art that various modifications may be made and other embodiments can be used without departing from the broader scope of the invention s presented herein. These and other variations upon the exemplary embodiments are intended to be covered by the present invention s .

