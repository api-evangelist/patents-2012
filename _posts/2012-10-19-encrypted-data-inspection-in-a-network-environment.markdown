---

title: Encrypted data inspection in a network environment
abstract: Technologies are provided in example embodiments for analyzing an encrypted network flow. The technologies include monitoring the encrypted network flow between a first node and a second node, the network flow initiated from the first node; duplicating the encrypted network flow to form a copy of the encrypted network flow; decrypting the copy of the encrypted network flow using a shared secret, the shared secret associated with the first node and the second node; and scanning the network flow copy for targeted data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09176838&OS=09176838&RS=09176838
owner: Intel Corporation
number: 09176838
owner_city: Santa Clara
owner_country: US
publication_date: 20121019
---
This disclosure relates in general to the field of network security and more particularly to inspecting encrypted data in a network environment.

The field of network security has become increasingly important in today s society. The Internet has enabled interconnection of different computer networks all over the world. However the Internet has also presented many opportunities for malicious operators to exploit these networks. Certain types of malicious software e.g. bots can be configured to receive commands from a remote operator once the software has infected a host computer. The software can be instructed to perform any number of malicious actions such as sending out spam or malicious emails from the host computer stealing sensitive information from a business or individual associated with the host computer propagating to other host computers and or assisting with distributed denial of service attacks. In addition the malicious operator can sell or otherwise give access to other malicious operators thereby escalating the exploitation of the host computers. Thus the ability to effectively protect and maintain stable computers and systems continues to present significant challenges for component manufacturers system designers and network operators.

Enterprise environments deploy numerous network management tools including firewalls network intrusion detection prevention NIDS NIPS systems traffic shapers and other systems. A number of these systems rely on inspection of network traffic in order to provide a wide array of services including the detection prevention of malware propagation ensuring corporate intellectual property is not leaked outside well defined enterprise boundaries as well as general auditing and network management functions. Network traffic may also be encrypted using protocols such as Secure Sockets Layer SSL Transport Layer Security TLS .

Turning to is a simplified block diagram of a network environment in which a firewall may intercept a network flow in accordance with an embodiment. In the embodiment illustrated in network environment can include Internet client a firewall a policy server a mail server and a web server . In general client may be any type of termination node in a network connection including but not limited to a desktop computer a server a laptop a mobile device a mobile telephone or any other type of device that can receive or establish a connection with another node such as mail server or web server . Firewall may control communications between client and other nodes attached to Internet or another network such as by blocking unauthorized access while permitting authorized communications. In some instances firewall may be coupled to or integrated with an intrusion prevention system network access control device web gateway email gateway mobile device or any other type of gateway between Internet and client . Moreover the location of firewall in the routing topology close to user client is arbitrary.

Policy server may be coupled to or integrated with firewall and may be used to manage client and to administer and distribute network policies. Thus in this example embodiment client may communicate with servers attached to Internet such as mail server or web server by establishing a connection through firewall if permitted by policies implemented in firewall and managed by policy server .

Each of the elements of may couple to one another through simple interfaces or through any other suitable connection wired or wireless which provides a viable pathway for network communications. Additionally any one or more of these elements may be combined or removed from the architecture based on particular configuration needs. Network environment may include a configuration capable of transmission control protocol Internet protocol TCP IP communications for the transmission or reception of packets in a network. Network environment may also operate in conjunction with a user datagram protocol IP UDP IP or any other suitable protocol where appropriate and based on particular needs.

For purposes of illustrating the techniques for providing network security in example embodiments it is important to understand the activities occurring within a given network. The following foundational information may be viewed as a basis from which the present disclosure may be properly explained. Such information is offered earnestly for purposes of explanation only and accordingly should not be construed in any way to limit the broad scope of the present disclosure and its potential applications.

Typical network environments used in organizations and by individuals include the ability to communicate electronically with other networks using the Internet for example to access web pages hosted on servers connected to the Internet to send or receive electronic mail i.e. email messages or to exchange files. However malicious users continue to develop new tactics for using the Internet to spread malware and to gain access to confidential information. Malware generally includes any software designed to access and or control a computer without the informed consent of the computer owner and is most commonly used as a label for any hostile intrusive or annoying software such as a computer virus bot spyware adware etc. Once compromised malware may subvert a host and use it for malicious activity such as spamming or information theft. Malware also typically includes one or more propagation vectors that enable it to spread within an organization s network or across other networks to other organizations or individuals. Common propagation vectors include exploiting known vulnerabilities on hosts within the local network and sending emails having a malicious program attached or providing malicious links within the emails.

For purposes of illustrating some example techniques of a security module and an extraction module it is important to understand a man in the middle MITM technique. One or more embodiments recognize and take into account that some embodiments for screening SSL or TLS traffic in security devices use MITM techniques the security device terminates the SSL connection using a certificate that spoofs the destination then proxies the data to the destination over a second SSL connection. The user can see this spoofing and either ignores it explicitly for each connection or sets his machine to trust the security device so the warning goes away.

MITM is expensive for the security device to implement because it needs to decrypt and re encrypt all traffic. Also MITM requires the security device to perform expensive public key cryptography operations on each connection being screened.

An additional problem with MITM is that the user does not get a true SSL authentication of the target web site server . This is a key benefit of SSL security but the user only knows that the security device is reached and not the web site that has really been accessed. This deficiency can be exploited by attackers who using phishing emails to direct users to sites that look like trusted sites but are really out to exploit them.

Additionally the different embodiments of this disclosure recognize and take into account a situation where a trusted client is communicating with an untrusted server the network device terminates and re establishes an SSL TLS session between two communicating endpoints. This is also often referred to as a break make connection. The trusted client is provisioned with a certificate of the network device domain and accepts this in the secure session setup process even though it is communicating with an endpoint beyond the network appliance e.g. a banking website . In practice this session is terminated at the network appliance which instantiates a second separate session to the ultimate endpoint on behalf of the client. This mechanism allows the network appliance to get visibility to the TLS traffic as it is a man in the middle for the secure communication channel. This approach results in a burden on the network appliance as it needs to proxy connections for every client session hence needs to manage resources for all of these proxy connections. This situation adds significant overhead to the network appliance.

Also the different embodiments of this disclosure recognize and take into account another situation where an untrusted client is communicating with a trusted server the network appliance gets access in some OOB manner to the trusted server s certificate including the public private key pair e.g. RSA keys used for authenticating the SSL TLS session. Because of the SSL TLS operation where the client sends a pre master secret to the server encrypted with the public key of the server the network appliance is able to capture decrypt this information en route and snoop on the SSL TLS handshake. This allows the network appliance to independently compute the SSL TLS session keys and thereafter decrypt the encrypted communication between the two endpoints. However this situation relies upon ownership of the server private key and does not apply in the common situation of an organization that seeks to protect multiple users with client machines that are connecting to multiple servers on the Internet by provisioning a security device such as Intrusion Protection or Firewall.

The different embodiments of this disclosure recognize and take into account enterprises have pressing need to scan SSL TLS traffic malware inspection data loss protection MITM techniques already in use MITM fakes both authentication and encryption user sees forged certificate trust is compromised annoyance factor when a user either sees a warning message for every connection or never knows whether trust is real.

One or more embodiments of this disclosure provide a novel approach which simplifies visibility into encrypted network streams as well as alleviating large overheads on the network devices.

In an embodiment of this disclosure server includes certificate of authority . Certificate of authority may be an entity that issues digital certificates. The digital certificate certifies the ownership of a public key by the named subject of the certificate. This allows client to rely upon signatures or assertions made by the private key that corresponds to the public key that is certified. In this model of trust relationships certificate of authority is a trusted third party that is trusted by both server and client upon the certificate. On client trust list may be maintained. Trust list may include the digital certificates that client trusts.

In one or more embodiments encryption protocol session operates between client firewall and server . Encryption protocol session includes a network flow . Network flow is an encrypted flow of data that operates in both directions between client and server . Firewall may intercept network flow for inspection and analysis. In an embodiment the protocols used for encryption protocol session secure communications may be transport layer security TLS or its predecessor secure sockets layer SSL . These protocols are cryptographic protocols that provide communication security over the Internet. These protocols may also be used interchangeably in this disclosure. TLS and SSL encrypt the segments of network connections at the application layer for the transport layer using asymmetric cryptography for key exchange symmetric cryptography for confidentiality and message authentication codes for message integrity.

Client and server may also maintain a shared secret e.g. a password key etc. for authentication of data in network flow . Shared secret may be configured during encryption protocol session . Shared secret may be a value that is shared and known between client and server . In an embodiment for example shared secret may be a master secret or session keys as used in SSL TLS. Session keys may be a session context and may include an initialization vector crypto algorithm being used etc. as well as just the session key. A session context may contain necessary cryptographic information to de capsulate the payload e.g. encryption integrity compression algorithms associated keys key sizes Initialization vectors etc. In contrast a public private asymmetric key structure is not shared between client and server because each party has different keys.

Extraction module is configured to extract shared secret from client . In particular extraction module may extract the master secret pre master secret hash based message authentication code HMAC and or session keys. Extraction module may be loaded onto client or in other embodiments may be a separate module with access to client .

In an embodiment extraction module may load shared library into application . This allows extraction module access to encryption protocol session through application to identify shared secret . Shared library may be a shared library or shared object is a file that is intended to be shared by executable files and further shared objects files. Shared library may be for example a dynamic link library DLL . Application may be a process that is communicating with server through encryption protocol session . Application may be for example a web browser.

In another embodiment extraction module may be configured to monitor network flow at a network layer and detect the progress of a network handshake such as the SSL initial handshake and so determine the point in time when memory space of application may contain the shared secret for the encrypted connection being negotiated. Extraction module may be configured to open the memory space of the process running the application for example by using debugging system calls to access the process memory of a target process on the same computer system in Microsoft Windows or Linux . Extraction module may also be configured to search memory space to identify shared secret .

Extraction module is configured to send shared secret to security module . The path of transmission to security module may also be a secured channel.

With shared secret security module may be able to decrypt network flow using the same encryption decryption process as client and server are using. Security module may operate in different modes of operation.

In one embodiment security module may be configured to copy network flow to create network flow copy . Network flow copy may then be decrypted without affected network flow to create unencrypted network flow . In some embodiments security module may delay network flow to wait for shared secret from encryption module have time to decrypt network flow copy modify network flow inspect unencrypted network flow for security issues or any other suitable reason for delaying. In other embodiments security module does not delay network flow and may only copy network flow .

In an embodiment security module may be configured to scan network flow and or network flow copy once decrypted and as unencrypted network flow for targeted data . Targeted data may contain data that security module is looking for such as for example hostile intrusive or annoying software such as a computer virus bot spyware adware. Targeted data may be malware.

In operational terminology and in one particular embodiment an illustration of a TLS or SSL connection may begin as follows during a negotiation phase client sends a message specifying the highest TLS protocol version it supports a random number a list of suggested cipher suites and suggested compression methods. A cipher suite is a named combination of authentication encryption and message authentication code MAC algorithms used to negotiate the security settings for a network connection using the TLS or SSL network protocols. Also if client is attempting to perform a resumed handshake it may send a session ID.

In response server responds with a message containing the chosen protocol version another random number a selected cipher suite and a selected compression method from the choices offered by the client. To confirm or allow resumed session server may send the same session ID. To start a new session server may send a new session ID. Also client may respond with another message which may contain a pre master secret public key or nothing. The pre master secret is encrypted using the public key of the server certificate. Client and server then use the random numbers and the pre master secret to compute a common secret called the master secret . All other key data for this connection is derived from this master secret. The master secret may be used to make session keys for each communication session between client and server . The pre master secret master secret and session keys are all examples of shared secret .

One or more embodiments provide extraction module also referred to as a trusted agent on client that monitors SSL TLS connections and is able to intercept certain well defined application programming interfaces APIs to directly extract the master secret pre master secret and or the session key. Extraction module on client may perform the extraction of shared secret . This information is securely shared to security module a trusted and authorized network appliance via a secure out of band OOB channel. In other embodiments the information is shared via a non secure channel. This allows security module to decrypt encryption protocol session SSL TLS communication and get visibility into network flow .

In operational terminology and in particular one embodiment extraction module special software on client the user workstation searches out shared secret the SSL key as each encryption protocol session is established. Discovery protocols then transmit shared secret securely to security module . Client establishes the SSL connection end to end with full authentication of the target site but security module can still scan the connection to protect client .

In addition shared secret may shared with security module only after a public key handshake occurs so security module can decrypt the session using a single symmetric decryption per data item. This process is faster than MITM.

One or more embodiments of this disclosure 1 preserves end to end authentication and that it can be used for passive connections to the network 2 alleviate overhead on a security module to store state for every single connection where a second independent SSL TLS connection must be constructed in order to get visibility into the encrypted traffic streams and 3 are compatible with the user of client side certificates in SSL not supported in MITM .

The embodiments of this disclosure provide a client based approach to extract the SSL TLS master secret and or session keys and sharing these with authorized security modules using a separate secure channel. The embodiments also enable scanning of the network flow without removing the ability of the client to perform end to end authentication and in a way that is very efficient for the security devices IPS Firewall security module to implement.

The embodiments of this disclosure provide a system to decrypt encryption protocol sessions SSL TLS sessions without compromising client trust. The embodiments provide SSL Handshake is passed on without change original certificate original CA trust extraction module shares session key with security module key is a short lived credential affects only this session decryption can also be faster than MITM decryption can also support SSL mutual authentication client side and server authentication and can support passive mode inspection of traffic.

The embodiments also provide the security device can also be used in a proxy environment where proxy may need to modify the SSL plaintext authentication and trust are still end to end connection starts in inspection mode where all data is pass through If proxy needs to change plaintext e.g. modifying a URL removing an attachment connection switches to proxy mode . In one or more of the embodiments a crypto state is divided between host and server. The client decrypt state is copied to become the initial server encrypt state. The server decrypt state is copied to become the initial client encrypt state. The security device both decrypts and re encrypts SSL data using the separate states. SSL plaintext can be modified in between these steps. The crypto states within the proxy diverge between received state and re encrypt state once the proxy modifies plaintext. Once re encryption starts it continues until the connection terminates.

The security module may use SSL key information to decrypt verify SSL session information and inspect SSL packets in further for malware detection or data loss protection.

One or more embodiments of this disclosure provide for modifying the SSL TLS handshake in order to change the SSL parameters that can be negotiated. In such embodiments the Initialization Vector IV must also be derived to allow the modification of the SSL TLS FINISH handshake message. This may be accomplished by using the master secret as the shared secret. In another embodiment the IV may directly be extracted by the extraction module and shared with the security module in the same manner as sharing the SSL TLS session key.

In one example implementation client and or firewall are network elements which are meant to encompass network appliances servers routers switches gateways bridges load balancers processors modules or any other suitable device component element or object operable to exchange information in a network environment. Network elements may include any suitable hardware software components modules or objects that facilitate the operations thereof as well as suitable interfaces for receiving transmitting and or otherwise communicating data or information in a network environment. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective exchange of data or information. However user client may be distinguished from other network elements as they tend to serve as a terminal point for a network connection in contrast to a gateway or router that tends to serve as an intermediate point in a network connection. Client may also be representative of wireless network nodes such as a smartphone or other similar telecommunications devices.

In regards to the internal structure associated with network environment each of client and or firewall can include memory elements for storing information to be used in the operations outlined herein. Each of client and or firewall may keep information in any suitable memory element e.g. random access memory RAM read only memory ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM application specific integrated circuit ASIC etc. software hardware or in any other suitable component device element or object where appropriate and based on particular needs. Any of the memory items discussed herein e.g. memory elements and should be construed as being encompassed within the broad term memory element. The information being used tracked sent or received by client and or firewall could be provided in any database register queue table cache control list or other storage structure all of which can be referenced at any suitable timeframe. Any such storage options may be included within the broad term memory element as used herein.

In certain example implementations the functions outlined herein may be implemented by logic encoded in one or more tangible media e.g. embedded logic provided in an ASIC digital signal processor DSP instructions software potentially inclusive of object code and source code to be executed by a processor or other similar machine etc. which may be inclusive of non transitory media. In some of these instances memory elements can store data used for the operations described herein. This includes the memory elements being able to store software logic code or processor instructions that are executed to carry out the activities described herein.

In one example implementation client and or firewall may include software modules e.g. extraction module and or security module to achieve or to foster operations as outlined herein. In other embodiments such operations may be carried out by hardware implemented externally to these elements or included in some other network device to achieve the intended functionality. Alternatively these elements may include software or reciprocating software that can coordinate in order to achieve the operations as outlined herein. In still other embodiments one or all of these devices may include any suitable algorithms hardware software components modules interfaces or objects that facilitate the operations thereof.

Additionally each of use client and or firewall may include a processor and that can execute software or an algorithm to perform activities as discussed herein. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein. In one example the processors could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA an EPROM an EEPROM or an ASIC that includes digital logic software code electronic instructions or any suitable combination thereof. Any of the potential processing elements modules and machines described herein should be construed as being encompassed within the broad term processor. 

Server certificate may be on example of certificate of authority in . Server certificate may be passed through to client . Client may store server certificate in real certificate authority trust . Real certificate authority trust may be one example of trust list in .

Network environment also includes messages . Messages may be messages included as part of a handshake for an SSL TLS session. An SSL TLS session may be one example of encryption protocol session in .

Messages and may be initial messages that include a ClientHello and a ServerHello. Firewall may allow message to pass through. Even though message and are labeled separately they contain the same information.

Messages and may be server sending client server certificate . Firewall also passes through these messages. Even though message and are labeled separately they contain the same information. By passing through server certificate client can confirm that communications are coming from server .

Messages and are the finishing messages for negotiation. Even though message and are labeled separately they contain the same information. In other embodiments if security module wants to select the cipher suite security module may alter messages and or . In this case they may not be the same.

Message may be when extraction module sends a shared secret to security module . Message may also be a secure message.

Messages and may represent the network flow. These messages show the data that is passed through firewall . In one or more embodiments firewall allow these message to pass through in other embodiments firewall may go between messages and . In the later situation firewall may delay terminate or modify messages and .

Client further includes application and operating system OS . Application may be a process that initiates an encryption protocol session with server . Application may be loaded into operating system that handles the actual transmission of data to server .

Extraction module may extract a shared secret from operating system and or application . Extraction module performs key sharing to send the shared secret SSL session key or master secret to security module . This allows security module to perform decryption on the network flow between operating system and server . The network flow may be SSL TLS encrypted traffic.

Security module in part a of may be a proxy in inspection mode. When in inspection mode security module is copying and decrypting network flow . Security module uses client decrypt state to decrypt network flow coming from a client and server decrypt state to decrypt network flow coming from a server.

In part b of security module is transitioning into proxy mode. Security module may take client decrypt state to create server encrypt state and take server decrypt state to create client encrypt state . In addition to decrypting like in part a in inspection mode security module can also encrypt in proxy mode in part c .

In part c security module is in between network flow . During proxy mode security module may pass through decrypt encrypt terminate and or modify network flow . To modify network flow security module may decrypt as before in part a but then use client encrypt state and or server encrypt state to also encrypt network flow . In an embodiment once security module begins modifying network flow security module may encrypt decrypt the rest of network flow for the rest of the encryption protocol SSL TLS session.

The extraction module may inspect a target application memory and address related data structures with API hooks or signature based scanning. The client may be protected by other security services to protect sensitive SSL key information before it is sent to a security module via a secure OOB channel.

In an embodiment a decrypt path might be Wininet.dll including CFSM RunworkItem CFSM Run CFSM SecureReceive ICSECURESOCKET RECEIVE FSM ICSecuresocket DecryptData and ICSecuresocket DecryptData. Then Sspiceli.dll which includes DecryptMessage and LsaunsealMessage. Then Schannel.dll which includes SpunsealMessage SslUnsealMessageStream TlsDecryptHandler and TlsDecryptMessag. Then Ncrypt.dll which includes SslDecryptpacket SPSsIDecryptPacket and TlsDecryptPacket. Then Bcrypt.dll which includes BcryptDecrypt. Then Bcryptprimitives.dll which includes MSCryptDecrypt MSBlockDecrypt and AescbcDecrypt.

In operational terms and specifically one embodiment an extraction module injects DLL into a process space of the application e.g. web browser . To do this the extraction module uses GetProcessAddress to find the LoadLibrary function Kernel32.dll places the string with the path to the injected DLL into the web browser process space via the VirtualAllocEx and WriteProcessMemory and invokes the CreateRemoteThread to launch a thread in the web browser process space using the LoadLibrary as the thread method passing the string allocated in above as the only argument. Then the injected DLL pre loads the SCHANNEL.DLL into the process space finds the base of the crypto data structures and hooks the crypto functions of SCHANNEL.DLL with custom functions. Next when the application requests crypto functions the hooked functions are called which then call the original SCHANNEL functions inspect the data structure found above for the crypto key material it may also find the master secret as well and return the values returned by the original SCHANNEL functions.

At the extraction module identifies the initiation of the handshake of the encryption protocol session. Responsive to identifying the initiation at the extraction module opens the memory space of a process initiating the encrypted protocol session. In one or more embodiments the process may be an application.

At the extraction module identifies a shared secret in the encryption protocol session within the memory space of the process. At the extraction module extracts the shared secret. After the extraction module may transmit the shared secret to a security module.

In operational terms and in particular one embodiment an extraction module may hook into TCP streams looking for ClientHello messages. When a ClientHello message is found and until the key material for the session is found all TLS messages are inspected. The SessionID is extracted for the ServerHello message. Before and after each packet is processed by the inspected process the process is queried via the EnumProcessModules and ReadProcessMemory to find if SCHANNEL.DLL is loaded find the base of the crypto data structures in SCHANNEL.DLL and find the key material for the session id found in the ServerHello message it may also find the pre master and or master secret as well. Once the key material is found the key material is sent to a security module. This process may be extended to find the key material in including those that are statically linked by searching the process space for the proper data structures.

At the security module duplicates the encrypted network flow to form a copy of the encrypted network flow. At the security module decrypts the copy of the encrypted network flow using a shared secret. The shared secret associated with the first node and the second node. Both the first node and the second node know the shared secret. In an embodiment the first node provides the shared secret. By knowing the shared secret the security module can decrypt the network flow without interfering with the network flow.

At the security module scans the network flow copy for targeted data. Targeted data may be data that is targeted by the client user security module firewall security software policy server or other entity.

Additionally in one or more embodiments an extraction module may extract the shared secret from the first node before . Additionally in one or more embodiments the security module may delay the encrypted network flow and forward the encrypted network flow as part of monitoring at . In that embodiment the security module would delay forwarding to give time to scan the copy of the network flow. Responsive to identifying targeted data in the network flow copy the security module may terminate the encrypted network flow.

Processor is shown including execution logic having a set of execution units through N. Some embodiments may include a number of execution units dedicated to specific functions or sets of functions. Other embodiments may include only one execution unit or one execution unit that can perform a particular function. Execution logic performs the operations specified by code instructions.

After completion of execution of the operations specified by the code instructions back end logic retires the instructions of code . In one embodiment processor allows out of order execution but requires in order retirement of instructions. Retirement logic may take a variety of forms as known to those of skill in the art e.g. re order buffers or the like . In this manner processor is transformed during execution of code at least in terms of the output generated by the decoder hardware registers and tables utilized by register renaming logic and any registers not shown modified by execution logic .

Although not illustrated in a processing element may include other elements on a chip with processor . For example a processing element may include memory control logic along with processor . The processing element may include I O control logic and or may include I O control logic integrated with memory control logic. The processing element may also include one or more caches.

As illustrated in system may include several processors of which only two processors and are shown for clarity. Processors and may each include a set of cores and to execute multiple processes of a program. Processors and may also each include integrated memory controller logic MC and to communicate with memories and . The memories and or may store various data such as those discussed with reference to memory . In alternative embodiments memory controller logic and may be discrete logic separate from processors and .

Processors and may be any type of a processor such as those discussed with reference to processor of . Processors and may exchange data via a point to point PtP interface using point to point interface circuits and respectively. Processors and may each exchange data with a chipset via individual point to point interfaces and using point to point interface circuits and . Chipset may also exchange data with a high performance graphics circuit via a high performance graphics interface using an interface circuit which could be a PtP interface circuit. In alternative embodiments any or all of the PtP links illustrated in could be implemented as a multi drop bus rather than a PtP link.

At least one embodiment as disclosed herein may be provided within the processors and . Other embodiments however may exist in other circuits logic units or devices within the system of . Furthermore other embodiments may be distributed throughout several circuits logic units or devices illustrated in .

Chipset may be in communication with a bus via an interface circuit . Bus may have one or more devices that communicate over it such as a bus bridge and I O devices . Via a bus bus bridge may be in communication with other devices such as a keyboard mouse or other input device such as a touch screen for example communication devices such as modems network interface devices or other types of communication devices that may communicate through a computer network audio I O device and or a data storage device . Data storage device may store code that may be executed by processors and or . In alternative embodiments any portions of the bus architectures could be implemented with one or more PtP links.

The computer systems depicted in are schematic illustrations of embodiments of computing systems that may be utilized to implement various embodiments discussed herein. It will be appreciated that various components of the systems depicted in may be combined in a system on a chip SoC architecture or in any other suitable configuration. For example embodiments disclosed herein can be incorporated into systems such as for example mobile devices such as smart cellular telephones tablet computers personal digital assistants portable gaming devices etc. It will be appreciated that these mobile devices may be provided with SoC architectures in at least some embodiments.

Note that in certain example implementations the security module and extraction module functions outlined herein may be implemented by logic encoded in one or more tangible media e.g. embedded logic provided in an application specific integrated circuit ASIC digital signal processor DSP instructions software potentially inclusive of object code and source code to be executed by a processor or other similar machine etc. . In some of these instances a memory element can store data used for the operations described herein. This includes the memory element being able to store software logic code or processor instructions that are executed to carry out the activities described in this Specification. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein in this Specification. In one example the processor could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. FPGA EPROM EEPROM or an ASIC that includes digital logic software code electronic instructions or any suitable combination thereof.

In one example implementation the security module and extraction module may include software in order to achieve the security activities outlined herein. The security module and extraction module can include memory elements for storing information to be used in achieving the security activities as discussed herein. Additionally the security module and extraction module may include a processor that can execute software or an algorithm to perform the security activities as disclosed in this Specification. These devices may further keep information in any suitable memory element random access memory RAM ROM EPROM EEPROM ASIC etc. software hardware or in any other suitable component device element or object where appropriate and based on particular needs. Additionally the security module and extraction module can be software hardware firmware or a combination thereof. Any of the memory items discussed herein e.g. databases tables trees caches etc. should be construed as being encompassed within the broad term memory element. Similarly any of the potential processing elements modules and machines described in this Specification should be construed as being encompassed within the broad term processor. 

Note that with the example provided above as well as numerous other examples provided herein interaction might be described in terms of two three or four elements. However this has been done for purposes of clarity and example only. In certain cases it may be easier to describe one or more of the functionalities of a given set of flows by only referencing a limited number of elements. It should be appreciated that the security module and extraction module and their teachings are readily scalable and can accommodate a large number of components as well as more complicated sophisticated arrangements and configurations. Accordingly the examples provided should not limit the scope or inhibit the broad teachings of the security module and extraction module as potentially applied to a myriad of other architectures.

It is also important to note that the operations in the preceding flow diagrams illustrate only some of the possible scenarios and patterns that may be executed by or within a security module and extraction module. Some of these operations may be deleted or removed where appropriate or may be modified or changed considerably without departing from the scope of the present disclosure. In addition a number of these operations have been described as being executed concurrently with or in parallel to one or more additional operations. However the timing of these operations may be altered considerably. The preceding operational flows have been offered for purposes of example and discussion. A security module and an extraction module provide substantial flexibility in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings of the present disclosure.

Although the present disclosure has been described in detail with reference to particular arrangements and configurations these example configurations and arrangements may be changed significantly without departing from the scope of the present disclosure.

The following examples pertain to embodiments in accordance with this Specification. One or more embodiments may provide a method for analyzing an encrypted network flow. The method may include monitoring the encrypted network flow between a first node and a second node the network flow initiated from the first node duplicating the encrypted network flow to form a copy of the encrypted network flow decrypting the copy of the encrypted network flow using a shared secret the shared secret associated with the first node and the second node and scanning the network flow copy for targeted data.

An example of an embodiment further comprises delaying the encrypted network flow and forwarding the encrypted network flow.

An example of an embodiment further comprises responsive to identifying targeted data in the network flow copy terminating the encrypted network flow.

An example of an embodiment further comprises responsive to identifying targeted data in the network flow copy decrypting the encrypted network flow before forwarding using the shared secret modifying the unencrypted network flow to remove the targeted data and encrypting a modified network flow using the shared secret and forwarding the modified network flow.

An example of an embodiment further comprises wherein extracting the shared secret from the first node comprises loading a shared library into an application on the first node wherein the application is accessing the encrypted protocol session and wherein the shared library allows access to an encryption protocol session through the application and identifying the shared secret in the encryption protocol session.

An example of an embodiment further comprises wherein extracting the shared secret from the first node comprises monitoring a network flow at a network layer identifying an initiation of a handshake of an encryption protocol session responsive to identifying the initiation opening a memory space of a process initiating the encrypted protocol session and identifying the shared secret in the encryption protocol session within the memory space of the process.

An example of an embodiment comprises that the shared secret is at least one of a master secret pre master secret session context. As used herein the phrase at least one of may mean any one or combination of the list. For example at least one of A B and C could mean A B or C or any combination thereof.

An example of an embodiment further comprises limiting a number of encryption methods used to encrypt a network flow between the first node and the second node.

One or more embodiments provide a method apparatus and or machine accessible storage medium for extracting a shared secret from a first node. The method includes loading a shared library into an application on the first node wherein the application is accessing the encrypted protocol session and wherein the shared library allows access to an encryption protocol session through the application and identifying the shared secret in the encryption protocol session.

One or more embodiments provide a method apparatus and or machine accessible storage medium for extracting a shared secret from a first node. The method includes monitoring a network flow at a network layer identifying an initiation of a handshake of an encryption protocol session responsive to identifying the initiation opening a memory space of a process initiating the encrypted protocol session and identifying the shared secret in the encryption protocol session within the memory space of the process.

An example of an embodiment further comprises extracting the shared secret from the memory space of the process.

One or more embodiments provide an apparatus. The apparatus comprising a security module configured to monitor the encrypted network flow between a first node and a second node the network flow initiated from the first node duplicate the encrypted network flow to form a copy of the encrypted network flow decrypt the copy of the encrypted network flow using a shared secret the shared secret associated with the first node and the second node and scan the network flow copy for targeted data.

An example of an embodiment further comprises an extraction module configured to extract the shared secret from the first node.

An example of an embodiment further comprises wherein the security module is further configured to delay the encrypted network flow and forward the encrypted network flow.

An example of an embodiment further comprises wherein the security module is further configured to responsive to identifying targeted data in the network flow copy terminate the encrypted network flow.

An example of an embodiment further comprises wherein the security module is further configured to responsive to identifying targeted data in the network flow copy decrypt the encrypted network flow before forwarding using the shared secret modify the unencrypted network flow to remove the targeted data encrypt a modified network flow using the shared secret and forward the modified network flow.

An example of an embodiment further comprises wherein the extraction module being configured to extract the shared secret from the first node comprises the extraction module being configured to load a shared library into an application on the first node wherein the application is accessing the encrypted protocol session and wherein the shared library allows access to an encryption protocol session through the application and identify the shared secret in the encryption protocol session.

An example of an embodiment further comprises wherein the extraction module being configured to extract the shared secret from the first node comprises the extraction module being configured to monitor a network flow at a network layer identify an initiation of a handshake of an encryption protocol session responsive to identifying the initiation open a memory space of a process initiating the encrypted protocol session and identify the shared secret in the encryption protocol session within the memory space of the process.

An example of an embodiment further comprises wherein the shared secret is at least one of a master secret pre master secret session context.

An example of an embodiment further comprises wherein the security module is further configured to limit a number of encryption methods used to encrypt a network flow between the first node and the second node.

One or more embodiments provide at least one machine accessible storage medium having instructions stored thereon for analyzing an encrypted network flow the instructions when executed on a machine cause the machine to monitor the encrypted network flow between a first node and a second node the network flow initiated from the first node duplicate the encrypted network flow to form a copy of the encrypted network flow decrypt the copy of the encrypted network flow using a shared secret the shared secret associated with the first node and the second node and scan the network flow copy for targeted data.

An example of an embodiment further comprises instructions when executed on the machine cause the machine to extract the shared secret from the first node.

An example of an embodiment further comprises instructions when executed on the machine cause the machine to delay the encrypted network flow and forward the encrypted network flow.

An example of an embodiment further comprises instructions when executed on the machine cause the machine to responsive to identifying targeted data in the network flow copy terminate the encrypted network flow.

An example of an embodiment further comprises instructions when executed on the machine cause the machine to responsive to identifying targeted data in the network flow copy decrypt the encrypted network flow before forwarding using the shared secret modify the unencrypted network flow to remove the targeted data and encrypt a modified network flow using the shared secret and forward the modified network flow.

An example of an embodiment further comprises wherein the instructions when executed on the machine cause the machine to extract the shared secret from the first node further comprises instructions when executed on the machine cause the machine to load a shared library into an application on the first node wherein the application is accessing the encrypted protocol session and wherein the shared library allows access to an encryption protocol session through the application and identify the shared secret in the encryption protocol session.

An example of an embodiment further comprises wherein the instructions when executed on the machine cause the machine to extract the shared secret from the first node further comprises instructions when executed on the machine cause the machine to monitor a network flow at a network layer identify an initiation of a handshake of an encryption protocol session responsive to identifying the initiation open a memory space of a process initiating the encrypted protocol session and identify the shared secret in the encryption protocol session within the memory space of the process.

An example of an embodiment further comprises wherein the shared secret is at least one of a master secret pre master secret session context.

An example of an embodiment further comprises instructions when executed on the machine cause the machine to limit a number of encryption methods used to encrypt a network flow between the first node and the second node.

